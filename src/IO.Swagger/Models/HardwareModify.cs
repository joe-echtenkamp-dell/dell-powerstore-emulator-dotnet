/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Hardware properties to modify.
    /// </summary>
    [DataContract]
    public partial class HardwareModify : IEquatable<HardwareModify>
    { 
        /// <summary>
        /// New state for the hardware component location marker LED. Setting it to true will put the LED in a blinking state until set to false. Note that the state returned in the hardware component may not actually change for up to 60 seconds. This operation is currently supported for Base_Enclosure, Expansion_Enclosure, Node, Drive, and Access_Module. Note that operations at the Base_Enclosure and Expansion_Enclosure apply to their children (Nodes and Drives for Base_Enclosure, and Access_Modules and Drives for Expansion_Enclosure). For components with a single physical LED (Base_Enclosure, NVME Expansion_Enclosure, Node, Drive, and Access_Module), setting is_marked&#x3D;true overrides the status_led_state property from on (or off) to Null, and setting is_marked&#x3D;false reverts status_led_state to showing the state of the physical LED. 
        /// </summary>
        /// <value>New state for the hardware component location marker LED. Setting it to true will put the LED in a blinking state until set to false. Note that the state returned in the hardware component may not actually change for up to 60 seconds. This operation is currently supported for Base_Enclosure, Expansion_Enclosure, Node, Drive, and Access_Module. Note that operations at the Base_Enclosure and Expansion_Enclosure apply to their children (Nodes and Drives for Base_Enclosure, and Access_Modules and Drives for Expansion_Enclosure). For components with a single physical LED (Base_Enclosure, NVME Expansion_Enclosure, Node, Drive, and Access_Module), setting is_marked&#x3D;true overrides the status_led_state property from on (or off) to Null, and setting is_marked&#x3D;false reverts status_led_state to showing the state of the physical LED. </value>
        [Required]
        
        [DataMember(Name="is_marked")]
        public bool? IsMarked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HardwareModify {\n");
            sb.Append("  IsMarked: ").Append(IsMarked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HardwareModify)obj);
        }

        /// <summary>
        /// Returns true if HardwareModify instances are equal
        /// </summary>
        /// <param name="other">Instance of HardwareModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HardwareModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsMarked == other.IsMarked ||
                    IsMarked != null &&
                    IsMarked.Equals(other.IsMarked)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsMarked != null)
                    hashCode = hashCode * 59 + IsMarked.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HardwareModify left, HardwareModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HardwareModify left, HardwareModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
