/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// End metro configuration operation arguments. Was added in version 4.0.0.0.
    /// </summary>
    [DataContract]
    public partial class VolumeGroupEndMetro : IEquatable<VolumeGroupEndMetro>
    { 
        /// <summary>
        /// Whether or not to delete the remote volume group during the removal. 
        /// </summary>
        /// <value>Whether or not to delete the remote volume group during the removal. </value>

        [DataMember(Name="delete_remote_volume_group")]
        public bool? DeleteRemoteVolumeGroup { get; set; }

        /// <summary>
        /// If the force option is specified, any errors returned while attempting to tear down the remote side of the metro session will be ignored and the remote side may be left in an indeterminate state. If any errors occur on the local side the operation can still fail. It is not recommended to use this option unless the remote side is known to be down. 
        /// </summary>
        /// <value>If the force option is specified, any errors returned while attempting to tear down the remote side of the metro session will be ignored and the remote side may be left in an indeterminate state. If any errors occur on the local side the operation can still fail. It is not recommended to use this option unless the remote side is known to be down. </value>

        [DataMember(Name="force")]
        public bool? Force { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeGroupEndMetro {\n");
            sb.Append("  DeleteRemoteVolumeGroup: ").Append(DeleteRemoteVolumeGroup).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VolumeGroupEndMetro)obj);
        }

        /// <summary>
        /// Returns true if VolumeGroupEndMetro instances are equal
        /// </summary>
        /// <param name="other">Instance of VolumeGroupEndMetro to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeGroupEndMetro other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DeleteRemoteVolumeGroup == other.DeleteRemoteVolumeGroup ||
                    DeleteRemoteVolumeGroup != null &&
                    DeleteRemoteVolumeGroup.Equals(other.DeleteRemoteVolumeGroup)
                ) && 
                (
                    Force == other.Force ||
                    Force != null &&
                    Force.Equals(other.Force)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DeleteRemoteVolumeGroup != null)
                    hashCode = hashCode * 59 + DeleteRemoteVolumeGroup.GetHashCode();
                    if (Force != null)
                    hashCode = hashCode * 59 + Force.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VolumeGroupEndMetro left, VolumeGroupEndMetro right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VolumeGroupEndMetro left, VolumeGroupEndMetro right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
