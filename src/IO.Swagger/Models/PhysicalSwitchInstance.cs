/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// This resource type has queriable association from physical_switch_connection
    /// </summary>
    [DataContract]
    public partial class PhysicalSwitchInstance : IEquatable<PhysicalSwitchInstance>
    { 
        /// <summary>
        /// Unique identifier of the physical switch setting.
        /// </summary>
        /// <value>Unique identifier of the physical switch setting.</value>

        [StringLength(32, MinimumLength=1)]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of physical switch.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of physical switch.  This property supports case-insensitive filtering.</value>

        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>

        [DataMember(Name="purpose")]
        public PhysicalSwitchPurposeEnum? Purpose { get; set; }

        /// <summary>
        /// Localized message string corresponding to purpose
        /// </summary>
        /// <value>Localized message string corresponding to purpose</value>

        [DataMember(Name="purpose_l10n")]
        public string PurposeL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type physical_switch_connection association.
        /// </summary>
        /// <value>This is the inverse of the resource type physical_switch_connection association.</value>

        [DataMember(Name="connections")]
        public List<PhysicalSwitchConnectionInstance> Connections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhysicalSwitchInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  PurposeL10n: ").Append(PurposeL10n).Append("\n");
            sb.Append("  Connections: ").Append(Connections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PhysicalSwitchInstance)obj);
        }

        /// <summary>
        /// Returns true if PhysicalSwitchInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of PhysicalSwitchInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhysicalSwitchInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Purpose == other.Purpose ||
                    Purpose != null &&
                    Purpose.Equals(other.Purpose)
                ) && 
                (
                    PurposeL10n == other.PurposeL10n ||
                    PurposeL10n != null &&
                    PurposeL10n.Equals(other.PurposeL10n)
                ) && 
                (
                    Connections == other.Connections ||
                    Connections != null &&
                    Connections.SequenceEqual(other.Connections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Purpose != null)
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                    if (PurposeL10n != null)
                    hashCode = hashCode * 59 + PurposeL10n.GetHashCode();
                    if (Connections != null)
                    hashCode = hashCode * 59 + Connections.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PhysicalSwitchInstance left, PhysicalSwitchInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PhysicalSwitchInstance left, PhysicalSwitchInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
