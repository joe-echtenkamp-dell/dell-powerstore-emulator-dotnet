/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FileUserQuotaModify : IEquatable<FileUserQuotaModify>
    { 
        /// <summary>
        /// Hard limit of the user quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space. Value is rounded up to match the physical block size of the filesystem.
        /// </summary>
        /// <value>Hard limit of the user quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space. Value is rounded up to match the physical block size of the filesystem.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="hard_limit")]
        public long? HardLimit { get; set; }

        /// <summary>
        /// Soft limit of the user quota, in bytes. No hard limit when set to 0. Value is rounded up to match the physical block size of the filesystem.
        /// </summary>
        /// <value>Soft limit of the user quota, in bytes. No hard limit when set to 0. Value is rounded up to match the physical block size of the filesystem.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="soft_limit")]
        public long? SoftLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileUserQuotaModify {\n");
            sb.Append("  HardLimit: ").Append(HardLimit).Append("\n");
            sb.Append("  SoftLimit: ").Append(SoftLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileUserQuotaModify)obj);
        }

        /// <summary>
        /// Returns true if FileUserQuotaModify instances are equal
        /// </summary>
        /// <param name="other">Instance of FileUserQuotaModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileUserQuotaModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HardLimit == other.HardLimit ||
                    HardLimit != null &&
                    HardLimit.Equals(other.HardLimit)
                ) && 
                (
                    SoftLimit == other.SoftLimit ||
                    SoftLimit != null &&
                    SoftLimit.Equals(other.SoftLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HardLimit != null)
                    hashCode = hashCode * 59 + HardLimit.GetHashCode();
                    if (SoftLimit != null)
                    hashCode = hashCode * 59 + SoftLimit.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileUserQuotaModify left, FileUserQuotaModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileUserQuotaModify left, FileUserQuotaModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
