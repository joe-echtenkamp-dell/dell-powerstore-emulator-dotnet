/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// User virtual machines CPU/Memory utilization metrics for appliance. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class VsphereAppsonMetricsByAppliance : MetricsGenerateResponse, IEquatable<VsphereAppsonMetricsByAppliance>
    { 
        /// <summary>
        /// Unique identifier representing a specific appliance.
        /// </summary>
        /// <value>Unique identifier representing a specific appliance.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// End of sample period.
        /// </summary>
        /// <value>End of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Average CPU usage in MHz.
        /// </summary>
        /// <value>Average CPU usage in MHz.</value>

        [DataMember(Name="avg_cpu_usage")]
        public float? AvgCpuUsage { get; set; }

        /// <summary>
        /// Average CPU usage as % of amount available on ESX hosts of appliance.
        /// </summary>
        /// <value>Average CPU usage as % of amount available on ESX hosts of appliance.</value>

        [DataMember(Name="avg_cpu_usage_pct")]
        public float? AvgCpuUsagePct { get; set; }

        /// <summary>
        /// Average memory consumption in KB.
        /// </summary>
        /// <value>Average memory consumption in KB.</value>

        [DataMember(Name="avg_mem_consumed")]
        public float? AvgMemConsumed { get; set; }

        /// <summary>
        /// Average memory consumption as % of amount available on ESX hosts of appliance.
        /// </summary>
        /// <value>Average memory consumption as % of amount available on ESX hosts of appliance.</value>

        [DataMember(Name="avg_mem_consumed_pct")]
        public float? AvgMemConsumedPct { get; set; }

        /// <summary>
        /// The number of times the current metric is repeated.
        /// </summary>
        /// <value>The number of times the current metric is repeated.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="repeat_count")]
        public long? RepeatCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VsphereAppsonMetricsByAppliance {\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AvgCpuUsage: ").Append(AvgCpuUsage).Append("\n");
            sb.Append("  AvgCpuUsagePct: ").Append(AvgCpuUsagePct).Append("\n");
            sb.Append("  AvgMemConsumed: ").Append(AvgMemConsumed).Append("\n");
            sb.Append("  AvgMemConsumedPct: ").Append(AvgMemConsumedPct).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VsphereAppsonMetricsByAppliance)obj);
        }

        /// <summary>
        /// Returns true if VsphereAppsonMetricsByAppliance instances are equal
        /// </summary>
        /// <param name="other">Instance of VsphereAppsonMetricsByAppliance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VsphereAppsonMetricsByAppliance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    AvgCpuUsage == other.AvgCpuUsage ||
                    AvgCpuUsage != null &&
                    AvgCpuUsage.Equals(other.AvgCpuUsage)
                ) && 
                (
                    AvgCpuUsagePct == other.AvgCpuUsagePct ||
                    AvgCpuUsagePct != null &&
                    AvgCpuUsagePct.Equals(other.AvgCpuUsagePct)
                ) && 
                (
                    AvgMemConsumed == other.AvgMemConsumed ||
                    AvgMemConsumed != null &&
                    AvgMemConsumed.Equals(other.AvgMemConsumed)
                ) && 
                (
                    AvgMemConsumedPct == other.AvgMemConsumedPct ||
                    AvgMemConsumedPct != null &&
                    AvgMemConsumedPct.Equals(other.AvgMemConsumedPct)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (AvgCpuUsage != null)
                    hashCode = hashCode * 59 + AvgCpuUsage.GetHashCode();
                    if (AvgCpuUsagePct != null)
                    hashCode = hashCode * 59 + AvgCpuUsagePct.GetHashCode();
                    if (AvgMemConsumed != null)
                    hashCode = hashCode * 59 + AvgMemConsumed.GetHashCode();
                    if (AvgMemConsumedPct != null)
                    hashCode = hashCode * 59 + AvgMemConsumedPct.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VsphereAppsonMetricsByAppliance left, VsphereAppsonMetricsByAppliance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VsphereAppsonMetricsByAppliance left, VsphereAppsonMetricsByAppliance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
