/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
        /// <summary>
        /// The state of the Filesystem Import, the supported values are:   * Idle - The data copy is not active.   * Pending - The data copy is being (re-)started; this is a transient state.   * Copying - The data copy from the source to the destination is ongoing.   * Done - The data copy from the source to the destination has been completed. new writes are synced back to the source during the incremental copy.   * Paused - The data copy from the source to the destination is paused per user request.   * Error - The data copy has encountered an issue and is suspended.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>The state of the Filesystem Import, the supported values are:   * Idle - The data copy is not active.   * Pending - The data copy is being (re-)started; this is a transient state.   * Copying - The data copy from the source to the destination is ongoing.   * Done - The data copy from the source to the destination has been completed. new writes are synced back to the source during the incremental copy.   * Paused - The data copy from the source to the destination is paused per user request.   * Error - The data copy has encountered an issue and is suspended.  Was added in version 3.0.0.0.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FileSystemImportState
        {
            
            /// <summary>
            /// Enum IdleEnum for Idle
            /// </summary>
            [EnumMember(Value = "Idle")]
            IdleEnum = 1,
            
            /// <summary>
            /// Enum PendingEnum for Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            PendingEnum = 2,
            
            /// <summary>
            /// Enum CopyingEnum for Copying
            /// </summary>
            [EnumMember(Value = "Copying")]
            CopyingEnum = 3,
            
            /// <summary>
            /// Enum DoneEnum for Done
            /// </summary>
            [EnumMember(Value = "Done")]
            DoneEnum = 4,
            
            /// <summary>
            /// Enum PausedEnum for Paused
            /// </summary>
            [EnumMember(Value = "Paused")]
            PausedEnum = 5,
            
            /// <summary>
            /// Enum ErrorEnum for Error
            /// </summary>
            [EnumMember(Value = "Error")]
            ErrorEnum = 6
        }
}
