/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Create the data collection. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class DatacollectionCreate : IEquatable<DatacollectionCreate>
    { 
        /// <summary>
        /// Gets or Sets Resource
        /// </summary>

        [DataMember(Name="resource")]
        public DatacollectionResourceInstance Resource { get; set; }

        /// <summary>
        /// The profiles to use for the data collection.
        /// </summary>
        /// <value>The profiles to use for the data collection.</value>

        [DataMember(Name="profiles")]
        public List<string> Profiles { get; set; }

        /// <summary>
        /// The profiles to use for the data collection.
        /// </summary>
        /// <value>The profiles to use for the data collection.</value>

        [DataMember(Name="datacollection_profile_ids")]
        public List<string> DatacollectionProfileIds { get; set; }

        /// <summary>
        /// Brief note describing the purpose of the data collection.
        /// </summary>
        /// <value>Brief note describing the purpose of the data collection.</value>

        [MaxLength(128)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Automatically upload this Data Collection to your support provider after it is complete. This option is only available if SupportAssist is enabled.
        /// </summary>
        /// <value>Automatically upload this Data Collection to your support provider after it is complete. This option is only available if SupportAssist is enabled.</value>

        [DataMember(Name="upload_to_support")]
        public bool? UploadToSupport { get; set; }

        /// <summary>
        /// The date and time from which to start collecting the logs.
        /// </summary>
        /// <value>The date and time from which to start collecting the logs.</value>

        [DataMember(Name="log_from_timestamp")]
        public DateTime? LogFromTimestamp { get; set; }

        /// <summary>
        /// The date and time up to which the logs should be collected.  The default is the time of the creation.
        /// </summary>
        /// <value>The date and time up to which the logs should be collected.  The default is the time of the creation.</value>

        [DataMember(Name="log_to_timestamp")]
        public DateTime? LogToTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatacollectionCreate {\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  DatacollectionProfileIds: ").Append(DatacollectionProfileIds).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  UploadToSupport: ").Append(UploadToSupport).Append("\n");
            sb.Append("  LogFromTimestamp: ").Append(LogFromTimestamp).Append("\n");
            sb.Append("  LogToTimestamp: ").Append(LogToTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DatacollectionCreate)obj);
        }

        /// <summary>
        /// Returns true if DatacollectionCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of DatacollectionCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatacollectionCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Resource == other.Resource ||
                    Resource != null &&
                    Resource.Equals(other.Resource)
                ) && 
                (
                    Profiles == other.Profiles ||
                    Profiles != null &&
                    Profiles.SequenceEqual(other.Profiles)
                ) && 
                (
                    DatacollectionProfileIds == other.DatacollectionProfileIds ||
                    DatacollectionProfileIds != null &&
                    DatacollectionProfileIds.SequenceEqual(other.DatacollectionProfileIds)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    UploadToSupport == other.UploadToSupport ||
                    UploadToSupport != null &&
                    UploadToSupport.Equals(other.UploadToSupport)
                ) && 
                (
                    LogFromTimestamp == other.LogFromTimestamp ||
                    LogFromTimestamp != null &&
                    LogFromTimestamp.Equals(other.LogFromTimestamp)
                ) && 
                (
                    LogToTimestamp == other.LogToTimestamp ||
                    LogToTimestamp != null &&
                    LogToTimestamp.Equals(other.LogToTimestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Resource != null)
                    hashCode = hashCode * 59 + Resource.GetHashCode();
                    if (Profiles != null)
                    hashCode = hashCode * 59 + Profiles.GetHashCode();
                    if (DatacollectionProfileIds != null)
                    hashCode = hashCode * 59 + DatacollectionProfileIds.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (UploadToSupport != null)
                    hashCode = hashCode * 59 + UploadToSupport.GetHashCode();
                    if (LogFromTimestamp != null)
                    hashCode = hashCode * 59 + LogFromTimestamp.GetHashCode();
                    if (LogToTimestamp != null)
                    hashCode = hashCode * 59 + LogToTimestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DatacollectionCreate left, DatacollectionCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatacollectionCreate left, DatacollectionCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
