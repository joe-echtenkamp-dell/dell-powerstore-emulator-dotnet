/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FileKerberosCreate : IEquatable<FileKerberosCreate>
    { 
        /// <summary>
        /// Unique identifier of the associated NAS Server instance that uses this Kerberos object. Only one Kerberos object per NAS Server is supported. name:{name} can be used instead of {id}. For example: &#39;nas_server_id&#39;:&#39;name:nas_server_name&#39;
        /// </summary>
        /// <value>Unique identifier of the associated NAS Server instance that uses this Kerberos object. Only one Kerberos object per NAS Server is supported. name:{name} can be used instead of {id}. For example: &#39;nas_server_id&#39;:&#39;name:nas_server_name&#39;</value>
        [Required]
        
        [DataMember(Name="nas_server_id")]
        public string NasServerId { get; set; }

        /// <summary>
        /// Realm name of the Kerberos Service.
        /// </summary>
        /// <value>Realm name of the Kerberos Service.</value>
        [Required]
        
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="realm")]
        public string Realm { get; set; }

        /// <summary>
        /// Fully Qualified domain names of the Kerberos Key Distribution Center (KDC) servers. IPv4 and IPv6 addresses are not supported.
        /// </summary>
        /// <value>Fully Qualified domain names of the Kerberos Key Distribution Center (KDC) servers. IPv4 and IPv6 addresses are not supported.</value>
        [Required]
        
        [DataMember(Name="kdc_addresses")]
        public List<string> KdcAddresses { get; set; }

        /// <summary>
        /// KDC servers TCP port.
        /// </summary>
        /// <value>KDC servers TCP port.</value>

        [Range(1, 65535)]
        [DataMember(Name="port_number")]
        public int? PortNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileKerberosCreate {\n");
            sb.Append("  NasServerId: ").Append(NasServerId).Append("\n");
            sb.Append("  Realm: ").Append(Realm).Append("\n");
            sb.Append("  KdcAddresses: ").Append(KdcAddresses).Append("\n");
            sb.Append("  PortNumber: ").Append(PortNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileKerberosCreate)obj);
        }

        /// <summary>
        /// Returns true if FileKerberosCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of FileKerberosCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileKerberosCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NasServerId == other.NasServerId ||
                    NasServerId != null &&
                    NasServerId.Equals(other.NasServerId)
                ) && 
                (
                    Realm == other.Realm ||
                    Realm != null &&
                    Realm.Equals(other.Realm)
                ) && 
                (
                    KdcAddresses == other.KdcAddresses ||
                    KdcAddresses != null &&
                    KdcAddresses.SequenceEqual(other.KdcAddresses)
                ) && 
                (
                    PortNumber == other.PortNumber ||
                    PortNumber != null &&
                    PortNumber.Equals(other.PortNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NasServerId != null)
                    hashCode = hashCode * 59 + NasServerId.GetHashCode();
                    if (Realm != null)
                    hashCode = hashCode * 59 + Realm.GetHashCode();
                    if (KdcAddresses != null)
                    hashCode = hashCode * 59 + KdcAddresses.GetHashCode();
                    if (PortNumber != null)
                    hashCode = hashCode * 59 + PortNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileKerberosCreate left, FileKerberosCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileKerberosCreate left, FileKerberosCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
