/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Evacuate all storage objects from an appliance specified by appliance_id. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class MigrationRecommendationCreateEvacuateApplianceAll : IEquatable<MigrationRecommendationCreateEvacuateApplianceAll>
    { 
        /// <summary>
        /// ID of appliance on which all selected storage objects are located
        /// </summary>
        /// <value>ID of appliance on which all selected storage objects are located</value>
        [Required]
        
        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Optional IDs of appliances to which used storage can be migrated for this request. If no target appliances are specified, the evacuated objects can be placed on any appliance in the cluster. 
        /// </summary>
        /// <value>Optional IDs of appliances to which used storage can be migrated for this request. If no target appliances are specified, the evacuated objects can be placed on any appliance in the cluster. </value>

        [DataMember(Name="target_appliance_ids")]
        public List<string> TargetApplianceIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MigrationRecommendationCreateEvacuateApplianceAll {\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  TargetApplianceIds: ").Append(TargetApplianceIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MigrationRecommendationCreateEvacuateApplianceAll)obj);
        }

        /// <summary>
        /// Returns true if MigrationRecommendationCreateEvacuateApplianceAll instances are equal
        /// </summary>
        /// <param name="other">Instance of MigrationRecommendationCreateEvacuateApplianceAll to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MigrationRecommendationCreateEvacuateApplianceAll other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    TargetApplianceIds == other.TargetApplianceIds ||
                    TargetApplianceIds != null &&
                    TargetApplianceIds.SequenceEqual(other.TargetApplianceIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (TargetApplianceIds != null)
                    hashCode = hashCode * 59 + TargetApplianceIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MigrationRecommendationCreateEvacuateApplianceAll left, MigrationRecommendationCreateEvacuateApplianceAll right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MigrationRecommendationCreateEvacuateApplianceAll left, MigrationRecommendationCreateEvacuateApplianceAll right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
