/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Modifiable parameters of LDAP domain.
    /// </summary>
    [DataContract]
    public partial class LdapDomainModify : IEquatable<LdapDomainModify>
    { 
        /// <summary>
        /// List of IP addresses of the LDAP servers for the domain. IP addesses are in IPv4 or IPv6 format.
        /// </summary>
        /// <value>List of IP addresses of the LDAP servers for the domain. IP addesses are in IPv4 or IPv6 format.</value>

        [DataMember(Name="ldap_servers")]
        public List<string> LdapServers { get; set; }

        /// <summary>
        /// Port number used to connect to the LDAP Server. Default values are LDAP(389), LDAPs(636), GlobalCatalog LDAP(3268), Global Catalog LDAPs(3269).
        /// </summary>
        /// <value>Port number used to connect to the LDAP Server. Default values are LDAP(389), LDAPs(636), GlobalCatalog LDAP(3268), Global Catalog LDAPs(3269).</value>

        [Range(0, 65535)]
        [DataMember(Name="port")]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or Sets LdapServerType
        /// </summary>

        [DataMember(Name="ldap_server_type")]
        public LDAPServerTypeEnum? LdapServerType { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>

        [DataMember(Name="protocol")]
        public LDAPProtocolEnum? Protocol { get; set; }

        /// <summary>
        /// Distinguished Name (DN) of the user to be used when binding; that is, authenticating and setting up the connection to the LDAP Server.
        /// </summary>
        /// <value>Distinguished Name (DN) of the user to be used when binding; that is, authenticating and setting up the connection to the LDAP Server.</value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="bind_user")]
        public string BindUser { get; set; }

        /// <summary>
        /// Password to use when binding a new LDAP session.
        /// </summary>
        /// <value>Password to use when binding a new LDAP session.</value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="bind_password")]
        public string BindPassword { get; set; }

        /// <summary>
        /// Timeout for establishing a connection to an LDAP server in milliseconds. If the system does not receive a reply from the LDAP server after the specified timeout, it stops sending requests. Default value is 30000 (30 seconds).
        /// </summary>
        /// <value>Timeout for establishing a connection to an LDAP server in milliseconds. If the system does not receive a reply from the LDAP server after the specified timeout, it stops sending requests. Default value is 30000 (30 seconds).</value>

        [Range(0, 170000)]
        [DataMember(Name="ldap_timeout")]
        public int? LdapTimeout { get; set; }

        /// <summary>
        /// Whether or not the catalog is global. Default value is false.
        /// </summary>
        /// <value>Whether or not the catalog is global. Default value is false.</value>

        [DataMember(Name="is_global_catalog")]
        public bool? IsGlobalCatalog { get; set; }

        /// <summary>
        /// Name of the LDAP attribute whose value indicates the unique identifier of the user. Default value is sAMAccountName.
        /// </summary>
        /// <value>Name of the LDAP attribute whose value indicates the unique identifier of the user. Default value is sAMAccountName.</value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="user_id_attribute")]
        public string UserIdAttribute { get; set; }

        /// <summary>
        /// LDAP object class for users. Default value is user.
        /// </summary>
        /// <value>LDAP object class for users. Default value is user.</value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="user_object_class")]
        public string UserObjectClass { get; set; }

        /// <summary>
        /// Path used to search for users on the directory server. Search path is empty, if global catalog is enabled.
        /// </summary>
        /// <value>Path used to search for users on the directory server. Search path is empty, if global catalog is enabled.</value>

        [StringLength(1023, MinimumLength=0)]
        [DataMember(Name="user_search_path")]
        public string UserSearchPath { get; set; }

        /// <summary>
        /// Name of the LDAP attribute whose value indicates the group name. Default value is cn.
        /// </summary>
        /// <value>Name of the LDAP attribute whose value indicates the group name. Default value is cn.</value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="group_name_attribute")]
        public string GroupNameAttribute { get; set; }

        /// <summary>
        /// Name of the LDAP attribute whose value contains the names of group members within a group. Default value is member.
        /// </summary>
        /// <value>Name of the LDAP attribute whose value contains the names of group members within a group. Default value is member.</value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="group_member_attribute")]
        public string GroupMemberAttribute { get; set; }

        /// <summary>
        /// LDAP object class for groups. Default value is group. In Active Directory, groups and users are stored in the same directory path, and are in a class called group. Default value is group.
        /// </summary>
        /// <value>LDAP object class for groups. Default value is group. In Active Directory, groups and users are stored in the same directory path, and are in a class called group. Default value is group.</value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="group_object_class")]
        public string GroupObjectClass { get; set; }

        /// <summary>
        /// Path used to search for groups on the directory server. Search path is empty, if global catalog is enabled.
        /// </summary>
        /// <value>Path used to search for groups on the directory server. Search path is empty, if global catalog is enabled.</value>

        [StringLength(1023, MinimumLength=0)]
        [DataMember(Name="group_search_path")]
        public string GroupSearchPath { get; set; }

        /// <summary>
        /// Nested search level for performing group search. Default value is 0 (no nested search level limitation)
        /// </summary>
        /// <value>Nested search level for performing group search. Default value is 0 (no nested search level limitation)</value>

        [Range(0, 65535)]
        [DataMember(Name="group_search_level")]
        public int? GroupSearchLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LdapDomainModify {\n");
            sb.Append("  LdapServers: ").Append(LdapServers).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  LdapServerType: ").Append(LdapServerType).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  BindUser: ").Append(BindUser).Append("\n");
            sb.Append("  BindPassword: ").Append(BindPassword).Append("\n");
            sb.Append("  LdapTimeout: ").Append(LdapTimeout).Append("\n");
            sb.Append("  IsGlobalCatalog: ").Append(IsGlobalCatalog).Append("\n");
            sb.Append("  UserIdAttribute: ").Append(UserIdAttribute).Append("\n");
            sb.Append("  UserObjectClass: ").Append(UserObjectClass).Append("\n");
            sb.Append("  UserSearchPath: ").Append(UserSearchPath).Append("\n");
            sb.Append("  GroupNameAttribute: ").Append(GroupNameAttribute).Append("\n");
            sb.Append("  GroupMemberAttribute: ").Append(GroupMemberAttribute).Append("\n");
            sb.Append("  GroupObjectClass: ").Append(GroupObjectClass).Append("\n");
            sb.Append("  GroupSearchPath: ").Append(GroupSearchPath).Append("\n");
            sb.Append("  GroupSearchLevel: ").Append(GroupSearchLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LdapDomainModify)obj);
        }

        /// <summary>
        /// Returns true if LdapDomainModify instances are equal
        /// </summary>
        /// <param name="other">Instance of LdapDomainModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LdapDomainModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LdapServers == other.LdapServers ||
                    LdapServers != null &&
                    LdapServers.SequenceEqual(other.LdapServers)
                ) && 
                (
                    Port == other.Port ||
                    Port != null &&
                    Port.Equals(other.Port)
                ) && 
                (
                    LdapServerType == other.LdapServerType ||
                    LdapServerType != null &&
                    LdapServerType.Equals(other.LdapServerType)
                ) && 
                (
                    Protocol == other.Protocol ||
                    Protocol != null &&
                    Protocol.Equals(other.Protocol)
                ) && 
                (
                    BindUser == other.BindUser ||
                    BindUser != null &&
                    BindUser.Equals(other.BindUser)
                ) && 
                (
                    BindPassword == other.BindPassword ||
                    BindPassword != null &&
                    BindPassword.Equals(other.BindPassword)
                ) && 
                (
                    LdapTimeout == other.LdapTimeout ||
                    LdapTimeout != null &&
                    LdapTimeout.Equals(other.LdapTimeout)
                ) && 
                (
                    IsGlobalCatalog == other.IsGlobalCatalog ||
                    IsGlobalCatalog != null &&
                    IsGlobalCatalog.Equals(other.IsGlobalCatalog)
                ) && 
                (
                    UserIdAttribute == other.UserIdAttribute ||
                    UserIdAttribute != null &&
                    UserIdAttribute.Equals(other.UserIdAttribute)
                ) && 
                (
                    UserObjectClass == other.UserObjectClass ||
                    UserObjectClass != null &&
                    UserObjectClass.Equals(other.UserObjectClass)
                ) && 
                (
                    UserSearchPath == other.UserSearchPath ||
                    UserSearchPath != null &&
                    UserSearchPath.Equals(other.UserSearchPath)
                ) && 
                (
                    GroupNameAttribute == other.GroupNameAttribute ||
                    GroupNameAttribute != null &&
                    GroupNameAttribute.Equals(other.GroupNameAttribute)
                ) && 
                (
                    GroupMemberAttribute == other.GroupMemberAttribute ||
                    GroupMemberAttribute != null &&
                    GroupMemberAttribute.Equals(other.GroupMemberAttribute)
                ) && 
                (
                    GroupObjectClass == other.GroupObjectClass ||
                    GroupObjectClass != null &&
                    GroupObjectClass.Equals(other.GroupObjectClass)
                ) && 
                (
                    GroupSearchPath == other.GroupSearchPath ||
                    GroupSearchPath != null &&
                    GroupSearchPath.Equals(other.GroupSearchPath)
                ) && 
                (
                    GroupSearchLevel == other.GroupSearchLevel ||
                    GroupSearchLevel != null &&
                    GroupSearchLevel.Equals(other.GroupSearchLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LdapServers != null)
                    hashCode = hashCode * 59 + LdapServers.GetHashCode();
                    if (Port != null)
                    hashCode = hashCode * 59 + Port.GetHashCode();
                    if (LdapServerType != null)
                    hashCode = hashCode * 59 + LdapServerType.GetHashCode();
                    if (Protocol != null)
                    hashCode = hashCode * 59 + Protocol.GetHashCode();
                    if (BindUser != null)
                    hashCode = hashCode * 59 + BindUser.GetHashCode();
                    if (BindPassword != null)
                    hashCode = hashCode * 59 + BindPassword.GetHashCode();
                    if (LdapTimeout != null)
                    hashCode = hashCode * 59 + LdapTimeout.GetHashCode();
                    if (IsGlobalCatalog != null)
                    hashCode = hashCode * 59 + IsGlobalCatalog.GetHashCode();
                    if (UserIdAttribute != null)
                    hashCode = hashCode * 59 + UserIdAttribute.GetHashCode();
                    if (UserObjectClass != null)
                    hashCode = hashCode * 59 + UserObjectClass.GetHashCode();
                    if (UserSearchPath != null)
                    hashCode = hashCode * 59 + UserSearchPath.GetHashCode();
                    if (GroupNameAttribute != null)
                    hashCode = hashCode * 59 + GroupNameAttribute.GetHashCode();
                    if (GroupMemberAttribute != null)
                    hashCode = hashCode * 59 + GroupMemberAttribute.GetHashCode();
                    if (GroupObjectClass != null)
                    hashCode = hashCode * 59 + GroupObjectClass.GetHashCode();
                    if (GroupSearchPath != null)
                    hashCode = hashCode * 59 + GroupSearchPath.GetHashCode();
                    if (GroupSearchLevel != null)
                    hashCode = hashCode * 59 + GroupSearchLevel.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LdapDomainModify left, LdapDomainModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LdapDomainModify left, LdapDomainModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
