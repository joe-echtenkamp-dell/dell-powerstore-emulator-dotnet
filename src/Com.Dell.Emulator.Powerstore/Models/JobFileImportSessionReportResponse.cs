/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// File Import Session Report response object. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class JobFileImportSessionReportResponse : BaseResponse, IEquatable<JobFileImportSessionReportResponse>
    { 
        /// <summary>
        /// The unique identifier of the file import session.
        /// </summary>
        /// <value>The unique identifier of the file import session.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// User-specified name of the file import session.
        /// </summary>
        /// <value>User-specified name of the file import session.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Unique identifer of the remote system that contains the source NAS Server to be imported
        /// </summary>
        /// <value>Unique identifer of the remote system that contains the source NAS Server to be imported</value>

        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Name of the NAS server at source which is being imported by the file import session.
        /// </summary>
        /// <value>Name of the NAS server at source which is being imported by the file import session.</value>

        [DataMember(Name="source_nas_server_name")]
        public string SourceNasServerName { get; set; }

        /// <summary>
        /// Name of the NAS server at target which is being imported by the file import session.
        /// </summary>
        /// <value>Name of the NAS server at target which is being imported by the file import session.</value>

        [DataMember(Name="target_nas_server_name")]
        public string TargetNasServerName { get; set; }

        /// <summary>
        /// Unique identifier of the destination NAS server to which the destination filesystem will be added. Was deprecated in version 3.5.0.0.
        /// </summary>
        /// <value>Unique identifier of the destination NAS server to which the destination filesystem will be added. Was deprecated in version 3.5.0.0.</value>

        [DataMember(Name="destination_resource_id")]
        public string DestinationResourceId { get; set; }

        /// <summary>
        /// Unique identifier of the destination NAS server to which the destination filesystem will be added. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Unique identifier of the destination NAS server to which the destination filesystem will be added. Was added in version 3.5.0.0.</value>

        [DataMember(Name="destination_nas_server_id")]
        public string DestinationNasServerId { get; set; }

        /// <summary>
        /// The Date and time at when the file import session is created. The date is specified in RFC3339 format with the time expressed in UTC format.
        /// </summary>
        /// <value>The Date and time at when the file import session is created. The date is specified in RFC3339 format with the time expressed in UTC format.</value>

        [DataMember(Name="created_timestamp")]
        public DateTime? CreatedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets ProtocolType
        /// </summary>

        [DataMember(Name="protocol_type")]
        public FileImportSessionReportProtocolEnum ProtocolType { get; set; }

        /// <summary>
        /// Gets or Sets SmbServer
        /// </summary>

        [DataMember(Name="smb_server")]
        public FileImportSessionCutoverSmbProperties SmbServer { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public FileImportSessionStateEnum State { get; set; }

        /// <summary>
        /// Gets or Sets CurrentOperation
        /// </summary>

        [DataMember(Name="current_operation")]
        public FileImportSessionCurrentOperationEnum CurrentOperation { get; set; }

        /// <summary>
        /// The progress percentage of the current operation. When the import is in the &#39;Initial_Copy_In_Progress&#39; or &#39;Incremental_Copy_In_Progress&#39; , this value indicates the completion percent for the import. Before the import is in the copy states, this value is 0. After the cutover or if there is a failure, this value is null.
        /// </summary>
        /// <value>The progress percentage of the current operation. When the import is in the &#39;Initial_Copy_In_Progress&#39; or &#39;Incremental_Copy_In_Progress&#39; , this value indicates the completion percent for the import. Before the import is in the copy states, this value is 0. After the cutover or if there is a failure, this value is null.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="current_operation_progress_percentage")]
        public int? CurrentOperationProgressPercentage { get; set; }

        /// <summary>
        /// Estimated completion time in UTC format.When the import is in the &#39;Initial_Copy_In_Progress&#39; or &#39;Incremental_Copy_In_Progress&#39; state, this value indicates the estimated .time at which the data copy will complete. Before the import is in the copy state, the value is null.
        /// </summary>
        /// <value>Estimated completion time in UTC format.When the import is in the &#39;Initial_Copy_In_Progress&#39; or &#39;Incremental_Copy_In_Progress&#39; state, this value indicates the estimated .time at which the data copy will complete. Before the import is in the copy state, the value is null.</value>

        [DataMember(Name="estimated_completion_timestamp")]
        public DateTime? EstimatedCompletionTimestamp { get; set; }

        /// <summary>
        /// List of filesystems included in the import.
        /// </summary>
        /// <value>List of filesystems included in the import.</value>

        [DataMember(Name="file_systems")]
        public List<FileImportSessionReportFileSystem> FileSystems { get; set; }

        /// <summary>
        /// The list of parameters for target production network interfaces.
        /// </summary>
        /// <value>The list of parameters for target production network interfaces.</value>

        [DataMember(Name="production_netInterfaces")]
        public List<FileImportSessionReportProductionNetInterface> ProductionNetInterfaces { get; set; }

        /// <summary>
        /// Gets or Sets SourceImportNetInterface
        /// </summary>

        [DataMember(Name="source_import_netInterface")]
        public FileImportSessionReportSourceNetInterface SourceImportNetInterface { get; set; }

        /// <summary>
        /// Gets or Sets TargetImportNetInterface
        /// </summary>

        [DataMember(Name="target_import_netInterface")]
        public FileImportSessionReportTargetNetInterface TargetImportNetInterface { get; set; }

        /// <summary>
        /// The user name for authentication to SMB Server on the source NAS Server with admin access.
        /// </summary>
        /// <value>The user name for authentication to SMB Server on the source NAS Server with admin access.</value>

        [DataMember(Name="source_smb_admin_username")]
        public string SourceSmbAdminUsername { get; set; }

        /// <summary>
        /// The user name for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.
        /// </summary>
        /// <value>The user name for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.</value>

        [DataMember(Name="source_dhsm_username")]
        public string SourceDhsmUsername { get; set; }

        /// <summary>
        /// The list of Import Session messages.
        /// </summary>
        /// <value>The list of Import Session messages.</value>

        [DataMember(Name="warnings")]
        public List<FileExtendedLocalizedMessage> Warnings { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>

        [DataMember(Name="statistics")]
        public FileImportSessionReportStatistics Statistics { get; set; }

        /// <summary>
        /// Gets or Sets StateDuration
        /// </summary>

        [DataMember(Name="state_duration")]
        public FileImportSessionReportCurrentOpeartionDuration StateDuration { get; set; }

        /// <summary>
        /// The list of transitions between File Import Session states.
        /// </summary>
        /// <value>The list of transitions between File Import Session states.</value>

        [DataMember(Name="change_log")]
        public List<FileImportSessionReportStageChangeLog> ChangeLog { get; set; }

        /// <summary>
        /// When the current operation is not progressing normally, these messages will provide additional information on how to remedy the issue.  Was added in version 3.2.0.0.
        /// </summary>
        /// <value>When the current operation is not progressing normally, these messages will provide additional information on how to remedy the issue.  Was added in version 3.2.0.0.</value>

        [DataMember(Name="latest_failure_messages")]
        public List<FileExtendedLocalizedMessage> LatestFailureMessages { get; set; }

        /// <summary>
        /// Localized message string corresponding to protocol_type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to protocol_type Was added in version 3.0.0.0.</value>

        [DataMember(Name="protocol_type_l10n")]
        public string ProtocolTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to state Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to state Was added in version 3.0.0.0.</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to current_operation Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to current_operation Was added in version 3.0.0.0.</value>

        [DataMember(Name="current_operation_l10n")]
        public string CurrentOperationL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobFileImportSessionReportResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  SourceNasServerName: ").Append(SourceNasServerName).Append("\n");
            sb.Append("  TargetNasServerName: ").Append(TargetNasServerName).Append("\n");
            sb.Append("  DestinationResourceId: ").Append(DestinationResourceId).Append("\n");
            sb.Append("  DestinationNasServerId: ").Append(DestinationNasServerId).Append("\n");
            sb.Append("  CreatedTimestamp: ").Append(CreatedTimestamp).Append("\n");
            sb.Append("  ProtocolType: ").Append(ProtocolType).Append("\n");
            sb.Append("  SmbServer: ").Append(SmbServer).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CurrentOperation: ").Append(CurrentOperation).Append("\n");
            sb.Append("  CurrentOperationProgressPercentage: ").Append(CurrentOperationProgressPercentage).Append("\n");
            sb.Append("  EstimatedCompletionTimestamp: ").Append(EstimatedCompletionTimestamp).Append("\n");
            sb.Append("  FileSystems: ").Append(FileSystems).Append("\n");
            sb.Append("  ProductionNetInterfaces: ").Append(ProductionNetInterfaces).Append("\n");
            sb.Append("  SourceImportNetInterface: ").Append(SourceImportNetInterface).Append("\n");
            sb.Append("  TargetImportNetInterface: ").Append(TargetImportNetInterface).Append("\n");
            sb.Append("  SourceSmbAdminUsername: ").Append(SourceSmbAdminUsername).Append("\n");
            sb.Append("  SourceDhsmUsername: ").Append(SourceDhsmUsername).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("  StateDuration: ").Append(StateDuration).Append("\n");
            sb.Append("  ChangeLog: ").Append(ChangeLog).Append("\n");
            sb.Append("  LatestFailureMessages: ").Append(LatestFailureMessages).Append("\n");
            sb.Append("  ProtocolTypeL10n: ").Append(ProtocolTypeL10n).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  CurrentOperationL10n: ").Append(CurrentOperationL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JobFileImportSessionReportResponse)obj);
        }

        /// <summary>
        /// Returns true if JobFileImportSessionReportResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of JobFileImportSessionReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobFileImportSessionReportResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    SourceNasServerName == other.SourceNasServerName ||
                    SourceNasServerName != null &&
                    SourceNasServerName.Equals(other.SourceNasServerName)
                ) && 
                (
                    TargetNasServerName == other.TargetNasServerName ||
                    TargetNasServerName != null &&
                    TargetNasServerName.Equals(other.TargetNasServerName)
                ) && 
                (
                    DestinationResourceId == other.DestinationResourceId ||
                    DestinationResourceId != null &&
                    DestinationResourceId.Equals(other.DestinationResourceId)
                ) && 
                (
                    DestinationNasServerId == other.DestinationNasServerId ||
                    DestinationNasServerId != null &&
                    DestinationNasServerId.Equals(other.DestinationNasServerId)
                ) && 
                (
                    CreatedTimestamp == other.CreatedTimestamp ||
                    CreatedTimestamp != null &&
                    CreatedTimestamp.Equals(other.CreatedTimestamp)
                ) && 
                (
                    ProtocolType == other.ProtocolType ||
                    ProtocolType != null &&
                    ProtocolType.Equals(other.ProtocolType)
                ) && 
                (
                    SmbServer == other.SmbServer ||
                    SmbServer != null &&
                    SmbServer.Equals(other.SmbServer)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    CurrentOperation == other.CurrentOperation ||
                    CurrentOperation != null &&
                    CurrentOperation.Equals(other.CurrentOperation)
                ) && 
                (
                    CurrentOperationProgressPercentage == other.CurrentOperationProgressPercentage ||
                    CurrentOperationProgressPercentage != null &&
                    CurrentOperationProgressPercentage.Equals(other.CurrentOperationProgressPercentage)
                ) && 
                (
                    EstimatedCompletionTimestamp == other.EstimatedCompletionTimestamp ||
                    EstimatedCompletionTimestamp != null &&
                    EstimatedCompletionTimestamp.Equals(other.EstimatedCompletionTimestamp)
                ) && 
                (
                    FileSystems == other.FileSystems ||
                    FileSystems != null &&
                    FileSystems.SequenceEqual(other.FileSystems)
                ) && 
                (
                    ProductionNetInterfaces == other.ProductionNetInterfaces ||
                    ProductionNetInterfaces != null &&
                    ProductionNetInterfaces.SequenceEqual(other.ProductionNetInterfaces)
                ) && 
                (
                    SourceImportNetInterface == other.SourceImportNetInterface ||
                    SourceImportNetInterface != null &&
                    SourceImportNetInterface.Equals(other.SourceImportNetInterface)
                ) && 
                (
                    TargetImportNetInterface == other.TargetImportNetInterface ||
                    TargetImportNetInterface != null &&
                    TargetImportNetInterface.Equals(other.TargetImportNetInterface)
                ) && 
                (
                    SourceSmbAdminUsername == other.SourceSmbAdminUsername ||
                    SourceSmbAdminUsername != null &&
                    SourceSmbAdminUsername.Equals(other.SourceSmbAdminUsername)
                ) && 
                (
                    SourceDhsmUsername == other.SourceDhsmUsername ||
                    SourceDhsmUsername != null &&
                    SourceDhsmUsername.Equals(other.SourceDhsmUsername)
                ) && 
                (
                    Warnings == other.Warnings ||
                    Warnings != null &&
                    Warnings.SequenceEqual(other.Warnings)
                ) && 
                (
                    Statistics == other.Statistics ||
                    Statistics != null &&
                    Statistics.Equals(other.Statistics)
                ) && 
                (
                    StateDuration == other.StateDuration ||
                    StateDuration != null &&
                    StateDuration.Equals(other.StateDuration)
                ) && 
                (
                    ChangeLog == other.ChangeLog ||
                    ChangeLog != null &&
                    ChangeLog.SequenceEqual(other.ChangeLog)
                ) && 
                (
                    LatestFailureMessages == other.LatestFailureMessages ||
                    LatestFailureMessages != null &&
                    LatestFailureMessages.SequenceEqual(other.LatestFailureMessages)
                ) && 
                (
                    ProtocolTypeL10n == other.ProtocolTypeL10n ||
                    ProtocolTypeL10n != null &&
                    ProtocolTypeL10n.Equals(other.ProtocolTypeL10n)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    CurrentOperationL10n == other.CurrentOperationL10n ||
                    CurrentOperationL10n != null &&
                    CurrentOperationL10n.Equals(other.CurrentOperationL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (SourceNasServerName != null)
                    hashCode = hashCode * 59 + SourceNasServerName.GetHashCode();
                    if (TargetNasServerName != null)
                    hashCode = hashCode * 59 + TargetNasServerName.GetHashCode();
                    if (DestinationResourceId != null)
                    hashCode = hashCode * 59 + DestinationResourceId.GetHashCode();
                    if (DestinationNasServerId != null)
                    hashCode = hashCode * 59 + DestinationNasServerId.GetHashCode();
                    if (CreatedTimestamp != null)
                    hashCode = hashCode * 59 + CreatedTimestamp.GetHashCode();
                    if (ProtocolType != null)
                    hashCode = hashCode * 59 + ProtocolType.GetHashCode();
                    if (SmbServer != null)
                    hashCode = hashCode * 59 + SmbServer.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (CurrentOperation != null)
                    hashCode = hashCode * 59 + CurrentOperation.GetHashCode();
                    if (CurrentOperationProgressPercentage != null)
                    hashCode = hashCode * 59 + CurrentOperationProgressPercentage.GetHashCode();
                    if (EstimatedCompletionTimestamp != null)
                    hashCode = hashCode * 59 + EstimatedCompletionTimestamp.GetHashCode();
                    if (FileSystems != null)
                    hashCode = hashCode * 59 + FileSystems.GetHashCode();
                    if (ProductionNetInterfaces != null)
                    hashCode = hashCode * 59 + ProductionNetInterfaces.GetHashCode();
                    if (SourceImportNetInterface != null)
                    hashCode = hashCode * 59 + SourceImportNetInterface.GetHashCode();
                    if (TargetImportNetInterface != null)
                    hashCode = hashCode * 59 + TargetImportNetInterface.GetHashCode();
                    if (SourceSmbAdminUsername != null)
                    hashCode = hashCode * 59 + SourceSmbAdminUsername.GetHashCode();
                    if (SourceDhsmUsername != null)
                    hashCode = hashCode * 59 + SourceDhsmUsername.GetHashCode();
                    if (Warnings != null)
                    hashCode = hashCode * 59 + Warnings.GetHashCode();
                    if (Statistics != null)
                    hashCode = hashCode * 59 + Statistics.GetHashCode();
                    if (StateDuration != null)
                    hashCode = hashCode * 59 + StateDuration.GetHashCode();
                    if (ChangeLog != null)
                    hashCode = hashCode * 59 + ChangeLog.GetHashCode();
                    if (LatestFailureMessages != null)
                    hashCode = hashCode * 59 + LatestFailureMessages.GetHashCode();
                    if (ProtocolTypeL10n != null)
                    hashCode = hashCode * 59 + ProtocolTypeL10n.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (CurrentOperationL10n != null)
                    hashCode = hashCode * 59 + CurrentOperationL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JobFileImportSessionReportResponse left, JobFileImportSessionReportResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JobFileImportSessionReportResponse left, JobFileImportSessionReportResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
