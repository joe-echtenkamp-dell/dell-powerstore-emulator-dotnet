/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
        /// <summary>
        /// Data transfer state of the replication session: * Asynchronous               - Data is being transferred asynchronously between source and destination. This is incremental sync cycle. * Asynchronous_Initial_Sync  - Data is being transferred asynchronously between source and destination. This is initial sync cycle. * System_Asynchronous_Initial_Sync - Metro type replication session is transferring data asynchronously. This is initial sync cycle. * System_Asynchronous              - Metro type replication session is transferring data asynchronously. This is incremental sync cycle before mirror is enabled. * Switch_To_Sync_Diff_Copy   - Metro type replication session is transferring data asynchronously. This is the last copy after mirror is enabled to switch to synchronous data transfer. * Synchronous                - Data is being transferred synchronously between source and destination. * Active_Active              - Session is active-active mode. Both local and remote storage resource are available for Production IO. IOs are synchronously replicated in both directions. * Faulted                    - Session is in faulted state. * Paused                     - Data transfer is paused.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Data transfer state of the replication session: * Asynchronous               - Data is being transferred asynchronously between source and destination. This is incremental sync cycle. * Asynchronous_Initial_Sync  - Data is being transferred asynchronously between source and destination. This is initial sync cycle. * System_Asynchronous_Initial_Sync - Metro type replication session is transferring data asynchronously. This is initial sync cycle. * System_Asynchronous              - Metro type replication session is transferring data asynchronously. This is incremental sync cycle before mirror is enabled. * Switch_To_Sync_Diff_Copy   - Metro type replication session is transferring data asynchronously. This is the last copy after mirror is enabled to switch to synchronous data transfer. * Synchronous                - Data is being transferred synchronously between source and destination. * Active_Active              - Session is active-active mode. Both local and remote storage resource are available for Production IO. IOs are synchronously replicated in both directions. * Faulted                    - Session is in faulted state. * Paused                     - Data transfer is paused.  Was added in version 3.0.0.0.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DataTransferStateEnum
        {
            
            /// <summary>
            /// Enum AsynchronousEnum for Asynchronous
            /// </summary>
            [EnumMember(Value = "Asynchronous")]
            AsynchronousEnum = 1,
            
            /// <summary>
            /// Enum AsynchronousInitialSyncEnum for Asynchronous_Initial_Sync
            /// </summary>
            [EnumMember(Value = "Asynchronous_Initial_Sync")]
            AsynchronousInitialSyncEnum = 2,
            
            /// <summary>
            /// Enum SystemAsynchronousInitialSyncEnum for System_Asynchronous_Initial_Sync
            /// </summary>
            [EnumMember(Value = "System_Asynchronous_Initial_Sync")]
            SystemAsynchronousInitialSyncEnum = 3,
            
            /// <summary>
            /// Enum SystemAsynchronousEnum for System_Asynchronous
            /// </summary>
            [EnumMember(Value = "System_Asynchronous")]
            SystemAsynchronousEnum = 4,
            
            /// <summary>
            /// Enum SwitchToSyncDiffCopyEnum for Switch_To_Sync_Diff_Copy
            /// </summary>
            [EnumMember(Value = "Switch_To_Sync_Diff_Copy")]
            SwitchToSyncDiffCopyEnum = 5,
            
            /// <summary>
            /// Enum SynchronousEnum for Synchronous
            /// </summary>
            [EnumMember(Value = "Synchronous")]
            SynchronousEnum = 6,
            
            /// <summary>
            /// Enum ActiveActiveEnum for Active_Active
            /// </summary>
            [EnumMember(Value = "Active_Active")]
            ActiveActiveEnum = 7,
            
            /// <summary>
            /// Enum FaultedEnum for Faulted
            /// </summary>
            [EnumMember(Value = "Faulted")]
            FaultedEnum = 8,
            
            /// <summary>
            /// Enum PausedEnum for Paused
            /// </summary>
            [EnumMember(Value = "Paused")]
            PausedEnum = 9
        }
}
