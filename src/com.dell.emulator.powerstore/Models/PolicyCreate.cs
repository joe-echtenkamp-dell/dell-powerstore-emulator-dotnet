/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Policy create request.
    /// </summary>
    [DataContract]
    public partial class PolicyCreate : IEquatable<PolicyCreate>
    { 
        /// <summary>
        /// Policy name.
        /// </summary>
        /// <value>Policy name.</value>
        [Required]
        
        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Policy description.
        /// </summary>
        /// <value>Policy description.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Snapshot rule identifiers included in this policy. At least one snapshot rule or one replication rule must be specified to create a protection policy. 
        /// </summary>
        /// <value>Snapshot rule identifiers included in this policy. At least one snapshot rule or one replication rule must be specified to create a protection policy. </value>

        [DataMember(Name="snapshot_rule_ids")]
        public List<string> SnapshotRuleIds { get; set; }

        /// <summary>
        /// Replication rule identifiers included in this policy. At least one snapshot rule or one replication rule must be specified to create a protection policy. 
        /// </summary>
        /// <value>Replication rule identifiers included in this policy. At least one snapshot rule or one replication rule must be specified to create a protection policy. </value>

        [DataMember(Name="replication_rule_ids")]
        public List<string> ReplicationRuleIds { get; set; }

        /// <summary>
        /// I/O limit rule identifier included in this policy. This attribute is only used for the QoS Performance Policy type.  name:{name} can be used instead of {id}. For example: &#39;io_limit_rule_id&#39;:&#39;name:io_limit_rule_name&#39; Was added in version 4.0.0.0.
        /// </summary>
        /// <value>I/O limit rule identifier included in this policy. This attribute is only used for the QoS Performance Policy type.  name:{name} can be used instead of {id}. For example: &#39;io_limit_rule_id&#39;:&#39;name:io_limit_rule_name&#39; Was added in version 4.0.0.0.</value>

        [DataMember(Name="io_limit_rule_id")]
        public string IoLimitRuleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SnapshotRuleIds: ").Append(SnapshotRuleIds).Append("\n");
            sb.Append("  ReplicationRuleIds: ").Append(ReplicationRuleIds).Append("\n");
            sb.Append("  IoLimitRuleId: ").Append(IoLimitRuleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PolicyCreate)obj);
        }

        /// <summary>
        /// Returns true if PolicyCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of PolicyCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    SnapshotRuleIds == other.SnapshotRuleIds ||
                    SnapshotRuleIds != null &&
                    SnapshotRuleIds.SequenceEqual(other.SnapshotRuleIds)
                ) && 
                (
                    ReplicationRuleIds == other.ReplicationRuleIds ||
                    ReplicationRuleIds != null &&
                    ReplicationRuleIds.SequenceEqual(other.ReplicationRuleIds)
                ) && 
                (
                    IoLimitRuleId == other.IoLimitRuleId ||
                    IoLimitRuleId != null &&
                    IoLimitRuleId.Equals(other.IoLimitRuleId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (SnapshotRuleIds != null)
                    hashCode = hashCode * 59 + SnapshotRuleIds.GetHashCode();
                    if (ReplicationRuleIds != null)
                    hashCode = hashCode * 59 + ReplicationRuleIds.GetHashCode();
                    if (IoLimitRuleId != null)
                    hashCode = hashCode * 59 + IoLimitRuleId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PolicyCreate left, PolicyCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PolicyCreate left, PolicyCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
