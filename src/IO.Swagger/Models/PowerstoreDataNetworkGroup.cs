/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Group of local and remote PowerStore storage networks to use for configuring data connections for replication data transfers.  Was added in version 3.5.0.0.
    /// </summary>
    [DataContract]
    public partial class PowerstoreDataNetworkGroup : IEquatable<PowerstoreDataNetworkGroup>
    { 
        /// <summary>
        /// Unique identifier of the data network group. 
        /// </summary>
        /// <value>Unique identifier of the data network group. </value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// User or system generated name for group of local and remote replication networks. 
        /// </summary>
        /// <value>User or system generated name for group of local and remote replication networks. </value>

        [MaxLength(100)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// List of local storage networks that are defined to be used for replication data transfer. 
        /// </summary>
        /// <value>List of local storage networks that are defined to be used for replication data transfer. </value>

        [DataMember(Name="local_powerstore_networks")]
        public List<PowerstoreNetworkInfo> LocalPowerstoreNetworks { get; set; }

        /// <summary>
        /// List of remote storage networks that are defined to be used for replication data transfer. 
        /// </summary>
        /// <value>List of remote storage networks that are defined to be used for replication data transfer. </value>

        [DataMember(Name="remote_powerstore_networks")]
        public List<PowerstoreNetworkInfo> RemotePowerstoreNetworks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PowerstoreDataNetworkGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LocalPowerstoreNetworks: ").Append(LocalPowerstoreNetworks).Append("\n");
            sb.Append("  RemotePowerstoreNetworks: ").Append(RemotePowerstoreNetworks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PowerstoreDataNetworkGroup)obj);
        }

        /// <summary>
        /// Returns true if PowerstoreDataNetworkGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of PowerstoreDataNetworkGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PowerstoreDataNetworkGroup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    LocalPowerstoreNetworks == other.LocalPowerstoreNetworks ||
                    LocalPowerstoreNetworks != null &&
                    LocalPowerstoreNetworks.SequenceEqual(other.LocalPowerstoreNetworks)
                ) && 
                (
                    RemotePowerstoreNetworks == other.RemotePowerstoreNetworks ||
                    RemotePowerstoreNetworks != null &&
                    RemotePowerstoreNetworks.SequenceEqual(other.RemotePowerstoreNetworks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (LocalPowerstoreNetworks != null)
                    hashCode = hashCode * 59 + LocalPowerstoreNetworks.GetHashCode();
                    if (RemotePowerstoreNetworks != null)
                    hashCode = hashCode * 59 + RemotePowerstoreNetworks.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PowerstoreDataNetworkGroup left, PowerstoreDataNetworkGroup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PowerstoreDataNetworkGroup left, PowerstoreDataNetworkGroup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
