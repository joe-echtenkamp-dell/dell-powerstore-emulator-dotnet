/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ImportSessionCreate : IEquatable<ImportSessionCreate>
    { 
        /// <summary>
        /// Unique identifier of the storage system that contains the source volume or consistency group to be imported. You can query the source volume or consistency group object to get the identifier of the source system that the volume or consistency group are part of. Alternatively, you can use the remote_system object to get this information.  name:{name} can be used instead of {id}. For example: &#39;remote_system_id&#39;:&#39;name:remote_system_name&#39;
        /// </summary>
        /// <value>Unique identifier of the storage system that contains the source volume or consistency group to be imported. You can query the source volume or consistency group object to get the identifier of the source system that the volume or consistency group are part of. Alternatively, you can use the remote_system object to get this information.  name:{name} can be used instead of {id}. For example: &#39;remote_system_id&#39;:&#39;name:remote_system_name&#39;</value>
        [Required]
        
        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Unique identifier of the volume or consistency group to be imported. Refer to the following objects for more information: * Storage Center : import_storage_center_volume, import_storage_center_consistency_group * VNX : import_vnx_volume, import_vnx_consistency_group * PS Series : import_psgroup_volume * Unity : import_unity_volume, import_unity_consistency_group * XtremIO : import_xtremio_volume, import_xtremio_consistency_group * VMAX : import_vmax * NetApp : import_netapp_volume * Universal : import_universal_volume, import_universal_consistency_group 
        /// </summary>
        /// <value>Unique identifier of the volume or consistency group to be imported. Refer to the following objects for more information: * Storage Center : import_storage_center_volume, import_storage_center_consistency_group * VNX : import_vnx_volume, import_vnx_consistency_group * PS Series : import_psgroup_volume * Unity : import_unity_volume, import_unity_consistency_group * XtremIO : import_xtremio_volume, import_xtremio_consistency_group * VMAX : import_vmax * NetApp : import_netapp_volume * Universal : import_universal_volume, import_universal_consistency_group </value>
        [Required]
        
        [DataMember(Name="source_resource_id")]
        public string SourceResourceId { get; set; }

        /// <summary>
        /// Name of the import session. The name must be unique in the PowerStore cluster and can contain a maximum of 128 unicode characters. It cannot contain special HTTP characters, unprintable characters, or white space. 
        /// </summary>
        /// <value>Name of the import session. The name must be unique in the PowerStore cluster and can contain a maximum of 128 unicode characters. It cannot contain special HTTP characters, unprintable characters, or white space. </value>
        [Required]
        
        [MaxLength(128)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Global storage discovery iSCSI ip address that will be used for import workflow. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name).  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Global storage discovery iSCSI ip address that will be used for import workflow. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name).  Was added in version 3.0.0.0.</value>

        [DataMember(Name="global_storage_discovery_address")]
        public string GlobalStorageDiscoveryAddress { get; set; }

        /// <summary>
        /// Description of the import session. The name can contain a maximum of 128 unicode characters. It cannot contain unprintable characters. 
        /// </summary>
        /// <value>Description of the import session. The name can contain a maximum of 128 unicode characters. It cannot contain unprintable characters. </value>

        [MaxLength(128)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        ///  Was added in version 1.0.2.
        /// </summary>
        /// <value> Was added in version 1.0.2.</value>

        [DataMember(Name="type")]
        public ImportSessionTypeEnum? Type { get; set; }

        /// <summary>
        /// Hosts to be mapped to the destination resource for an agentless import session.  Was added in version 1.0.2.
        /// </summary>
        /// <value>Hosts to be mapped to the destination resource for an agentless import session.  Was added in version 1.0.2.</value>

        [DataMember(Name="host_ids")]
        public List<string> HostIds { get; set; }

        /// <summary>
        /// Unique identifiers of the host groups that map to the destination resource for an agentless import session. In case of a consistency group, if all the member volumes have the same host group mapping, then use this property, otherwise use consistency_group_member_host_group_ids.  Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Unique identifiers of the host groups that map to the destination resource for an agentless import session. In case of a consistency group, if all the member volumes have the same host group mapping, then use this property, otherwise use consistency_group_member_host_group_ids.  Was added in version 2.0.0.0.</value>

        [DataMember(Name="host_group_ids")]
        public List<string> HostGroupIds { get; set; }

        /// <summary>
        ///  Was added in version 1.0.2.
        /// </summary>
        /// <value> Was added in version 1.0.2.</value>

        [DataMember(Name="consistency_group_member_host_ids")]
        public List<ConsistencyGroupMemberHostMapping> ConsistencyGroupMemberHostIds { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="consistency_group_member_host_group_ids")]
        public List<ConsistencyGroupMemberHostGroupMapping> ConsistencyGroupMemberHostGroupIds { get; set; }

        /// <summary>
        /// Unique identifier of the volume group to which the imported volume will belong, if any.  name:{name} can be used instead of {id}. For example: &#39;volume_group_id&#39;:&#39;name:volume_group_name&#39;
        /// </summary>
        /// <value>Unique identifier of the volume group to which the imported volume will belong, if any.  name:{name} can be used instead of {id}. For example: &#39;volume_group_id&#39;:&#39;name:volume_group_name&#39;</value>

        [DataMember(Name="volume_group_id")]
        public string VolumeGroupId { get; set; }

        /// <summary>
        /// Indicates whether the import session cutover is manual (true) or automatic (false). 
        /// </summary>
        /// <value>Indicates whether the import session cutover is manual (true) or automatic (false). </value>

        [DataMember(Name="automatic_cutover")]
        public bool? AutomaticCutover { get; set; }

        /// <summary>
        /// Unique identifier of the protection policy that will be applied to an imported volume or consistency group after the import completes. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy. If you try to import a replication policy, the import job will fail.  name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;
        /// </summary>
        /// <value>Unique identifier of the protection policy that will be applied to an imported volume or consistency group after the import completes. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy. If you try to import a replication policy, the import job will fail.  name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;</value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Date and time at which the import session is scheduled to start. The date time is specified in ISO 8601 format with the time expressed in UTC format.
        /// </summary>
        /// <value>Date and time at which the import session is scheduled to start. The date time is specified in ISO 8601 format with the time expressed in UTC format.</value>

        [DataMember(Name="scheduled_timestamp")]
        public DateTime? ScheduledTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportSessionCreate {\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  SourceResourceId: ").Append(SourceResourceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  GlobalStorageDiscoveryAddress: ").Append(GlobalStorageDiscoveryAddress).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  HostIds: ").Append(HostIds).Append("\n");
            sb.Append("  HostGroupIds: ").Append(HostGroupIds).Append("\n");
            sb.Append("  ConsistencyGroupMemberHostIds: ").Append(ConsistencyGroupMemberHostIds).Append("\n");
            sb.Append("  ConsistencyGroupMemberHostGroupIds: ").Append(ConsistencyGroupMemberHostGroupIds).Append("\n");
            sb.Append("  VolumeGroupId: ").Append(VolumeGroupId).Append("\n");
            sb.Append("  AutomaticCutover: ").Append(AutomaticCutover).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  ScheduledTimestamp: ").Append(ScheduledTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportSessionCreate)obj);
        }

        /// <summary>
        /// Returns true if ImportSessionCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportSessionCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportSessionCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    SourceResourceId == other.SourceResourceId ||
                    SourceResourceId != null &&
                    SourceResourceId.Equals(other.SourceResourceId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    GlobalStorageDiscoveryAddress == other.GlobalStorageDiscoveryAddress ||
                    GlobalStorageDiscoveryAddress != null &&
                    GlobalStorageDiscoveryAddress.Equals(other.GlobalStorageDiscoveryAddress)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    HostIds == other.HostIds ||
                    HostIds != null &&
                    HostIds.SequenceEqual(other.HostIds)
                ) && 
                (
                    HostGroupIds == other.HostGroupIds ||
                    HostGroupIds != null &&
                    HostGroupIds.SequenceEqual(other.HostGroupIds)
                ) && 
                (
                    ConsistencyGroupMemberHostIds == other.ConsistencyGroupMemberHostIds ||
                    ConsistencyGroupMemberHostIds != null &&
                    ConsistencyGroupMemberHostIds.SequenceEqual(other.ConsistencyGroupMemberHostIds)
                ) && 
                (
                    ConsistencyGroupMemberHostGroupIds == other.ConsistencyGroupMemberHostGroupIds ||
                    ConsistencyGroupMemberHostGroupIds != null &&
                    ConsistencyGroupMemberHostGroupIds.SequenceEqual(other.ConsistencyGroupMemberHostGroupIds)
                ) && 
                (
                    VolumeGroupId == other.VolumeGroupId ||
                    VolumeGroupId != null &&
                    VolumeGroupId.Equals(other.VolumeGroupId)
                ) && 
                (
                    AutomaticCutover == other.AutomaticCutover ||
                    AutomaticCutover != null &&
                    AutomaticCutover.Equals(other.AutomaticCutover)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    ScheduledTimestamp == other.ScheduledTimestamp ||
                    ScheduledTimestamp != null &&
                    ScheduledTimestamp.Equals(other.ScheduledTimestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (SourceResourceId != null)
                    hashCode = hashCode * 59 + SourceResourceId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (GlobalStorageDiscoveryAddress != null)
                    hashCode = hashCode * 59 + GlobalStorageDiscoveryAddress.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (HostIds != null)
                    hashCode = hashCode * 59 + HostIds.GetHashCode();
                    if (HostGroupIds != null)
                    hashCode = hashCode * 59 + HostGroupIds.GetHashCode();
                    if (ConsistencyGroupMemberHostIds != null)
                    hashCode = hashCode * 59 + ConsistencyGroupMemberHostIds.GetHashCode();
                    if (ConsistencyGroupMemberHostGroupIds != null)
                    hashCode = hashCode * 59 + ConsistencyGroupMemberHostGroupIds.GetHashCode();
                    if (VolumeGroupId != null)
                    hashCode = hashCode * 59 + VolumeGroupId.GetHashCode();
                    if (AutomaticCutover != null)
                    hashCode = hashCode * 59 + AutomaticCutover.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (ScheduledTimestamp != null)
                    hashCode = hashCode * 59 + ScheduledTimestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportSessionCreate left, ImportSessionCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportSessionCreate left, ImportSessionCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
