/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of an appliance. This resource type has queriable associations from node, ip_pool_address, fsn, veth_port, virtual_volume, maintenance_window, fc_port, sas_port, eth_port, eth_be_port, software_installed, hardware, volume
    /// </summary>
    [DataContract]
    public partial class ApplianceInstance : IEquatable<ApplianceInstance>
    { 
        /// <summary>
        /// Unique identifier of the appliance.
        /// </summary>
        /// <value>Unique identifier of the appliance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the appliance.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the appliance.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Dell Service Tag.
        /// </summary>
        /// <value>Dell Service Tag.</value>

        [DataMember(Name="service_tag")]
        public string ServiceTag { get; set; }

        /// <summary>
        /// Express Service Code.
        /// </summary>
        /// <value>Express Service Code.</value>

        [DataMember(Name="express_service_code")]
        public string ExpressServiceCode { get; set; }

        /// <summary>
        /// Model of the appliance.
        /// </summary>
        /// <value>Model of the appliance.</value>

        [DataMember(Name="model")]
        public string Model { get; set; }

        /// <summary>
        ///  Was added in version 3.5.0.0.
        /// </summary>
        /// <value> Was added in version 3.5.0.0.</value>

        [DataMember(Name="mode")]
        public ApplianceModeEnum? Mode { get; set; }

        /// <summary>
        /// The number of nodes deployed on an appliance. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>The number of nodes deployed on an appliance. Was added in version 3.0.0.0.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="node_count")]
        public int? NodeCount { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="drive_failure_tolerance_level")]
        public DriveFailureToleranceLevelEnum? DriveFailureToleranceLevel { get; set; }

        /// <summary>
        ///  Was added in version 4.0.0.0.
        /// </summary>
        /// <value> Was added in version 4.0.0.0.</value>

        [DataMember(Name="storage_class")]
        public ApplianceStorageClassEnum? StorageClass { get; set; }

        /// <summary>
        /// Is this a HyperConverged Appliance Was added in version 3.2.0.0.
        /// </summary>
        /// <value>Is this a HyperConverged Appliance Was added in version 3.2.0.0.</value>

        [DataMember(Name="is_hyper_converged")]
        public bool? IsHyperConverged { get; set; }

        /// <summary>
        /// Localized message string corresponding to mode Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to mode Was added in version 3.5.0.0.</value>

        [DataMember(Name="mode_l10n")]
        public string ModeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to drive_failure_tolerance_level Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to drive_failure_tolerance_level Was added in version 2.0.0.0.</value>

        [DataMember(Name="drive_failure_tolerance_level_l10n")]
        public string DriveFailureToleranceLevelL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to storage_class Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to storage_class Was added in version 4.0.0.0.</value>

        [DataMember(Name="storage_class_l10n")]
        public string StorageClassL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type node association.
        /// </summary>
        /// <value>This is the inverse of the resource type node association.</value>

        [DataMember(Name="nodes")]
        public List<NodeInstance> Nodes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type ip_pool_address association.
        /// </summary>
        /// <value>This is the inverse of the resource type ip_pool_address association.</value>

        [DataMember(Name="ip_pool_addresses")]
        public List<IpPoolAddressInstance> IpPoolAddresses { get; set; }

        /// <summary>
        /// This is the inverse of the resource type fsn association.
        /// </summary>
        /// <value>This is the inverse of the resource type fsn association.</value>

        [DataMember(Name="fsns")]
        public List<FsnInstance> Fsns { get; set; }

        /// <summary>
        /// This is the inverse of the resource type veth_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type veth_port association.</value>

        [DataMember(Name="veth_ports")]
        public List<VethPortInstance> VethPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_volume association.</value>

        [DataMember(Name="virtual_volumes")]
        public List<VirtualVolumeInstance> VirtualVolumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type maintenance_window association.
        /// </summary>
        /// <value>This is the inverse of the resource type maintenance_window association.</value>

        [DataMember(Name="maintenance_windows")]
        public List<MaintenanceWindowInstance> MaintenanceWindows { get; set; }

        /// <summary>
        /// This is the inverse of the resource type fc_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type fc_port association.</value>

        [DataMember(Name="fc_ports")]
        public List<FcPortInstance> FcPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type sas_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type sas_port association.</value>

        [DataMember(Name="sas_ports")]
        public List<SasPortInstance> SasPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_port association.</value>

        [DataMember(Name="eth_ports")]
        public List<EthPortInstance> EthPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_be_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_be_port association.</value>

        [DataMember(Name="eth_be_ports")]
        public List<EthBePortInstance> EthBePorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type software_installed association.
        /// </summary>
        /// <value>This is the inverse of the resource type software_installed association.</value>

        [DataMember(Name="software_installed")]
        public List<SoftwareInstalledInstance> SoftwareInstalled { get; set; }

        /// <summary>
        /// This is the inverse of the resource type hardware association.
        /// </summary>
        /// <value>This is the inverse of the resource type hardware association.</value>

        [DataMember(Name="hardware")]
        public List<HardwareInstance> Hardware { get; set; }

        /// <summary>
        /// This is the inverse of the resource type volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type volume association.</value>

        [DataMember(Name="volumes")]
        public List<VolumeInstance> Volumes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplianceInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ServiceTag: ").Append(ServiceTag).Append("\n");
            sb.Append("  ExpressServiceCode: ").Append(ExpressServiceCode).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  NodeCount: ").Append(NodeCount).Append("\n");
            sb.Append("  DriveFailureToleranceLevel: ").Append(DriveFailureToleranceLevel).Append("\n");
            sb.Append("  StorageClass: ").Append(StorageClass).Append("\n");
            sb.Append("  IsHyperConverged: ").Append(IsHyperConverged).Append("\n");
            sb.Append("  ModeL10n: ").Append(ModeL10n).Append("\n");
            sb.Append("  DriveFailureToleranceLevelL10n: ").Append(DriveFailureToleranceLevelL10n).Append("\n");
            sb.Append("  StorageClassL10n: ").Append(StorageClassL10n).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  IpPoolAddresses: ").Append(IpPoolAddresses).Append("\n");
            sb.Append("  Fsns: ").Append(Fsns).Append("\n");
            sb.Append("  VethPorts: ").Append(VethPorts).Append("\n");
            sb.Append("  VirtualVolumes: ").Append(VirtualVolumes).Append("\n");
            sb.Append("  MaintenanceWindows: ").Append(MaintenanceWindows).Append("\n");
            sb.Append("  FcPorts: ").Append(FcPorts).Append("\n");
            sb.Append("  SasPorts: ").Append(SasPorts).Append("\n");
            sb.Append("  EthPorts: ").Append(EthPorts).Append("\n");
            sb.Append("  EthBePorts: ").Append(EthBePorts).Append("\n");
            sb.Append("  SoftwareInstalled: ").Append(SoftwareInstalled).Append("\n");
            sb.Append("  Hardware: ").Append(Hardware).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApplianceInstance)obj);
        }

        /// <summary>
        /// Returns true if ApplianceInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ApplianceInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplianceInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ServiceTag == other.ServiceTag ||
                    ServiceTag != null &&
                    ServiceTag.Equals(other.ServiceTag)
                ) && 
                (
                    ExpressServiceCode == other.ExpressServiceCode ||
                    ExpressServiceCode != null &&
                    ExpressServiceCode.Equals(other.ExpressServiceCode)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Mode == other.Mode ||
                    Mode != null &&
                    Mode.Equals(other.Mode)
                ) && 
                (
                    NodeCount == other.NodeCount ||
                    NodeCount != null &&
                    NodeCount.Equals(other.NodeCount)
                ) && 
                (
                    DriveFailureToleranceLevel == other.DriveFailureToleranceLevel ||
                    DriveFailureToleranceLevel != null &&
                    DriveFailureToleranceLevel.Equals(other.DriveFailureToleranceLevel)
                ) && 
                (
                    StorageClass == other.StorageClass ||
                    StorageClass != null &&
                    StorageClass.Equals(other.StorageClass)
                ) && 
                (
                    IsHyperConverged == other.IsHyperConverged ||
                    IsHyperConverged != null &&
                    IsHyperConverged.Equals(other.IsHyperConverged)
                ) && 
                (
                    ModeL10n == other.ModeL10n ||
                    ModeL10n != null &&
                    ModeL10n.Equals(other.ModeL10n)
                ) && 
                (
                    DriveFailureToleranceLevelL10n == other.DriveFailureToleranceLevelL10n ||
                    DriveFailureToleranceLevelL10n != null &&
                    DriveFailureToleranceLevelL10n.Equals(other.DriveFailureToleranceLevelL10n)
                ) && 
                (
                    StorageClassL10n == other.StorageClassL10n ||
                    StorageClassL10n != null &&
                    StorageClassL10n.Equals(other.StorageClassL10n)
                ) && 
                (
                    Nodes == other.Nodes ||
                    Nodes != null &&
                    Nodes.SequenceEqual(other.Nodes)
                ) && 
                (
                    IpPoolAddresses == other.IpPoolAddresses ||
                    IpPoolAddresses != null &&
                    IpPoolAddresses.SequenceEqual(other.IpPoolAddresses)
                ) && 
                (
                    Fsns == other.Fsns ||
                    Fsns != null &&
                    Fsns.SequenceEqual(other.Fsns)
                ) && 
                (
                    VethPorts == other.VethPorts ||
                    VethPorts != null &&
                    VethPorts.SequenceEqual(other.VethPorts)
                ) && 
                (
                    VirtualVolumes == other.VirtualVolumes ||
                    VirtualVolumes != null &&
                    VirtualVolumes.SequenceEqual(other.VirtualVolumes)
                ) && 
                (
                    MaintenanceWindows == other.MaintenanceWindows ||
                    MaintenanceWindows != null &&
                    MaintenanceWindows.SequenceEqual(other.MaintenanceWindows)
                ) && 
                (
                    FcPorts == other.FcPorts ||
                    FcPorts != null &&
                    FcPorts.SequenceEqual(other.FcPorts)
                ) && 
                (
                    SasPorts == other.SasPorts ||
                    SasPorts != null &&
                    SasPorts.SequenceEqual(other.SasPorts)
                ) && 
                (
                    EthPorts == other.EthPorts ||
                    EthPorts != null &&
                    EthPorts.SequenceEqual(other.EthPorts)
                ) && 
                (
                    EthBePorts == other.EthBePorts ||
                    EthBePorts != null &&
                    EthBePorts.SequenceEqual(other.EthBePorts)
                ) && 
                (
                    SoftwareInstalled == other.SoftwareInstalled ||
                    SoftwareInstalled != null &&
                    SoftwareInstalled.SequenceEqual(other.SoftwareInstalled)
                ) && 
                (
                    Hardware == other.Hardware ||
                    Hardware != null &&
                    Hardware.SequenceEqual(other.Hardware)
                ) && 
                (
                    Volumes == other.Volumes ||
                    Volumes != null &&
                    Volumes.SequenceEqual(other.Volumes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ServiceTag != null)
                    hashCode = hashCode * 59 + ServiceTag.GetHashCode();
                    if (ExpressServiceCode != null)
                    hashCode = hashCode * 59 + ExpressServiceCode.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (Mode != null)
                    hashCode = hashCode * 59 + Mode.GetHashCode();
                    if (NodeCount != null)
                    hashCode = hashCode * 59 + NodeCount.GetHashCode();
                    if (DriveFailureToleranceLevel != null)
                    hashCode = hashCode * 59 + DriveFailureToleranceLevel.GetHashCode();
                    if (StorageClass != null)
                    hashCode = hashCode * 59 + StorageClass.GetHashCode();
                    if (IsHyperConverged != null)
                    hashCode = hashCode * 59 + IsHyperConverged.GetHashCode();
                    if (ModeL10n != null)
                    hashCode = hashCode * 59 + ModeL10n.GetHashCode();
                    if (DriveFailureToleranceLevelL10n != null)
                    hashCode = hashCode * 59 + DriveFailureToleranceLevelL10n.GetHashCode();
                    if (StorageClassL10n != null)
                    hashCode = hashCode * 59 + StorageClassL10n.GetHashCode();
                    if (Nodes != null)
                    hashCode = hashCode * 59 + Nodes.GetHashCode();
                    if (IpPoolAddresses != null)
                    hashCode = hashCode * 59 + IpPoolAddresses.GetHashCode();
                    if (Fsns != null)
                    hashCode = hashCode * 59 + Fsns.GetHashCode();
                    if (VethPorts != null)
                    hashCode = hashCode * 59 + VethPorts.GetHashCode();
                    if (VirtualVolumes != null)
                    hashCode = hashCode * 59 + VirtualVolumes.GetHashCode();
                    if (MaintenanceWindows != null)
                    hashCode = hashCode * 59 + MaintenanceWindows.GetHashCode();
                    if (FcPorts != null)
                    hashCode = hashCode * 59 + FcPorts.GetHashCode();
                    if (SasPorts != null)
                    hashCode = hashCode * 59 + SasPorts.GetHashCode();
                    if (EthPorts != null)
                    hashCode = hashCode * 59 + EthPorts.GetHashCode();
                    if (EthBePorts != null)
                    hashCode = hashCode * 59 + EthBePorts.GetHashCode();
                    if (SoftwareInstalled != null)
                    hashCode = hashCode * 59 + SoftwareInstalled.GetHashCode();
                    if (Hardware != null)
                    hashCode = hashCode * 59 + Hardware.GetHashCode();
                    if (Volumes != null)
                    hashCode = hashCode * 59 + Volumes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApplianceInstance left, ApplianceInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApplianceInstance left, ApplianceInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
