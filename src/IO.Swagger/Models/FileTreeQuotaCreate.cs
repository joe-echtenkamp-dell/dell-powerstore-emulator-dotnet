/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters for file tree quota create operation.
    /// </summary>
    [DataContract]
    public partial class FileTreeQuotaCreate : IEquatable<FileTreeQuotaCreate>
    { 
        /// <summary>
        /// Unique identifier of the associated file system. name:{name} can be used instead of {id}. For example: &#39;file_system_id&#39;:&#39;name:file_system_name&#39;
        /// </summary>
        /// <value>Unique identifier of the associated file system. name:{name} can be used instead of {id}. For example: &#39;file_system_id&#39;:&#39;name:file_system_name&#39;</value>
        [Required]
        
        [DataMember(Name="file_system_id")]
        public string FileSystemId { get; set; }

        /// <summary>
        /// Path relative to the root of the associated filesystem.
        /// </summary>
        /// <value>Path relative to the root of the associated filesystem.</value>
        [Required]
        
        [StringLength(1024, MinimumLength=1)]
        [DataMember(Name="path")]
        public string Path { get; set; }

        /// <summary>
        /// Description of the tree quota.
        /// </summary>
        /// <value>Description of the tree quota.</value>

        [StringLength(256, MinimumLength=0)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Hard limit of the tree quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space. Value is always rounded up to match the physical block size of the filesystem.
        /// </summary>
        /// <value>Hard limit of the tree quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space. Value is always rounded up to match the physical block size of the filesystem.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="hard_limit")]
        public long? HardLimit { get; set; }

        /// <summary>
        /// Soft limit of the tree quota, in bytes. No hard limit when set to 0. Value is always rounded up to match the physical block size of the filesystem.
        /// </summary>
        /// <value>Soft limit of the tree quota, in bytes. No hard limit when set to 0. Value is always rounded up to match the physical block size of the filesystem.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="soft_limit")]
        public long? SoftLimit { get; set; }

        /// <summary>
        /// Whether the quota must be enabled for all users, and whether user quota limits, if any, are enforced. Values are: * true  - Start tracking usage for all users on the quota tree, and enforce user quota limits. * false - Stop tracking usage for all users on the quota tree, and do not enforce user quota limits. 
        /// </summary>
        /// <value>Whether the quota must be enabled for all users, and whether user quota limits, if any, are enforced. Values are: * true  - Start tracking usage for all users on the quota tree, and enforce user quota limits. * false - Stop tracking usage for all users on the quota tree, and do not enforce user quota limits. </value>

        [DataMember(Name="is_user_quotas_enforced")]
        public bool? IsUserQuotasEnforced { get; set; }

        /// <summary>
        /// Grace period of soft limit (seconds). This will override the default grace period set at filesystem level.  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).  Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Grace period of soft limit (seconds). This will override the default grace period set at filesystem level.  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).  Was added in version 2.0.0.0.</value>

        [Range(-1, 2147483647)]
        [DataMember(Name="grace_period")]
        public int? GracePeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileTreeQuotaCreate {\n");
            sb.Append("  FileSystemId: ").Append(FileSystemId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HardLimit: ").Append(HardLimit).Append("\n");
            sb.Append("  SoftLimit: ").Append(SoftLimit).Append("\n");
            sb.Append("  IsUserQuotasEnforced: ").Append(IsUserQuotasEnforced).Append("\n");
            sb.Append("  GracePeriod: ").Append(GracePeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileTreeQuotaCreate)obj);
        }

        /// <summary>
        /// Returns true if FileTreeQuotaCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of FileTreeQuotaCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileTreeQuotaCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FileSystemId == other.FileSystemId ||
                    FileSystemId != null &&
                    FileSystemId.Equals(other.FileSystemId)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HardLimit == other.HardLimit ||
                    HardLimit != null &&
                    HardLimit.Equals(other.HardLimit)
                ) && 
                (
                    SoftLimit == other.SoftLimit ||
                    SoftLimit != null &&
                    SoftLimit.Equals(other.SoftLimit)
                ) && 
                (
                    IsUserQuotasEnforced == other.IsUserQuotasEnforced ||
                    IsUserQuotasEnforced != null &&
                    IsUserQuotasEnforced.Equals(other.IsUserQuotasEnforced)
                ) && 
                (
                    GracePeriod == other.GracePeriod ||
                    GracePeriod != null &&
                    GracePeriod.Equals(other.GracePeriod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FileSystemId != null)
                    hashCode = hashCode * 59 + FileSystemId.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (HardLimit != null)
                    hashCode = hashCode * 59 + HardLimit.GetHashCode();
                    if (SoftLimit != null)
                    hashCode = hashCode * 59 + SoftLimit.GetHashCode();
                    if (IsUserQuotasEnforced != null)
                    hashCode = hashCode * 59 + IsUserQuotasEnforced.GetHashCode();
                    if (GracePeriod != null)
                    hashCode = hashCode * 59 + GracePeriod.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileTreeQuotaCreate left, FileTreeQuotaCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileTreeQuotaCreate left, FileTreeQuotaCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
