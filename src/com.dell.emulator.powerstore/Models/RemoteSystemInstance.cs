/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// A remote system.  This resource type has queriable associations from snapshot_rule, replication_rule, import_session, storage_container_destination, replication_session, remote_snapshot_session, remote_snapshot, import_universal_volume, import_universal_consistency_group
    /// </summary>
    [DataContract]
    public partial class RemoteSystemInstance : IEquatable<RemoteSystemInstance>
    { 
        /// <summary>
        /// Unique identifier of the remote system instance. 
        /// </summary>
        /// <value>Unique identifier of the remote system instance. </value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// User-specified name of the remote system instance.   This property supports case-insensitive filtering.
        /// </summary>
        /// <value>User-specified name of the remote system instance.   This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// User-specified description of the remote system instance. 
        /// </summary>
        /// <value>User-specified description of the remote system instance. </value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Serial number of the remote system instance. 
        /// </summary>
        /// <value>Serial number of the remote system instance. </value>

        [DataMember(Name="serial_number")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Version of the remote system.  Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Version of the remote system.  Was added in version 2.0.0.0.</value>

        [DataMember(Name="version")]
        public string Version { get; set; }

        /// <summary>
        /// Management address of the remote system instance. IPv4 and FQDN is supported for non-PowerStore remote systems. IPv4, IPv6 and FQDN are supported for PowerStore remote systems. 
        /// </summary>
        /// <value>Management address of the remote system instance. IPv4 and FQDN is supported for non-PowerStore remote systems. IPv4, IPv6 and FQDN are supported for PowerStore remote systems. </value>

        [DataMember(Name="management_address")]
        public string ManagementAddress { get; set; }

        /// <summary>
        /// Management port of PowerMax/VMAX remote system.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Management port of PowerMax/VMAX remote system.  Was added in version 3.0.0.0.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="management_port")]
        public int? ManagementPort { get; set; }

        /// <summary>
        /// Type of the remote system. 
        /// </summary>
        /// <value>Type of the remote system. </value>

        [DataMember(Name="type")]
        public RemoteSystemTypeEnum? Type { get; set; }

        /// <summary>
        /// Username used to access the non-PowerStore remote systems. 
        /// </summary>
        /// <value>Username used to access the non-PowerStore remote systems. </value>

        [DataMember(Name="user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// Current state of the remote system. 
        /// </summary>
        /// <value>Current state of the remote system. </value>

        [DataMember(Name="state")]
        public RemoteSystemStateEnum? State { get; set; }

        /// <summary>
        /// Type of the data connection.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Type of the data connection.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="data_connection_type")]
        public DataConnectionTypeEnum? DataConnectionType { get; set; }

        /// <summary>
        /// State of the data connection. 
        /// </summary>
        /// <value>State of the data connection. </value>

        [DataMember(Name="data_connection_state")]
        public DataConnectionStateEnum? DataConnectionState { get; set; }

        /// <summary>
        /// iSCSI target addresses for the data connection to the remote system. 
        /// </summary>
        /// <value>iSCSI target addresses for the data connection to the remote system. </value>

        [DataMember(Name="iscsi_addresses")]
        public List<string> IscsiAddresses { get; set; }

        /// <summary>
        /// FC target WWN discovered by Powerstore for the data connection to the remote system.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>FC target WWN discovered by Powerstore for the data connection to the remote system.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="fc_target_wwns")]
        public List<string> FcTargetWwns { get; set; }

        /// <summary>
        /// Discovery chap mode for the non-PowerStore remote system. 
        /// </summary>
        /// <value>Discovery chap mode for the non-PowerStore remote system. </value>

        [DataMember(Name="discovery_chap_mode")]
        public RemoteSystemChapModeEnum? DiscoveryChapMode { get; set; }

        /// <summary>
        /// Session chap mode for the non-PowerStore remote system. 
        /// </summary>
        /// <value>Session chap mode for the non-PowerStore remote system. </value>

        [DataMember(Name="session_chap_mode")]
        public RemoteSystemChapModeEnum? SessionChapMode { get; set; }

        /// <summary>
        /// Network latency for the remote system. 
        /// </summary>
        /// <value>Network latency for the remote system. </value>

        [DataMember(Name="data_network_latency")]
        public RemoteSystemLatencyEnum? DataNetworkLatency { get; set; }

        /// <summary>
        /// List of data connections from each appliance in the local cluster to target address.   Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>List of data connections from each appliance in the local cluster to target address.   Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="data_connections")]
        public List<DataConnectionInstance> DataConnections { get; set; }

        /// <summary>
        /// List of remote protection capabilities.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>List of remote protection capabilities.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="capabilities")]
        public List<RemoteProtectionCapabilityEnum> Capabilities { get; set; }

        /// <summary>
        /// A public IPv4 or IPv6 address of a file remote system instance. File mobility network cluster IP address for PowerStore. Control station address for VNX2.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>A public IPv4 or IPv6 address of a file remote system instance. File mobility network cluster IP address for PowerStore. Control station address for VNX2.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="file_connection_address")]
        public string FileConnectionAddress { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="file_connection_state")]
        public RemoteSystemFileConnectionStateEnum? FileConnectionState { get; set; }

        /// <summary>
        /// User-specified VNX NAS administrator username. nasadmin account is preferred for file import.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>User-specified VNX NAS administrator username. nasadmin account is preferred for file import.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="vnx_file_username")]
        public string VnxFileUsername { get; set; }

        /// <summary>
        /// PowerProtect DD details.  Was added in version 3.5.0.0.
        /// </summary>
        /// <value>PowerProtect DD details.  Was added in version 3.5.0.0.</value>

        [DataMember(Name="ppdd_storage_unit_details")]
        public PpddStorageUnitDetailsInstance PpddStorageUnitDetails { get; set; }

        /// <summary>
        /// Details of all the appliances of the remote PowerStore system.  Was added in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Details of all the appliances of the remote PowerStore system.  Was added in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="appliance_details")]
        public List<RemoteApplianceDetails> ApplianceDetails { get; set; }

        /// <summary>
        /// Unity file details.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unity file details.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="unity_file_details")]
        public UnityFileDetailsInstance UnityFileDetails { get; set; }

        /// <summary>
        /// List of data network group with local and remote storage networks for replication data transfer.  Was added in version 3.5.0.0.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>List of data network group with local and remote storage networks for replication data transfer.  Was added in version 3.5.0.0.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="powerstore_data_network_configuration")]
        public List<PowerstoreDataNetworkGroup> PowerstoreDataNetworkConfiguration { get; set; }

        /// <summary>
        /// Localized message string corresponding to type
        /// </summary>
        /// <value>Localized message string corresponding to type</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to state
        /// </summary>
        /// <value>Localized message string corresponding to state</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to data_connection_type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to data_connection_type Was added in version 3.0.0.0.</value>

        [DataMember(Name="data_connection_type_l10n")]
        public string DataConnectionTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to data_connection_state
        /// </summary>
        /// <value>Localized message string corresponding to data_connection_state</value>

        [DataMember(Name="data_connection_state_l10n")]
        public string DataConnectionStateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to discovery_chap_mode
        /// </summary>
        /// <value>Localized message string corresponding to discovery_chap_mode</value>

        [DataMember(Name="discovery_chap_mode_l10n")]
        public string DiscoveryChapModeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to session_chap_mode
        /// </summary>
        /// <value>Localized message string corresponding to session_chap_mode</value>

        [DataMember(Name="session_chap_mode_l10n")]
        public string SessionChapModeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to data_network_latency
        /// </summary>
        /// <value>Localized message string corresponding to data_network_latency</value>

        [DataMember(Name="data_network_latency_l10n")]
        public string DataNetworkLatencyL10n { get; set; }

        /// <summary>
        /// Localized message array corresponding to capabilities Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message array corresponding to capabilities Was added in version 3.0.0.0.</value>

        [DataMember(Name="capabilities_l10n")]
        public List<string> CapabilitiesL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to file_connection_state Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to file_connection_state Was added in version 3.0.0.0.</value>

        [DataMember(Name="file_connection_state_l10n")]
        public string FileConnectionStateL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type snapshot_rule association.
        /// </summary>
        /// <value>This is the inverse of the resource type snapshot_rule association.</value>

        [DataMember(Name="snapshot_rules")]
        public List<SnapshotRuleInstance> SnapshotRules { get; set; }

        /// <summary>
        /// This is the inverse of the resource type replication_rule association.
        /// </summary>
        /// <value>This is the inverse of the resource type replication_rule association.</value>

        [DataMember(Name="replication_rules")]
        public List<ReplicationRuleInstance> ReplicationRules { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_session association.</value>

        [DataMember(Name="import_sessions")]
        public List<ImportSessionInstance> ImportSessions { get; set; }

        /// <summary>
        /// This is the inverse of the resource type storage_container_destination association.
        /// </summary>
        /// <value>This is the inverse of the resource type storage_container_destination association.</value>

        [DataMember(Name="storage_container_destinations")]
        public List<StorageContainerDestinationInstance> StorageContainerDestinations { get; set; }

        /// <summary>
        /// This is the inverse of the resource type replication_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type replication_session association.</value>

        [DataMember(Name="replication_sessions")]
        public List<ReplicationSessionInstance> ReplicationSessions { get; set; }

        /// <summary>
        /// This is the inverse of the resource type remote_snapshot_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type remote_snapshot_session association.</value>

        [DataMember(Name="remote_snapshot_sessions")]
        public List<RemoteSnapshotSessionInstance> RemoteSnapshotSessions { get; set; }

        /// <summary>
        /// This is the inverse of the resource type remote_snapshot association.
        /// </summary>
        /// <value>This is the inverse of the resource type remote_snapshot association.</value>

        [DataMember(Name="remote_snapshots")]
        public List<RemoteSnapshotInstance> RemoteSnapshots { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_universal_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_universal_volume association.</value>

        [DataMember(Name="import_universal_volumes")]
        public List<ImportUniversalVolumeInstance> ImportUniversalVolumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_universal_consistency_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_universal_consistency_group association.</value>

        [DataMember(Name="import_universal_consistency_group")]
        public List<ImportUniversalConsistencyGroupInstance> ImportUniversalConsistencyGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSystemInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ManagementAddress: ").Append(ManagementAddress).Append("\n");
            sb.Append("  ManagementPort: ").Append(ManagementPort).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  DataConnectionType: ").Append(DataConnectionType).Append("\n");
            sb.Append("  DataConnectionState: ").Append(DataConnectionState).Append("\n");
            sb.Append("  IscsiAddresses: ").Append(IscsiAddresses).Append("\n");
            sb.Append("  FcTargetWwns: ").Append(FcTargetWwns).Append("\n");
            sb.Append("  DiscoveryChapMode: ").Append(DiscoveryChapMode).Append("\n");
            sb.Append("  SessionChapMode: ").Append(SessionChapMode).Append("\n");
            sb.Append("  DataNetworkLatency: ").Append(DataNetworkLatency).Append("\n");
            sb.Append("  DataConnections: ").Append(DataConnections).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  FileConnectionAddress: ").Append(FileConnectionAddress).Append("\n");
            sb.Append("  FileConnectionState: ").Append(FileConnectionState).Append("\n");
            sb.Append("  VnxFileUsername: ").Append(VnxFileUsername).Append("\n");
            sb.Append("  PpddStorageUnitDetails: ").Append(PpddStorageUnitDetails).Append("\n");
            sb.Append("  ApplianceDetails: ").Append(ApplianceDetails).Append("\n");
            sb.Append("  UnityFileDetails: ").Append(UnityFileDetails).Append("\n");
            sb.Append("  PowerstoreDataNetworkConfiguration: ").Append(PowerstoreDataNetworkConfiguration).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  DataConnectionTypeL10n: ").Append(DataConnectionTypeL10n).Append("\n");
            sb.Append("  DataConnectionStateL10n: ").Append(DataConnectionStateL10n).Append("\n");
            sb.Append("  DiscoveryChapModeL10n: ").Append(DiscoveryChapModeL10n).Append("\n");
            sb.Append("  SessionChapModeL10n: ").Append(SessionChapModeL10n).Append("\n");
            sb.Append("  DataNetworkLatencyL10n: ").Append(DataNetworkLatencyL10n).Append("\n");
            sb.Append("  CapabilitiesL10n: ").Append(CapabilitiesL10n).Append("\n");
            sb.Append("  FileConnectionStateL10n: ").Append(FileConnectionStateL10n).Append("\n");
            sb.Append("  SnapshotRules: ").Append(SnapshotRules).Append("\n");
            sb.Append("  ReplicationRules: ").Append(ReplicationRules).Append("\n");
            sb.Append("  ImportSessions: ").Append(ImportSessions).Append("\n");
            sb.Append("  StorageContainerDestinations: ").Append(StorageContainerDestinations).Append("\n");
            sb.Append("  ReplicationSessions: ").Append(ReplicationSessions).Append("\n");
            sb.Append("  RemoteSnapshotSessions: ").Append(RemoteSnapshotSessions).Append("\n");
            sb.Append("  RemoteSnapshots: ").Append(RemoteSnapshots).Append("\n");
            sb.Append("  ImportUniversalVolumes: ").Append(ImportUniversalVolumes).Append("\n");
            sb.Append("  ImportUniversalConsistencyGroup: ").Append(ImportUniversalConsistencyGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteSystemInstance)obj);
        }

        /// <summary>
        /// Returns true if RemoteSystemInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteSystemInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSystemInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    ManagementAddress == other.ManagementAddress ||
                    ManagementAddress != null &&
                    ManagementAddress.Equals(other.ManagementAddress)
                ) && 
                (
                    ManagementPort == other.ManagementPort ||
                    ManagementPort != null &&
                    ManagementPort.Equals(other.ManagementPort)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    DataConnectionType == other.DataConnectionType ||
                    DataConnectionType != null &&
                    DataConnectionType.Equals(other.DataConnectionType)
                ) && 
                (
                    DataConnectionState == other.DataConnectionState ||
                    DataConnectionState != null &&
                    DataConnectionState.Equals(other.DataConnectionState)
                ) && 
                (
                    IscsiAddresses == other.IscsiAddresses ||
                    IscsiAddresses != null &&
                    IscsiAddresses.SequenceEqual(other.IscsiAddresses)
                ) && 
                (
                    FcTargetWwns == other.FcTargetWwns ||
                    FcTargetWwns != null &&
                    FcTargetWwns.SequenceEqual(other.FcTargetWwns)
                ) && 
                (
                    DiscoveryChapMode == other.DiscoveryChapMode ||
                    DiscoveryChapMode != null &&
                    DiscoveryChapMode.Equals(other.DiscoveryChapMode)
                ) && 
                (
                    SessionChapMode == other.SessionChapMode ||
                    SessionChapMode != null &&
                    SessionChapMode.Equals(other.SessionChapMode)
                ) && 
                (
                    DataNetworkLatency == other.DataNetworkLatency ||
                    DataNetworkLatency != null &&
                    DataNetworkLatency.Equals(other.DataNetworkLatency)
                ) && 
                (
                    DataConnections == other.DataConnections ||
                    DataConnections != null &&
                    DataConnections.SequenceEqual(other.DataConnections)
                ) && 
                (
                    Capabilities == other.Capabilities ||
                    Capabilities != null &&
                    Capabilities.SequenceEqual(other.Capabilities)
                ) && 
                (
                    FileConnectionAddress == other.FileConnectionAddress ||
                    FileConnectionAddress != null &&
                    FileConnectionAddress.Equals(other.FileConnectionAddress)
                ) && 
                (
                    FileConnectionState == other.FileConnectionState ||
                    FileConnectionState != null &&
                    FileConnectionState.Equals(other.FileConnectionState)
                ) && 
                (
                    VnxFileUsername == other.VnxFileUsername ||
                    VnxFileUsername != null &&
                    VnxFileUsername.Equals(other.VnxFileUsername)
                ) && 
                (
                    PpddStorageUnitDetails == other.PpddStorageUnitDetails ||
                    PpddStorageUnitDetails != null &&
                    PpddStorageUnitDetails.Equals(other.PpddStorageUnitDetails)
                ) && 
                (
                    ApplianceDetails == other.ApplianceDetails ||
                    ApplianceDetails != null &&
                    ApplianceDetails.SequenceEqual(other.ApplianceDetails)
                ) && 
                (
                    UnityFileDetails == other.UnityFileDetails ||
                    UnityFileDetails != null &&
                    UnityFileDetails.Equals(other.UnityFileDetails)
                ) && 
                (
                    PowerstoreDataNetworkConfiguration == other.PowerstoreDataNetworkConfiguration ||
                    PowerstoreDataNetworkConfiguration != null &&
                    PowerstoreDataNetworkConfiguration.SequenceEqual(other.PowerstoreDataNetworkConfiguration)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    DataConnectionTypeL10n == other.DataConnectionTypeL10n ||
                    DataConnectionTypeL10n != null &&
                    DataConnectionTypeL10n.Equals(other.DataConnectionTypeL10n)
                ) && 
                (
                    DataConnectionStateL10n == other.DataConnectionStateL10n ||
                    DataConnectionStateL10n != null &&
                    DataConnectionStateL10n.Equals(other.DataConnectionStateL10n)
                ) && 
                (
                    DiscoveryChapModeL10n == other.DiscoveryChapModeL10n ||
                    DiscoveryChapModeL10n != null &&
                    DiscoveryChapModeL10n.Equals(other.DiscoveryChapModeL10n)
                ) && 
                (
                    SessionChapModeL10n == other.SessionChapModeL10n ||
                    SessionChapModeL10n != null &&
                    SessionChapModeL10n.Equals(other.SessionChapModeL10n)
                ) && 
                (
                    DataNetworkLatencyL10n == other.DataNetworkLatencyL10n ||
                    DataNetworkLatencyL10n != null &&
                    DataNetworkLatencyL10n.Equals(other.DataNetworkLatencyL10n)
                ) && 
                (
                    CapabilitiesL10n == other.CapabilitiesL10n ||
                    CapabilitiesL10n != null &&
                    CapabilitiesL10n.SequenceEqual(other.CapabilitiesL10n)
                ) && 
                (
                    FileConnectionStateL10n == other.FileConnectionStateL10n ||
                    FileConnectionStateL10n != null &&
                    FileConnectionStateL10n.Equals(other.FileConnectionStateL10n)
                ) && 
                (
                    SnapshotRules == other.SnapshotRules ||
                    SnapshotRules != null &&
                    SnapshotRules.SequenceEqual(other.SnapshotRules)
                ) && 
                (
                    ReplicationRules == other.ReplicationRules ||
                    ReplicationRules != null &&
                    ReplicationRules.SequenceEqual(other.ReplicationRules)
                ) && 
                (
                    ImportSessions == other.ImportSessions ||
                    ImportSessions != null &&
                    ImportSessions.SequenceEqual(other.ImportSessions)
                ) && 
                (
                    StorageContainerDestinations == other.StorageContainerDestinations ||
                    StorageContainerDestinations != null &&
                    StorageContainerDestinations.SequenceEqual(other.StorageContainerDestinations)
                ) && 
                (
                    ReplicationSessions == other.ReplicationSessions ||
                    ReplicationSessions != null &&
                    ReplicationSessions.SequenceEqual(other.ReplicationSessions)
                ) && 
                (
                    RemoteSnapshotSessions == other.RemoteSnapshotSessions ||
                    RemoteSnapshotSessions != null &&
                    RemoteSnapshotSessions.SequenceEqual(other.RemoteSnapshotSessions)
                ) && 
                (
                    RemoteSnapshots == other.RemoteSnapshots ||
                    RemoteSnapshots != null &&
                    RemoteSnapshots.SequenceEqual(other.RemoteSnapshots)
                ) && 
                (
                    ImportUniversalVolumes == other.ImportUniversalVolumes ||
                    ImportUniversalVolumes != null &&
                    ImportUniversalVolumes.SequenceEqual(other.ImportUniversalVolumes)
                ) && 
                (
                    ImportUniversalConsistencyGroup == other.ImportUniversalConsistencyGroup ||
                    ImportUniversalConsistencyGroup != null &&
                    ImportUniversalConsistencyGroup.SequenceEqual(other.ImportUniversalConsistencyGroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (ManagementAddress != null)
                    hashCode = hashCode * 59 + ManagementAddress.GetHashCode();
                    if (ManagementPort != null)
                    hashCode = hashCode * 59 + ManagementPort.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (DataConnectionType != null)
                    hashCode = hashCode * 59 + DataConnectionType.GetHashCode();
                    if (DataConnectionState != null)
                    hashCode = hashCode * 59 + DataConnectionState.GetHashCode();
                    if (IscsiAddresses != null)
                    hashCode = hashCode * 59 + IscsiAddresses.GetHashCode();
                    if (FcTargetWwns != null)
                    hashCode = hashCode * 59 + FcTargetWwns.GetHashCode();
                    if (DiscoveryChapMode != null)
                    hashCode = hashCode * 59 + DiscoveryChapMode.GetHashCode();
                    if (SessionChapMode != null)
                    hashCode = hashCode * 59 + SessionChapMode.GetHashCode();
                    if (DataNetworkLatency != null)
                    hashCode = hashCode * 59 + DataNetworkLatency.GetHashCode();
                    if (DataConnections != null)
                    hashCode = hashCode * 59 + DataConnections.GetHashCode();
                    if (Capabilities != null)
                    hashCode = hashCode * 59 + Capabilities.GetHashCode();
                    if (FileConnectionAddress != null)
                    hashCode = hashCode * 59 + FileConnectionAddress.GetHashCode();
                    if (FileConnectionState != null)
                    hashCode = hashCode * 59 + FileConnectionState.GetHashCode();
                    if (VnxFileUsername != null)
                    hashCode = hashCode * 59 + VnxFileUsername.GetHashCode();
                    if (PpddStorageUnitDetails != null)
                    hashCode = hashCode * 59 + PpddStorageUnitDetails.GetHashCode();
                    if (ApplianceDetails != null)
                    hashCode = hashCode * 59 + ApplianceDetails.GetHashCode();
                    if (UnityFileDetails != null)
                    hashCode = hashCode * 59 + UnityFileDetails.GetHashCode();
                    if (PowerstoreDataNetworkConfiguration != null)
                    hashCode = hashCode * 59 + PowerstoreDataNetworkConfiguration.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (DataConnectionTypeL10n != null)
                    hashCode = hashCode * 59 + DataConnectionTypeL10n.GetHashCode();
                    if (DataConnectionStateL10n != null)
                    hashCode = hashCode * 59 + DataConnectionStateL10n.GetHashCode();
                    if (DiscoveryChapModeL10n != null)
                    hashCode = hashCode * 59 + DiscoveryChapModeL10n.GetHashCode();
                    if (SessionChapModeL10n != null)
                    hashCode = hashCode * 59 + SessionChapModeL10n.GetHashCode();
                    if (DataNetworkLatencyL10n != null)
                    hashCode = hashCode * 59 + DataNetworkLatencyL10n.GetHashCode();
                    if (CapabilitiesL10n != null)
                    hashCode = hashCode * 59 + CapabilitiesL10n.GetHashCode();
                    if (FileConnectionStateL10n != null)
                    hashCode = hashCode * 59 + FileConnectionStateL10n.GetHashCode();
                    if (SnapshotRules != null)
                    hashCode = hashCode * 59 + SnapshotRules.GetHashCode();
                    if (ReplicationRules != null)
                    hashCode = hashCode * 59 + ReplicationRules.GetHashCode();
                    if (ImportSessions != null)
                    hashCode = hashCode * 59 + ImportSessions.GetHashCode();
                    if (StorageContainerDestinations != null)
                    hashCode = hashCode * 59 + StorageContainerDestinations.GetHashCode();
                    if (ReplicationSessions != null)
                    hashCode = hashCode * 59 + ReplicationSessions.GetHashCode();
                    if (RemoteSnapshotSessions != null)
                    hashCode = hashCode * 59 + RemoteSnapshotSessions.GetHashCode();
                    if (RemoteSnapshots != null)
                    hashCode = hashCode * 59 + RemoteSnapshots.GetHashCode();
                    if (ImportUniversalVolumes != null)
                    hashCode = hashCode * 59 + ImportUniversalVolumes.GetHashCode();
                    if (ImportUniversalConsistencyGroup != null)
                    hashCode = hashCode * 59 + ImportUniversalConsistencyGroup.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteSystemInstance left, RemoteSystemInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteSystemInstance left, RemoteSystemInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
