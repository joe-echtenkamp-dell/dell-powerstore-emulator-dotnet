/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ReplicationRuleApiController : ControllerBase
    { 
        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query all replication rules.</remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of replication rule instance objects</response>
        [HttpGet]
        [Route("/api/rest/replication_rule")]
        [ValidateModelState]
        [SwaggerOperation("ReplicationRuleGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ReplicationRuleInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<ReplicationRuleInstance>), description: "Partial content of replication rule instance objects")]
        public virtual IActionResult ReplicationRuleGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ReplicationRuleInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<ReplicationRuleInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ReplicationRuleInstance>>(exampleJson)
            : default(List<ReplicationRuleInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Clone
        /// </summary>
        /// <remarks>Clone a replication rule. Creates an identical copy of the specified replication rule. The newly created replication rule will be a read-write, user-managed replication rule.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the replication rule to be cloned. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/replication_rule/{id}/clone")]
        [ValidateModelState]
        [SwaggerOperation("ReplicationRuleIdClonePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReplicationRuleCloneResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult ReplicationRuleIdClonePost([FromRoute][Required]string id, [FromBody]ReplicationRuleClone body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReplicationRuleCloneResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ReplicationRuleCloneResponse>(exampleJson)
            : default(ReplicationRuleCloneResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>Delete a replication rule. Deleting a replication rule is not allowed if the replication rule is associated with a protection policy that is currently assigned to one or more storage resources. </remarks>
        /// <param name="id">Unique identifier of the replication rule. name:{name} can be used instead of {id}.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpDelete]
        [Route("/api/rest/replication_rule/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReplicationRuleIdDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult ReplicationRuleIdDelete([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query a specific replication rule.</remarks>
        /// <param name="id">Unique identifier of the replication rule. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/replication_rule/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReplicationRuleIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReplicationRuleInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult ReplicationRuleIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReplicationRuleInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ReplicationRuleInstance>(exampleJson)
            : default(ReplicationRuleInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify
        /// </summary>
        /// <remarks>Modify a replication rule.  If the replication rule is associated with a policy that is currently applied to a storage resource, the modified rule is immediately applied to the associated storage resource. However, changing the remote_system_id is not allowed if the replication rule is included in a policy that is currently applied to a storage resource.  To change the remote_system_id in this case, please follow one of the following procedures:   * Unassign the protection policy from the relevant storage resources, modify the replication rule, and then re-assign the protection policy to the relevant storage resources.   * Remove the replication rule from the protection policies that use it, modify the replication rule, and then add it back to the relevant protection policies.  When modifying RPO of a replication rule to Zero, the remote system must also support RPO value of Zero, meaning it has the capability of Synchronous_Block_Replication. Zero RPO is only supported for volumes, write-order-consistent volume groups, and NAS servers. If a replication rule is used by storage resources through one or more protection policies, RPO of a replication rule can only be modified to Zero when the system supports RPO Zero for all current associated storage resources. Modification of the &#39;rpo&#39; value to or from Zero (sync replication) is not allowed when the rule is in use by a policy assigned to a NAS server. Create a new replication rule and protection policy instead. </remarks>
        /// <param name="id">Unique identifier of the replication rule. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPatch]
        [Route("/api/rest/replication_rule/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReplicationRuleIdPatch")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult ReplicationRuleIdPatch([FromRoute][Required]string id, [FromBody]ReplicationRuleModify body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>Create a new replication rule. </remarks>
        /// <param name="body"></param>
        /// <response code="201">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/replication_rule")]
        [ValidateModelState]
        [SwaggerOperation("ReplicationRulePost")]
        [SwaggerResponse(statusCode: 201, type: typeof(CreateResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult ReplicationRulePost([FromBody]ReplicationRuleCreate body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(CreateResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateResponse>(exampleJson)
            : default(CreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
