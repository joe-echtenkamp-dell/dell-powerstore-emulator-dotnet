/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Parameters to create a remote system. 
    /// </summary>
    [DataContract]
    public partial class RemoteSystemCreate : IEquatable<RemoteSystemCreate>
    { 
        /// <summary>
        /// Management address of the remote system instance. IPv4 and FQDN is supported for non-PowerStore remote systems. IPv4, IPv6 and FQDN are supported for DataDomain and PowerStore remote systems. 
        /// </summary>
        /// <value>Management address of the remote system instance. IPv4 and FQDN is supported for non-PowerStore remote systems. IPv4, IPv6 and FQDN are supported for DataDomain and PowerStore remote systems. </value>

        [DataMember(Name="management_address")]
        public string ManagementAddress { get; set; }

        /// <summary>
        /// Management port is applicable only for creating PowerMax/VMAX remote system.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Management port is applicable only for creating PowerMax/VMAX remote system.  Was added in version 3.0.0.0.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="management_port")]
        public int? ManagementPort { get; set; }

        /// <summary>
        /// User-specified name of the remote system. Used only for non-PowerStore systems. This value must contain 128 or fewer printable Unicode characters. 
        /// </summary>
        /// <value>User-specified name of the remote system. Used only for non-PowerStore systems. This value must contain 128 or fewer printable Unicode characters. </value>

        [MaxLength(256)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// User-specified description of the remote system. 
        /// </summary>
        /// <value>User-specified description of the remote system. </value>

        [MaxLength(256)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public RemoteSystemTypeEnum? Type { get; set; }

        /// <summary>
        /// Username used to access the remote system. Used only for PowerProtect DD and non-PowerStore systems. For PowerProtect DD remote systems, provide a user with role &#39;user&#39;. 
        /// </summary>
        /// <value>Username used to access the remote system. Used only for PowerProtect DD and non-PowerStore systems. For PowerProtect DD remote systems, provide a user with role &#39;user&#39;. </value>

        [DataMember(Name="remote_username")]
        public string RemoteUsername { get; set; }

        /// <summary>
        /// Password used to access the remote system. Used only for PowerProtect DD and non-PowerStore systems. 
        /// </summary>
        /// <value>Password used to access the remote system. Used only for PowerProtect DD and non-PowerStore systems. </value>

        [DataMember(Name="remote_password")]
        public string RemotePassword { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="data_connection_type")]
        public DataConnectionTypeEnum? DataConnectionType { get; set; }

        /// <summary>
        /// iSCSI target IP addresses for the data connection to the remote system. Must be specified when creating a non-PowerStore remote system. 
        /// </summary>
        /// <value>iSCSI target IP addresses for the data connection to the remote system. Must be specified when creating a non-PowerStore remote system. </value>

        [DataMember(Name="iscsi_addresses")]
        public List<string> IscsiAddresses { get; set; }

        /// <summary>
        /// Gets or Sets UniversalDetails
        /// </summary>

        [DataMember(Name="universal_details")]
        public RemoteSystemCreateUniversalDetails UniversalDetails { get; set; }

        /// <summary>
        /// Gets or Sets ImportChapInfo
        /// </summary>

        [DataMember(Name="import_chap_info")]
        public ChapCredentialsInstance ImportChapInfo { get; set; }

        /// <summary>
        /// Gets or Sets DiscoveryChapMode
        /// </summary>

        [DataMember(Name="discovery_chap_mode")]
        public RemoteSystemChapModeEnum? DiscoveryChapMode { get; set; }

        /// <summary>
        /// Gets or Sets SessionChapMode
        /// </summary>

        [DataMember(Name="session_chap_mode")]
        public RemoteSystemChapModeEnum? SessionChapMode { get; set; }

        /// <summary>
        /// Gets or Sets DataNetworkLatency
        /// </summary>

        [DataMember(Name="data_network_latency")]
        public RemoteSystemLatencyEnum? DataNetworkLatency { get; set; }

        /// <summary>
        /// Control station address of the VNX to establish file management connection from PowerStore. Not applicable for other remote systems. This address can be modified. Provide IP aliasing address to transparently handle connection failures from primary to secondary control station.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Control station address of the VNX to establish file management connection from PowerStore. Not applicable for other remote systems. This address can be modified. Provide IP aliasing address to transparently handle connection failures from primary to secondary control station.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="file_connection_address")]
        public string FileConnectionAddress { get; set; }

        /// <summary>
        /// User-specified VNX NAS administrator username. nasadmin account is preferred for file import.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>User-specified VNX NAS administrator username. nasadmin account is preferred for file import.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="vnx_file_username")]
        public string VnxFileUsername { get; set; }

        /// <summary>
        /// Password used to access the control station.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Password used to access the control station.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="vnx_file_password")]
        public string VnxFilePassword { get; set; }

        /// <summary>
        ///  Was added in version 3.5.0.0.
        /// </summary>
        /// <value> Was added in version 3.5.0.0.</value>

        [DataMember(Name="ppdd_storage_unit_details")]
        public PpddStorageUnitDetailsCreate PpddStorageUnitDetails { get; set; }

        /// <summary>
        /// Unity file details.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unity file details.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="unity_file_details")]
        public UnityFileDetailsCreate UnityFileDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSystemCreate {\n");
            sb.Append("  ManagementAddress: ").Append(ManagementAddress).Append("\n");
            sb.Append("  ManagementPort: ").Append(ManagementPort).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RemoteUsername: ").Append(RemoteUsername).Append("\n");
            sb.Append("  RemotePassword: ").Append(RemotePassword).Append("\n");
            sb.Append("  DataConnectionType: ").Append(DataConnectionType).Append("\n");
            sb.Append("  IscsiAddresses: ").Append(IscsiAddresses).Append("\n");
            sb.Append("  UniversalDetails: ").Append(UniversalDetails).Append("\n");
            sb.Append("  ImportChapInfo: ").Append(ImportChapInfo).Append("\n");
            sb.Append("  DiscoveryChapMode: ").Append(DiscoveryChapMode).Append("\n");
            sb.Append("  SessionChapMode: ").Append(SessionChapMode).Append("\n");
            sb.Append("  DataNetworkLatency: ").Append(DataNetworkLatency).Append("\n");
            sb.Append("  FileConnectionAddress: ").Append(FileConnectionAddress).Append("\n");
            sb.Append("  VnxFileUsername: ").Append(VnxFileUsername).Append("\n");
            sb.Append("  VnxFilePassword: ").Append(VnxFilePassword).Append("\n");
            sb.Append("  PpddStorageUnitDetails: ").Append(PpddStorageUnitDetails).Append("\n");
            sb.Append("  UnityFileDetails: ").Append(UnityFileDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteSystemCreate)obj);
        }

        /// <summary>
        /// Returns true if RemoteSystemCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteSystemCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSystemCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ManagementAddress == other.ManagementAddress ||
                    ManagementAddress != null &&
                    ManagementAddress.Equals(other.ManagementAddress)
                ) && 
                (
                    ManagementPort == other.ManagementPort ||
                    ManagementPort != null &&
                    ManagementPort.Equals(other.ManagementPort)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    RemoteUsername == other.RemoteUsername ||
                    RemoteUsername != null &&
                    RemoteUsername.Equals(other.RemoteUsername)
                ) && 
                (
                    RemotePassword == other.RemotePassword ||
                    RemotePassword != null &&
                    RemotePassword.Equals(other.RemotePassword)
                ) && 
                (
                    DataConnectionType == other.DataConnectionType ||
                    DataConnectionType != null &&
                    DataConnectionType.Equals(other.DataConnectionType)
                ) && 
                (
                    IscsiAddresses == other.IscsiAddresses ||
                    IscsiAddresses != null &&
                    IscsiAddresses.SequenceEqual(other.IscsiAddresses)
                ) && 
                (
                    UniversalDetails == other.UniversalDetails ||
                    UniversalDetails != null &&
                    UniversalDetails.Equals(other.UniversalDetails)
                ) && 
                (
                    ImportChapInfo == other.ImportChapInfo ||
                    ImportChapInfo != null &&
                    ImportChapInfo.Equals(other.ImportChapInfo)
                ) && 
                (
                    DiscoveryChapMode == other.DiscoveryChapMode ||
                    DiscoveryChapMode != null &&
                    DiscoveryChapMode.Equals(other.DiscoveryChapMode)
                ) && 
                (
                    SessionChapMode == other.SessionChapMode ||
                    SessionChapMode != null &&
                    SessionChapMode.Equals(other.SessionChapMode)
                ) && 
                (
                    DataNetworkLatency == other.DataNetworkLatency ||
                    DataNetworkLatency != null &&
                    DataNetworkLatency.Equals(other.DataNetworkLatency)
                ) && 
                (
                    FileConnectionAddress == other.FileConnectionAddress ||
                    FileConnectionAddress != null &&
                    FileConnectionAddress.Equals(other.FileConnectionAddress)
                ) && 
                (
                    VnxFileUsername == other.VnxFileUsername ||
                    VnxFileUsername != null &&
                    VnxFileUsername.Equals(other.VnxFileUsername)
                ) && 
                (
                    VnxFilePassword == other.VnxFilePassword ||
                    VnxFilePassword != null &&
                    VnxFilePassword.Equals(other.VnxFilePassword)
                ) && 
                (
                    PpddStorageUnitDetails == other.PpddStorageUnitDetails ||
                    PpddStorageUnitDetails != null &&
                    PpddStorageUnitDetails.Equals(other.PpddStorageUnitDetails)
                ) && 
                (
                    UnityFileDetails == other.UnityFileDetails ||
                    UnityFileDetails != null &&
                    UnityFileDetails.Equals(other.UnityFileDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ManagementAddress != null)
                    hashCode = hashCode * 59 + ManagementAddress.GetHashCode();
                    if (ManagementPort != null)
                    hashCode = hashCode * 59 + ManagementPort.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (RemoteUsername != null)
                    hashCode = hashCode * 59 + RemoteUsername.GetHashCode();
                    if (RemotePassword != null)
                    hashCode = hashCode * 59 + RemotePassword.GetHashCode();
                    if (DataConnectionType != null)
                    hashCode = hashCode * 59 + DataConnectionType.GetHashCode();
                    if (IscsiAddresses != null)
                    hashCode = hashCode * 59 + IscsiAddresses.GetHashCode();
                    if (UniversalDetails != null)
                    hashCode = hashCode * 59 + UniversalDetails.GetHashCode();
                    if (ImportChapInfo != null)
                    hashCode = hashCode * 59 + ImportChapInfo.GetHashCode();
                    if (DiscoveryChapMode != null)
                    hashCode = hashCode * 59 + DiscoveryChapMode.GetHashCode();
                    if (SessionChapMode != null)
                    hashCode = hashCode * 59 + SessionChapMode.GetHashCode();
                    if (DataNetworkLatency != null)
                    hashCode = hashCode * 59 + DataNetworkLatency.GetHashCode();
                    if (FileConnectionAddress != null)
                    hashCode = hashCode * 59 + FileConnectionAddress.GetHashCode();
                    if (VnxFileUsername != null)
                    hashCode = hashCode * 59 + VnxFileUsername.GetHashCode();
                    if (VnxFilePassword != null)
                    hashCode = hashCode * 59 + VnxFilePassword.GetHashCode();
                    if (PpddStorageUnitDetails != null)
                    hashCode = hashCode * 59 + PpddStorageUnitDetails.GetHashCode();
                    if (UnityFileDetails != null)
                    hashCode = hashCode * 59 + UnityFileDetails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteSystemCreate left, RemoteSystemCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteSystemCreate left, RemoteSystemCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
