/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Ethernet front-end port configuration for all cluster nodes. Values was added in 3.0.0.0: is_in_use, permanent_mac_address. This resource type has queriable associations from appliance, hardware, bond, fsn, eth_port, ip_port
    /// </summary>
    [DataContract]
    public partial class EthPortInstance : IEquatable<EthPortInstance>
    { 
        /// <summary>
        /// Ethernet port instance identifier.
        /// </summary>
        /// <value>Ethernet port instance identifier.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Ethernet port name.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Ethernet port name.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The id of the appliance containing the port.
        /// </summary>
        /// <value>The id of the appliance containing the port.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Unique identifier of the hardware instance of type &#39;Node&#39; containing the port.
        /// </summary>
        /// <value>Unique identifier of the hardware instance of type &#39;Node&#39; containing the port.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// Unique identifier of the bond containing the port, or null if the port is not in a bond.
        /// </summary>
        /// <value>Unique identifier of the bond containing the port, or null if the port is not in a bond.</value>

        [DataMember(Name="bond_id")]
        public string BondId { get; set; }

        /// <summary>
        /// Identifier of the associated fail-safe network, or null if the port is not in an FSN. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Identifier of the associated fail-safe network, or null if the port is not in an FSN. Was added in version 3.5.0.0.</value>

        [DataMember(Name="fsn_id")]
        public string FsnId { get; set; }

        /// <summary>
        /// Ethernet port current MAC address.
        /// </summary>
        /// <value>Ethernet port current MAC address.</value>

        [DataMember(Name="mac_address")]
        public string MacAddress { get; set; }

        /// <summary>
        /// Ethernet port permanent MAC address assigned at the moment of the manufacture. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Ethernet port permanent MAC address assigned at the moment of the manufacture. Was added in version 3.0.0.0.</value>

        [DataMember(Name="permanent_mac_address")]
        public string PermanentMacAddress { get; set; }

        /// <summary>
        /// Indicates whether the Ethernet port&#39;s link is up. Values are: * true - Link is up. * false - Link is down. 
        /// </summary>
        /// <value>Indicates whether the Ethernet port&#39;s link is up. Values are: * true - Link is up. * false - Link is down. </value>

        [DataMember(Name="is_link_up")]
        public bool? IsLinkUp { get; set; }

        /// <summary>
        /// Indicates whether the port is in use. Values are: * true - Is in use. * false - Is not in use.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Indicates whether the port is in use. Values are: * true - Is in use. * false - Is not in use.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_in_use")]
        public bool? IsInUse { get; set; }

        /// <summary>
        /// The list of supported transmission speeds for Ethernet port.
        /// </summary>
        /// <value>The list of supported transmission speeds for Ethernet port.</value>

        [DataMember(Name="supported_speeds")]
        public List<EthPortSpeedEnum> SupportedSpeeds { get; set; }

        /// <summary>
        /// Gets or Sets CurrentSpeed
        /// </summary>

        [DataMember(Name="current_speed")]
        public EthPortSpeedEnum? CurrentSpeed { get; set; }

        /// <summary>
        /// Gets or Sets RequestedSpeed
        /// </summary>

        [DataMember(Name="requested_speed")]
        public EthPortSpeedEnum? RequestedSpeed { get; set; }

        /// <summary>
        /// The Maximum transmission unit (MTU) packet size that the Ethernet port can transmit. The fabric MTU can be set to any value in the range [1500-9000]. The network MTU can be set to any value in the range [1280-9000]. The network MTU must be less than or equal to the current fabric MTU. 
        /// </summary>
        /// <value>The Maximum transmission unit (MTU) packet size that the Ethernet port can transmit. The fabric MTU can be set to any value in the range [1500-9000]. The network MTU can be set to any value in the range [1280-9000]. The network MTU must be less than or equal to the current fabric MTU. </value>

        [Range(1280, 9000)]
        [DataMember(Name="current_mtu")]
        public int? CurrentMtu { get; set; }

        /// <summary>
        /// Unique identifier of the hardware instance of type &#39;SFP&#39; (Small Form-factor Pluggable) inserted into the port. 
        /// </summary>
        /// <value>Unique identifier of the hardware instance of type &#39;SFP&#39; (Small Form-factor Pluggable) inserted into the port. </value>

        [DataMember(Name="sfp_id")]
        public string SfpId { get; set; }

        /// <summary>
        /// Unique identifier of the hardware instance of type &#39;IO_Module&#39; handling the port. Was deprecated in version 2.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the hardware instance of type &#39;IO_Module&#39; handling the port. Was deprecated in version 2.0.0.0.</value>

        [DataMember(Name="io_module_id")]
        public string IoModuleId { get; set; }

        /// <summary>
        /// Unique identifier of the parent hardware instance handling the port. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the parent hardware instance handling the port. Was added in version 2.0.0.0.</value>

        [DataMember(Name="hardware_parent_id")]
        public string HardwareParentId { get; set; }

        /// <summary>
        /// The index of the Ethernet port in IO module.
        /// </summary>
        /// <value>The index of the Ethernet port in IO module.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="port_index")]
        public int? PortIndex { get; set; }

        /// <summary>
        /// Gets or Sets PortConnectorType
        /// </summary>

        [DataMember(Name="port_connector_type")]
        public FrontEndPortConnectionTypeEnum? PortConnectorType { get; set; }

        /// <summary>
        /// Unique identifier of the partner port instance.
        /// </summary>
        /// <value>Unique identifier of the partner port instance.</value>

        [DataMember(Name="partner_id")]
        public string PartnerId { get; set; }

        /// <summary>
        /// Indicates whether the port is managed by a hypervisor.
        /// </summary>
        /// <value>Indicates whether the port is managed by a hypervisor.</value>

        [DataMember(Name="is_hypervisor_managed")]
        public bool? IsHypervisorManaged { get; set; }

        /// <summary>
        /// Hypervisor front-end port name capabilities.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Hypervisor front-end port name capabilities.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="hypervisor_port_name")]
        public string HypervisorPortName { get; set; }

        /// <summary>
        /// Name of the virtual switch associated with the hypervisor port.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the virtual switch associated with the hypervisor port.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="hypervisor_vswitch_name")]
        public string HypervisorVswitchName { get; set; }

        /// <summary>
        /// Unique identifier of the virtual switch port associated with the hypervisor port.
        /// </summary>
        /// <value>Unique identifier of the virtual switch port associated with the hypervisor port.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="hypervisor_port_id")]
        public int? HypervisorPortId { get; set; }

        /// <summary>
        /// Unique identifier of the virtual switch associated with the hypervisor port.
        /// </summary>
        /// <value>Unique identifier of the virtual switch associated with the hypervisor port.</value>

        [DataMember(Name="hypervisor_vswitch_id")]
        public string HypervisorVswitchId { get; set; }

        /// <summary>
        /// Indicator of the stale state of the port. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Indicator of the stale state of the port. Was added in version 2.0.0.0.</value>

        [DataMember(Name="stale_state")]
        public PortStaleStateEnum? StaleState { get; set; }

        /// <summary>
        /// Localized message array corresponding to supported_speeds
        /// </summary>
        /// <value>Localized message array corresponding to supported_speeds</value>

        [DataMember(Name="supported_speeds_l10n")]
        public List<string> SupportedSpeedsL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to current_speed
        /// </summary>
        /// <value>Localized message string corresponding to current_speed</value>

        [DataMember(Name="current_speed_l10n")]
        public string CurrentSpeedL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to requested_speed
        /// </summary>
        /// <value>Localized message string corresponding to requested_speed</value>

        [DataMember(Name="requested_speed_l10n")]
        public string RequestedSpeedL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to port_connector_type
        /// </summary>
        /// <value>Localized message string corresponding to port_connector_type</value>

        [DataMember(Name="port_connector_type_l10n")]
        public string PortConnectorTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to stale_state Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to stale_state Was added in version 2.0.0.0.</value>

        [DataMember(Name="stale_state_l10n")]
        public string StaleStateL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type ip_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type ip_port association.</value>

        [DataMember(Name="ip_ports")]
        public List<IpPortInstance> IpPorts { get; set; }

        /// <summary>
        /// This is the embeddable reference form of appliance_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of appliance_id attribute.</value>

        [DataMember(Name="appliance")]
        public ApplianceInstance Appliance { get; set; }

        /// <summary>
        /// This is the embeddable reference form of node_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of node_id attribute.</value>

        [DataMember(Name="node")]
        public HardwareInstance Node { get; set; }

        /// <summary>
        /// This is the embeddable reference form of bond_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of bond_id attribute.</value>

        [DataMember(Name="bond")]
        public BondInstance Bond { get; set; }

        /// <summary>
        /// This is the embeddable reference form of fsn_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of fsn_id attribute.</value>

        [DataMember(Name="fsn")]
        public FsnInstance Fsn { get; set; }

        /// <summary>
        /// This is the embeddable reference form of sfp_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of sfp_id attribute.</value>

        [DataMember(Name="sfp")]
        public HardwareInstance Sfp { get; set; }

        /// <summary>
        /// This is the embeddable reference form of io_module_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of io_module_id attribute.</value>

        [DataMember(Name="io_module")]
        public HardwareInstance IoModule { get; set; }

        /// <summary>
        /// This is the embeddable reference form of hardware_parent_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of hardware_parent_id attribute.</value>

        [DataMember(Name="hardware_parent")]
        public HardwareInstance HardwareParent { get; set; }

        /// <summary>
        /// This is the embeddable reference form of partner_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of partner_id attribute.</value>

        [DataMember(Name="partner")]
        public EthPortInstance Partner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EthPortInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  BondId: ").Append(BondId).Append("\n");
            sb.Append("  FsnId: ").Append(FsnId).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  PermanentMacAddress: ").Append(PermanentMacAddress).Append("\n");
            sb.Append("  IsLinkUp: ").Append(IsLinkUp).Append("\n");
            sb.Append("  IsInUse: ").Append(IsInUse).Append("\n");
            sb.Append("  SupportedSpeeds: ").Append(SupportedSpeeds).Append("\n");
            sb.Append("  CurrentSpeed: ").Append(CurrentSpeed).Append("\n");
            sb.Append("  RequestedSpeed: ").Append(RequestedSpeed).Append("\n");
            sb.Append("  CurrentMtu: ").Append(CurrentMtu).Append("\n");
            sb.Append("  SfpId: ").Append(SfpId).Append("\n");
            sb.Append("  IoModuleId: ").Append(IoModuleId).Append("\n");
            sb.Append("  HardwareParentId: ").Append(HardwareParentId).Append("\n");
            sb.Append("  PortIndex: ").Append(PortIndex).Append("\n");
            sb.Append("  PortConnectorType: ").Append(PortConnectorType).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  IsHypervisorManaged: ").Append(IsHypervisorManaged).Append("\n");
            sb.Append("  HypervisorPortName: ").Append(HypervisorPortName).Append("\n");
            sb.Append("  HypervisorVswitchName: ").Append(HypervisorVswitchName).Append("\n");
            sb.Append("  HypervisorPortId: ").Append(HypervisorPortId).Append("\n");
            sb.Append("  HypervisorVswitchId: ").Append(HypervisorVswitchId).Append("\n");
            sb.Append("  StaleState: ").Append(StaleState).Append("\n");
            sb.Append("  SupportedSpeedsL10n: ").Append(SupportedSpeedsL10n).Append("\n");
            sb.Append("  CurrentSpeedL10n: ").Append(CurrentSpeedL10n).Append("\n");
            sb.Append("  RequestedSpeedL10n: ").Append(RequestedSpeedL10n).Append("\n");
            sb.Append("  PortConnectorTypeL10n: ").Append(PortConnectorTypeL10n).Append("\n");
            sb.Append("  StaleStateL10n: ").Append(StaleStateL10n).Append("\n");
            sb.Append("  IpPorts: ").Append(IpPorts).Append("\n");
            sb.Append("  Appliance: ").Append(Appliance).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  Bond: ").Append(Bond).Append("\n");
            sb.Append("  Fsn: ").Append(Fsn).Append("\n");
            sb.Append("  Sfp: ").Append(Sfp).Append("\n");
            sb.Append("  IoModule: ").Append(IoModule).Append("\n");
            sb.Append("  HardwareParent: ").Append(HardwareParent).Append("\n");
            sb.Append("  Partner: ").Append(Partner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EthPortInstance)obj);
        }

        /// <summary>
        /// Returns true if EthPortInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of EthPortInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EthPortInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    BondId == other.BondId ||
                    BondId != null &&
                    BondId.Equals(other.BondId)
                ) && 
                (
                    FsnId == other.FsnId ||
                    FsnId != null &&
                    FsnId.Equals(other.FsnId)
                ) && 
                (
                    MacAddress == other.MacAddress ||
                    MacAddress != null &&
                    MacAddress.Equals(other.MacAddress)
                ) && 
                (
                    PermanentMacAddress == other.PermanentMacAddress ||
                    PermanentMacAddress != null &&
                    PermanentMacAddress.Equals(other.PermanentMacAddress)
                ) && 
                (
                    IsLinkUp == other.IsLinkUp ||
                    IsLinkUp != null &&
                    IsLinkUp.Equals(other.IsLinkUp)
                ) && 
                (
                    IsInUse == other.IsInUse ||
                    IsInUse != null &&
                    IsInUse.Equals(other.IsInUse)
                ) && 
                (
                    SupportedSpeeds == other.SupportedSpeeds ||
                    SupportedSpeeds != null &&
                    SupportedSpeeds.SequenceEqual(other.SupportedSpeeds)
                ) && 
                (
                    CurrentSpeed == other.CurrentSpeed ||
                    CurrentSpeed != null &&
                    CurrentSpeed.Equals(other.CurrentSpeed)
                ) && 
                (
                    RequestedSpeed == other.RequestedSpeed ||
                    RequestedSpeed != null &&
                    RequestedSpeed.Equals(other.RequestedSpeed)
                ) && 
                (
                    CurrentMtu == other.CurrentMtu ||
                    CurrentMtu != null &&
                    CurrentMtu.Equals(other.CurrentMtu)
                ) && 
                (
                    SfpId == other.SfpId ||
                    SfpId != null &&
                    SfpId.Equals(other.SfpId)
                ) && 
                (
                    IoModuleId == other.IoModuleId ||
                    IoModuleId != null &&
                    IoModuleId.Equals(other.IoModuleId)
                ) && 
                (
                    HardwareParentId == other.HardwareParentId ||
                    HardwareParentId != null &&
                    HardwareParentId.Equals(other.HardwareParentId)
                ) && 
                (
                    PortIndex == other.PortIndex ||
                    PortIndex != null &&
                    PortIndex.Equals(other.PortIndex)
                ) && 
                (
                    PortConnectorType == other.PortConnectorType ||
                    PortConnectorType != null &&
                    PortConnectorType.Equals(other.PortConnectorType)
                ) && 
                (
                    PartnerId == other.PartnerId ||
                    PartnerId != null &&
                    PartnerId.Equals(other.PartnerId)
                ) && 
                (
                    IsHypervisorManaged == other.IsHypervisorManaged ||
                    IsHypervisorManaged != null &&
                    IsHypervisorManaged.Equals(other.IsHypervisorManaged)
                ) && 
                (
                    HypervisorPortName == other.HypervisorPortName ||
                    HypervisorPortName != null &&
                    HypervisorPortName.Equals(other.HypervisorPortName)
                ) && 
                (
                    HypervisorVswitchName == other.HypervisorVswitchName ||
                    HypervisorVswitchName != null &&
                    HypervisorVswitchName.Equals(other.HypervisorVswitchName)
                ) && 
                (
                    HypervisorPortId == other.HypervisorPortId ||
                    HypervisorPortId != null &&
                    HypervisorPortId.Equals(other.HypervisorPortId)
                ) && 
                (
                    HypervisorVswitchId == other.HypervisorVswitchId ||
                    HypervisorVswitchId != null &&
                    HypervisorVswitchId.Equals(other.HypervisorVswitchId)
                ) && 
                (
                    StaleState == other.StaleState ||
                    StaleState != null &&
                    StaleState.Equals(other.StaleState)
                ) && 
                (
                    SupportedSpeedsL10n == other.SupportedSpeedsL10n ||
                    SupportedSpeedsL10n != null &&
                    SupportedSpeedsL10n.SequenceEqual(other.SupportedSpeedsL10n)
                ) && 
                (
                    CurrentSpeedL10n == other.CurrentSpeedL10n ||
                    CurrentSpeedL10n != null &&
                    CurrentSpeedL10n.Equals(other.CurrentSpeedL10n)
                ) && 
                (
                    RequestedSpeedL10n == other.RequestedSpeedL10n ||
                    RequestedSpeedL10n != null &&
                    RequestedSpeedL10n.Equals(other.RequestedSpeedL10n)
                ) && 
                (
                    PortConnectorTypeL10n == other.PortConnectorTypeL10n ||
                    PortConnectorTypeL10n != null &&
                    PortConnectorTypeL10n.Equals(other.PortConnectorTypeL10n)
                ) && 
                (
                    StaleStateL10n == other.StaleStateL10n ||
                    StaleStateL10n != null &&
                    StaleStateL10n.Equals(other.StaleStateL10n)
                ) && 
                (
                    IpPorts == other.IpPorts ||
                    IpPorts != null &&
                    IpPorts.SequenceEqual(other.IpPorts)
                ) && 
                (
                    Appliance == other.Appliance ||
                    Appliance != null &&
                    Appliance.Equals(other.Appliance)
                ) && 
                (
                    Node == other.Node ||
                    Node != null &&
                    Node.Equals(other.Node)
                ) && 
                (
                    Bond == other.Bond ||
                    Bond != null &&
                    Bond.Equals(other.Bond)
                ) && 
                (
                    Fsn == other.Fsn ||
                    Fsn != null &&
                    Fsn.Equals(other.Fsn)
                ) && 
                (
                    Sfp == other.Sfp ||
                    Sfp != null &&
                    Sfp.Equals(other.Sfp)
                ) && 
                (
                    IoModule == other.IoModule ||
                    IoModule != null &&
                    IoModule.Equals(other.IoModule)
                ) && 
                (
                    HardwareParent == other.HardwareParent ||
                    HardwareParent != null &&
                    HardwareParent.Equals(other.HardwareParent)
                ) && 
                (
                    Partner == other.Partner ||
                    Partner != null &&
                    Partner.Equals(other.Partner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (BondId != null)
                    hashCode = hashCode * 59 + BondId.GetHashCode();
                    if (FsnId != null)
                    hashCode = hashCode * 59 + FsnId.GetHashCode();
                    if (MacAddress != null)
                    hashCode = hashCode * 59 + MacAddress.GetHashCode();
                    if (PermanentMacAddress != null)
                    hashCode = hashCode * 59 + PermanentMacAddress.GetHashCode();
                    if (IsLinkUp != null)
                    hashCode = hashCode * 59 + IsLinkUp.GetHashCode();
                    if (IsInUse != null)
                    hashCode = hashCode * 59 + IsInUse.GetHashCode();
                    if (SupportedSpeeds != null)
                    hashCode = hashCode * 59 + SupportedSpeeds.GetHashCode();
                    if (CurrentSpeed != null)
                    hashCode = hashCode * 59 + CurrentSpeed.GetHashCode();
                    if (RequestedSpeed != null)
                    hashCode = hashCode * 59 + RequestedSpeed.GetHashCode();
                    if (CurrentMtu != null)
                    hashCode = hashCode * 59 + CurrentMtu.GetHashCode();
                    if (SfpId != null)
                    hashCode = hashCode * 59 + SfpId.GetHashCode();
                    if (IoModuleId != null)
                    hashCode = hashCode * 59 + IoModuleId.GetHashCode();
                    if (HardwareParentId != null)
                    hashCode = hashCode * 59 + HardwareParentId.GetHashCode();
                    if (PortIndex != null)
                    hashCode = hashCode * 59 + PortIndex.GetHashCode();
                    if (PortConnectorType != null)
                    hashCode = hashCode * 59 + PortConnectorType.GetHashCode();
                    if (PartnerId != null)
                    hashCode = hashCode * 59 + PartnerId.GetHashCode();
                    if (IsHypervisorManaged != null)
                    hashCode = hashCode * 59 + IsHypervisorManaged.GetHashCode();
                    if (HypervisorPortName != null)
                    hashCode = hashCode * 59 + HypervisorPortName.GetHashCode();
                    if (HypervisorVswitchName != null)
                    hashCode = hashCode * 59 + HypervisorVswitchName.GetHashCode();
                    if (HypervisorPortId != null)
                    hashCode = hashCode * 59 + HypervisorPortId.GetHashCode();
                    if (HypervisorVswitchId != null)
                    hashCode = hashCode * 59 + HypervisorVswitchId.GetHashCode();
                    if (StaleState != null)
                    hashCode = hashCode * 59 + StaleState.GetHashCode();
                    if (SupportedSpeedsL10n != null)
                    hashCode = hashCode * 59 + SupportedSpeedsL10n.GetHashCode();
                    if (CurrentSpeedL10n != null)
                    hashCode = hashCode * 59 + CurrentSpeedL10n.GetHashCode();
                    if (RequestedSpeedL10n != null)
                    hashCode = hashCode * 59 + RequestedSpeedL10n.GetHashCode();
                    if (PortConnectorTypeL10n != null)
                    hashCode = hashCode * 59 + PortConnectorTypeL10n.GetHashCode();
                    if (StaleStateL10n != null)
                    hashCode = hashCode * 59 + StaleStateL10n.GetHashCode();
                    if (IpPorts != null)
                    hashCode = hashCode * 59 + IpPorts.GetHashCode();
                    if (Appliance != null)
                    hashCode = hashCode * 59 + Appliance.GetHashCode();
                    if (Node != null)
                    hashCode = hashCode * 59 + Node.GetHashCode();
                    if (Bond != null)
                    hashCode = hashCode * 59 + Bond.GetHashCode();
                    if (Fsn != null)
                    hashCode = hashCode * 59 + Fsn.GetHashCode();
                    if (Sfp != null)
                    hashCode = hashCode * 59 + Sfp.GetHashCode();
                    if (IoModule != null)
                    hashCode = hashCode * 59 + IoModule.GetHashCode();
                    if (HardwareParent != null)
                    hashCode = hashCode * 59 + HardwareParent.GetHashCode();
                    if (Partner != null)
                    hashCode = hashCode * 59 + Partner.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EthPortInstance left, EthPortInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EthPortInstance left, EthPortInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
