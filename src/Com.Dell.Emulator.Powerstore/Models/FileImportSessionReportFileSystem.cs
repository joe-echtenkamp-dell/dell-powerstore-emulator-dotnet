/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// The properties of a filesystem. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileImportSessionReportFileSystem : IEquatable<FileImportSessionReportFileSystem>
    { 
        /// <summary>
        /// The name of the Filesystem on the destination matching the name of the mountpoint on the source.
        /// </summary>
        /// <value>The name of the Filesystem on the destination matching the name of the mountpoint on the source.</value>

        [DataMember(Name="destination_file_system_name")]
        public string DestinationFileSystemName { get; set; }

        /// <summary>
        /// The name of the Filesystem on the source.
        /// </summary>
        /// <value>The name of the Filesystem on the source.</value>

        [DataMember(Name="source_file_system_name")]
        public string SourceFileSystemName { get; set; }

        /// <summary>
        /// Unique identifier of the destination Filesystem.
        /// </summary>
        /// <value>Unique identifier of the destination Filesystem.</value>

        [DataMember(Name="destination_file_system_id")]
        public string DestinationFileSystemId { get; set; }

        /// <summary>
        /// The size in bytes, of the Filesystem on the destination system to be used instead of the source Filesystem size if set. This is an optional parameter.
        /// </summary>
        /// <value>The size in bytes, of the Filesystem on the destination system to be used instead of the source Filesystem size if set. This is an optional parameter.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="destination_size_total")]
        public long? DestinationSizeTotal { get; set; }

        /// <summary>
        /// Indicates whether File Level Retention feature is enabled on the Filesystem.
        /// </summary>
        /// <value>Indicates whether File Level Retention feature is enabled on the Filesystem.</value>

        [DataMember(Name="flr_enabled")]
        public bool? FlrEnabled { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public FileSystemImportState State { get; set; }

        /// <summary>
        /// The progress percentage of the Filesystem data copy.
        /// </summary>
        /// <value>The progress percentage of the Filesystem data copy.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="progress_percentage")]
        public int? ProgressPercentage { get; set; }

        /// <summary>
        /// The estimated remaining time in UTC for the Filesystem data copy to complete.
        /// </summary>
        /// <value>The estimated remaining time in UTC for the Filesystem data copy to complete.</value>

        [DataMember(Name="estimated_completion_timestamp")]
        public DateTime? EstimatedCompletionTimestamp { get; set; }

        /// <summary>
        /// The size of the Filesystem on the source system.
        /// </summary>
        /// <value>The size of the Filesystem on the source system.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="source_size_total")]
        public long? SourceSizeTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileImportSessionReportFileSystem {\n");
            sb.Append("  DestinationFileSystemName: ").Append(DestinationFileSystemName).Append("\n");
            sb.Append("  SourceFileSystemName: ").Append(SourceFileSystemName).Append("\n");
            sb.Append("  DestinationFileSystemId: ").Append(DestinationFileSystemId).Append("\n");
            sb.Append("  DestinationSizeTotal: ").Append(DestinationSizeTotal).Append("\n");
            sb.Append("  FlrEnabled: ").Append(FlrEnabled).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ProgressPercentage: ").Append(ProgressPercentage).Append("\n");
            sb.Append("  EstimatedCompletionTimestamp: ").Append(EstimatedCompletionTimestamp).Append("\n");
            sb.Append("  SourceSizeTotal: ").Append(SourceSizeTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileImportSessionReportFileSystem)obj);
        }

        /// <summary>
        /// Returns true if FileImportSessionReportFileSystem instances are equal
        /// </summary>
        /// <param name="other">Instance of FileImportSessionReportFileSystem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileImportSessionReportFileSystem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DestinationFileSystemName == other.DestinationFileSystemName ||
                    DestinationFileSystemName != null &&
                    DestinationFileSystemName.Equals(other.DestinationFileSystemName)
                ) && 
                (
                    SourceFileSystemName == other.SourceFileSystemName ||
                    SourceFileSystemName != null &&
                    SourceFileSystemName.Equals(other.SourceFileSystemName)
                ) && 
                (
                    DestinationFileSystemId == other.DestinationFileSystemId ||
                    DestinationFileSystemId != null &&
                    DestinationFileSystemId.Equals(other.DestinationFileSystemId)
                ) && 
                (
                    DestinationSizeTotal == other.DestinationSizeTotal ||
                    DestinationSizeTotal != null &&
                    DestinationSizeTotal.Equals(other.DestinationSizeTotal)
                ) && 
                (
                    FlrEnabled == other.FlrEnabled ||
                    FlrEnabled != null &&
                    FlrEnabled.Equals(other.FlrEnabled)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    ProgressPercentage == other.ProgressPercentage ||
                    ProgressPercentage != null &&
                    ProgressPercentage.Equals(other.ProgressPercentage)
                ) && 
                (
                    EstimatedCompletionTimestamp == other.EstimatedCompletionTimestamp ||
                    EstimatedCompletionTimestamp != null &&
                    EstimatedCompletionTimestamp.Equals(other.EstimatedCompletionTimestamp)
                ) && 
                (
                    SourceSizeTotal == other.SourceSizeTotal ||
                    SourceSizeTotal != null &&
                    SourceSizeTotal.Equals(other.SourceSizeTotal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DestinationFileSystemName != null)
                    hashCode = hashCode * 59 + DestinationFileSystemName.GetHashCode();
                    if (SourceFileSystemName != null)
                    hashCode = hashCode * 59 + SourceFileSystemName.GetHashCode();
                    if (DestinationFileSystemId != null)
                    hashCode = hashCode * 59 + DestinationFileSystemId.GetHashCode();
                    if (DestinationSizeTotal != null)
                    hashCode = hashCode * 59 + DestinationSizeTotal.GetHashCode();
                    if (FlrEnabled != null)
                    hashCode = hashCode * 59 + FlrEnabled.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (ProgressPercentage != null)
                    hashCode = hashCode * 59 + ProgressPercentage.GetHashCode();
                    if (EstimatedCompletionTimestamp != null)
                    hashCode = hashCode * 59 + EstimatedCompletionTimestamp.GetHashCode();
                    if (SourceSizeTotal != null)
                    hashCode = hashCode * 59 + SourceSizeTotal.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileImportSessionReportFileSystem left, FileImportSessionReportFileSystem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileImportSessionReportFileSystem left, FileImportSessionReportFileSystem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
