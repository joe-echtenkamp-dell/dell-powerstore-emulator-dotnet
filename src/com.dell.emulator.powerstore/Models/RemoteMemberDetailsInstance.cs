/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Details of remote member snapshots. Was added in version 3.5.0.0.
    /// </summary>
    [DataContract]
    public partial class RemoteMemberDetailsInstance : IEquatable<RemoteMemberDetailsInstance>
    { 
        /// <summary>
        /// The member volume id.
        /// </summary>
        /// <value>The member volume id.</value>

        [DataMember(Name="volume_id")]
        public string VolumeId { get; set; }

        /// <summary>
        /// This indicates whether member volume is in recycle bin. If member volume is deleted this will be false.
        /// </summary>
        /// <value>This indicates whether member volume is in recycle bin. If member volume is deleted this will be false.</value>

        [DataMember(Name="is_source_in_recycle_bin")]
        public bool? IsSourceInRecycleBin { get; set; }

        /// <summary>
        /// The remote backup id of the member.
        /// </summary>
        /// <value>The remote backup id of the member.</value>

        [DataMember(Name="remote_identifier")]
        public string RemoteIdentifier { get; set; }

        /// <summary>
        /// The name of the member snapshot.
        /// </summary>
        /// <value>The name of the member snapshot.</value>

        [DataMember(Name="snapshot_name")]
        public string SnapshotName { get; set; }

        /// <summary>
        /// The size of the member snapshot in bytes.
        /// </summary>
        /// <value>The size of the member snapshot in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="snapshot_size")]
        public long? SnapshotSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteMemberDetailsInstance {\n");
            sb.Append("  VolumeId: ").Append(VolumeId).Append("\n");
            sb.Append("  IsSourceInRecycleBin: ").Append(IsSourceInRecycleBin).Append("\n");
            sb.Append("  RemoteIdentifier: ").Append(RemoteIdentifier).Append("\n");
            sb.Append("  SnapshotName: ").Append(SnapshotName).Append("\n");
            sb.Append("  SnapshotSize: ").Append(SnapshotSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteMemberDetailsInstance)obj);
        }

        /// <summary>
        /// Returns true if RemoteMemberDetailsInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteMemberDetailsInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteMemberDetailsInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VolumeId == other.VolumeId ||
                    VolumeId != null &&
                    VolumeId.Equals(other.VolumeId)
                ) && 
                (
                    IsSourceInRecycleBin == other.IsSourceInRecycleBin ||
                    IsSourceInRecycleBin != null &&
                    IsSourceInRecycleBin.Equals(other.IsSourceInRecycleBin)
                ) && 
                (
                    RemoteIdentifier == other.RemoteIdentifier ||
                    RemoteIdentifier != null &&
                    RemoteIdentifier.Equals(other.RemoteIdentifier)
                ) && 
                (
                    SnapshotName == other.SnapshotName ||
                    SnapshotName != null &&
                    SnapshotName.Equals(other.SnapshotName)
                ) && 
                (
                    SnapshotSize == other.SnapshotSize ||
                    SnapshotSize != null &&
                    SnapshotSize.Equals(other.SnapshotSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VolumeId != null)
                    hashCode = hashCode * 59 + VolumeId.GetHashCode();
                    if (IsSourceInRecycleBin != null)
                    hashCode = hashCode * 59 + IsSourceInRecycleBin.GetHashCode();
                    if (RemoteIdentifier != null)
                    hashCode = hashCode * 59 + RemoteIdentifier.GetHashCode();
                    if (SnapshotName != null)
                    hashCode = hashCode * 59 + SnapshotName.GetHashCode();
                    if (SnapshotSize != null)
                    hashCode = hashCode * 59 + SnapshotSize.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteMemberDetailsInstance left, RemoteMemberDetailsInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteMemberDetailsInstance left, RemoteMemberDetailsInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
