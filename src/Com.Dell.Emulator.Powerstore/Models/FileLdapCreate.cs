/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Arguments for the create operation.
    /// </summary>
    [DataContract]
    public partial class FileLdapCreate : IEquatable<FileLdapCreate>
    { 
        /// <summary>
        /// Unique identifier of the associated NAS Server instance that will use this LDAP object. Only one LDAP object per NAS Server is supported. name:{name} can be used instead of {id}. For example: &#39;nas_server_id&#39;:&#39;name:nas_server_name&#39;
        /// </summary>
        /// <value>Unique identifier of the associated NAS Server instance that will use this LDAP object. Only one LDAP object per NAS Server is supported. name:{name} can be used instead of {id}. For example: &#39;nas_server_id&#39;:&#39;name:nas_server_name&#39;</value>
        [Required]
        
        [DataMember(Name="nas_server_id")]
        public string NasServerId { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationType
        /// </summary>
        [Required]
        
        [DataMember(Name="authentication_type")]
        public FileLDAPAuthenticationTypeEnum? AuthenticationType { get; set; }

        /// <summary>
        /// Name of the LDAP base DN.  Base Distinguished Name (BDN) of the root of the LDAP directory tree. The appliance uses the DN to bind to the LDAP service and locate in the LDAP directory tree to begin a search for information.   The base DN can be expressed as a fully-qualified domain name or in X.509 format by using the attribute dc&#x3D;. For example, if the fully-qualified domain name is mycompany.com, the base DN is expressed as dc&#x3D;mycompany,dc&#x3D;com.
        /// </summary>
        /// <value>Name of the LDAP base DN.  Base Distinguished Name (BDN) of the root of the LDAP directory tree. The appliance uses the DN to bind to the LDAP service and locate in the LDAP directory tree to begin a search for information.   The base DN can be expressed as a fully-qualified domain name or in X.509 format by using the attribute dc&#x3D;. For example, if the fully-qualified domain name is mycompany.com, the base DN is expressed as dc&#x3D;mycompany,dc&#x3D;com.</value>
        [Required]
        
        [StringLength(255, MinimumLength=3)]
        [DataMember(Name="base_DN")]
        public string BaseDN { get; set; }

        /// <summary>
        /// The list of LDAP server IP addresses. The addresses may be IPv4 or IPv6.
        /// </summary>
        /// <value>The list of LDAP server IP addresses. The addresses may be IPv4 or IPv6.</value>
        [Required]
        
        [DataMember(Name="addresses")]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// The TCP/IP port used by the NAS Server to connect to the LDAP servers. The default port number for LDAP is 389 and LDAPS is 636.
        /// </summary>
        /// <value>The TCP/IP port used by the NAS Server to connect to the LDAP servers. The default port number for LDAP is 389 and LDAPS is 636.</value>
        [Required]
        
        [Range(1, 65535)]
        [DataMember(Name="port_number")]
        public int? PortNumber { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>

        [DataMember(Name="protocol")]
        public FileLDAPProtocolEnum? Protocol { get; set; }

        /// <summary>
        /// Indicates whether Certification Authority certificate is used to verify the LDAP server certificate for secure SSL connections. Values are:  * true - verifies LDAP server&#39;s certificate.  * false - doesn&#39;t verify LDAP server&#39;s certificate. 
        /// </summary>
        /// <value>Indicates whether Certification Authority certificate is used to verify the LDAP server certificate for secure SSL connections. Values are:  * true - verifies LDAP server&#39;s certificate.  * false - doesn&#39;t verify LDAP server&#39;s certificate. </value>

        [DataMember(Name="is_verify_server_certificate")]
        public bool? IsVerifyServerCertificate { get; set; }

        /// <summary>
        /// For an iPlanet LDAP server, specifies the DN of the entry with the configuration profile.
        /// </summary>
        /// <value>For an iPlanet LDAP server, specifies the DN of the entry with the configuration profile.</value>

        [StringLength(255, MinimumLength=0)]
        [DataMember(Name="profile_DN")]
        public string ProfileDN { get; set; }

        /// <summary>
        /// Bind Distinguished Name (DN) to be used when binding.
        /// </summary>
        /// <value>Bind Distinguished Name (DN) to be used when binding.</value>

        [StringLength(1023, MinimumLength=0)]
        [DataMember(Name="bind_DN")]
        public string BindDN { get; set; }

        /// <summary>
        /// The associated password to be used when binding to the server.
        /// </summary>
        /// <value>The associated password to be used when binding to the server.</value>

        [StringLength(1023, MinimumLength=0)]
        [DataMember(Name="bind_password")]
        public string BindPassword { get; set; }

        /// <summary>
        /// Indicates whether SMB authentication is used to authenticate to the LDAP server. Values are:     * true - Indicates that the SMB settings are used for Kerberos authentication.     * false - Indicates that Kerberos uses its own settings. 
        /// </summary>
        /// <value>Indicates whether SMB authentication is used to authenticate to the LDAP server. Values are:     * true - Indicates that the SMB settings are used for Kerberos authentication.     * false - Indicates that Kerberos uses its own settings. </value>

        [DataMember(Name="is_smb_account_used")]
        public bool? IsSmbAccountUsed { get; set; }

        /// <summary>
        /// Specifies the principal name for Kerberos authentication.
        /// </summary>
        /// <value>Specifies the principal name for Kerberos authentication.</value>

        [StringLength(1023, MinimumLength=0)]
        [DataMember(Name="principal")]
        public string Principal { get; set; }

        /// <summary>
        /// Specifies the realm name for Kerberos authentication.
        /// </summary>
        /// <value>Specifies the realm name for Kerberos authentication.</value>

        [StringLength(255, MinimumLength=0)]
        [DataMember(Name="realm")]
        public string Realm { get; set; }

        /// <summary>
        /// The associated password for Kerberos authentication.
        /// </summary>
        /// <value>The associated password for Kerberos authentication.</value>

        [StringLength(1023, MinimumLength=0)]
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileLdapCreate {\n");
            sb.Append("  NasServerId: ").Append(NasServerId).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  BaseDN: ").Append(BaseDN).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  PortNumber: ").Append(PortNumber).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  IsVerifyServerCertificate: ").Append(IsVerifyServerCertificate).Append("\n");
            sb.Append("  ProfileDN: ").Append(ProfileDN).Append("\n");
            sb.Append("  BindDN: ").Append(BindDN).Append("\n");
            sb.Append("  BindPassword: ").Append(BindPassword).Append("\n");
            sb.Append("  IsSmbAccountUsed: ").Append(IsSmbAccountUsed).Append("\n");
            sb.Append("  Principal: ").Append(Principal).Append("\n");
            sb.Append("  Realm: ").Append(Realm).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileLdapCreate)obj);
        }

        /// <summary>
        /// Returns true if FileLdapCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of FileLdapCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileLdapCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NasServerId == other.NasServerId ||
                    NasServerId != null &&
                    NasServerId.Equals(other.NasServerId)
                ) && 
                (
                    AuthenticationType == other.AuthenticationType ||
                    AuthenticationType != null &&
                    AuthenticationType.Equals(other.AuthenticationType)
                ) && 
                (
                    BaseDN == other.BaseDN ||
                    BaseDN != null &&
                    BaseDN.Equals(other.BaseDN)
                ) && 
                (
                    Addresses == other.Addresses ||
                    Addresses != null &&
                    Addresses.SequenceEqual(other.Addresses)
                ) && 
                (
                    PortNumber == other.PortNumber ||
                    PortNumber != null &&
                    PortNumber.Equals(other.PortNumber)
                ) && 
                (
                    Protocol == other.Protocol ||
                    Protocol != null &&
                    Protocol.Equals(other.Protocol)
                ) && 
                (
                    IsVerifyServerCertificate == other.IsVerifyServerCertificate ||
                    IsVerifyServerCertificate != null &&
                    IsVerifyServerCertificate.Equals(other.IsVerifyServerCertificate)
                ) && 
                (
                    ProfileDN == other.ProfileDN ||
                    ProfileDN != null &&
                    ProfileDN.Equals(other.ProfileDN)
                ) && 
                (
                    BindDN == other.BindDN ||
                    BindDN != null &&
                    BindDN.Equals(other.BindDN)
                ) && 
                (
                    BindPassword == other.BindPassword ||
                    BindPassword != null &&
                    BindPassword.Equals(other.BindPassword)
                ) && 
                (
                    IsSmbAccountUsed == other.IsSmbAccountUsed ||
                    IsSmbAccountUsed != null &&
                    IsSmbAccountUsed.Equals(other.IsSmbAccountUsed)
                ) && 
                (
                    Principal == other.Principal ||
                    Principal != null &&
                    Principal.Equals(other.Principal)
                ) && 
                (
                    Realm == other.Realm ||
                    Realm != null &&
                    Realm.Equals(other.Realm)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NasServerId != null)
                    hashCode = hashCode * 59 + NasServerId.GetHashCode();
                    if (AuthenticationType != null)
                    hashCode = hashCode * 59 + AuthenticationType.GetHashCode();
                    if (BaseDN != null)
                    hashCode = hashCode * 59 + BaseDN.GetHashCode();
                    if (Addresses != null)
                    hashCode = hashCode * 59 + Addresses.GetHashCode();
                    if (PortNumber != null)
                    hashCode = hashCode * 59 + PortNumber.GetHashCode();
                    if (Protocol != null)
                    hashCode = hashCode * 59 + Protocol.GetHashCode();
                    if (IsVerifyServerCertificate != null)
                    hashCode = hashCode * 59 + IsVerifyServerCertificate.GetHashCode();
                    if (ProfileDN != null)
                    hashCode = hashCode * 59 + ProfileDN.GetHashCode();
                    if (BindDN != null)
                    hashCode = hashCode * 59 + BindDN.GetHashCode();
                    if (BindPassword != null)
                    hashCode = hashCode * 59 + BindPassword.GetHashCode();
                    if (IsSmbAccountUsed != null)
                    hashCode = hashCode * 59 + IsSmbAccountUsed.GetHashCode();
                    if (Principal != null)
                    hashCode = hashCode * 59 + Principal.GetHashCode();
                    if (Realm != null)
                    hashCode = hashCode * 59 + Realm.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileLdapCreate left, FileLdapCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileLdapCreate left, FileLdapCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
