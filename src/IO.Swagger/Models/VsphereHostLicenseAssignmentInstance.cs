/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Internal ESXi host license assignment information. Was added in version 3.0.0.0. This resource type has queriable association from vsphere_host
    /// </summary>
    [DataContract]
    public partial class VsphereHostLicenseAssignmentInstance : IEquatable<VsphereHostLicenseAssignmentInstance>
    { 
        /// <summary>
        /// Unique identifier of the vsphere_host_license_assignment instance.
        /// </summary>
        /// <value>Unique identifier of the vsphere_host_license_assignment instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier of the vsphere_host instance.
        /// </summary>
        /// <value>Unique identifier of the vsphere_host instance.</value>

        [DataMember(Name="vsphere_host_id")]
        public string VsphereHostId { get; set; }

        /// <summary>
        /// Obfuscated key of the license.
        /// </summary>
        /// <value>Obfuscated key of the license.</value>

        [DataMember(Name="license_key")]
        public string LicenseKey { get; set; }

        /// <summary>
        /// License full name.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>License full name.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// License type.
        /// </summary>
        /// <value>License type.</value>

        [DataMember(Name="edition_key")]
        public string EditionKey { get; set; }

        /// <summary>
        /// License expiration date.
        /// </summary>
        /// <value>License expiration date.</value>

        [DataMember(Name="expiration_date")]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// This is the embeddable reference form of vsphere_host_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of vsphere_host_id attribute.</value>

        [DataMember(Name="vsphere_host")]
        public VsphereHostInstance VsphereHost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VsphereHostLicenseAssignmentInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VsphereHostId: ").Append(VsphereHostId).Append("\n");
            sb.Append("  LicenseKey: ").Append(LicenseKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EditionKey: ").Append(EditionKey).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  VsphereHost: ").Append(VsphereHost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VsphereHostLicenseAssignmentInstance)obj);
        }

        /// <summary>
        /// Returns true if VsphereHostLicenseAssignmentInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of VsphereHostLicenseAssignmentInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VsphereHostLicenseAssignmentInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    VsphereHostId == other.VsphereHostId ||
                    VsphereHostId != null &&
                    VsphereHostId.Equals(other.VsphereHostId)
                ) && 
                (
                    LicenseKey == other.LicenseKey ||
                    LicenseKey != null &&
                    LicenseKey.Equals(other.LicenseKey)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    EditionKey == other.EditionKey ||
                    EditionKey != null &&
                    EditionKey.Equals(other.EditionKey)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    VsphereHost == other.VsphereHost ||
                    VsphereHost != null &&
                    VsphereHost.Equals(other.VsphereHost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (VsphereHostId != null)
                    hashCode = hashCode * 59 + VsphereHostId.GetHashCode();
                    if (LicenseKey != null)
                    hashCode = hashCode * 59 + LicenseKey.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (EditionKey != null)
                    hashCode = hashCode * 59 + EditionKey.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (VsphereHost != null)
                    hashCode = hashCode * 59 + VsphereHost.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VsphereHostLicenseAssignmentInstance left, VsphereHostLicenseAssignmentInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VsphereHostLicenseAssignmentInstance left, VsphereHostLicenseAssignmentInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
