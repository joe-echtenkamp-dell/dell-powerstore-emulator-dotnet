/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Storage resource location history. All entries are kept indefinitely and are removed when the resource object is deleted. 
    /// </summary>
    [DataContract]
    public partial class LocationHistoryInstance : IEquatable<LocationHistoryInstance>
    { 
        /// <summary>
        /// Unique identifier of the appliance from which the volume was relocated. 
        /// </summary>
        /// <value>Unique identifier of the appliance from which the volume was relocated. </value>

        [DataMember(Name="from_appliance_id")]
        public string FromApplianceId { get; set; }

        /// <summary>
        /// Unique identifier of the appliance to which the volume was relocated.
        /// </summary>
        /// <value>Unique identifier of the appliance to which the volume was relocated.</value>

        [DataMember(Name="to_appliance_id")]
        public string ToApplianceId { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>

        [DataMember(Name="reason")]
        public LocationHistoryReasonEnum? Reason { get; set; }

        /// <summary>
        /// Time when the storage resource location changed.
        /// </summary>
        /// <value>Time when the storage resource location changed.</value>

        [DataMember(Name="migrated_on")]
        public DateTime? MigratedOn { get; set; }

        /// <summary>
        /// Localized message string corresponding to reason
        /// </summary>
        /// <value>Localized message string corresponding to reason</value>

        [DataMember(Name="reason_l10n")]
        public string ReasonL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationHistoryInstance {\n");
            sb.Append("  FromApplianceId: ").Append(FromApplianceId).Append("\n");
            sb.Append("  ToApplianceId: ").Append(ToApplianceId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  MigratedOn: ").Append(MigratedOn).Append("\n");
            sb.Append("  ReasonL10n: ").Append(ReasonL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LocationHistoryInstance)obj);
        }

        /// <summary>
        /// Returns true if LocationHistoryInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of LocationHistoryInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationHistoryInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FromApplianceId == other.FromApplianceId ||
                    FromApplianceId != null &&
                    FromApplianceId.Equals(other.FromApplianceId)
                ) && 
                (
                    ToApplianceId == other.ToApplianceId ||
                    ToApplianceId != null &&
                    ToApplianceId.Equals(other.ToApplianceId)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) && 
                (
                    MigratedOn == other.MigratedOn ||
                    MigratedOn != null &&
                    MigratedOn.Equals(other.MigratedOn)
                ) && 
                (
                    ReasonL10n == other.ReasonL10n ||
                    ReasonL10n != null &&
                    ReasonL10n.Equals(other.ReasonL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FromApplianceId != null)
                    hashCode = hashCode * 59 + FromApplianceId.GetHashCode();
                    if (ToApplianceId != null)
                    hashCode = hashCode * 59 + ToApplianceId.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (MigratedOn != null)
                    hashCode = hashCode * 59 + MigratedOn.GetHashCode();
                    if (ReasonL10n != null)
                    hashCode = hashCode * 59 + ReasonL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LocationHistoryInstance left, LocationHistoryInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LocationHistoryInstance left, LocationHistoryInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
