/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// An instance of an XtremIO volume Was added in version 1.0.2. This resource type has queriable associations from import_xtremio, import_xtremio_consistency_group
    /// </summary>
    [DataContract]
    public partial class ImportXtremioVolumeInstance : IEquatable<ImportXtremioVolumeInstance>
    { 
        /// <summary>
        /// Unique identifier of the XtremIO volume.
        /// </summary>
        /// <value>Unique identifier of the XtremIO volume.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// World Wide Name (WWN) of the XtremIO volume.
        /// </summary>
        /// <value>World Wide Name (WWN) of the XtremIO volume.</value>

        [DataMember(Name="wwn")]
        public string Wwn { get; set; }

        /// <summary>
        /// Name of the XtremIO volume.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the XtremIO volume.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Size of the XtremIO volume, in bytes.
        /// </summary>
        /// <value>Size of the XtremIO volume, in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="size")]
        public long? Size { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>

        [DataMember(Name="severity")]
        public XtremIOObjectSeverityEnum? Severity { get; set; }

        /// <summary>
        /// Gets or Sets Certainty
        /// </summary>

        [DataMember(Name="certainty")]
        public XtremIOCertaintyEnum? Certainty { get; set; }

        /// <summary>
        /// Indicates whether the XtremIO volume is a read only volume.
        /// </summary>
        /// <value>Indicates whether the XtremIO volume is a read only volume.</value>

        [DataMember(Name="is_read_only")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Indicates whether the XtremIO volume is a replication destination.
        /// </summary>
        /// <value>Indicates whether the XtremIO volume is a replication destination.</value>

        [DataMember(Name="is_replication_destination")]
        public bool? IsReplicationDestination { get; set; }

        /// <summary>
        /// Indicates the reason when the volume is not importable. If the value is not Ready, the volume is not importable. 
        /// </summary>
        /// <value>Indicates the reason when the volume is not importable. If the value is not Ready, the volume is not importable. </value>

        [DataMember(Name="importable_criteria")]
        public VolumeImportableCriteriaEnum? ImportableCriteria { get; set; }

        /// <summary>
        /// Unique identifier of the XtremIO storage system to which the XtremIO volume belongs. 
        /// </summary>
        /// <value>Unique identifier of the XtremIO storage system to which the XtremIO volume belongs. </value>

        [DataMember(Name="import_xtremio_id")]
        public string ImportXtremioId { get; set; }

        /// <summary>
        /// Unique identifier of the consistency group to which the XtremIO volume belongs. This value is null if the volume does not belong to a consistency group or a volume belongs to multiple consistency groups. The volume that belongs to multiple consistency groups will be imported as an individual volume and the attribute import_xtremio_consistency_group_names contains the names of the consistency groups of which the volume is a member. 
        /// </summary>
        /// <value>Unique identifier of the consistency group to which the XtremIO volume belongs. This value is null if the volume does not belong to a consistency group or a volume belongs to multiple consistency groups. The volume that belongs to multiple consistency groups will be imported as an individual volume and the attribute import_xtremio_consistency_group_names contains the names of the consistency groups of which the volume is a member. </value>

        [DataMember(Name="import_xtremio_consistency_group_id")]
        public string ImportXtremioConsistencyGroupId { get; set; }

        /// <summary>
        /// Names of the consistency groups of which the volume is a member, if the volume belong to multiple consistency groups. The attribute will be empty for a volume that is part of a single consistency group. 
        /// </summary>
        /// <value>Names of the consistency groups of which the volume is a member, if the volume belong to multiple consistency groups. The attribute will be empty for a volume that is part of a single consistency group. </value>

        [DataMember(Name="import_xtremio_consistency_group_names")]
        public List<string> ImportXtremioConsistencyGroupNames { get; set; }

        /// <summary>
        /// Localized message string corresponding to severity Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to severity Was added in version 1.0.2.</value>

        [DataMember(Name="severity_l10n")]
        public string SeverityL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to certainty Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to certainty Was added in version 1.0.2.</value>

        [DataMember(Name="certainty_l10n")]
        public string CertaintyL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to importable_criteria Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to importable_criteria Was added in version 1.0.2.</value>

        [DataMember(Name="importable_criteria_l10n")]
        public string ImportableCriteriaL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of import_xtremio_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of import_xtremio_id attribute.</value>

        [DataMember(Name="import_xtremio")]
        public ImportXtremioInstance ImportXtremio { get; set; }

        /// <summary>
        /// This is the embeddable reference form of import_xtremio_consistency_group_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of import_xtremio_consistency_group_id attribute.</value>

        [DataMember(Name="import_xtremio_consistency_group")]
        public ImportXtremioConsistencyGroupInstance ImportXtremioConsistencyGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportXtremioVolumeInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Wwn: ").Append(Wwn).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Certainty: ").Append(Certainty).Append("\n");
            sb.Append("  IsReadOnly: ").Append(IsReadOnly).Append("\n");
            sb.Append("  IsReplicationDestination: ").Append(IsReplicationDestination).Append("\n");
            sb.Append("  ImportableCriteria: ").Append(ImportableCriteria).Append("\n");
            sb.Append("  ImportXtremioId: ").Append(ImportXtremioId).Append("\n");
            sb.Append("  ImportXtremioConsistencyGroupId: ").Append(ImportXtremioConsistencyGroupId).Append("\n");
            sb.Append("  ImportXtremioConsistencyGroupNames: ").Append(ImportXtremioConsistencyGroupNames).Append("\n");
            sb.Append("  SeverityL10n: ").Append(SeverityL10n).Append("\n");
            sb.Append("  CertaintyL10n: ").Append(CertaintyL10n).Append("\n");
            sb.Append("  ImportableCriteriaL10n: ").Append(ImportableCriteriaL10n).Append("\n");
            sb.Append("  ImportXtremio: ").Append(ImportXtremio).Append("\n");
            sb.Append("  ImportXtremioConsistencyGroup: ").Append(ImportXtremioConsistencyGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportXtremioVolumeInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportXtremioVolumeInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportXtremioVolumeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportXtremioVolumeInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Wwn == other.Wwn ||
                    Wwn != null &&
                    Wwn.Equals(other.Wwn)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    Severity == other.Severity ||
                    Severity != null &&
                    Severity.Equals(other.Severity)
                ) && 
                (
                    Certainty == other.Certainty ||
                    Certainty != null &&
                    Certainty.Equals(other.Certainty)
                ) && 
                (
                    IsReadOnly == other.IsReadOnly ||
                    IsReadOnly != null &&
                    IsReadOnly.Equals(other.IsReadOnly)
                ) && 
                (
                    IsReplicationDestination == other.IsReplicationDestination ||
                    IsReplicationDestination != null &&
                    IsReplicationDestination.Equals(other.IsReplicationDestination)
                ) && 
                (
                    ImportableCriteria == other.ImportableCriteria ||
                    ImportableCriteria != null &&
                    ImportableCriteria.Equals(other.ImportableCriteria)
                ) && 
                (
                    ImportXtremioId == other.ImportXtremioId ||
                    ImportXtremioId != null &&
                    ImportXtremioId.Equals(other.ImportXtremioId)
                ) && 
                (
                    ImportXtremioConsistencyGroupId == other.ImportXtremioConsistencyGroupId ||
                    ImportXtremioConsistencyGroupId != null &&
                    ImportXtremioConsistencyGroupId.Equals(other.ImportXtremioConsistencyGroupId)
                ) && 
                (
                    ImportXtremioConsistencyGroupNames == other.ImportXtremioConsistencyGroupNames ||
                    ImportXtremioConsistencyGroupNames != null &&
                    ImportXtremioConsistencyGroupNames.SequenceEqual(other.ImportXtremioConsistencyGroupNames)
                ) && 
                (
                    SeverityL10n == other.SeverityL10n ||
                    SeverityL10n != null &&
                    SeverityL10n.Equals(other.SeverityL10n)
                ) && 
                (
                    CertaintyL10n == other.CertaintyL10n ||
                    CertaintyL10n != null &&
                    CertaintyL10n.Equals(other.CertaintyL10n)
                ) && 
                (
                    ImportableCriteriaL10n == other.ImportableCriteriaL10n ||
                    ImportableCriteriaL10n != null &&
                    ImportableCriteriaL10n.Equals(other.ImportableCriteriaL10n)
                ) && 
                (
                    ImportXtremio == other.ImportXtremio ||
                    ImportXtremio != null &&
                    ImportXtremio.Equals(other.ImportXtremio)
                ) && 
                (
                    ImportXtremioConsistencyGroup == other.ImportXtremioConsistencyGroup ||
                    ImportXtremioConsistencyGroup != null &&
                    ImportXtremioConsistencyGroup.Equals(other.ImportXtremioConsistencyGroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Wwn != null)
                    hashCode = hashCode * 59 + Wwn.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (Severity != null)
                    hashCode = hashCode * 59 + Severity.GetHashCode();
                    if (Certainty != null)
                    hashCode = hashCode * 59 + Certainty.GetHashCode();
                    if (IsReadOnly != null)
                    hashCode = hashCode * 59 + IsReadOnly.GetHashCode();
                    if (IsReplicationDestination != null)
                    hashCode = hashCode * 59 + IsReplicationDestination.GetHashCode();
                    if (ImportableCriteria != null)
                    hashCode = hashCode * 59 + ImportableCriteria.GetHashCode();
                    if (ImportXtremioId != null)
                    hashCode = hashCode * 59 + ImportXtremioId.GetHashCode();
                    if (ImportXtremioConsistencyGroupId != null)
                    hashCode = hashCode * 59 + ImportXtremioConsistencyGroupId.GetHashCode();
                    if (ImportXtremioConsistencyGroupNames != null)
                    hashCode = hashCode * 59 + ImportXtremioConsistencyGroupNames.GetHashCode();
                    if (SeverityL10n != null)
                    hashCode = hashCode * 59 + SeverityL10n.GetHashCode();
                    if (CertaintyL10n != null)
                    hashCode = hashCode * 59 + CertaintyL10n.GetHashCode();
                    if (ImportableCriteriaL10n != null)
                    hashCode = hashCode * 59 + ImportableCriteriaL10n.GetHashCode();
                    if (ImportXtremio != null)
                    hashCode = hashCode * 59 + ImportXtremio.GetHashCode();
                    if (ImportXtremioConsistencyGroup != null)
                    hashCode = hashCode * 59 + ImportXtremioConsistencyGroup.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportXtremioVolumeInstance left, ImportXtremioVolumeInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportXtremioVolumeInstance left, ImportXtremioVolumeInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
