/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Hardware component information. This resource type has queriable associations from hardware, appliance, fc_port, sas_port, eth_port, eth_be_port
    /// </summary>
    [DataContract]
    public partial class HardwareInstance : IEquatable<HardwareInstance>
    { 
        /// <summary>
        /// The unique id of the component.
        /// </summary>
        /// <value>The unique id of the component.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The name of the component.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>The name of the component.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Hardware component type.
        /// </summary>
        /// <value>Hardware component type.</value>

        [DataMember(Name="type")]
        public HardwareTypeEnum? Type { get; set; }

        /// <summary>
        /// Life cycle state of the component.
        /// </summary>
        /// <value>Life cycle state of the component.</value>

        [DataMember(Name="lifecycle_state")]
        public HardwareLifecycleStateEnum? LifecycleState { get; set; }

        /// <summary>
        /// The id of the component&#39;s parent, or null if this component is at the top of the parent hierarchy. 
        /// </summary>
        /// <value>The id of the component&#39;s parent, or null if this component is at the top of the parent hierarchy. </value>

        [DataMember(Name="parent_id")]
        public string ParentId { get; set; }

        /// <summary>
        /// The id of the component&#39;s associated appliance.
        /// </summary>
        /// <value>The id of the component&#39;s associated appliance.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// The slot or location of the component.
        /// </summary>
        /// <value>The slot or location of the component.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="slot")]
        public int? Slot { get; set; }

        /// <summary>
        /// The part number of the component.
        /// </summary>
        /// <value>The part number of the component.</value>

        [DataMember(Name="part_number")]
        public string PartNumber { get; set; }

        /// <summary>
        /// The serial number of the component.
        /// </summary>
        /// <value>The serial number of the component.</value>

        [DataMember(Name="serial_number")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Indicator of the state of the component status LED.
        /// </summary>
        /// <value>Indicator of the state of the component status LED.</value>

        [DataMember(Name="status_led_state")]
        public HardwareStatusLEDStateEnum? StatusLedState { get; set; }

        /// <summary>
        /// Indicator of whether a component is location marked or not.
        /// </summary>
        /// <value>Indicator of whether a component is location marked or not.</value>

        [DataMember(Name="is_marked")]
        public bool? IsMarked { get; set; }

        /// <summary>
        /// Information describing what this hardware component can be upgraded to. If there are no valid upgrades available for this component, an empty list is returned.  Was added in version 3.6.0.0.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Information describing what this hardware component can be upgraded to. If there are no valid upgrades available for this component, an empty list is returned.  Was added in version 3.6.0.0.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="valid_upgrades")]
        public List<ValidUpgradeInstance> ValidUpgrades { get; set; }

        /// <summary>
        /// Additional hardware details. Contents are specific to each component type. 
        /// </summary>
        /// <value>Additional hardware details. Contents are specific to each component type. </value>

        [DataMember(Name="extra_details")]
        public HardwareExtraDetailsInstance ExtraDetails { get; set; }

        /// <summary>
        /// Indicator of the stale state of component. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Indicator of the stale state of component. Was added in version 2.0.0.0.</value>

        [DataMember(Name="stale_state")]
        public HardwareStaleStateEnum? StaleState { get; set; }

        /// <summary>
        /// Localized message string corresponding to type
        /// </summary>
        /// <value>Localized message string corresponding to type</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to lifecycle_state
        /// </summary>
        /// <value>Localized message string corresponding to lifecycle_state</value>

        [DataMember(Name="lifecycle_state_l10n")]
        public string LifecycleStateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to status_led_state
        /// </summary>
        /// <value>Localized message string corresponding to status_led_state</value>

        [DataMember(Name="status_led_state_l10n")]
        public string StatusLedStateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to stale_state Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to stale_state Was added in version 2.0.0.0.</value>

        [DataMember(Name="stale_state_l10n")]
        public string StaleStateL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type fc_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type fc_port association.</value>

        [DataMember(Name="node_fc_ports")]
        public List<FcPortInstance> NodeFcPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type fc_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type fc_port association.</value>

        [DataMember(Name="sfp_fc_ports")]
        public List<FcPortInstance> SfpFcPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type fc_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type fc_port association.</value>

        [DataMember(Name="io_module_fc_ports")]
        public List<FcPortInstance> IoModuleFcPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type fc_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type fc_port association.</value>

        [DataMember(Name="hardware_parent_fc_ports")]
        public List<FcPortInstance> HardwareParentFcPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type sas_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type sas_port association.</value>

        [DataMember(Name="node_sas_ports")]
        public List<SasPortInstance> NodeSasPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type sas_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type sas_port association.</value>

        [DataMember(Name="sfp_sas_ports")]
        public List<SasPortInstance> SfpSasPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type sas_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type sas_port association.</value>

        [DataMember(Name="io_module_sas_ports")]
        public List<SasPortInstance> IoModuleSasPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type sas_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type sas_port association.</value>

        [DataMember(Name="hardware_parent_sas_ports")]
        public List<SasPortInstance> HardwareParentSasPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_port association.</value>

        [DataMember(Name="node_eth_ports")]
        public List<EthPortInstance> NodeEthPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_port association.</value>

        [DataMember(Name="sfp_eth_ports")]
        public List<EthPortInstance> SfpEthPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_port association.</value>

        [DataMember(Name="io_module_eth_ports")]
        public List<EthPortInstance> IoModuleEthPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_port association.</value>

        [DataMember(Name="hardware_parent_eth_ports")]
        public List<EthPortInstance> HardwareParentEthPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_be_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_be_port association.</value>

        [DataMember(Name="node_eth_be_ports")]
        public List<EthBePortInstance> NodeEthBePorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_be_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_be_port association.</value>

        [DataMember(Name="sfp_eth_be_ports")]
        public List<EthBePortInstance> SfpEthBePorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_be_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_be_port association.</value>

        [DataMember(Name="hardware_parent_eth_be_ports")]
        public List<EthBePortInstance> HardwareParentEthBePorts { get; set; }

        /// <summary>
        /// This is the embeddable reference form of parent_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of parent_id attribute.</value>

        [DataMember(Name="parent")]
        public HardwareInstance Parent { get; set; }

        /// <summary>
        /// This is the inverse of the resource type hardware association.
        /// </summary>
        /// <value>This is the inverse of the resource type hardware association.</value>

        [DataMember(Name="children")]
        public List<HardwareInstance> Children { get; set; }

        /// <summary>
        /// This is the embeddable reference form of appliance_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of appliance_id attribute.</value>

        [DataMember(Name="appliance")]
        public ApplianceInstance Appliance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HardwareInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LifecycleState: ").Append(LifecycleState).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  Slot: ").Append(Slot).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  StatusLedState: ").Append(StatusLedState).Append("\n");
            sb.Append("  IsMarked: ").Append(IsMarked).Append("\n");
            sb.Append("  ValidUpgrades: ").Append(ValidUpgrades).Append("\n");
            sb.Append("  ExtraDetails: ").Append(ExtraDetails).Append("\n");
            sb.Append("  StaleState: ").Append(StaleState).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  LifecycleStateL10n: ").Append(LifecycleStateL10n).Append("\n");
            sb.Append("  StatusLedStateL10n: ").Append(StatusLedStateL10n).Append("\n");
            sb.Append("  StaleStateL10n: ").Append(StaleStateL10n).Append("\n");
            sb.Append("  NodeFcPorts: ").Append(NodeFcPorts).Append("\n");
            sb.Append("  SfpFcPorts: ").Append(SfpFcPorts).Append("\n");
            sb.Append("  IoModuleFcPorts: ").Append(IoModuleFcPorts).Append("\n");
            sb.Append("  HardwareParentFcPorts: ").Append(HardwareParentFcPorts).Append("\n");
            sb.Append("  NodeSasPorts: ").Append(NodeSasPorts).Append("\n");
            sb.Append("  SfpSasPorts: ").Append(SfpSasPorts).Append("\n");
            sb.Append("  IoModuleSasPorts: ").Append(IoModuleSasPorts).Append("\n");
            sb.Append("  HardwareParentSasPorts: ").Append(HardwareParentSasPorts).Append("\n");
            sb.Append("  NodeEthPorts: ").Append(NodeEthPorts).Append("\n");
            sb.Append("  SfpEthPorts: ").Append(SfpEthPorts).Append("\n");
            sb.Append("  IoModuleEthPorts: ").Append(IoModuleEthPorts).Append("\n");
            sb.Append("  HardwareParentEthPorts: ").Append(HardwareParentEthPorts).Append("\n");
            sb.Append("  NodeEthBePorts: ").Append(NodeEthBePorts).Append("\n");
            sb.Append("  SfpEthBePorts: ").Append(SfpEthBePorts).Append("\n");
            sb.Append("  HardwareParentEthBePorts: ").Append(HardwareParentEthBePorts).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Appliance: ").Append(Appliance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HardwareInstance)obj);
        }

        /// <summary>
        /// Returns true if HardwareInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of HardwareInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HardwareInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    LifecycleState == other.LifecycleState ||
                    LifecycleState != null &&
                    LifecycleState.Equals(other.LifecycleState)
                ) && 
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    Slot == other.Slot ||
                    Slot != null &&
                    Slot.Equals(other.Slot)
                ) && 
                (
                    PartNumber == other.PartNumber ||
                    PartNumber != null &&
                    PartNumber.Equals(other.PartNumber)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    StatusLedState == other.StatusLedState ||
                    StatusLedState != null &&
                    StatusLedState.Equals(other.StatusLedState)
                ) && 
                (
                    IsMarked == other.IsMarked ||
                    IsMarked != null &&
                    IsMarked.Equals(other.IsMarked)
                ) && 
                (
                    ValidUpgrades == other.ValidUpgrades ||
                    ValidUpgrades != null &&
                    ValidUpgrades.SequenceEqual(other.ValidUpgrades)
                ) && 
                (
                    ExtraDetails == other.ExtraDetails ||
                    ExtraDetails != null &&
                    ExtraDetails.Equals(other.ExtraDetails)
                ) && 
                (
                    StaleState == other.StaleState ||
                    StaleState != null &&
                    StaleState.Equals(other.StaleState)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    LifecycleStateL10n == other.LifecycleStateL10n ||
                    LifecycleStateL10n != null &&
                    LifecycleStateL10n.Equals(other.LifecycleStateL10n)
                ) && 
                (
                    StatusLedStateL10n == other.StatusLedStateL10n ||
                    StatusLedStateL10n != null &&
                    StatusLedStateL10n.Equals(other.StatusLedStateL10n)
                ) && 
                (
                    StaleStateL10n == other.StaleStateL10n ||
                    StaleStateL10n != null &&
                    StaleStateL10n.Equals(other.StaleStateL10n)
                ) && 
                (
                    NodeFcPorts == other.NodeFcPorts ||
                    NodeFcPorts != null &&
                    NodeFcPorts.SequenceEqual(other.NodeFcPorts)
                ) && 
                (
                    SfpFcPorts == other.SfpFcPorts ||
                    SfpFcPorts != null &&
                    SfpFcPorts.SequenceEqual(other.SfpFcPorts)
                ) && 
                (
                    IoModuleFcPorts == other.IoModuleFcPorts ||
                    IoModuleFcPorts != null &&
                    IoModuleFcPorts.SequenceEqual(other.IoModuleFcPorts)
                ) && 
                (
                    HardwareParentFcPorts == other.HardwareParentFcPorts ||
                    HardwareParentFcPorts != null &&
                    HardwareParentFcPorts.SequenceEqual(other.HardwareParentFcPorts)
                ) && 
                (
                    NodeSasPorts == other.NodeSasPorts ||
                    NodeSasPorts != null &&
                    NodeSasPorts.SequenceEqual(other.NodeSasPorts)
                ) && 
                (
                    SfpSasPorts == other.SfpSasPorts ||
                    SfpSasPorts != null &&
                    SfpSasPorts.SequenceEqual(other.SfpSasPorts)
                ) && 
                (
                    IoModuleSasPorts == other.IoModuleSasPorts ||
                    IoModuleSasPorts != null &&
                    IoModuleSasPorts.SequenceEqual(other.IoModuleSasPorts)
                ) && 
                (
                    HardwareParentSasPorts == other.HardwareParentSasPorts ||
                    HardwareParentSasPorts != null &&
                    HardwareParentSasPorts.SequenceEqual(other.HardwareParentSasPorts)
                ) && 
                (
                    NodeEthPorts == other.NodeEthPorts ||
                    NodeEthPorts != null &&
                    NodeEthPorts.SequenceEqual(other.NodeEthPorts)
                ) && 
                (
                    SfpEthPorts == other.SfpEthPorts ||
                    SfpEthPorts != null &&
                    SfpEthPorts.SequenceEqual(other.SfpEthPorts)
                ) && 
                (
                    IoModuleEthPorts == other.IoModuleEthPorts ||
                    IoModuleEthPorts != null &&
                    IoModuleEthPorts.SequenceEqual(other.IoModuleEthPorts)
                ) && 
                (
                    HardwareParentEthPorts == other.HardwareParentEthPorts ||
                    HardwareParentEthPorts != null &&
                    HardwareParentEthPorts.SequenceEqual(other.HardwareParentEthPorts)
                ) && 
                (
                    NodeEthBePorts == other.NodeEthBePorts ||
                    NodeEthBePorts != null &&
                    NodeEthBePorts.SequenceEqual(other.NodeEthBePorts)
                ) && 
                (
                    SfpEthBePorts == other.SfpEthBePorts ||
                    SfpEthBePorts != null &&
                    SfpEthBePorts.SequenceEqual(other.SfpEthBePorts)
                ) && 
                (
                    HardwareParentEthBePorts == other.HardwareParentEthBePorts ||
                    HardwareParentEthBePorts != null &&
                    HardwareParentEthBePorts.SequenceEqual(other.HardwareParentEthBePorts)
                ) && 
                (
                    Parent == other.Parent ||
                    Parent != null &&
                    Parent.Equals(other.Parent)
                ) && 
                (
                    Children == other.Children ||
                    Children != null &&
                    Children.SequenceEqual(other.Children)
                ) && 
                (
                    Appliance == other.Appliance ||
                    Appliance != null &&
                    Appliance.Equals(other.Appliance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (LifecycleState != null)
                    hashCode = hashCode * 59 + LifecycleState.GetHashCode();
                    if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (Slot != null)
                    hashCode = hashCode * 59 + Slot.GetHashCode();
                    if (PartNumber != null)
                    hashCode = hashCode * 59 + PartNumber.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (StatusLedState != null)
                    hashCode = hashCode * 59 + StatusLedState.GetHashCode();
                    if (IsMarked != null)
                    hashCode = hashCode * 59 + IsMarked.GetHashCode();
                    if (ValidUpgrades != null)
                    hashCode = hashCode * 59 + ValidUpgrades.GetHashCode();
                    if (ExtraDetails != null)
                    hashCode = hashCode * 59 + ExtraDetails.GetHashCode();
                    if (StaleState != null)
                    hashCode = hashCode * 59 + StaleState.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (LifecycleStateL10n != null)
                    hashCode = hashCode * 59 + LifecycleStateL10n.GetHashCode();
                    if (StatusLedStateL10n != null)
                    hashCode = hashCode * 59 + StatusLedStateL10n.GetHashCode();
                    if (StaleStateL10n != null)
                    hashCode = hashCode * 59 + StaleStateL10n.GetHashCode();
                    if (NodeFcPorts != null)
                    hashCode = hashCode * 59 + NodeFcPorts.GetHashCode();
                    if (SfpFcPorts != null)
                    hashCode = hashCode * 59 + SfpFcPorts.GetHashCode();
                    if (IoModuleFcPorts != null)
                    hashCode = hashCode * 59 + IoModuleFcPorts.GetHashCode();
                    if (HardwareParentFcPorts != null)
                    hashCode = hashCode * 59 + HardwareParentFcPorts.GetHashCode();
                    if (NodeSasPorts != null)
                    hashCode = hashCode * 59 + NodeSasPorts.GetHashCode();
                    if (SfpSasPorts != null)
                    hashCode = hashCode * 59 + SfpSasPorts.GetHashCode();
                    if (IoModuleSasPorts != null)
                    hashCode = hashCode * 59 + IoModuleSasPorts.GetHashCode();
                    if (HardwareParentSasPorts != null)
                    hashCode = hashCode * 59 + HardwareParentSasPorts.GetHashCode();
                    if (NodeEthPorts != null)
                    hashCode = hashCode * 59 + NodeEthPorts.GetHashCode();
                    if (SfpEthPorts != null)
                    hashCode = hashCode * 59 + SfpEthPorts.GetHashCode();
                    if (IoModuleEthPorts != null)
                    hashCode = hashCode * 59 + IoModuleEthPorts.GetHashCode();
                    if (HardwareParentEthPorts != null)
                    hashCode = hashCode * 59 + HardwareParentEthPorts.GetHashCode();
                    if (NodeEthBePorts != null)
                    hashCode = hashCode * 59 + NodeEthBePorts.GetHashCode();
                    if (SfpEthBePorts != null)
                    hashCode = hashCode * 59 + SfpEthBePorts.GetHashCode();
                    if (HardwareParentEthBePorts != null)
                    hashCode = hashCode * 59 + HardwareParentEthBePorts.GetHashCode();
                    if (Parent != null)
                    hashCode = hashCode * 59 + Parent.GetHashCode();
                    if (Children != null)
                    hashCode = hashCode * 59 + Children.GetHashCode();
                    if (Appliance != null)
                    hashCode = hashCode * 59 + Appliance.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HardwareInstance left, HardwareInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HardwareInstance left, HardwareInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
