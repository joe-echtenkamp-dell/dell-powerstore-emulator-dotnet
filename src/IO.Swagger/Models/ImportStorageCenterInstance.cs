/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// This resource type has queriable associations from import_storage_center_volume, import_storage_center_consistency_group
    /// </summary>
    [DataContract]
    public partial class ImportStorageCenterInstance : IEquatable<ImportStorageCenterInstance>
    { 
        /// <summary>
        /// Unique identifier of the SC array that is a source storage system for import. 
        /// </summary>
        /// <value>Unique identifier of the SC array that is a source storage system for import. </value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the SC array.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the SC array.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Management address to use for communicating with the SC array. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). 
        /// </summary>
        /// <value>Management address to use for communicating with the SC array. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). </value>

        [DataMember(Name="management_address")]
        public string ManagementAddress { get; set; }

        /// <summary>
        /// User account name used to communicate with the SC array.
        /// </summary>
        /// <value>User account name used to communicate with the SC array.</value>

        [DataMember(Name="user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// Model name of the SC array.
        /// </summary>
        /// <value>Model name of the SC array.</value>

        [DataMember(Name="model")]
        public string Model { get; set; }

        /// <summary>
        /// Serial number of the SC array.
        /// </summary>
        /// <value>Serial number of the SC array.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="serial_number")]
        public int? SerialNumber { get; set; }

        /// <summary>
        /// API version of the SC OS (SCOS).
        /// </summary>
        /// <value>API version of the SC OS (SCOS).</value>

        [DataMember(Name="api_version")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public SCStatusEnum? Status { get; set; }

        /// <summary>
        /// Timestamp at which the SC array details were last updated. This includes the information about the array and its importable volumes and consistency groups. The timestamp is updated when the SC array is created and when the importable storage resources are discovered using the discover_importable_resources action. 
        /// </summary>
        /// <value>Timestamp at which the SC array details were last updated. This includes the information about the array and its importable volumes and consistency groups. The timestamp is updated when the SC array is created and when the importable storage resources are discovered using the discover_importable_resources action. </value>

        [DataMember(Name="last_update_time")]
        public DateTime? LastUpdateTime { get; set; }

        /// <summary>
        ///  Was added in version 1.0.2.
        /// </summary>
        /// <value> Was added in version 1.0.2.</value>

        [DataMember(Name="supported_import_type")]
        public SupportedImportTypeEnum? SupportedImportType { get; set; }

        /// <summary>
        /// Localized message string corresponding to status
        /// </summary>
        /// <value>Localized message string corresponding to status</value>

        [DataMember(Name="status_l10n")]
        public string StatusL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to supported_import_type Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to supported_import_type Was added in version 1.0.2.</value>

        [DataMember(Name="supported_import_type_l10n")]
        public string SupportedImportTypeL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_storage_center_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_storage_center_volume association.</value>

        [DataMember(Name="import_storage_center_volumes")]
        public List<ImportStorageCenterVolumeInstance> ImportStorageCenterVolumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_storage_center_consistency_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_storage_center_consistency_group association.</value>

        [DataMember(Name="import_storage_center_consistency_groups")]
        public List<ImportStorageCenterConsistencyGroupInstance> ImportStorageCenterConsistencyGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportStorageCenterInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ManagementAddress: ").Append(ManagementAddress).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LastUpdateTime: ").Append(LastUpdateTime).Append("\n");
            sb.Append("  SupportedImportType: ").Append(SupportedImportType).Append("\n");
            sb.Append("  StatusL10n: ").Append(StatusL10n).Append("\n");
            sb.Append("  SupportedImportTypeL10n: ").Append(SupportedImportTypeL10n).Append("\n");
            sb.Append("  ImportStorageCenterVolumes: ").Append(ImportStorageCenterVolumes).Append("\n");
            sb.Append("  ImportStorageCenterConsistencyGroups: ").Append(ImportStorageCenterConsistencyGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportStorageCenterInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportStorageCenterInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportStorageCenterInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportStorageCenterInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ManagementAddress == other.ManagementAddress ||
                    ManagementAddress != null &&
                    ManagementAddress.Equals(other.ManagementAddress)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    ApiVersion == other.ApiVersion ||
                    ApiVersion != null &&
                    ApiVersion.Equals(other.ApiVersion)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    LastUpdateTime == other.LastUpdateTime ||
                    LastUpdateTime != null &&
                    LastUpdateTime.Equals(other.LastUpdateTime)
                ) && 
                (
                    SupportedImportType == other.SupportedImportType ||
                    SupportedImportType != null &&
                    SupportedImportType.Equals(other.SupportedImportType)
                ) && 
                (
                    StatusL10n == other.StatusL10n ||
                    StatusL10n != null &&
                    StatusL10n.Equals(other.StatusL10n)
                ) && 
                (
                    SupportedImportTypeL10n == other.SupportedImportTypeL10n ||
                    SupportedImportTypeL10n != null &&
                    SupportedImportTypeL10n.Equals(other.SupportedImportTypeL10n)
                ) && 
                (
                    ImportStorageCenterVolumes == other.ImportStorageCenterVolumes ||
                    ImportStorageCenterVolumes != null &&
                    ImportStorageCenterVolumes.SequenceEqual(other.ImportStorageCenterVolumes)
                ) && 
                (
                    ImportStorageCenterConsistencyGroups == other.ImportStorageCenterConsistencyGroups ||
                    ImportStorageCenterConsistencyGroups != null &&
                    ImportStorageCenterConsistencyGroups.SequenceEqual(other.ImportStorageCenterConsistencyGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ManagementAddress != null)
                    hashCode = hashCode * 59 + ManagementAddress.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (ApiVersion != null)
                    hashCode = hashCode * 59 + ApiVersion.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (LastUpdateTime != null)
                    hashCode = hashCode * 59 + LastUpdateTime.GetHashCode();
                    if (SupportedImportType != null)
                    hashCode = hashCode * 59 + SupportedImportType.GetHashCode();
                    if (StatusL10n != null)
                    hashCode = hashCode * 59 + StatusL10n.GetHashCode();
                    if (SupportedImportTypeL10n != null)
                    hashCode = hashCode * 59 + SupportedImportTypeL10n.GetHashCode();
                    if (ImportStorageCenterVolumes != null)
                    hashCode = hashCode * 59 + ImportStorageCenterVolumes.GetHashCode();
                    if (ImportStorageCenterConsistencyGroups != null)
                    hashCode = hashCode * 59 + ImportStorageCenterConsistencyGroups.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportStorageCenterInstance left, ImportStorageCenterInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportStorageCenterInstance left, ImportStorageCenterInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
