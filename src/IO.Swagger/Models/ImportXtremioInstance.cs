/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// An instance of an XtremIO storage system Was added in version 1.0.2. This resource type has queriable associations from import_xtremio_volume, import_xtremio_consistency_group
    /// </summary>
    [DataContract]
    public partial class ImportXtremioInstance : IEquatable<ImportXtremioInstance>
    { 
        /// <summary>
        /// Unique identifier of the XtremIO storage system that is a source storage system for import. 
        /// </summary>
        /// <value>Unique identifier of the XtremIO storage system that is a source storage system for import. </value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the XtremIO storage system.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the XtremIO storage system.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Management address to use for communicating with the XtremIO storage system. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). 
        /// </summary>
        /// <value>Management address to use for communicating with the XtremIO storage system. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). </value>

        [DataMember(Name="management_address")]
        public string ManagementAddress { get; set; }

        /// <summary>
        /// Serial number of the XtremIO storage system.
        /// </summary>
        /// <value>Serial number of the XtremIO storage system.</value>

        [DataMember(Name="serial_number")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Cluster GUID of the XtremIO storage system.
        /// </summary>
        /// <value>Cluster GUID of the XtremIO storage system.</value>

        [DataMember(Name="cluster_guid")]
        public string ClusterGuid { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>

        [DataMember(Name="platform")]
        public XtremIOPlatformEnum? Platform { get; set; }

        /// <summary>
        /// Software version of the XtremIO storage system.
        /// </summary>
        /// <value>Software version of the XtremIO storage system.</value>

        [DataMember(Name="software_version")]
        public string SoftwareVersion { get; set; }

        /// <summary>
        /// Version of the XMS instance that manages the XtremIO storage system.
        /// </summary>
        /// <value>Version of the XMS instance that manages the XtremIO storage system.</value>

        [DataMember(Name="xms_version")]
        public string XmsVersion { get; set; }

        /// <summary>
        /// Gets or Sets SupportedImportType
        /// </summary>

        [DataMember(Name="supported_import_type")]
        public SupportedImportTypeEnum? SupportedImportType { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public XtremIOStateEnum? State { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>

        [DataMember(Name="severity")]
        public XtremIOObjectSeverityEnum? Severity { get; set; }

        /// <summary>
        /// User account name used to communicate with the XtremIO storage system.
        /// </summary>
        /// <value>User account name used to communicate with the XtremIO storage system.</value>

        [DataMember(Name="user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// Date and time when the XtremIO storage system details were last updated. These details include the XtremIO storage system and information about its importable volumes and consistency groups. The timestamp is updated when the XtremIO storage system is created and whenever the importable volumes and consistency groups are discovered. 
        /// </summary>
        /// <value>Date and time when the XtremIO storage system details were last updated. These details include the XtremIO storage system and information about its importable volumes and consistency groups. The timestamp is updated when the XtremIO storage system is created and whenever the importable volumes and consistency groups are discovered. </value>

        [DataMember(Name="last_updated_timestamp")]
        public DateTime? LastUpdatedTimestamp { get; set; }

        /// <summary>
        /// Localized message string corresponding to platform Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to platform Was added in version 1.0.2.</value>

        [DataMember(Name="platform_l10n")]
        public string PlatformL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to supported_import_type Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to supported_import_type Was added in version 1.0.2.</value>

        [DataMember(Name="supported_import_type_l10n")]
        public string SupportedImportTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to state Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to state Was added in version 1.0.2.</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to severity Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to severity Was added in version 1.0.2.</value>

        [DataMember(Name="severity_l10n")]
        public string SeverityL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_xtremio_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_xtremio_volume association.</value>

        [DataMember(Name="import_xtremio_volumes")]
        public List<ImportXtremioVolumeInstance> ImportXtremioVolumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_xtremio_consistency_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_xtremio_consistency_group association.</value>

        [DataMember(Name="import_xtremio_consistency_groups")]
        public List<ImportXtremioConsistencyGroupInstance> ImportXtremioConsistencyGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportXtremioInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ManagementAddress: ").Append(ManagementAddress).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  ClusterGuid: ").Append(ClusterGuid).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  SoftwareVersion: ").Append(SoftwareVersion).Append("\n");
            sb.Append("  XmsVersion: ").Append(XmsVersion).Append("\n");
            sb.Append("  SupportedImportType: ").Append(SupportedImportType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  LastUpdatedTimestamp: ").Append(LastUpdatedTimestamp).Append("\n");
            sb.Append("  PlatformL10n: ").Append(PlatformL10n).Append("\n");
            sb.Append("  SupportedImportTypeL10n: ").Append(SupportedImportTypeL10n).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  SeverityL10n: ").Append(SeverityL10n).Append("\n");
            sb.Append("  ImportXtremioVolumes: ").Append(ImportXtremioVolumes).Append("\n");
            sb.Append("  ImportXtremioConsistencyGroups: ").Append(ImportXtremioConsistencyGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportXtremioInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportXtremioInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportXtremioInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportXtremioInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ManagementAddress == other.ManagementAddress ||
                    ManagementAddress != null &&
                    ManagementAddress.Equals(other.ManagementAddress)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    ClusterGuid == other.ClusterGuid ||
                    ClusterGuid != null &&
                    ClusterGuid.Equals(other.ClusterGuid)
                ) && 
                (
                    Platform == other.Platform ||
                    Platform != null &&
                    Platform.Equals(other.Platform)
                ) && 
                (
                    SoftwareVersion == other.SoftwareVersion ||
                    SoftwareVersion != null &&
                    SoftwareVersion.Equals(other.SoftwareVersion)
                ) && 
                (
                    XmsVersion == other.XmsVersion ||
                    XmsVersion != null &&
                    XmsVersion.Equals(other.XmsVersion)
                ) && 
                (
                    SupportedImportType == other.SupportedImportType ||
                    SupportedImportType != null &&
                    SupportedImportType.Equals(other.SupportedImportType)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Severity == other.Severity ||
                    Severity != null &&
                    Severity.Equals(other.Severity)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    LastUpdatedTimestamp == other.LastUpdatedTimestamp ||
                    LastUpdatedTimestamp != null &&
                    LastUpdatedTimestamp.Equals(other.LastUpdatedTimestamp)
                ) && 
                (
                    PlatformL10n == other.PlatformL10n ||
                    PlatformL10n != null &&
                    PlatformL10n.Equals(other.PlatformL10n)
                ) && 
                (
                    SupportedImportTypeL10n == other.SupportedImportTypeL10n ||
                    SupportedImportTypeL10n != null &&
                    SupportedImportTypeL10n.Equals(other.SupportedImportTypeL10n)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    SeverityL10n == other.SeverityL10n ||
                    SeverityL10n != null &&
                    SeverityL10n.Equals(other.SeverityL10n)
                ) && 
                (
                    ImportXtremioVolumes == other.ImportXtremioVolumes ||
                    ImportXtremioVolumes != null &&
                    ImportXtremioVolumes.SequenceEqual(other.ImportXtremioVolumes)
                ) && 
                (
                    ImportXtremioConsistencyGroups == other.ImportXtremioConsistencyGroups ||
                    ImportXtremioConsistencyGroups != null &&
                    ImportXtremioConsistencyGroups.SequenceEqual(other.ImportXtremioConsistencyGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ManagementAddress != null)
                    hashCode = hashCode * 59 + ManagementAddress.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (ClusterGuid != null)
                    hashCode = hashCode * 59 + ClusterGuid.GetHashCode();
                    if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                    if (SoftwareVersion != null)
                    hashCode = hashCode * 59 + SoftwareVersion.GetHashCode();
                    if (XmsVersion != null)
                    hashCode = hashCode * 59 + XmsVersion.GetHashCode();
                    if (SupportedImportType != null)
                    hashCode = hashCode * 59 + SupportedImportType.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Severity != null)
                    hashCode = hashCode * 59 + Severity.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (LastUpdatedTimestamp != null)
                    hashCode = hashCode * 59 + LastUpdatedTimestamp.GetHashCode();
                    if (PlatformL10n != null)
                    hashCode = hashCode * 59 + PlatformL10n.GetHashCode();
                    if (SupportedImportTypeL10n != null)
                    hashCode = hashCode * 59 + SupportedImportTypeL10n.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (SeverityL10n != null)
                    hashCode = hashCode * 59 + SeverityL10n.GetHashCode();
                    if (ImportXtremioVolumes != null)
                    hashCode = hashCode * 59 + ImportXtremioVolumes.GetHashCode();
                    if (ImportXtremioConsistencyGroups != null)
                    hashCode = hashCode * 59 + ImportXtremioConsistencyGroups.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportXtremioInstance left, ImportXtremioInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportXtremioInstance left, ImportXtremioInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
