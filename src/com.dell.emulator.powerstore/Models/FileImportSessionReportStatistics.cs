/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// The statistics on the Filesystem import. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileImportSessionReportStatistics : IEquatable<FileImportSessionReportStatistics>
    { 
        /// <summary>
        /// Total amount of data imported in bytes.
        /// </summary>
        /// <value>Total amount of data imported in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="total_imported_data")]
        public long? TotalImportedData { get; set; }

        /// <summary>
        /// Total number of files/folders in source.
        /// </summary>
        /// <value>Total number of files/folders in source.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="source_inode_count")]
        public int? SourceInodeCount { get; set; }

        /// <summary>
        /// Total number of files/folders imported.
        /// </summary>
        /// <value>Total number of files/folders imported.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="imported_inode_count")]
        public int? ImportedInodeCount { get; set; }

        /// <summary>
        /// Total number of quota tree in source.
        /// </summary>
        /// <value>Total number of quota tree in source.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="source_tree_quota_count")]
        public int? SourceTreeQuotaCount { get; set; }

        /// <summary>
        /// Total number of quota tree imported.
        /// </summary>
        /// <value>Total number of quota tree imported.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="imported_tree_quota_count")]
        public int? ImportedTreeQuotaCount { get; set; }

        /// <summary>
        /// Total number of user quota in source.
        /// </summary>
        /// <value>Total number of user quota in source.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="source_user_quota_count")]
        public int? SourceUserQuotaCount { get; set; }

        /// <summary>
        /// Total number of user quota imported.
        /// </summary>
        /// <value>Total number of user quota imported.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="imported_user_quota_count")]
        public int? ImportedUserQuotaCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileImportSessionReportStatistics {\n");
            sb.Append("  TotalImportedData: ").Append(TotalImportedData).Append("\n");
            sb.Append("  SourceInodeCount: ").Append(SourceInodeCount).Append("\n");
            sb.Append("  ImportedInodeCount: ").Append(ImportedInodeCount).Append("\n");
            sb.Append("  SourceTreeQuotaCount: ").Append(SourceTreeQuotaCount).Append("\n");
            sb.Append("  ImportedTreeQuotaCount: ").Append(ImportedTreeQuotaCount).Append("\n");
            sb.Append("  SourceUserQuotaCount: ").Append(SourceUserQuotaCount).Append("\n");
            sb.Append("  ImportedUserQuotaCount: ").Append(ImportedUserQuotaCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileImportSessionReportStatistics)obj);
        }

        /// <summary>
        /// Returns true if FileImportSessionReportStatistics instances are equal
        /// </summary>
        /// <param name="other">Instance of FileImportSessionReportStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileImportSessionReportStatistics other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TotalImportedData == other.TotalImportedData ||
                    TotalImportedData != null &&
                    TotalImportedData.Equals(other.TotalImportedData)
                ) && 
                (
                    SourceInodeCount == other.SourceInodeCount ||
                    SourceInodeCount != null &&
                    SourceInodeCount.Equals(other.SourceInodeCount)
                ) && 
                (
                    ImportedInodeCount == other.ImportedInodeCount ||
                    ImportedInodeCount != null &&
                    ImportedInodeCount.Equals(other.ImportedInodeCount)
                ) && 
                (
                    SourceTreeQuotaCount == other.SourceTreeQuotaCount ||
                    SourceTreeQuotaCount != null &&
                    SourceTreeQuotaCount.Equals(other.SourceTreeQuotaCount)
                ) && 
                (
                    ImportedTreeQuotaCount == other.ImportedTreeQuotaCount ||
                    ImportedTreeQuotaCount != null &&
                    ImportedTreeQuotaCount.Equals(other.ImportedTreeQuotaCount)
                ) && 
                (
                    SourceUserQuotaCount == other.SourceUserQuotaCount ||
                    SourceUserQuotaCount != null &&
                    SourceUserQuotaCount.Equals(other.SourceUserQuotaCount)
                ) && 
                (
                    ImportedUserQuotaCount == other.ImportedUserQuotaCount ||
                    ImportedUserQuotaCount != null &&
                    ImportedUserQuotaCount.Equals(other.ImportedUserQuotaCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TotalImportedData != null)
                    hashCode = hashCode * 59 + TotalImportedData.GetHashCode();
                    if (SourceInodeCount != null)
                    hashCode = hashCode * 59 + SourceInodeCount.GetHashCode();
                    if (ImportedInodeCount != null)
                    hashCode = hashCode * 59 + ImportedInodeCount.GetHashCode();
                    if (SourceTreeQuotaCount != null)
                    hashCode = hashCode * 59 + SourceTreeQuotaCount.GetHashCode();
                    if (ImportedTreeQuotaCount != null)
                    hashCode = hashCode * 59 + ImportedTreeQuotaCount.GetHashCode();
                    if (SourceUserQuotaCount != null)
                    hashCode = hashCode * 59 + SourceUserQuotaCount.GetHashCode();
                    if (ImportedUserQuotaCount != null)
                    hashCode = hashCode * 59 + ImportedUserQuotaCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileImportSessionReportStatistics left, FileImportSessionReportStatistics right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileImportSessionReportStatistics left, FileImportSessionReportStatistics right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
