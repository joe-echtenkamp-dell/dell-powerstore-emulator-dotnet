/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Modify universal consistency group request. Was added in version 4.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ImportUniversalConsistencyGroupModify : IEquatable<ImportUniversalConsistencyGroupModify>
    { 
        /// <summary>
        /// New name for the universal consistency group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is preserved, the uniqueness check is case-insensitive, so the same name in two different cases is not considered unique. 
        /// </summary>
        /// <value>New name for the universal consistency group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is preserved, the uniqueness check is case-insensitive, so the same name in two different cases is not considered unique. </value>

        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportUniversalConsistencyGroupModify {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportUniversalConsistencyGroupModify)obj);
        }

        /// <summary>
        /// Returns true if ImportUniversalConsistencyGroupModify instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportUniversalConsistencyGroupModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportUniversalConsistencyGroupModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportUniversalConsistencyGroupModify left, ImportUniversalConsistencyGroupModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportUniversalConsistencyGroupModify left, ImportUniversalConsistencyGroupModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
