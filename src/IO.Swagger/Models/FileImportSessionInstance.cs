/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    ///  Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileImportSessionInstance : IEquatable<FileImportSessionInstance>
    { 
        /// <summary>
        /// Unique identifier of the file import session.
        /// </summary>
        /// <value>Unique identifier of the file import session.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// User-specified name of the file import session.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>User-specified name of the file import session.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// User-specified description of the file import session.
        /// </summary>
        /// <value>User-specified description of the file import session.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Unique identifer of the storage system that contains the source NAS Server to be imported.
        /// </summary>
        /// <value>Unique identifer of the storage system that contains the source NAS Server to be imported.</value>

        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Unique identifier of the source NAS server which is being imported by the file import session.
        /// </summary>
        /// <value>Unique identifier of the source NAS server which is being imported by the file import session.</value>

        [DataMember(Name="source_resource_id")]
        public string SourceResourceId { get; set; }

        /// <summary>
        /// Unique identifier of the destination NAS server or filesystem created as part of the import process.
        /// </summary>
        /// <value>Unique identifier of the destination NAS server or filesystem created as part of the import process.</value>

        [DataMember(Name="destination_resource_id")]
        public string DestinationResourceId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationResourceType
        /// </summary>

        [DataMember(Name="destination_resource_type")]
        public FileImportDestinationResourceTypeEnum? DestinationResourceType { get; set; }

        /// <summary>
        /// Unique identifier of the destination file interface used for importing data from the source system.
        /// </summary>
        /// <value>Unique identifier of the destination file interface used for importing data from the source system.</value>

        [DataMember(Name="import_file_interface_id")]
        public string ImportFileInterfaceId { get; set; }

        /// <summary>
        /// Unique identifier of the destination NAS server to which the destination filesystem will be added.
        /// </summary>
        /// <value>Unique identifier of the destination NAS server to which the destination filesystem will be added.</value>

        [DataMember(Name="nas_server_id")]
        public string NasServerId { get; set; }

        /// <summary>
        /// The Date and time when the import session has been updated. This date is sepcified in ISO 8601 format with time expressed in UTC.
        /// </summary>
        /// <value>The Date and time when the import session has been updated. This date is sepcified in ISO 8601 format with time expressed in UTC.</value>

        [DataMember(Name="last_update_timestamp")]
        public DateTime? LastUpdateTimestamp { get; set; }

        /// <summary>
        /// Indicates the Date and time at which the file import session is scheduled to run. The date is specified in ISO 8601 format with the time expressed in UTC format.
        /// </summary>
        /// <value>Indicates the Date and time at which the file import session is scheduled to run. The date is specified in ISO 8601 format with the time expressed in UTC format.</value>

        [DataMember(Name="scheduled_timestamp")]
        public DateTime? ScheduledTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public FileImportSessionStateEnum? State { get; set; }

        /// <summary>
        /// Gets or Sets CurrentOperation
        /// </summary>

        [DataMember(Name="current_operation")]
        public FileImportSessionCurrentOperationEnum? CurrentOperation { get; set; }

        /// <summary>
        /// When the import is in the &#39;Initial_Copy_In_Progress&#39; or &#39;Incremental_Copy_In_Progress&#39; state, this value indicates the completion percent for the import. Before the import is in the copy state, this value is 0. After the cutover or if there is a failure, this value is null.
        /// </summary>
        /// <value>When the import is in the &#39;Initial_Copy_In_Progress&#39; or &#39;Incremental_Copy_In_Progress&#39; state, this value indicates the completion percent for the import. Before the import is in the copy state, this value is 0. After the cutover or if there is a failure, this value is null.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="current_operation_progress_percentage")]
        public int? CurrentOperationProgressPercentage { get; set; }

        /// <summary>
        /// When the import is in the &#39;Initial_Copy_In_Progress&#39; or &#39;Incremental_Copy_In_Progress&#39; state, this value indicates the estimated time at which the data copy will complete. Before the import is in the copy state, the value is null.
        /// </summary>
        /// <value>When the import is in the &#39;Initial_Copy_In_Progress&#39; or &#39;Incremental_Copy_In_Progress&#39; state, this value indicates the estimated time at which the data copy will complete. Before the import is in the copy state, the value is null.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="estimated_completion_timestamp")]
        public long? EstimatedCompletionTimestamp { get; set; }

        /// <summary>
        /// Unique identifier of the local protection policy in the PowerStore storage system that will be applied on an imported destination NAS server or filesystem after commit. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy.
        /// </summary>
        /// <value>Unique identifier of the local protection policy in the PowerStore storage system that will be applied on an imported destination NAS server or filesystem after commit. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy.</value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// User name for authentication to SMB Server on the source NAS Server with administrator previlege.
        /// </summary>
        /// <value>User name for authentication to SMB Server on the source NAS Server with administrator previlege.</value>

        [DataMember(Name="source_smb_admin_username")]
        public string SourceSmbAdminUsername { get; set; }

        /// <summary>
        /// The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems. 
        /// </summary>
        /// <value>The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems. </value>

        [DataMember(Name="source_dhsm_username")]
        public string SourceDhsmUsername { get; set; }

        /// <summary>
        /// File Import Session error.
        /// </summary>
        /// <value>File Import Session error.</value>

        [DataMember(Name="error")]
        public string Error { get; set; }

        /// <summary>
        /// Name of the migration interface on the source NAS Server. Was added in version 3.2.0.0.
        /// </summary>
        /// <value>Name of the migration interface on the source NAS Server. Was added in version 3.2.0.0.</value>

        [DataMember(Name="source_interface")]
        public string SourceInterface { get; set; }

        /// <summary>
        /// Localized message string corresponding to destination_resource_type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to destination_resource_type Was added in version 3.0.0.0.</value>

        [DataMember(Name="destination_resource_type_l10n")]
        public string DestinationResourceTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to state Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to state Was added in version 3.0.0.0.</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to current_operation Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to current_operation Was added in version 3.0.0.0.</value>

        [DataMember(Name="current_operation_l10n")]
        public string CurrentOperationL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileImportSessionInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  SourceResourceId: ").Append(SourceResourceId).Append("\n");
            sb.Append("  DestinationResourceId: ").Append(DestinationResourceId).Append("\n");
            sb.Append("  DestinationResourceType: ").Append(DestinationResourceType).Append("\n");
            sb.Append("  ImportFileInterfaceId: ").Append(ImportFileInterfaceId).Append("\n");
            sb.Append("  NasServerId: ").Append(NasServerId).Append("\n");
            sb.Append("  LastUpdateTimestamp: ").Append(LastUpdateTimestamp).Append("\n");
            sb.Append("  ScheduledTimestamp: ").Append(ScheduledTimestamp).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CurrentOperation: ").Append(CurrentOperation).Append("\n");
            sb.Append("  CurrentOperationProgressPercentage: ").Append(CurrentOperationProgressPercentage).Append("\n");
            sb.Append("  EstimatedCompletionTimestamp: ").Append(EstimatedCompletionTimestamp).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  SourceSmbAdminUsername: ").Append(SourceSmbAdminUsername).Append("\n");
            sb.Append("  SourceDhsmUsername: ").Append(SourceDhsmUsername).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  SourceInterface: ").Append(SourceInterface).Append("\n");
            sb.Append("  DestinationResourceTypeL10n: ").Append(DestinationResourceTypeL10n).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  CurrentOperationL10n: ").Append(CurrentOperationL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileImportSessionInstance)obj);
        }

        /// <summary>
        /// Returns true if FileImportSessionInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of FileImportSessionInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileImportSessionInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    SourceResourceId == other.SourceResourceId ||
                    SourceResourceId != null &&
                    SourceResourceId.Equals(other.SourceResourceId)
                ) && 
                (
                    DestinationResourceId == other.DestinationResourceId ||
                    DestinationResourceId != null &&
                    DestinationResourceId.Equals(other.DestinationResourceId)
                ) && 
                (
                    DestinationResourceType == other.DestinationResourceType ||
                    DestinationResourceType != null &&
                    DestinationResourceType.Equals(other.DestinationResourceType)
                ) && 
                (
                    ImportFileInterfaceId == other.ImportFileInterfaceId ||
                    ImportFileInterfaceId != null &&
                    ImportFileInterfaceId.Equals(other.ImportFileInterfaceId)
                ) && 
                (
                    NasServerId == other.NasServerId ||
                    NasServerId != null &&
                    NasServerId.Equals(other.NasServerId)
                ) && 
                (
                    LastUpdateTimestamp == other.LastUpdateTimestamp ||
                    LastUpdateTimestamp != null &&
                    LastUpdateTimestamp.Equals(other.LastUpdateTimestamp)
                ) && 
                (
                    ScheduledTimestamp == other.ScheduledTimestamp ||
                    ScheduledTimestamp != null &&
                    ScheduledTimestamp.Equals(other.ScheduledTimestamp)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    CurrentOperation == other.CurrentOperation ||
                    CurrentOperation != null &&
                    CurrentOperation.Equals(other.CurrentOperation)
                ) && 
                (
                    CurrentOperationProgressPercentage == other.CurrentOperationProgressPercentage ||
                    CurrentOperationProgressPercentage != null &&
                    CurrentOperationProgressPercentage.Equals(other.CurrentOperationProgressPercentage)
                ) && 
                (
                    EstimatedCompletionTimestamp == other.EstimatedCompletionTimestamp ||
                    EstimatedCompletionTimestamp != null &&
                    EstimatedCompletionTimestamp.Equals(other.EstimatedCompletionTimestamp)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    SourceSmbAdminUsername == other.SourceSmbAdminUsername ||
                    SourceSmbAdminUsername != null &&
                    SourceSmbAdminUsername.Equals(other.SourceSmbAdminUsername)
                ) && 
                (
                    SourceDhsmUsername == other.SourceDhsmUsername ||
                    SourceDhsmUsername != null &&
                    SourceDhsmUsername.Equals(other.SourceDhsmUsername)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    SourceInterface == other.SourceInterface ||
                    SourceInterface != null &&
                    SourceInterface.Equals(other.SourceInterface)
                ) && 
                (
                    DestinationResourceTypeL10n == other.DestinationResourceTypeL10n ||
                    DestinationResourceTypeL10n != null &&
                    DestinationResourceTypeL10n.Equals(other.DestinationResourceTypeL10n)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    CurrentOperationL10n == other.CurrentOperationL10n ||
                    CurrentOperationL10n != null &&
                    CurrentOperationL10n.Equals(other.CurrentOperationL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (SourceResourceId != null)
                    hashCode = hashCode * 59 + SourceResourceId.GetHashCode();
                    if (DestinationResourceId != null)
                    hashCode = hashCode * 59 + DestinationResourceId.GetHashCode();
                    if (DestinationResourceType != null)
                    hashCode = hashCode * 59 + DestinationResourceType.GetHashCode();
                    if (ImportFileInterfaceId != null)
                    hashCode = hashCode * 59 + ImportFileInterfaceId.GetHashCode();
                    if (NasServerId != null)
                    hashCode = hashCode * 59 + NasServerId.GetHashCode();
                    if (LastUpdateTimestamp != null)
                    hashCode = hashCode * 59 + LastUpdateTimestamp.GetHashCode();
                    if (ScheduledTimestamp != null)
                    hashCode = hashCode * 59 + ScheduledTimestamp.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (CurrentOperation != null)
                    hashCode = hashCode * 59 + CurrentOperation.GetHashCode();
                    if (CurrentOperationProgressPercentage != null)
                    hashCode = hashCode * 59 + CurrentOperationProgressPercentage.GetHashCode();
                    if (EstimatedCompletionTimestamp != null)
                    hashCode = hashCode * 59 + EstimatedCompletionTimestamp.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (SourceSmbAdminUsername != null)
                    hashCode = hashCode * 59 + SourceSmbAdminUsername.GetHashCode();
                    if (SourceDhsmUsername != null)
                    hashCode = hashCode * 59 + SourceDhsmUsername.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (SourceInterface != null)
                    hashCode = hashCode * 59 + SourceInterface.GetHashCode();
                    if (DestinationResourceTypeL10n != null)
                    hashCode = hashCode * 59 + DestinationResourceTypeL10n.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (CurrentOperationL10n != null)
                    hashCode = hashCode * 59 + CurrentOperationL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileImportSessionInstance left, FileImportSessionInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileImportSessionInstance left, FileImportSessionInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
