/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a policy. Values was added in 3.0.0.0: is_replica, is_read_only. This resource type has queriable associations from virtual_volume, virtual_machine, volume, volume_group, nas_server, file_system, performance_rule, snapshot_rule, replication_rule, replication_group
    /// </summary>
    [DataContract]
    public partial class PolicyInstance : IEquatable<PolicyInstance>
    { 
        /// <summary>
        /// Unique identifier of the policy.
        /// </summary>
        /// <value>Unique identifier of the policy.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Policy name.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Policy name.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Policy description.
        /// </summary>
        /// <value>Policy description.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public PolicyTypeEnum? Type { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="managed_by")]
        public PolicyManagedByEnum? ManagedBy { get; set; }

        /// <summary>
        /// Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="managed_by_id")]
        public string ManagedById { get; set; }

        /// <summary>
        /// Indicates whether this policy can be modified.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Indicates whether this policy can be modified.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_read_only")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Indicates if this is a replica of a policy on a remote system that is the source of a replication session replicating a resource to the local system. A policy of this type is restricted from many operations. 
        /// </summary>
        /// <value>Indicates if this is a replica of a policy on a remote system that is the source of a replication session replicating a resource to the local system. A policy of this type is restricted from many operations. </value>

        [DataMember(Name="is_replica")]
        public bool? IsReplica { get; set; }

        /// <summary>
        /// Localized message string corresponding to type
        /// </summary>
        /// <value>Localized message string corresponding to type</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to managed_by Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to managed_by Was added in version 3.0.0.0.</value>

        [DataMember(Name="managed_by_l10n")]
        public string ManagedByL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_volume association.</value>

        [DataMember(Name="virtual_volumes")]
        public List<VirtualVolumeInstance> VirtualVolumes { get; set; }

        /// <summary>
        /// This is the embeddable reference form of io_limit_rule_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of io_limit_rule_id attribute.</value>

        [DataMember(Name="io_limit_rule")]
        public IoLimitRuleInstance IoLimitRule { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_machine association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_machine association.</value>

        [DataMember(Name="virtual_machines")]
        public List<VirtualMachineInstance> VirtualMachines { get; set; }

        /// <summary>
        /// This is the inverse of the resource type volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type volume association.</value>

        [DataMember(Name="volumes")]
        public List<VolumeInstance> Volumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type volume association.</value>

        [DataMember(Name="qos_volumes")]
        public List<VolumeInstance> QosVolumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type volume_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type volume_group association.</value>

        [DataMember(Name="volume_groups")]
        public List<VolumeGroupInstance> VolumeGroups { get; set; }

        /// <summary>
        /// This is the inverse of the resource type volume_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type volume_group association.</value>

        [DataMember(Name="qos_volume_groups")]
        public List<VolumeGroupInstance> QosVolumeGroups { get; set; }

        /// <summary>
        /// This is the inverse of the resource type nas_server association.
        /// </summary>
        /// <value>This is the inverse of the resource type nas_server association.</value>

        [DataMember(Name="nas_servers")]
        public List<NasServerInstance> NasServers { get; set; }

        /// <summary>
        /// This is the inverse of the resource type file_system association.
        /// </summary>
        /// <value>This is the inverse of the resource type file_system association.</value>

        [DataMember(Name="file_systems")]
        public List<FileSystemInstance> FileSystems { get; set; }

        /// <summary>
        /// List of the performance_rules that are associated with this policy.
        /// </summary>
        /// <value>List of the performance_rules that are associated with this policy.</value>

        [DataMember(Name="performance_rules")]
        public List<PerformanceRuleInstance> PerformanceRules { get; set; }

        /// <summary>
        /// List of the snapshot_rules that are associated with this policy.
        /// </summary>
        /// <value>List of the snapshot_rules that are associated with this policy.</value>

        [DataMember(Name="snapshot_rules")]
        public List<SnapshotRuleInstance> SnapshotRules { get; set; }

        /// <summary>
        /// List of the replication_rules that are associated with this policy.
        /// </summary>
        /// <value>List of the replication_rules that are associated with this policy.</value>

        [DataMember(Name="replication_rules")]
        public List<ReplicationRuleInstance> ReplicationRules { get; set; }

        /// <summary>
        /// List of the replication_groups that are associated with this policy.
        /// </summary>
        /// <value>List of the replication_groups that are associated with this policy.</value>

        [DataMember(Name="replication_groups")]
        public List<ReplicationGroupInstance> ReplicationGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ManagedBy: ").Append(ManagedBy).Append("\n");
            sb.Append("  ManagedById: ").Append(ManagedById).Append("\n");
            sb.Append("  IsReadOnly: ").Append(IsReadOnly).Append("\n");
            sb.Append("  IsReplica: ").Append(IsReplica).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  ManagedByL10n: ").Append(ManagedByL10n).Append("\n");
            sb.Append("  VirtualVolumes: ").Append(VirtualVolumes).Append("\n");
            sb.Append("  IoLimitRule: ").Append(IoLimitRule).Append("\n");
            sb.Append("  VirtualMachines: ").Append(VirtualMachines).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("  QosVolumes: ").Append(QosVolumes).Append("\n");
            sb.Append("  VolumeGroups: ").Append(VolumeGroups).Append("\n");
            sb.Append("  QosVolumeGroups: ").Append(QosVolumeGroups).Append("\n");
            sb.Append("  NasServers: ").Append(NasServers).Append("\n");
            sb.Append("  FileSystems: ").Append(FileSystems).Append("\n");
            sb.Append("  PerformanceRules: ").Append(PerformanceRules).Append("\n");
            sb.Append("  SnapshotRules: ").Append(SnapshotRules).Append("\n");
            sb.Append("  ReplicationRules: ").Append(ReplicationRules).Append("\n");
            sb.Append("  ReplicationGroups: ").Append(ReplicationGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PolicyInstance)obj);
        }

        /// <summary>
        /// Returns true if PolicyInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of PolicyInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    ManagedBy == other.ManagedBy ||
                    ManagedBy != null &&
                    ManagedBy.Equals(other.ManagedBy)
                ) && 
                (
                    ManagedById == other.ManagedById ||
                    ManagedById != null &&
                    ManagedById.Equals(other.ManagedById)
                ) && 
                (
                    IsReadOnly == other.IsReadOnly ||
                    IsReadOnly != null &&
                    IsReadOnly.Equals(other.IsReadOnly)
                ) && 
                (
                    IsReplica == other.IsReplica ||
                    IsReplica != null &&
                    IsReplica.Equals(other.IsReplica)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    ManagedByL10n == other.ManagedByL10n ||
                    ManagedByL10n != null &&
                    ManagedByL10n.Equals(other.ManagedByL10n)
                ) && 
                (
                    VirtualVolumes == other.VirtualVolumes ||
                    VirtualVolumes != null &&
                    VirtualVolumes.SequenceEqual(other.VirtualVolumes)
                ) && 
                (
                    IoLimitRule == other.IoLimitRule ||
                    IoLimitRule != null &&
                    IoLimitRule.Equals(other.IoLimitRule)
                ) && 
                (
                    VirtualMachines == other.VirtualMachines ||
                    VirtualMachines != null &&
                    VirtualMachines.SequenceEqual(other.VirtualMachines)
                ) && 
                (
                    Volumes == other.Volumes ||
                    Volumes != null &&
                    Volumes.SequenceEqual(other.Volumes)
                ) && 
                (
                    QosVolumes == other.QosVolumes ||
                    QosVolumes != null &&
                    QosVolumes.SequenceEqual(other.QosVolumes)
                ) && 
                (
                    VolumeGroups == other.VolumeGroups ||
                    VolumeGroups != null &&
                    VolumeGroups.SequenceEqual(other.VolumeGroups)
                ) && 
                (
                    QosVolumeGroups == other.QosVolumeGroups ||
                    QosVolumeGroups != null &&
                    QosVolumeGroups.SequenceEqual(other.QosVolumeGroups)
                ) && 
                (
                    NasServers == other.NasServers ||
                    NasServers != null &&
                    NasServers.SequenceEqual(other.NasServers)
                ) && 
                (
                    FileSystems == other.FileSystems ||
                    FileSystems != null &&
                    FileSystems.SequenceEqual(other.FileSystems)
                ) && 
                (
                    PerformanceRules == other.PerformanceRules ||
                    PerformanceRules != null &&
                    PerformanceRules.SequenceEqual(other.PerformanceRules)
                ) && 
                (
                    SnapshotRules == other.SnapshotRules ||
                    SnapshotRules != null &&
                    SnapshotRules.SequenceEqual(other.SnapshotRules)
                ) && 
                (
                    ReplicationRules == other.ReplicationRules ||
                    ReplicationRules != null &&
                    ReplicationRules.SequenceEqual(other.ReplicationRules)
                ) && 
                (
                    ReplicationGroups == other.ReplicationGroups ||
                    ReplicationGroups != null &&
                    ReplicationGroups.SequenceEqual(other.ReplicationGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (ManagedBy != null)
                    hashCode = hashCode * 59 + ManagedBy.GetHashCode();
                    if (ManagedById != null)
                    hashCode = hashCode * 59 + ManagedById.GetHashCode();
                    if (IsReadOnly != null)
                    hashCode = hashCode * 59 + IsReadOnly.GetHashCode();
                    if (IsReplica != null)
                    hashCode = hashCode * 59 + IsReplica.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (ManagedByL10n != null)
                    hashCode = hashCode * 59 + ManagedByL10n.GetHashCode();
                    if (VirtualVolumes != null)
                    hashCode = hashCode * 59 + VirtualVolumes.GetHashCode();
                    if (IoLimitRule != null)
                    hashCode = hashCode * 59 + IoLimitRule.GetHashCode();
                    if (VirtualMachines != null)
                    hashCode = hashCode * 59 + VirtualMachines.GetHashCode();
                    if (Volumes != null)
                    hashCode = hashCode * 59 + Volumes.GetHashCode();
                    if (QosVolumes != null)
                    hashCode = hashCode * 59 + QosVolumes.GetHashCode();
                    if (VolumeGroups != null)
                    hashCode = hashCode * 59 + VolumeGroups.GetHashCode();
                    if (QosVolumeGroups != null)
                    hashCode = hashCode * 59 + QosVolumeGroups.GetHashCode();
                    if (NasServers != null)
                    hashCode = hashCode * 59 + NasServers.GetHashCode();
                    if (FileSystems != null)
                    hashCode = hashCode * 59 + FileSystems.GetHashCode();
                    if (PerformanceRules != null)
                    hashCode = hashCode * 59 + PerformanceRules.GetHashCode();
                    if (SnapshotRules != null)
                    hashCode = hashCode * 59 + SnapshotRules.GetHashCode();
                    if (ReplicationRules != null)
                    hashCode = hashCode * 59 + ReplicationRules.GetHashCode();
                    if (ReplicationGroups != null)
                    hashCode = hashCode * 59 + ReplicationGroups.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PolicyInstance left, PolicyInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PolicyInstance left, PolicyInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
