/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    ///  Was added in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.
    /// </summary>
    [DataContract]
    public partial class FlrInstance : IEquatable<FlrInstance>
    { 
        /// <summary>
        /// Gets or Sets Mode
        /// </summary>

        [DataMember(Name="mode")]
        public FileSystemFLRModeEnum? Mode { get; set; }

        /// <summary>
        /// The shortest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. This value must be less than or equal to the maximum retention period. Any attempt to lock a file for less than the minimum retention period results in the file being locked until the current system time plus the minimum retention period is reached. The default value for the minimum retention period is 1 day. Format [integer][Y|M|D]|\&quot;infinite\&quot; (example \&quot;5Y\&quot; for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. Setting infinite means that the files can never be deleted.  This setting is significant only when flr mode is not None. 
        /// </summary>
        /// <value>The shortest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. This value must be less than or equal to the maximum retention period. Any attempt to lock a file for less than the minimum retention period results in the file being locked until the current system time plus the minimum retention period is reached. The default value for the minimum retention period is 1 day. Format [integer][Y|M|D]|\&quot;infinite\&quot; (example \&quot;5Y\&quot; for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. Setting infinite means that the files can never be deleted.  This setting is significant only when flr mode is not None. </value>

        [DataMember(Name="minimum_retention")]
        public string MinimumRetention { get; set; }

        /// <summary>
        /// The default retention period that is used in an FLR-enabled file system when a file is locked and a retention period is not specified. This value must be greater than or equal to the minimum retention period, and less than or equal to the maximum retention period. Format [integer][Y|M|D]|\&quot;infinite\&quot; (example \&quot;5Y\&quot; for 5 years). Specify Y for years, M for months, D for days, or infinite. The default value for the default retention period is infinite, which means that the files can never be deleted.  This setting is significant only when flr mode is not None. 
        /// </summary>
        /// <value>The default retention period that is used in an FLR-enabled file system when a file is locked and a retention period is not specified. This value must be greater than or equal to the minimum retention period, and less than or equal to the maximum retention period. Format [integer][Y|M|D]|\&quot;infinite\&quot; (example \&quot;5Y\&quot; for 5 years). Specify Y for years, M for months, D for days, or infinite. The default value for the default retention period is infinite, which means that the files can never be deleted.  This setting is significant only when flr mode is not None. </value>

        [DataMember(Name="default_retention")]
        public string DefaultRetention { get; set; }

        /// <summary>
        /// The longest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. Any attempt to lock a file for more than this maximum retention period results in the file being locked until the current system time plus the maximum retention period is reached. Format [integer][Y|M|D]|\&quot;infinite\&quot; (example \&quot;5Y\&quot; for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. The default value for the maximum retention period is infinite, which means that the files can never be deleted.  This setting is significant only when flr mode is not None. 
        /// </summary>
        /// <value>The longest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. Any attempt to lock a file for more than this maximum retention period results in the file being locked until the current system time plus the maximum retention period is reached. Format [integer][Y|M|D]|\&quot;infinite\&quot; (example \&quot;5Y\&quot; for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. The default value for the maximum retention period is infinite, which means that the files can never be deleted.  This setting is significant only when flr mode is not None. </value>

        [DataMember(Name="maximum_retention")]
        public string MaximumRetention { get; set; }

        /// <summary>
        /// Indicates whether to automatically lock files in an FLR-enabled file system. When true files are locked automatically after modification based on the policy_interval. When enabled, auto-locked files are set with the default retention period value.  This setting is significant only when flr mode is not None. 
        /// </summary>
        /// <value>Indicates whether to automatically lock files in an FLR-enabled file system. When true files are locked automatically after modification based on the policy_interval. When enabled, auto-locked files are set with the default retention period value.  This setting is significant only when flr mode is not None. </value>

        [DataMember(Name="auto_lock")]
        public bool? AutoLock { get; set; }

        /// <summary>
        /// Indicates whether locked files will be automatically delete from an FLR-enabled file system once their retention periods have expired.  This setting is significant only when flr mode is not None. 
        /// </summary>
        /// <value>Indicates whether locked files will be automatically delete from an FLR-enabled file system once their retention periods have expired.  This setting is significant only when flr mode is not None. </value>

        [DataMember(Name="auto_delete")]
        public bool? AutoDelete { get; set; }

        /// <summary>
        /// Indicates how long to wait (in seconds) after files are modified before the files are automatically locked. The default value is 3600 seconds (1 hour).  This setting is significant only when flr mode is not None. 
        /// </summary>
        /// <value>Indicates how long to wait (in seconds) after files are modified before the files are automatically locked. The default value is 3600 seconds (1 hour).  This setting is significant only when flr mode is not None. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="policy_interval")]
        public int? PolicyInterval { get; set; }

        /// <summary>
        /// Indicates whether FLR file system has protected files.  This setting is significant only when flr mode is not None. 
        /// </summary>
        /// <value>Indicates whether FLR file system has protected files.  This setting is significant only when flr mode is not None. </value>

        [DataMember(Name="has_protected_files")]
        public bool? HasProtectedFiles { get; set; }

        /// <summary>
        /// Per file system clock used to track the retention date. It is initialized when an FLR-enabled file system is first mounted on a NAS Server. It does not advance when a file system is not mounted.  This setting is significant only when flr mode is not None. 
        /// </summary>
        /// <value>Per file system clock used to track the retention date. It is initialized when an FLR-enabled file system is first mounted on a NAS Server. It does not advance when a file system is not mounted.  This setting is significant only when flr mode is not None. </value>

        [DataMember(Name="clock_time")]
        public DateTime? ClockTime { get; set; }

        /// <summary>
        /// Maximum date and time that has been set on any locked file in an FLR-enabled file system, which means that the file system itself will be protected until this date and time. This value is compared to the FLR Clock Time to determine whether the date and time have passed. Value is null if the maximum locked date is infinite, or a specific time.  This setting is significant only when flr mode is not None. 
        /// </summary>
        /// <value>Maximum date and time that has been set on any locked file in an FLR-enabled file system, which means that the file system itself will be protected until this date and time. This value is compared to the FLR Clock Time to determine whether the date and time have passed. Value is null if the maximum locked date is infinite, or a specific time.  This setting is significant only when flr mode is not None. </value>

        [DataMember(Name="maximum_retention_date")]
        public DateTime? MaximumRetentionDate { get; set; }

        /// <summary>
        /// Localized message string corresponding to mode Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to mode Was added in version 3.0.0.0.</value>

        [DataMember(Name="mode_l10n")]
        public string ModeL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlrInstance {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  MinimumRetention: ").Append(MinimumRetention).Append("\n");
            sb.Append("  DefaultRetention: ").Append(DefaultRetention).Append("\n");
            sb.Append("  MaximumRetention: ").Append(MaximumRetention).Append("\n");
            sb.Append("  AutoLock: ").Append(AutoLock).Append("\n");
            sb.Append("  AutoDelete: ").Append(AutoDelete).Append("\n");
            sb.Append("  PolicyInterval: ").Append(PolicyInterval).Append("\n");
            sb.Append("  HasProtectedFiles: ").Append(HasProtectedFiles).Append("\n");
            sb.Append("  ClockTime: ").Append(ClockTime).Append("\n");
            sb.Append("  MaximumRetentionDate: ").Append(MaximumRetentionDate).Append("\n");
            sb.Append("  ModeL10n: ").Append(ModeL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FlrInstance)obj);
        }

        /// <summary>
        /// Returns true if FlrInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of FlrInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlrInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Mode == other.Mode ||
                    Mode != null &&
                    Mode.Equals(other.Mode)
                ) && 
                (
                    MinimumRetention == other.MinimumRetention ||
                    MinimumRetention != null &&
                    MinimumRetention.Equals(other.MinimumRetention)
                ) && 
                (
                    DefaultRetention == other.DefaultRetention ||
                    DefaultRetention != null &&
                    DefaultRetention.Equals(other.DefaultRetention)
                ) && 
                (
                    MaximumRetention == other.MaximumRetention ||
                    MaximumRetention != null &&
                    MaximumRetention.Equals(other.MaximumRetention)
                ) && 
                (
                    AutoLock == other.AutoLock ||
                    AutoLock != null &&
                    AutoLock.Equals(other.AutoLock)
                ) && 
                (
                    AutoDelete == other.AutoDelete ||
                    AutoDelete != null &&
                    AutoDelete.Equals(other.AutoDelete)
                ) && 
                (
                    PolicyInterval == other.PolicyInterval ||
                    PolicyInterval != null &&
                    PolicyInterval.Equals(other.PolicyInterval)
                ) && 
                (
                    HasProtectedFiles == other.HasProtectedFiles ||
                    HasProtectedFiles != null &&
                    HasProtectedFiles.Equals(other.HasProtectedFiles)
                ) && 
                (
                    ClockTime == other.ClockTime ||
                    ClockTime != null &&
                    ClockTime.Equals(other.ClockTime)
                ) && 
                (
                    MaximumRetentionDate == other.MaximumRetentionDate ||
                    MaximumRetentionDate != null &&
                    MaximumRetentionDate.Equals(other.MaximumRetentionDate)
                ) && 
                (
                    ModeL10n == other.ModeL10n ||
                    ModeL10n != null &&
                    ModeL10n.Equals(other.ModeL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Mode != null)
                    hashCode = hashCode * 59 + Mode.GetHashCode();
                    if (MinimumRetention != null)
                    hashCode = hashCode * 59 + MinimumRetention.GetHashCode();
                    if (DefaultRetention != null)
                    hashCode = hashCode * 59 + DefaultRetention.GetHashCode();
                    if (MaximumRetention != null)
                    hashCode = hashCode * 59 + MaximumRetention.GetHashCode();
                    if (AutoLock != null)
                    hashCode = hashCode * 59 + AutoLock.GetHashCode();
                    if (AutoDelete != null)
                    hashCode = hashCode * 59 + AutoDelete.GetHashCode();
                    if (PolicyInterval != null)
                    hashCode = hashCode * 59 + PolicyInterval.GetHashCode();
                    if (HasProtectedFiles != null)
                    hashCode = hashCode * 59 + HasProtectedFiles.GetHashCode();
                    if (ClockTime != null)
                    hashCode = hashCode * 59 + ClockTime.GetHashCode();
                    if (MaximumRetentionDate != null)
                    hashCode = hashCode * 59 + MaximumRetentionDate.GetHashCode();
                    if (ModeL10n != null)
                    hashCode = hashCode * 59 + ModeL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FlrInstance left, FlrInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlrInstance left, FlrInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
