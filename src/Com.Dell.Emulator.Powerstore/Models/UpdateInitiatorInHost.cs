/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Parameters for updating initiator in host.
    /// </summary>
    [DataContract]
    public partial class UpdateInitiatorInHost : IEquatable<UpdateInitiatorInHost>
    { 
        /// <summary>
        /// Initiator name
        /// </summary>
        /// <value>Initiator name</value>

        [DataMember(Name="port_name")]
        public string PortName { get; set; }

        /// <summary>
        /// Username for CHAP authentication. This value must be 1 to 64 printable UTF-8 characters. CHAP username is required when the cluster CHAP mode is single authentication. 
        /// </summary>
        /// <value>Username for CHAP authentication. This value must be 1 to 64 printable UTF-8 characters. CHAP username is required when the cluster CHAP mode is single authentication. </value>

        [StringLength(64, MinimumLength=1)]
        [DataMember(Name="chap_single_username")]
        public string ChapSingleUsername { get; set; }

        /// <summary>
        /// Password for CHAP authentication. This value must be 12 to 64 printable UTF-8 characters. CHAP password is required when the cluster CHAP mode is single authentication. 
        /// </summary>
        /// <value>Password for CHAP authentication. This value must be 12 to 64 printable UTF-8 characters. CHAP password is required when the cluster CHAP mode is single authentication. </value>

        [StringLength(64, MinimumLength=12)]
        [DataMember(Name="chap_single_password")]
        public string ChapSinglePassword { get; set; }

        /// <summary>
        /// Username for CHAP authentication. This value must be 1 to 64 printable UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication. 
        /// </summary>
        /// <value>Username for CHAP authentication. This value must be 1 to 64 printable UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication. </value>

        [StringLength(64, MinimumLength=1)]
        [DataMember(Name="chap_mutual_username")]
        public string ChapMutualUsername { get; set; }

        /// <summary>
        /// Password for CHAP authentication. This value must be 12 to 64 printable UTF-8 characters. CHAP password is required when the cluster CHAP mode is mutual authentication. 
        /// </summary>
        /// <value>Password for CHAP authentication. This value must be 12 to 64 printable UTF-8 characters. CHAP password is required when the cluster CHAP mode is mutual authentication. </value>

        [StringLength(64, MinimumLength=12)]
        [DataMember(Name="chap_mutual_password")]
        public string ChapMutualPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateInitiatorInHost {\n");
            sb.Append("  PortName: ").Append(PortName).Append("\n");
            sb.Append("  ChapSingleUsername: ").Append(ChapSingleUsername).Append("\n");
            sb.Append("  ChapSinglePassword: ").Append(ChapSinglePassword).Append("\n");
            sb.Append("  ChapMutualUsername: ").Append(ChapMutualUsername).Append("\n");
            sb.Append("  ChapMutualPassword: ").Append(ChapMutualPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateInitiatorInHost)obj);
        }

        /// <summary>
        /// Returns true if UpdateInitiatorInHost instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateInitiatorInHost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateInitiatorInHost other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PortName == other.PortName ||
                    PortName != null &&
                    PortName.Equals(other.PortName)
                ) && 
                (
                    ChapSingleUsername == other.ChapSingleUsername ||
                    ChapSingleUsername != null &&
                    ChapSingleUsername.Equals(other.ChapSingleUsername)
                ) && 
                (
                    ChapSinglePassword == other.ChapSinglePassword ||
                    ChapSinglePassword != null &&
                    ChapSinglePassword.Equals(other.ChapSinglePassword)
                ) && 
                (
                    ChapMutualUsername == other.ChapMutualUsername ||
                    ChapMutualUsername != null &&
                    ChapMutualUsername.Equals(other.ChapMutualUsername)
                ) && 
                (
                    ChapMutualPassword == other.ChapMutualPassword ||
                    ChapMutualPassword != null &&
                    ChapMutualPassword.Equals(other.ChapMutualPassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PortName != null)
                    hashCode = hashCode * 59 + PortName.GetHashCode();
                    if (ChapSingleUsername != null)
                    hashCode = hashCode * 59 + ChapSingleUsername.GetHashCode();
                    if (ChapSinglePassword != null)
                    hashCode = hashCode * 59 + ChapSinglePassword.GetHashCode();
                    if (ChapMutualUsername != null)
                    hashCode = hashCode * 59 + ChapMutualUsername.GetHashCode();
                    if (ChapMutualPassword != null)
                    hashCode = hashCode * 59 + ChapMutualPassword.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateInitiatorInHost left, UpdateInitiatorInHost right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateInitiatorInHost left, UpdateInitiatorInHost right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
