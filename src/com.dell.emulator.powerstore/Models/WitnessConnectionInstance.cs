/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Witness connection information for a single node on a single appliance.  Was added in version 3.6.0.0.
    /// </summary>
    [DataContract]
    public partial class WitnessConnectionInstance : IEquatable<WitnessConnectionInstance>
    { 
        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public WitnessConnectionStateEnum? State { get; set; }

        /// <summary>
        /// The unique identifier for the appliance where the listed node resides.
        /// </summary>
        /// <value>The unique identifier for the appliance where the listed node resides.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// The unique identifier of the node who&#39;s connection is listed.
        /// </summary>
        /// <value>The unique identifier of the node who&#39;s connection is listed.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// A timestamp indicating the last time that this node&#39;s connection information was updated.
        /// </summary>
        /// <value>A timestamp indicating the last time that this node&#39;s connection information was updated.</value>

        [DataMember(Name="last_updated_timestamp")]
        public DateTime? LastUpdatedTimestamp { get; set; }

        /// <summary>
        /// Localized message string corresponding to state Was added in version 3.6.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to state Was added in version 3.6.0.0.</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WitnessConnectionInstance {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  LastUpdatedTimestamp: ").Append(LastUpdatedTimestamp).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WitnessConnectionInstance)obj);
        }

        /// <summary>
        /// Returns true if WitnessConnectionInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of WitnessConnectionInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WitnessConnectionInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    LastUpdatedTimestamp == other.LastUpdatedTimestamp ||
                    LastUpdatedTimestamp != null &&
                    LastUpdatedTimestamp.Equals(other.LastUpdatedTimestamp)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (LastUpdatedTimestamp != null)
                    hashCode = hashCode * 59 + LastUpdatedTimestamp.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WitnessConnectionInstance left, WitnessConnectionInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WitnessConnectionInstance left, WitnessConnectionInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
