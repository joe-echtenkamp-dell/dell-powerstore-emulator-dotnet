/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Server information for this appliance. Was added in version 3.6.0.0.
    /// </summary>
    [DataContract]
    public partial class RemoteSupportServersApplianceStatusInstance : IEquatable<RemoteSupportServersApplianceStatusInstance>
    { 
        /// <summary>
        /// The unique identifier for the remote support configuration.  Always \\\&quot;0\\\&quot;. 
        /// </summary>
        /// <value>The unique identifier for the remote support configuration.  Always \\\&quot;0\\\&quot;. </value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier for this server. 
        /// </summary>
        /// <value>The unique identifier for this server. </value>

        [DataMember(Name="remote_support_servers_id")]
        public string RemoteSupportServersId { get; set; }

        /// <summary>
        /// The unique identifier for this appliance. 
        /// </summary>
        /// <value>The unique identifier for this appliance. </value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// The percentage of successful requests. 
        /// </summary>
        /// <value>The percentage of successful requests. </value>

        [DataMember(Name="connectivity_status_value")]
        public float? ConnectivityStatusValue { get; set; }

        /// <summary>
        /// Gets or Sets ConnectivityStatus
        /// </summary>

        [DataMember(Name="connectivity_status")]
        public RemoteSupportApplianceConnectivityStatusEnum? ConnectivityStatus { get; set; }

        /// <summary>
        /// The relative priority of this status level. Used when calculating the cluster level status. 
        /// </summary>
        /// <value>The relative priority of this status level. Used when calculating the cluster level status. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="connectivity_status_priority")]
        public int? ConnectivityStatusPriority { get; set; }

        /// <summary>
        /// The last time that the status information was updated. 
        /// </summary>
        /// <value>The last time that the status information was updated. </value>

        [DataMember(Name="last_update")]
        public DateTime? LastUpdate { get; set; }

        /// <summary>
        /// Localized message string corresponding to connectivity_status Was added in version 3.6.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to connectivity_status Was added in version 3.6.0.0.</value>

        [DataMember(Name="connectivity_status_l10n")]
        public string ConnectivityStatusL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSupportServersApplianceStatusInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RemoteSupportServersId: ").Append(RemoteSupportServersId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  ConnectivityStatusValue: ").Append(ConnectivityStatusValue).Append("\n");
            sb.Append("  ConnectivityStatus: ").Append(ConnectivityStatus).Append("\n");
            sb.Append("  ConnectivityStatusPriority: ").Append(ConnectivityStatusPriority).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  ConnectivityStatusL10n: ").Append(ConnectivityStatusL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteSupportServersApplianceStatusInstance)obj);
        }

        /// <summary>
        /// Returns true if RemoteSupportServersApplianceStatusInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteSupportServersApplianceStatusInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSupportServersApplianceStatusInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    RemoteSupportServersId == other.RemoteSupportServersId ||
                    RemoteSupportServersId != null &&
                    RemoteSupportServersId.Equals(other.RemoteSupportServersId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    ConnectivityStatusValue == other.ConnectivityStatusValue ||
                    ConnectivityStatusValue != null &&
                    ConnectivityStatusValue.Equals(other.ConnectivityStatusValue)
                ) && 
                (
                    ConnectivityStatus == other.ConnectivityStatus ||
                    ConnectivityStatus != null &&
                    ConnectivityStatus.Equals(other.ConnectivityStatus)
                ) && 
                (
                    ConnectivityStatusPriority == other.ConnectivityStatusPriority ||
                    ConnectivityStatusPriority != null &&
                    ConnectivityStatusPriority.Equals(other.ConnectivityStatusPriority)
                ) && 
                (
                    LastUpdate == other.LastUpdate ||
                    LastUpdate != null &&
                    LastUpdate.Equals(other.LastUpdate)
                ) && 
                (
                    ConnectivityStatusL10n == other.ConnectivityStatusL10n ||
                    ConnectivityStatusL10n != null &&
                    ConnectivityStatusL10n.Equals(other.ConnectivityStatusL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (RemoteSupportServersId != null)
                    hashCode = hashCode * 59 + RemoteSupportServersId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (ConnectivityStatusValue != null)
                    hashCode = hashCode * 59 + ConnectivityStatusValue.GetHashCode();
                    if (ConnectivityStatus != null)
                    hashCode = hashCode * 59 + ConnectivityStatus.GetHashCode();
                    if (ConnectivityStatusPriority != null)
                    hashCode = hashCode * 59 + ConnectivityStatusPriority.GetHashCode();
                    if (LastUpdate != null)
                    hashCode = hashCode * 59 + LastUpdate.GetHashCode();
                    if (ConnectivityStatusL10n != null)
                    hashCode = hashCode * 59 + ConnectivityStatusL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteSupportServersApplianceStatusInstance left, RemoteSupportServersApplianceStatusInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteSupportServersApplianceStatusInstance left, RemoteSupportServersApplianceStatusInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
