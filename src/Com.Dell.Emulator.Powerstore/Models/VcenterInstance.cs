/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Properties of a vCenter. This resource type has queriable associations from virtual_machine, datastore, vsphere_host
    /// </summary>
    [DataContract]
    public partial class VcenterInstance : IEquatable<VcenterInstance>
    { 
        /// <summary>
        /// Unique identifier of the vCenter instance.
        /// </summary>
        /// <value>Unique identifier of the vCenter instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// UUID instance of the vCenter.
        /// </summary>
        /// <value>UUID instance of the vCenter.</value>

        [DataMember(Name="instance_uuid")]
        public string InstanceUuid { get; set; }

        /// <summary>
        /// IP address of vCenter host, in IPv4, IPv6, or hostname format.
        /// </summary>
        /// <value>IP address of vCenter host, in IPv4, IPv6, or hostname format.</value>

        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// User name to login to vCenter.
        /// </summary>
        /// <value>User name to login to vCenter.</value>

        [DataMember(Name="username")]
        public string Username { get; set; }

        /// <summary>
        /// Indicates whether the connection is secured with the vCenter SSL certificate validation or not.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Indicates whether the connection is secured with the vCenter SSL certificate validation or not.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_verify_server_cert")]
        public bool? IsVerifyServerCert { get; set; }

        /// <summary>
        /// Version of the vCenter including its build number. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Version of the vCenter including its build number. Was added in version 3.0.0.0.</value>

        [DataMember(Name="version")]
        public string Version { get; set; }

        /// <summary>
        /// General status of the VASA vendor provider in vCenter. A VASA vendor provider is required for PowerStoreX deployments, and optional for PowerStoreT deployments. To register or re-register the VASA vendor provider, pass appropriate storage system credentials using the modify request.  Was added in version 2.0.0.0.
        /// </summary>
        /// <value>General status of the VASA vendor provider in vCenter. A VASA vendor provider is required for PowerStoreX deployments, and optional for PowerStoreT deployments. To register or re-register the VASA vendor provider, pass appropriate storage system credentials using the modify request.  Was added in version 2.0.0.0.</value>

        [DataMember(Name="vendor_provider_status")]
        public VendorProviderStatusEnum? VendorProviderStatus { get; set; }

        /// <summary>
        /// Localized message string corresponding to vendor_provider_status Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to vendor_provider_status Was added in version 2.0.0.0.</value>

        [DataMember(Name="vendor_provider_status_l10n")]
        public string VendorProviderStatusL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_machine association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_machine association.</value>

        [DataMember(Name="virtual_machines")]
        public List<VirtualMachineInstance> VirtualMachines { get; set; }

        /// <summary>
        /// This is the inverse of the resource type datastore association.
        /// </summary>
        /// <value>This is the inverse of the resource type datastore association.</value>

        [DataMember(Name="datastores")]
        public List<DatastoreInstance> Datastores { get; set; }

        /// <summary>
        /// This is the inverse of the resource type vsphere_host association.
        /// </summary>
        /// <value>This is the inverse of the resource type vsphere_host association.</value>

        [DataMember(Name="vsphere_hosts")]
        public List<VsphereHostInstance> VsphereHosts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VcenterInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstanceUuid: ").Append(InstanceUuid).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  IsVerifyServerCert: ").Append(IsVerifyServerCert).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  VendorProviderStatus: ").Append(VendorProviderStatus).Append("\n");
            sb.Append("  VendorProviderStatusL10n: ").Append(VendorProviderStatusL10n).Append("\n");
            sb.Append("  VirtualMachines: ").Append(VirtualMachines).Append("\n");
            sb.Append("  Datastores: ").Append(Datastores).Append("\n");
            sb.Append("  VsphereHosts: ").Append(VsphereHosts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VcenterInstance)obj);
        }

        /// <summary>
        /// Returns true if VcenterInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of VcenterInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VcenterInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    InstanceUuid == other.InstanceUuid ||
                    InstanceUuid != null &&
                    InstanceUuid.Equals(other.InstanceUuid)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    IsVerifyServerCert == other.IsVerifyServerCert ||
                    IsVerifyServerCert != null &&
                    IsVerifyServerCert.Equals(other.IsVerifyServerCert)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    VendorProviderStatus == other.VendorProviderStatus ||
                    VendorProviderStatus != null &&
                    VendorProviderStatus.Equals(other.VendorProviderStatus)
                ) && 
                (
                    VendorProviderStatusL10n == other.VendorProviderStatusL10n ||
                    VendorProviderStatusL10n != null &&
                    VendorProviderStatusL10n.Equals(other.VendorProviderStatusL10n)
                ) && 
                (
                    VirtualMachines == other.VirtualMachines ||
                    VirtualMachines != null &&
                    VirtualMachines.SequenceEqual(other.VirtualMachines)
                ) && 
                (
                    Datastores == other.Datastores ||
                    Datastores != null &&
                    Datastores.SequenceEqual(other.Datastores)
                ) && 
                (
                    VsphereHosts == other.VsphereHosts ||
                    VsphereHosts != null &&
                    VsphereHosts.SequenceEqual(other.VsphereHosts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (InstanceUuid != null)
                    hashCode = hashCode * 59 + InstanceUuid.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (IsVerifyServerCert != null)
                    hashCode = hashCode * 59 + IsVerifyServerCert.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (VendorProviderStatus != null)
                    hashCode = hashCode * 59 + VendorProviderStatus.GetHashCode();
                    if (VendorProviderStatusL10n != null)
                    hashCode = hashCode * 59 + VendorProviderStatusL10n.GetHashCode();
                    if (VirtualMachines != null)
                    hashCode = hashCode * 59 + VirtualMachines.GetHashCode();
                    if (Datastores != null)
                    hashCode = hashCode * 59 + Datastores.GetHashCode();
                    if (VsphereHosts != null)
                    hashCode = hashCode * 59 + VsphereHosts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VcenterInstance left, VcenterInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VcenterInstance left, VcenterInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
