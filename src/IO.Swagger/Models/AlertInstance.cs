/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// An alert is a summation of one or more events that need (or needed) attention. Some events require attention and result in an alert being generated. Other events can update or clear an alert when the system detects a change in the condition that needs attention. To deal with an alert, look at the information about the most recent event included in the alert. In particular, examine the resource that the alert was generated about (using resource_type and resource_id or resource_name) as well as the system_impact_l10n and suggested repair_flow_l10n parameters. 
    /// </summary>
    [DataContract]
    public partial class AlertInstance : IEquatable<AlertInstance>
    { 
        /// <summary>
        /// Unique identifier of the alert.
        /// </summary>
        /// <value>Unique identifier of the alert.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The event code of the latest event for this alert.
        /// </summary>
        /// <value>The event code of the latest event for this alert.</value>

        [DataMember(Name="event_code")]
        public string EventCode { get; set; }

        /// <summary>
        /// Severity of the latest event for this alert.
        /// </summary>
        /// <value>Severity of the latest event for this alert.</value>

        [DataMember(Name="severity")]
        public SeverityEnum? Severity { get; set; }

        /// <summary>
        /// Type of the resource instance which generated this alert.
        /// </summary>
        /// <value>Type of the resource instance which generated this alert.</value>

        [DataMember(Name="resource_type")]
        public ResourceTypeEnum? ResourceType { get; set; }

        /// <summary>
        /// Unique identifier of the resource instance which generated this alert. 
        /// </summary>
        /// <value>Unique identifier of the resource instance which generated this alert. </value>

        [DataMember(Name="resource_id")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Name of the resource instance which generated this alert.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the resource instance which generated this alert.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="resource_name")]
        public string ResourceName { get; set; }

        /// <summary>
        /// Latest event&#39;s description text for this alert.
        /// </summary>
        /// <value>Latest event&#39;s description text for this alert.</value>

        [DataMember(Name="description_l10n")]
        public string DescriptionL10n { get; set; }

        /// <summary>
        /// Timestamp of the latest event for this alert.
        /// </summary>
        /// <value>Timestamp of the latest event for this alert.</value>

        [DataMember(Name="generated_timestamp")]
        public DateTime? GeneratedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public AlertStateEnum? State { get; set; }

        /// <summary>
        /// Whether an alert has been acknowledged.
        /// </summary>
        /// <value>Whether an alert has been acknowledged.</value>

        [DataMember(Name="is_acknowledged")]
        public bool? IsAcknowledged { get; set; }

        /// <summary>
        /// Timestamp of the first event for this alert.
        /// </summary>
        /// <value>Timestamp of the first event for this alert.</value>

        [DataMember(Name="raised_timestamp")]
        public DateTime? RaisedTimestamp { get; set; }

        /// <summary>
        /// Timestamp of the event that cleared this alert.
        /// </summary>
        /// <value>Timestamp of the event that cleared this alert.</value>

        [DataMember(Name="cleared_timestamp")]
        public DateTime? ClearedTimestamp { get; set; }

        /// <summary>
        /// Timestamp when the event resulted in a notification to support (via Secured Remote Services), if any. 
        /// </summary>
        /// <value>Timestamp when the event resulted in a notification to support (via Secured Remote Services), if any. </value>

        [DataMember(Name="called_home_timestamp")]
        public DateTime? CalledHomeTimestamp { get; set; }

        /// <summary>
        /// Timestamp when the email was sent for the raised alert, if any.
        /// </summary>
        /// <value>Timestamp when the email was sent for the raised alert, if any.</value>

        [DataMember(Name="email_sent_timestamp")]
        public DateTime? EmailSentTimestamp { get; set; }

        /// <summary>
        /// Timestamp when the SNMP trap was sent for the raised alert, if any. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Timestamp when the SNMP trap was sent for the raised alert, if any. Was added in version 2.0.0.0.</value>

        [DataMember(Name="snmp_sent_timestamp")]
        public DateTime? SnmpSentTimestamp { get; set; }

        /// <summary>
        /// Timestamp when the alert was acknowledged, if any.
        /// </summary>
        /// <value>Timestamp when the alert was acknowledged, if any.</value>

        [DataMember(Name="acknowledged_timestamp")]
        public DateTime? AcknowledgedTimestamp { get; set; }

        /// <summary>
        /// List of events associated with this alert.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>List of events associated with this alert.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="events")]
        public List<EventInstance> Events { get; set; }

        /// <summary>
        /// Localized message string corresponding to severity
        /// </summary>
        /// <value>Localized message string corresponding to severity</value>

        [DataMember(Name="severity_l10n")]
        public string SeverityL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to resource_type
        /// </summary>
        /// <value>Localized message string corresponding to resource_type</value>

        [DataMember(Name="resource_type_l10n")]
        public string ResourceTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to state
        /// </summary>
        /// <value>Localized message string corresponding to state</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourceName: ").Append(ResourceName).Append("\n");
            sb.Append("  DescriptionL10n: ").Append(DescriptionL10n).Append("\n");
            sb.Append("  GeneratedTimestamp: ").Append(GeneratedTimestamp).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  IsAcknowledged: ").Append(IsAcknowledged).Append("\n");
            sb.Append("  RaisedTimestamp: ").Append(RaisedTimestamp).Append("\n");
            sb.Append("  ClearedTimestamp: ").Append(ClearedTimestamp).Append("\n");
            sb.Append("  CalledHomeTimestamp: ").Append(CalledHomeTimestamp).Append("\n");
            sb.Append("  EmailSentTimestamp: ").Append(EmailSentTimestamp).Append("\n");
            sb.Append("  SnmpSentTimestamp: ").Append(SnmpSentTimestamp).Append("\n");
            sb.Append("  AcknowledgedTimestamp: ").Append(AcknowledgedTimestamp).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  SeverityL10n: ").Append(SeverityL10n).Append("\n");
            sb.Append("  ResourceTypeL10n: ").Append(ResourceTypeL10n).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AlertInstance)obj);
        }

        /// <summary>
        /// Returns true if AlertInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of AlertInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    EventCode == other.EventCode ||
                    EventCode != null &&
                    EventCode.Equals(other.EventCode)
                ) && 
                (
                    Severity == other.Severity ||
                    Severity != null &&
                    Severity.Equals(other.Severity)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    ResourceId == other.ResourceId ||
                    ResourceId != null &&
                    ResourceId.Equals(other.ResourceId)
                ) && 
                (
                    ResourceName == other.ResourceName ||
                    ResourceName != null &&
                    ResourceName.Equals(other.ResourceName)
                ) && 
                (
                    DescriptionL10n == other.DescriptionL10n ||
                    DescriptionL10n != null &&
                    DescriptionL10n.Equals(other.DescriptionL10n)
                ) && 
                (
                    GeneratedTimestamp == other.GeneratedTimestamp ||
                    GeneratedTimestamp != null &&
                    GeneratedTimestamp.Equals(other.GeneratedTimestamp)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    IsAcknowledged == other.IsAcknowledged ||
                    IsAcknowledged != null &&
                    IsAcknowledged.Equals(other.IsAcknowledged)
                ) && 
                (
                    RaisedTimestamp == other.RaisedTimestamp ||
                    RaisedTimestamp != null &&
                    RaisedTimestamp.Equals(other.RaisedTimestamp)
                ) && 
                (
                    ClearedTimestamp == other.ClearedTimestamp ||
                    ClearedTimestamp != null &&
                    ClearedTimestamp.Equals(other.ClearedTimestamp)
                ) && 
                (
                    CalledHomeTimestamp == other.CalledHomeTimestamp ||
                    CalledHomeTimestamp != null &&
                    CalledHomeTimestamp.Equals(other.CalledHomeTimestamp)
                ) && 
                (
                    EmailSentTimestamp == other.EmailSentTimestamp ||
                    EmailSentTimestamp != null &&
                    EmailSentTimestamp.Equals(other.EmailSentTimestamp)
                ) && 
                (
                    SnmpSentTimestamp == other.SnmpSentTimestamp ||
                    SnmpSentTimestamp != null &&
                    SnmpSentTimestamp.Equals(other.SnmpSentTimestamp)
                ) && 
                (
                    AcknowledgedTimestamp == other.AcknowledgedTimestamp ||
                    AcknowledgedTimestamp != null &&
                    AcknowledgedTimestamp.Equals(other.AcknowledgedTimestamp)
                ) && 
                (
                    Events == other.Events ||
                    Events != null &&
                    Events.SequenceEqual(other.Events)
                ) && 
                (
                    SeverityL10n == other.SeverityL10n ||
                    SeverityL10n != null &&
                    SeverityL10n.Equals(other.SeverityL10n)
                ) && 
                (
                    ResourceTypeL10n == other.ResourceTypeL10n ||
                    ResourceTypeL10n != null &&
                    ResourceTypeL10n.Equals(other.ResourceTypeL10n)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (EventCode != null)
                    hashCode = hashCode * 59 + EventCode.GetHashCode();
                    if (Severity != null)
                    hashCode = hashCode * 59 + Severity.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (ResourceId != null)
                    hashCode = hashCode * 59 + ResourceId.GetHashCode();
                    if (ResourceName != null)
                    hashCode = hashCode * 59 + ResourceName.GetHashCode();
                    if (DescriptionL10n != null)
                    hashCode = hashCode * 59 + DescriptionL10n.GetHashCode();
                    if (GeneratedTimestamp != null)
                    hashCode = hashCode * 59 + GeneratedTimestamp.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (IsAcknowledged != null)
                    hashCode = hashCode * 59 + IsAcknowledged.GetHashCode();
                    if (RaisedTimestamp != null)
                    hashCode = hashCode * 59 + RaisedTimestamp.GetHashCode();
                    if (ClearedTimestamp != null)
                    hashCode = hashCode * 59 + ClearedTimestamp.GetHashCode();
                    if (CalledHomeTimestamp != null)
                    hashCode = hashCode * 59 + CalledHomeTimestamp.GetHashCode();
                    if (EmailSentTimestamp != null)
                    hashCode = hashCode * 59 + EmailSentTimestamp.GetHashCode();
                    if (SnmpSentTimestamp != null)
                    hashCode = hashCode * 59 + SnmpSentTimestamp.GetHashCode();
                    if (AcknowledgedTimestamp != null)
                    hashCode = hashCode * 59 + AcknowledgedTimestamp.GetHashCode();
                    if (Events != null)
                    hashCode = hashCode * 59 + Events.GetHashCode();
                    if (SeverityL10n != null)
                    hashCode = hashCode * 59 + SeverityL10n.GetHashCode();
                    if (ResourceTypeL10n != null)
                    hashCode = hashCode * 59 + ResourceTypeL10n.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AlertInstance left, AlertInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AlertInstance left, AlertInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
