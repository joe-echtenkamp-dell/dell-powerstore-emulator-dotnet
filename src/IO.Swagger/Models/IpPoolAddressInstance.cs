/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of the IP pool address. This resource type has queriable associations from network, ip_port, appliance, node, nvme_discovered_cdc
    /// </summary>
    [DataContract]
    public partial class IpPoolAddressInstance : IEquatable<IpPoolAddressInstance>
    { 
        /// <summary>
        /// Unique identifier of the IP address.
        /// </summary>
        /// <value>Unique identifier of the IP address.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the IP address.  This property supports case-insensitive filtering. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Name of the IP address.  This property supports case-insensitive filtering. Was added in version 2.0.0.0.</value>

        [StringLength(256, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Unique identifier of the network to which the IP address belongs.
        /// </summary>
        /// <value>Unique identifier of the network to which the IP address belongs.</value>

        [DataMember(Name="network_id")]
        public string NetworkId { get; set; }

        /// <summary>
        /// Unique identifier of the port that uses this IP address to provide access to storage network services, such as iSCSI. This attribute can be set only for an IP address used by networks of type Storage.
        /// </summary>
        /// <value>Unique identifier of the port that uses this IP address to provide access to storage network services, such as iSCSI. This attribute can be set only for an IP address used by networks of type Storage.</value>

        [DataMember(Name="ip_port_id")]
        public string IpPortId { get; set; }

        /// <summary>
        /// Unique identifier of the appliance to which the IP address belongs.
        /// </summary>
        /// <value>Unique identifier of the appliance to which the IP address belongs.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Unique identifier of the cluster node to which the IP address belongs.
        /// </summary>
        /// <value>Unique identifier of the cluster node to which the IP address belongs.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// IP address value, in IPv4 or IPv6 format.
        /// </summary>
        /// <value>IP address value, in IPv4 or IPv6 format.</value>

        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// IP address purposes.
        /// </summary>
        /// <value>IP address purposes.</value>

        [DataMember(Name="purposes")]
        public List<IpPurposeTypeEnum> Purposes { get; set; }

        /// <summary>
        /// Localized message array corresponding to purposes
        /// </summary>
        /// <value>Localized message array corresponding to purposes</value>

        [DataMember(Name="purposes_l10n")]
        public List<string> PurposesL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type nvme_discovered_cdc association.
        /// </summary>
        /// <value>This is the inverse of the resource type nvme_discovered_cdc association.</value>

        [DataMember(Name="nvme_discovered_cdcs")]
        public List<NvmeDiscoveredCdcInstance> NvmeDiscoveredCdcs { get; set; }

        /// <summary>
        /// This is the embeddable reference form of network_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of network_id attribute.</value>

        [DataMember(Name="network")]
        public NetworkInstance Network { get; set; }

        /// <summary>
        /// This is the embeddable reference form of ip_port_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of ip_port_id attribute.</value>

        [DataMember(Name="ip_port")]
        public IpPortInstance IpPort { get; set; }

        /// <summary>
        /// This is the embeddable reference form of appliance_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of appliance_id attribute.</value>

        [DataMember(Name="appliance")]
        public ApplianceInstance Appliance { get; set; }

        /// <summary>
        /// This is the embeddable reference form of node_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of node_id attribute.</value>

        [DataMember(Name="node")]
        public NodeInstance Node { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IpPoolAddressInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NetworkId: ").Append(NetworkId).Append("\n");
            sb.Append("  IpPortId: ").Append(IpPortId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Purposes: ").Append(Purposes).Append("\n");
            sb.Append("  PurposesL10n: ").Append(PurposesL10n).Append("\n");
            sb.Append("  NvmeDiscoveredCdcs: ").Append(NvmeDiscoveredCdcs).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  IpPort: ").Append(IpPort).Append("\n");
            sb.Append("  Appliance: ").Append(Appliance).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IpPoolAddressInstance)obj);
        }

        /// <summary>
        /// Returns true if IpPoolAddressInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of IpPoolAddressInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IpPoolAddressInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NetworkId == other.NetworkId ||
                    NetworkId != null &&
                    NetworkId.Equals(other.NetworkId)
                ) && 
                (
                    IpPortId == other.IpPortId ||
                    IpPortId != null &&
                    IpPortId.Equals(other.IpPortId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Purposes == other.Purposes ||
                    Purposes != null &&
                    Purposes.SequenceEqual(other.Purposes)
                ) && 
                (
                    PurposesL10n == other.PurposesL10n ||
                    PurposesL10n != null &&
                    PurposesL10n.SequenceEqual(other.PurposesL10n)
                ) && 
                (
                    NvmeDiscoveredCdcs == other.NvmeDiscoveredCdcs ||
                    NvmeDiscoveredCdcs != null &&
                    NvmeDiscoveredCdcs.SequenceEqual(other.NvmeDiscoveredCdcs)
                ) && 
                (
                    Network == other.Network ||
                    Network != null &&
                    Network.Equals(other.Network)
                ) && 
                (
                    IpPort == other.IpPort ||
                    IpPort != null &&
                    IpPort.Equals(other.IpPort)
                ) && 
                (
                    Appliance == other.Appliance ||
                    Appliance != null &&
                    Appliance.Equals(other.Appliance)
                ) && 
                (
                    Node == other.Node ||
                    Node != null &&
                    Node.Equals(other.Node)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NetworkId != null)
                    hashCode = hashCode * 59 + NetworkId.GetHashCode();
                    if (IpPortId != null)
                    hashCode = hashCode * 59 + IpPortId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Purposes != null)
                    hashCode = hashCode * 59 + Purposes.GetHashCode();
                    if (PurposesL10n != null)
                    hashCode = hashCode * 59 + PurposesL10n.GetHashCode();
                    if (NvmeDiscoveredCdcs != null)
                    hashCode = hashCode * 59 + NvmeDiscoveredCdcs.GetHashCode();
                    if (Network != null)
                    hashCode = hashCode * 59 + Network.GetHashCode();
                    if (IpPort != null)
                    hashCode = hashCode * 59 + IpPort.GetHashCode();
                    if (Appliance != null)
                    hashCode = hashCode * 59 + Appliance.GetHashCode();
                    if (Node != null)
                    hashCode = hashCode * 59 + Node.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IpPoolAddressInstance left, IpPoolAddressInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IpPoolAddressInstance left, IpPoolAddressInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
