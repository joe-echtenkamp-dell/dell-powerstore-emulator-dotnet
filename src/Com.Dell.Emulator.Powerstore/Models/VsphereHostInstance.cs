/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Properties of a vsphere_host. Was added in version 3.0.0.0. This resource type has queriable associations from vcenter, vsphere_host_license_assignment, virtual_machine, datastore, host
    /// </summary>
    [DataContract]
    public partial class VsphereHostInstance : IEquatable<VsphereHostInstance>
    { 
        /// <summary>
        /// Unique identifier of the vsphere_host instance.
        /// </summary>
        /// <value>Unique identifier of the vsphere_host instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// User-assigned name of the ESXi host in vCenter.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>User-assigned name of the ESXi host in vCenter.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Unique identifier of the vsphere_host in vCenter.
        /// </summary>
        /// <value>Unique identifier of the vsphere_host in vCenter.</value>

        [DataMember(Name="vsphere_object_id")]
        public string VsphereObjectId { get; set; }

        /// <summary>
        /// Unique identifier of a vCenter instance.
        /// </summary>
        /// <value>Unique identifier of a vCenter instance.</value>

        [DataMember(Name="vcenter_id")]
        public string VcenterId { get; set; }

        /// <summary>
        /// ESXi host version.
        /// </summary>
        /// <value>ESXi host version.</value>

        [DataMember(Name="version")]
        public string Version { get; set; }

        /// <summary>
        /// ESXi host build.
        /// </summary>
        /// <value>ESXi host build.</value>

        [DataMember(Name="build")]
        public string Build { get; set; }

        /// <summary>
        /// This is the embeddable reference form of vcenter_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of vcenter_id attribute.</value>

        [DataMember(Name="vcenter")]
        public VcenterInstance Vcenter { get; set; }

        /// <summary>
        /// This is the inverse of the resource type vsphere_host_license_assignment association.
        /// </summary>
        /// <value>This is the inverse of the resource type vsphere_host_license_assignment association.</value>

        [DataMember(Name="license_assignments")]
        public List<VsphereHostLicenseAssignmentInstance> LicenseAssignments { get; set; }

        /// <summary>
        /// List of the virtual_machines that are associated with this vsphere_host.
        /// </summary>
        /// <value>List of the virtual_machines that are associated with this vsphere_host.</value>

        [DataMember(Name="virtual_machines")]
        public List<VirtualMachineInstance> VirtualMachines { get; set; }

        /// <summary>
        /// List of the datastores that are associated with this vsphere_host.
        /// </summary>
        /// <value>List of the datastores that are associated with this vsphere_host.</value>

        [DataMember(Name="datastores")]
        public List<DatastoreInstance> Datastores { get; set; }

        /// <summary>
        /// List of the hosts that are associated with this vsphere_host.
        /// </summary>
        /// <value>List of the hosts that are associated with this vsphere_host.</value>

        [DataMember(Name="hosts")]
        public List<HostInstance> Hosts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VsphereHostInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VsphereObjectId: ").Append(VsphereObjectId).Append("\n");
            sb.Append("  VcenterId: ").Append(VcenterId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Vcenter: ").Append(Vcenter).Append("\n");
            sb.Append("  LicenseAssignments: ").Append(LicenseAssignments).Append("\n");
            sb.Append("  VirtualMachines: ").Append(VirtualMachines).Append("\n");
            sb.Append("  Datastores: ").Append(Datastores).Append("\n");
            sb.Append("  Hosts: ").Append(Hosts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VsphereHostInstance)obj);
        }

        /// <summary>
        /// Returns true if VsphereHostInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of VsphereHostInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VsphereHostInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    VsphereObjectId == other.VsphereObjectId ||
                    VsphereObjectId != null &&
                    VsphereObjectId.Equals(other.VsphereObjectId)
                ) && 
                (
                    VcenterId == other.VcenterId ||
                    VcenterId != null &&
                    VcenterId.Equals(other.VcenterId)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    Build == other.Build ||
                    Build != null &&
                    Build.Equals(other.Build)
                ) && 
                (
                    Vcenter == other.Vcenter ||
                    Vcenter != null &&
                    Vcenter.Equals(other.Vcenter)
                ) && 
                (
                    LicenseAssignments == other.LicenseAssignments ||
                    LicenseAssignments != null &&
                    LicenseAssignments.SequenceEqual(other.LicenseAssignments)
                ) && 
                (
                    VirtualMachines == other.VirtualMachines ||
                    VirtualMachines != null &&
                    VirtualMachines.SequenceEqual(other.VirtualMachines)
                ) && 
                (
                    Datastores == other.Datastores ||
                    Datastores != null &&
                    Datastores.SequenceEqual(other.Datastores)
                ) && 
                (
                    Hosts == other.Hosts ||
                    Hosts != null &&
                    Hosts.SequenceEqual(other.Hosts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (VsphereObjectId != null)
                    hashCode = hashCode * 59 + VsphereObjectId.GetHashCode();
                    if (VcenterId != null)
                    hashCode = hashCode * 59 + VcenterId.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (Build != null)
                    hashCode = hashCode * 59 + Build.GetHashCode();
                    if (Vcenter != null)
                    hashCode = hashCode * 59 + Vcenter.GetHashCode();
                    if (LicenseAssignments != null)
                    hashCode = hashCode * 59 + LicenseAssignments.GetHashCode();
                    if (VirtualMachines != null)
                    hashCode = hashCode * 59 + VirtualMachines.GetHashCode();
                    if (Datastores != null)
                    hashCode = hashCode * 59 + Datastores.GetHashCode();
                    if (Hosts != null)
                    hashCode = hashCode * 59 + Hosts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VsphereHostInstance left, VsphereHostInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VsphereHostInstance left, VsphereHostInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
