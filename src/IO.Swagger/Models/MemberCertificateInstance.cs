/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Embedded member certificate in x509_certificate.
    /// </summary>
    [DataContract]
    public partial class MemberCertificateInstance : IEquatable<MemberCertificateInstance>
    { 
        /// <summary>
        /// Certificate subject or so called distinguished name.
        /// </summary>
        /// <value>Certificate subject or so called distinguished name.</value>

        [DataMember(Name="subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Certificate serial number.
        /// </summary>
        /// <value>Certificate serial number.</value>

        [DataMember(Name="serial_number")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Certificate signature algorithm.
        /// </summary>
        /// <value>Certificate signature algorithm.</value>

        [DataMember(Name="signature_algorithm")]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// Distinguished name of the certificate issuer.
        /// </summary>
        /// <value>Distinguished name of the certificate issuer.</value>

        [DataMember(Name="issuer")]
        public string Issuer { get; set; }

        /// <summary>
        /// Date and time when the certificate becomes valid.
        /// </summary>
        /// <value>Date and time when the certificate becomes valid.</value>

        [DataMember(Name="valid_from")]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// Date and time when the certificate will expire.
        /// </summary>
        /// <value>Date and time when the certificate will expire.</value>

        [DataMember(Name="valid_to")]
        public DateTime? ValidTo { get; set; }

        /// <summary>
        /// Additional DNS names or IP addresses in the x509_certificate.
        /// </summary>
        /// <value>Additional DNS names or IP addresses in the x509_certificate.</value>

        [DataMember(Name="subject_alternative_names")]
        public List<string> SubjectAlternativeNames { get; set; }

        /// <summary>
        /// Public key algorithm used to generate the key pair.
        /// </summary>
        /// <value>Public key algorithm used to generate the key pair.</value>

        [DataMember(Name="public_key_algorithm")]
        public string PublicKeyAlgorithm { get; set; }

        /// <summary>
        /// Private key length.
        /// </summary>
        /// <value>Private key length.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="key_length")]
        public int? KeyLength { get; set; }

        /// <summary>
        /// Gets or Sets ThumbprintAlgorithm
        /// </summary>

        [DataMember(Name="thumbprint_algorithm")]
        public ThumbprintAlgorithmEnum? ThumbprintAlgorithm { get; set; }

        /// <summary>
        /// Hash value of the certificate.
        /// </summary>
        /// <value>Hash value of the certificate.</value>

        [DataMember(Name="thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Base64 encoded certificate without any line breaks.
        /// </summary>
        /// <value>Base64 encoded certificate without any line breaks.</value>

        [DataMember(Name="certificate")]
        public string Certificate { get; set; }

        /// <summary>
        /// Depth indicates the position of this member certificate in the X509 Certificate chain. End-entity certificate will always have a depth of 1, which is the minimum value for depth. The depth of direct issuer certificate will be incremented by 1 until reaching the root certificate. Root certificate should have the largest depth for the certificate chain.
        /// </summary>
        /// <value>Depth indicates the position of this member certificate in the X509 Certificate chain. End-entity certificate will always have a depth of 1, which is the minimum value for depth. The depth of direct issuer certificate will be incremented by 1 until reaching the root certificate. Root certificate should have the largest depth for the certificate chain.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="depth")]
        public int? Depth { get; set; }

        /// <summary>
        /// Localized message string corresponding to thumbprint_algorithm
        /// </summary>
        /// <value>Localized message string corresponding to thumbprint_algorithm</value>

        [DataMember(Name="thumbprint_algorithm_l10n")]
        public string ThumbprintAlgorithmL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MemberCertificateInstance {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  SignatureAlgorithm: ").Append(SignatureAlgorithm).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  SubjectAlternativeNames: ").Append(SubjectAlternativeNames).Append("\n");
            sb.Append("  PublicKeyAlgorithm: ").Append(PublicKeyAlgorithm).Append("\n");
            sb.Append("  KeyLength: ").Append(KeyLength).Append("\n");
            sb.Append("  ThumbprintAlgorithm: ").Append(ThumbprintAlgorithm).Append("\n");
            sb.Append("  Thumbprint: ").Append(Thumbprint).Append("\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  ThumbprintAlgorithmL10n: ").Append(ThumbprintAlgorithmL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MemberCertificateInstance)obj);
        }

        /// <summary>
        /// Returns true if MemberCertificateInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of MemberCertificateInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemberCertificateInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    SignatureAlgorithm == other.SignatureAlgorithm ||
                    SignatureAlgorithm != null &&
                    SignatureAlgorithm.Equals(other.SignatureAlgorithm)
                ) && 
                (
                    Issuer == other.Issuer ||
                    Issuer != null &&
                    Issuer.Equals(other.Issuer)
                ) && 
                (
                    ValidFrom == other.ValidFrom ||
                    ValidFrom != null &&
                    ValidFrom.Equals(other.ValidFrom)
                ) && 
                (
                    ValidTo == other.ValidTo ||
                    ValidTo != null &&
                    ValidTo.Equals(other.ValidTo)
                ) && 
                (
                    SubjectAlternativeNames == other.SubjectAlternativeNames ||
                    SubjectAlternativeNames != null &&
                    SubjectAlternativeNames.SequenceEqual(other.SubjectAlternativeNames)
                ) && 
                (
                    PublicKeyAlgorithm == other.PublicKeyAlgorithm ||
                    PublicKeyAlgorithm != null &&
                    PublicKeyAlgorithm.Equals(other.PublicKeyAlgorithm)
                ) && 
                (
                    KeyLength == other.KeyLength ||
                    KeyLength != null &&
                    KeyLength.Equals(other.KeyLength)
                ) && 
                (
                    ThumbprintAlgorithm == other.ThumbprintAlgorithm ||
                    ThumbprintAlgorithm != null &&
                    ThumbprintAlgorithm.Equals(other.ThumbprintAlgorithm)
                ) && 
                (
                    Thumbprint == other.Thumbprint ||
                    Thumbprint != null &&
                    Thumbprint.Equals(other.Thumbprint)
                ) && 
                (
                    Certificate == other.Certificate ||
                    Certificate != null &&
                    Certificate.Equals(other.Certificate)
                ) && 
                (
                    Depth == other.Depth ||
                    Depth != null &&
                    Depth.Equals(other.Depth)
                ) && 
                (
                    ThumbprintAlgorithmL10n == other.ThumbprintAlgorithmL10n ||
                    ThumbprintAlgorithmL10n != null &&
                    ThumbprintAlgorithmL10n.Equals(other.ThumbprintAlgorithmL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (SignatureAlgorithm != null)
                    hashCode = hashCode * 59 + SignatureAlgorithm.GetHashCode();
                    if (Issuer != null)
                    hashCode = hashCode * 59 + Issuer.GetHashCode();
                    if (ValidFrom != null)
                    hashCode = hashCode * 59 + ValidFrom.GetHashCode();
                    if (ValidTo != null)
                    hashCode = hashCode * 59 + ValidTo.GetHashCode();
                    if (SubjectAlternativeNames != null)
                    hashCode = hashCode * 59 + SubjectAlternativeNames.GetHashCode();
                    if (PublicKeyAlgorithm != null)
                    hashCode = hashCode * 59 + PublicKeyAlgorithm.GetHashCode();
                    if (KeyLength != null)
                    hashCode = hashCode * 59 + KeyLength.GetHashCode();
                    if (ThumbprintAlgorithm != null)
                    hashCode = hashCode * 59 + ThumbprintAlgorithm.GetHashCode();
                    if (Thumbprint != null)
                    hashCode = hashCode * 59 + Thumbprint.GetHashCode();
                    if (Certificate != null)
                    hashCode = hashCode * 59 + Certificate.GetHashCode();
                    if (Depth != null)
                    hashCode = hashCode * 59 + Depth.GetHashCode();
                    if (ThumbprintAlgorithmL10n != null)
                    hashCode = hashCode * 59 + ThumbprintAlgorithmL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MemberCertificateInstance left, MemberCertificateInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MemberCertificateInstance left, MemberCertificateInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
