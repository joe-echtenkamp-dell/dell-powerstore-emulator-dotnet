/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// This resource type has queriable associations from import_unity_volume, import_unity_consistency_group
    /// </summary>
    [DataContract]
    public partial class ImportUnityInstance : IEquatable<ImportUnityInstance>
    { 
        /// <summary>
        /// Unique identifier of the Unity storage system that is a source storage system for import. This is the serial number of the storage system. 
        /// </summary>
        /// <value>Unique identifier of the Unity storage system that is a source storage system for import. This is the serial number of the storage system. </value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the Unity storage system.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the Unity storage system.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Management address to use for communicating with the Unity storage system. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). 
        /// </summary>
        /// <value>Management address to use for communicating with the Unity storage system. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). </value>

        [DataMember(Name="management_address")]
        public string ManagementAddress { get; set; }

        /// <summary>
        /// Model name of the Unity storage system.
        /// </summary>
        /// <value>Model name of the Unity storage system.</value>

        [DataMember(Name="model")]
        public string Model { get; set; }

        /// <summary>
        /// Software version of the Unity storage system.
        /// </summary>
        /// <value>Software version of the Unity storage system.</value>

        [DataMember(Name="software_version")]
        public string SoftwareVersion { get; set; }

        /// <summary>
        /// Version of the API that the Unity storage system supports.
        /// </summary>
        /// <value>Version of the API that the Unity storage system supports.</value>

        [DataMember(Name="api_version")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or Sets Health
        /// </summary>

        [DataMember(Name="health")]
        public UnityHealthEnum? Health { get; set; }

        /// <summary>
        /// User account name used to communicate with the Unity storage system.
        /// </summary>
        /// <value>User account name used to communicate with the Unity storage system.</value>

        [DataMember(Name="user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// Serial number of the system
        /// </summary>
        /// <value>Serial number of the system</value>

        [DataMember(Name="serial_number")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Date and time when the Unity storage system details were last updated. These details include the Unity storage system and information about its importable volumes and consistency groups. The timestamp is updated when the Unity storage system is created and whenever the importable volumes and consistency groups are discovered. 
        /// </summary>
        /// <value>Date and time when the Unity storage system details were last updated. These details include the Unity storage system and information about its importable volumes and consistency groups. The timestamp is updated when the Unity storage system is created and whenever the importable volumes and consistency groups are discovered. </value>

        [DataMember(Name="last_updated_timestamp")]
        public DateTime? LastUpdatedTimestamp { get; set; }

        /// <summary>
        ///  Was added in version 1.0.2.
        /// </summary>
        /// <value> Was added in version 1.0.2.</value>

        [DataMember(Name="supported_import_type")]
        public SupportedImportTypeEnum? SupportedImportType { get; set; }

        /// <summary>
        /// Localized message string corresponding to health
        /// </summary>
        /// <value>Localized message string corresponding to health</value>

        [DataMember(Name="health_l10n")]
        public string HealthL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to supported_import_type Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to supported_import_type Was added in version 1.0.2.</value>

        [DataMember(Name="supported_import_type_l10n")]
        public string SupportedImportTypeL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_unity_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_unity_volume association.</value>

        [DataMember(Name="import_unity_volumes")]
        public List<ImportUnityVolumeInstance> ImportUnityVolumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_unity_consistency_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_unity_consistency_group association.</value>

        [DataMember(Name="import_unity_consistency_groups")]
        public List<ImportUnityConsistencyGroupInstance> ImportUnityConsistencyGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportUnityInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ManagementAddress: ").Append(ManagementAddress).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  SoftwareVersion: ").Append(SoftwareVersion).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  Health: ").Append(Health).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  LastUpdatedTimestamp: ").Append(LastUpdatedTimestamp).Append("\n");
            sb.Append("  SupportedImportType: ").Append(SupportedImportType).Append("\n");
            sb.Append("  HealthL10n: ").Append(HealthL10n).Append("\n");
            sb.Append("  SupportedImportTypeL10n: ").Append(SupportedImportTypeL10n).Append("\n");
            sb.Append("  ImportUnityVolumes: ").Append(ImportUnityVolumes).Append("\n");
            sb.Append("  ImportUnityConsistencyGroups: ").Append(ImportUnityConsistencyGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportUnityInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportUnityInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportUnityInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportUnityInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ManagementAddress == other.ManagementAddress ||
                    ManagementAddress != null &&
                    ManagementAddress.Equals(other.ManagementAddress)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    SoftwareVersion == other.SoftwareVersion ||
                    SoftwareVersion != null &&
                    SoftwareVersion.Equals(other.SoftwareVersion)
                ) && 
                (
                    ApiVersion == other.ApiVersion ||
                    ApiVersion != null &&
                    ApiVersion.Equals(other.ApiVersion)
                ) && 
                (
                    Health == other.Health ||
                    Health != null &&
                    Health.Equals(other.Health)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    LastUpdatedTimestamp == other.LastUpdatedTimestamp ||
                    LastUpdatedTimestamp != null &&
                    LastUpdatedTimestamp.Equals(other.LastUpdatedTimestamp)
                ) && 
                (
                    SupportedImportType == other.SupportedImportType ||
                    SupportedImportType != null &&
                    SupportedImportType.Equals(other.SupportedImportType)
                ) && 
                (
                    HealthL10n == other.HealthL10n ||
                    HealthL10n != null &&
                    HealthL10n.Equals(other.HealthL10n)
                ) && 
                (
                    SupportedImportTypeL10n == other.SupportedImportTypeL10n ||
                    SupportedImportTypeL10n != null &&
                    SupportedImportTypeL10n.Equals(other.SupportedImportTypeL10n)
                ) && 
                (
                    ImportUnityVolumes == other.ImportUnityVolumes ||
                    ImportUnityVolumes != null &&
                    ImportUnityVolumes.SequenceEqual(other.ImportUnityVolumes)
                ) && 
                (
                    ImportUnityConsistencyGroups == other.ImportUnityConsistencyGroups ||
                    ImportUnityConsistencyGroups != null &&
                    ImportUnityConsistencyGroups.SequenceEqual(other.ImportUnityConsistencyGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ManagementAddress != null)
                    hashCode = hashCode * 59 + ManagementAddress.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (SoftwareVersion != null)
                    hashCode = hashCode * 59 + SoftwareVersion.GetHashCode();
                    if (ApiVersion != null)
                    hashCode = hashCode * 59 + ApiVersion.GetHashCode();
                    if (Health != null)
                    hashCode = hashCode * 59 + Health.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (LastUpdatedTimestamp != null)
                    hashCode = hashCode * 59 + LastUpdatedTimestamp.GetHashCode();
                    if (SupportedImportType != null)
                    hashCode = hashCode * 59 + SupportedImportType.GetHashCode();
                    if (HealthL10n != null)
                    hashCode = hashCode * 59 + HealthL10n.GetHashCode();
                    if (SupportedImportTypeL10n != null)
                    hashCode = hashCode * 59 + SupportedImportTypeL10n.GetHashCode();
                    if (ImportUnityVolumes != null)
                    hashCode = hashCode * 59 + ImportUnityVolumes.GetHashCode();
                    if (ImportUnityConsistencyGroups != null)
                    hashCode = hashCode * 59 + ImportUnityConsistencyGroups.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportUnityInstance left, ImportUnityInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportUnityInstance left, ImportUnityInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
