/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Appliance details for a datacollection. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class DatacollectionApplianceInstance : IEquatable<DatacollectionApplianceInstance>
    { 
        /// <summary>
        /// Unique identifier for this instance.
        /// </summary>
        /// <value>Unique identifier for this instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The serial number of the appliance where this data collection was created.
        /// </summary>
        /// <value>The serial number of the appliance where this data collection was created.</value>

        [DataMember(Name="appliance_serial_number")]
        public string ApplianceSerialNumber { get; set; }

        /// <summary>
        /// The date and time that this data collection started on this appliance.
        /// </summary>
        /// <value>The date and time that this data collection started on this appliance.</value>

        [DataMember(Name="start_timestamp")]
        public DateTime? StartTimestamp { get; set; }

        /// <summary>
        /// The date and time that this data collection completed on the appliance.
        /// </summary>
        /// <value>The date and time that this data collection completed on the appliance.</value>

        [DataMember(Name="end_timestamp")]
        public DateTime? EndTimestamp { get; set; }

        /// <summary>
        /// The uncompressed size of this data collection in bytes.
        /// </summary>
        /// <value>The uncompressed size of this data collection in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="compressed_size")]
        public long? CompressedSize { get; set; }

        /// <summary>
        /// The compressed size of this data collection in bytes.
        /// </summary>
        /// <value>The compressed size of this data collection in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="uncompressed_size")]
        public long? UncompressedSize { get; set; }

        /// <summary>
        /// The download URI for this file.
        /// </summary>
        /// <value>The download URI for this file.</value>

        [DataMember(Name="download_uri")]
        public string DownloadUri { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public DatacollectionStatusEnum? Status { get; set; }

        /// <summary>
        /// Additional status detail
        /// </summary>
        /// <value>Additional status detail</value>

        [DataMember(Name="status_message_l10n")]
        public string StatusMessageL10n { get; set; }

        /// <summary>
        /// The last date and time that this collection was uploaded to your service provider.
        /// </summary>
        /// <value>The last date and time that this collection was uploaded to your service provider.</value>

        [DataMember(Name="uploaded")]
        public DateTime? Uploaded { get; set; }

        /// <summary>
        /// The last date and time that this collection was downloaded.
        /// </summary>
        /// <value>The last date and time that this collection was downloaded.</value>

        [DataMember(Name="downloaded")]
        public DateTime? Downloaded { get; set; }

        /// <summary>
        /// Indicates whether upload of the data collection bundle is in progress.
        /// </summary>
        /// <value>Indicates whether upload of the data collection bundle is in progress.</value>

        [DataMember(Name="upload_in_progress")]
        public bool? UploadInProgress { get; set; }

        /// <summary>
        /// The node where the data collection bundle is located.
        /// </summary>
        /// <value>The node where the data collection bundle is located.</value>

        [DataMember(Name="node")]
        public string Node { get; set; }

        /// <summary>
        /// The date and time from which to start collecting the logs.
        /// </summary>
        /// <value>The date and time from which to start collecting the logs.</value>

        [DataMember(Name="log_from_timestamp")]
        public DateTime? LogFromTimestamp { get; set; }

        /// <summary>
        /// The date and time up to which the logs should be collected.
        /// </summary>
        /// <value>The date and time up to which the logs should be collected.</value>

        [DataMember(Name="log_to_timestamp")]
        public DateTime? LogToTimestamp { get; set; }

        /// <summary>
        /// Localized message string corresponding to status Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to status Was added in version 3.0.0.0.</value>

        [DataMember(Name="status_l10n")]
        public string StatusL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatacollectionApplianceInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApplianceSerialNumber: ").Append(ApplianceSerialNumber).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  EndTimestamp: ").Append(EndTimestamp).Append("\n");
            sb.Append("  CompressedSize: ").Append(CompressedSize).Append("\n");
            sb.Append("  UncompressedSize: ").Append(UncompressedSize).Append("\n");
            sb.Append("  DownloadUri: ").Append(DownloadUri).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusMessageL10n: ").Append(StatusMessageL10n).Append("\n");
            sb.Append("  Uploaded: ").Append(Uploaded).Append("\n");
            sb.Append("  Downloaded: ").Append(Downloaded).Append("\n");
            sb.Append("  UploadInProgress: ").Append(UploadInProgress).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  LogFromTimestamp: ").Append(LogFromTimestamp).Append("\n");
            sb.Append("  LogToTimestamp: ").Append(LogToTimestamp).Append("\n");
            sb.Append("  StatusL10n: ").Append(StatusL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DatacollectionApplianceInstance)obj);
        }

        /// <summary>
        /// Returns true if DatacollectionApplianceInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of DatacollectionApplianceInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatacollectionApplianceInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ApplianceSerialNumber == other.ApplianceSerialNumber ||
                    ApplianceSerialNumber != null &&
                    ApplianceSerialNumber.Equals(other.ApplianceSerialNumber)
                ) && 
                (
                    StartTimestamp == other.StartTimestamp ||
                    StartTimestamp != null &&
                    StartTimestamp.Equals(other.StartTimestamp)
                ) && 
                (
                    EndTimestamp == other.EndTimestamp ||
                    EndTimestamp != null &&
                    EndTimestamp.Equals(other.EndTimestamp)
                ) && 
                (
                    CompressedSize == other.CompressedSize ||
                    CompressedSize != null &&
                    CompressedSize.Equals(other.CompressedSize)
                ) && 
                (
                    UncompressedSize == other.UncompressedSize ||
                    UncompressedSize != null &&
                    UncompressedSize.Equals(other.UncompressedSize)
                ) && 
                (
                    DownloadUri == other.DownloadUri ||
                    DownloadUri != null &&
                    DownloadUri.Equals(other.DownloadUri)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    StatusMessageL10n == other.StatusMessageL10n ||
                    StatusMessageL10n != null &&
                    StatusMessageL10n.Equals(other.StatusMessageL10n)
                ) && 
                (
                    Uploaded == other.Uploaded ||
                    Uploaded != null &&
                    Uploaded.Equals(other.Uploaded)
                ) && 
                (
                    Downloaded == other.Downloaded ||
                    Downloaded != null &&
                    Downloaded.Equals(other.Downloaded)
                ) && 
                (
                    UploadInProgress == other.UploadInProgress ||
                    UploadInProgress != null &&
                    UploadInProgress.Equals(other.UploadInProgress)
                ) && 
                (
                    Node == other.Node ||
                    Node != null &&
                    Node.Equals(other.Node)
                ) && 
                (
                    LogFromTimestamp == other.LogFromTimestamp ||
                    LogFromTimestamp != null &&
                    LogFromTimestamp.Equals(other.LogFromTimestamp)
                ) && 
                (
                    LogToTimestamp == other.LogToTimestamp ||
                    LogToTimestamp != null &&
                    LogToTimestamp.Equals(other.LogToTimestamp)
                ) && 
                (
                    StatusL10n == other.StatusL10n ||
                    StatusL10n != null &&
                    StatusL10n.Equals(other.StatusL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ApplianceSerialNumber != null)
                    hashCode = hashCode * 59 + ApplianceSerialNumber.GetHashCode();
                    if (StartTimestamp != null)
                    hashCode = hashCode * 59 + StartTimestamp.GetHashCode();
                    if (EndTimestamp != null)
                    hashCode = hashCode * 59 + EndTimestamp.GetHashCode();
                    if (CompressedSize != null)
                    hashCode = hashCode * 59 + CompressedSize.GetHashCode();
                    if (UncompressedSize != null)
                    hashCode = hashCode * 59 + UncompressedSize.GetHashCode();
                    if (DownloadUri != null)
                    hashCode = hashCode * 59 + DownloadUri.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (StatusMessageL10n != null)
                    hashCode = hashCode * 59 + StatusMessageL10n.GetHashCode();
                    if (Uploaded != null)
                    hashCode = hashCode * 59 + Uploaded.GetHashCode();
                    if (Downloaded != null)
                    hashCode = hashCode * 59 + Downloaded.GetHashCode();
                    if (UploadInProgress != null)
                    hashCode = hashCode * 59 + UploadInProgress.GetHashCode();
                    if (Node != null)
                    hashCode = hashCode * 59 + Node.GetHashCode();
                    if (LogFromTimestamp != null)
                    hashCode = hashCode * 59 + LogFromTimestamp.GetHashCode();
                    if (LogToTimestamp != null)
                    hashCode = hashCode * 59 + LogToTimestamp.GetHashCode();
                    if (StatusL10n != null)
                    hashCode = hashCode * 59 + StatusL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DatacollectionApplianceInstance left, DatacollectionApplianceInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatacollectionApplianceInstance left, DatacollectionApplianceInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
