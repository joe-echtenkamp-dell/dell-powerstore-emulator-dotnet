/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters to reprotect a replication session.  Was added in version 4.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ReplicationSessionReprotect : IEquatable<ReplicationSessionReprotect>
    { 
        /// <summary>
        /// When set to true this option indicates that any data changes made after the failover occurred will be discarded and the reprotect operation will restart the replication from the original source replicating in the original direction before the failover. This option is only supported for asynchronous replication of NAS Servers.  Was added in version 4.0.0.0.
        /// </summary>
        /// <value>When set to true this option indicates that any data changes made after the failover occurred will be discarded and the reprotect operation will restart the replication from the original source replicating in the original direction before the failover. This option is only supported for asynchronous replication of NAS Servers.  Was added in version 4.0.0.0.</value>

        [DataMember(Name="discard_changes_after_failover")]
        public bool? DiscardChangesAfterFailover { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationSessionReprotect {\n");
            sb.Append("  DiscardChangesAfterFailover: ").Append(DiscardChangesAfterFailover).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReplicationSessionReprotect)obj);
        }

        /// <summary>
        /// Returns true if ReplicationSessionReprotect instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationSessionReprotect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationSessionReprotect other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DiscardChangesAfterFailover == other.DiscardChangesAfterFailover ||
                    DiscardChangesAfterFailover != null &&
                    DiscardChangesAfterFailover.Equals(other.DiscardChangesAfterFailover)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DiscardChangesAfterFailover != null)
                    hashCode = hashCode * 59 + DiscardChangesAfterFailover.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReplicationSessionReprotect left, ReplicationSessionReprotect right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReplicationSessionReprotect left, ReplicationSessionReprotect right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
