/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Physical switch configuration setting during cluster creation. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ClusterCreatePhysicalSwitches : IEquatable<ClusterCreatePhysicalSwitches>
    { 
        /// <summary>
        /// Name of physical switch.
        /// </summary>
        /// <value>Name of physical switch.</value>
        [Required]
        
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>
        [Required]
        
        [DataMember(Name="purpose")]
        public PhysicalSwitchPurposeEnum? Purpose { get; set; }

        /// <summary>
        /// Supported connections for a physical switch.
        /// </summary>
        /// <value>Supported connections for a physical switch.</value>
        [Required]
        
        [DataMember(Name="connections")]
        public List<ClusterCreatePhysicalSwitchConnection> Connections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClusterCreatePhysicalSwitches {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Connections: ").Append(Connections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClusterCreatePhysicalSwitches)obj);
        }

        /// <summary>
        /// Returns true if ClusterCreatePhysicalSwitches instances are equal
        /// </summary>
        /// <param name="other">Instance of ClusterCreatePhysicalSwitches to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClusterCreatePhysicalSwitches other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Purpose == other.Purpose ||
                    Purpose != null &&
                    Purpose.Equals(other.Purpose)
                ) && 
                (
                    Connections == other.Connections ||
                    Connections != null &&
                    Connections.SequenceEqual(other.Connections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Purpose != null)
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                    if (Connections != null)
                    hashCode = hashCode * 59 + Connections.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClusterCreatePhysicalSwitches left, ClusterCreatePhysicalSwitches right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClusterCreatePhysicalSwitches left, ClusterCreatePhysicalSwitches right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
