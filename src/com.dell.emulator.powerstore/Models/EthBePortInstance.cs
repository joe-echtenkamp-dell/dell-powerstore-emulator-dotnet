/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Properties of a Ethernet Backend port. Was added in version 3.0.0.0. This resource type has queriable associations from appliance, hardware, eth_be_port
    /// </summary>
    [DataContract]
    public partial class EthBePortInstance : IEquatable<EthBePortInstance>
    { 
        /// <summary>
        /// Unique identifier of the Ethernet Backend port.
        /// </summary>
        /// <value>Unique identifier of the Ethernet Backend port.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the Ethernet Backend port.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the Ethernet Backend port.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Unique identifier of the appliance containing the port.
        /// </summary>
        /// <value>Unique identifier of the appliance containing the port.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Unique identifier of the hardware instance of type &#39;Node&#39; containing the port.
        /// </summary>
        /// <value>Unique identifier of the hardware instance of type &#39;Node&#39; containing the port.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// The MAC address of the Ethernet Backend port.
        /// </summary>
        /// <value>The MAC address of the Ethernet Backend port.</value>

        [DataMember(Name="mac_address")]
        public string MacAddress { get; set; }

        /// <summary>
        /// Indicates whether the Ethernet Backend port&#39;s link is up. Values are: * true - Link is up. * false - Link is down. 
        /// </summary>
        /// <value>Indicates whether the Ethernet Backend port&#39;s link is up. Values are: * true - Link is up. * false - Link is down. </value>

        [DataMember(Name="is_link_up")]
        public bool? IsLinkUp { get; set; }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>

        [DataMember(Name="speed")]
        public EthBEPortSpeedEnum? Speed { get; set; }

        /// <summary>
        /// Unique identifier of the hardware instance of type &#39;SFP&#39; (Small Form-factor Pluggable) inserted into the port. 
        /// </summary>
        /// <value>Unique identifier of the hardware instance of type &#39;SFP&#39; (Small Form-factor Pluggable) inserted into the port. </value>

        [DataMember(Name="sfp_id")]
        public string SfpId { get; set; }

        /// <summary>
        /// Index of the Ethernet Backend port in IO module.
        /// </summary>
        /// <value>Index of the Ethernet Backend port in IO module.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="port_index")]
        public int? PortIndex { get; set; }

        /// <summary>
        /// Gets or Sets PortConnectorType
        /// </summary>

        [DataMember(Name="port_connector_type")]
        public FrontEndPortConnectionTypeEnum? PortConnectorType { get; set; }

        /// <summary>
        /// Unique identifier of the parent hardware instance handling the port.
        /// </summary>
        /// <value>Unique identifier of the parent hardware instance handling the port.</value>

        [DataMember(Name="hardware_parent_id")]
        public string HardwareParentId { get; set; }

        /// <summary>
        /// Unique identifier of the backend ethernet port which is expected to be connected to this one. 
        /// </summary>
        /// <value>Unique identifier of the backend ethernet port which is expected to be connected to this one. </value>

        [DataMember(Name="expected_peer_id")]
        public string ExpectedPeerId { get; set; }

        /// <summary>
        /// Unique identifier of the backend ethernet port which is actually connected to this one. 
        /// </summary>
        /// <value>Unique identifier of the backend ethernet port which is actually connected to this one. </value>

        [DataMember(Name="actual_peer_id")]
        public string ActualPeerId { get; set; }

        /// <summary>
        /// Supported Protocols over Ethernet port. currently only NVMe is supported. 
        /// </summary>
        /// <value>Supported Protocols over Ethernet port. currently only NVMe is supported. </value>

        [DataMember(Name="protocols")]
        public List<EthBEPortProtocolEnum> Protocols { get; set; }

        /// <summary>
        /// Gets or Sets StaleState
        /// </summary>

        [DataMember(Name="stale_state")]
        public PortStaleStateEnum? StaleState { get; set; }

        /// <summary>
        /// Localized message string corresponding to speed Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to speed Was added in version 3.0.0.0.</value>

        [DataMember(Name="speed_l10n")]
        public string SpeedL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to port_connector_type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to port_connector_type Was added in version 3.0.0.0.</value>

        [DataMember(Name="port_connector_type_l10n")]
        public string PortConnectorTypeL10n { get; set; }

        /// <summary>
        /// Localized message array corresponding to protocols Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message array corresponding to protocols Was added in version 3.0.0.0.</value>

        [DataMember(Name="protocols_l10n")]
        public List<string> ProtocolsL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to stale_state Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to stale_state Was added in version 3.0.0.0.</value>

        [DataMember(Name="stale_state_l10n")]
        public string StaleStateL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of appliance_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of appliance_id attribute.</value>

        [DataMember(Name="appliance")]
        public ApplianceInstance Appliance { get; set; }

        /// <summary>
        /// This is the embeddable reference form of node_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of node_id attribute.</value>

        [DataMember(Name="node")]
        public HardwareInstance Node { get; set; }

        /// <summary>
        /// This is the embeddable reference form of sfp_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of sfp_id attribute.</value>

        [DataMember(Name="sfp")]
        public HardwareInstance Sfp { get; set; }

        /// <summary>
        /// This is the embeddable reference form of hardware_parent_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of hardware_parent_id attribute.</value>

        [DataMember(Name="hardware_parent")]
        public HardwareInstance HardwareParent { get; set; }

        /// <summary>
        /// This is the embeddable reference form of expected_peer_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of expected_peer_id attribute.</value>

        [DataMember(Name="expected_peer")]
        public EthBePortInstance ExpectedPeer { get; set; }

        /// <summary>
        /// This is the embeddable reference form of actual_peer_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of actual_peer_id attribute.</value>

        [DataMember(Name="actual_peer")]
        public EthBePortInstance ActualPeer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EthBePortInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  IsLinkUp: ").Append(IsLinkUp).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  SfpId: ").Append(SfpId).Append("\n");
            sb.Append("  PortIndex: ").Append(PortIndex).Append("\n");
            sb.Append("  PortConnectorType: ").Append(PortConnectorType).Append("\n");
            sb.Append("  HardwareParentId: ").Append(HardwareParentId).Append("\n");
            sb.Append("  ExpectedPeerId: ").Append(ExpectedPeerId).Append("\n");
            sb.Append("  ActualPeerId: ").Append(ActualPeerId).Append("\n");
            sb.Append("  Protocols: ").Append(Protocols).Append("\n");
            sb.Append("  StaleState: ").Append(StaleState).Append("\n");
            sb.Append("  SpeedL10n: ").Append(SpeedL10n).Append("\n");
            sb.Append("  PortConnectorTypeL10n: ").Append(PortConnectorTypeL10n).Append("\n");
            sb.Append("  ProtocolsL10n: ").Append(ProtocolsL10n).Append("\n");
            sb.Append("  StaleStateL10n: ").Append(StaleStateL10n).Append("\n");
            sb.Append("  Appliance: ").Append(Appliance).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  Sfp: ").Append(Sfp).Append("\n");
            sb.Append("  HardwareParent: ").Append(HardwareParent).Append("\n");
            sb.Append("  ExpectedPeer: ").Append(ExpectedPeer).Append("\n");
            sb.Append("  ActualPeer: ").Append(ActualPeer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EthBePortInstance)obj);
        }

        /// <summary>
        /// Returns true if EthBePortInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of EthBePortInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EthBePortInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    MacAddress == other.MacAddress ||
                    MacAddress != null &&
                    MacAddress.Equals(other.MacAddress)
                ) && 
                (
                    IsLinkUp == other.IsLinkUp ||
                    IsLinkUp != null &&
                    IsLinkUp.Equals(other.IsLinkUp)
                ) && 
                (
                    Speed == other.Speed ||
                    Speed != null &&
                    Speed.Equals(other.Speed)
                ) && 
                (
                    SfpId == other.SfpId ||
                    SfpId != null &&
                    SfpId.Equals(other.SfpId)
                ) && 
                (
                    PortIndex == other.PortIndex ||
                    PortIndex != null &&
                    PortIndex.Equals(other.PortIndex)
                ) && 
                (
                    PortConnectorType == other.PortConnectorType ||
                    PortConnectorType != null &&
                    PortConnectorType.Equals(other.PortConnectorType)
                ) && 
                (
                    HardwareParentId == other.HardwareParentId ||
                    HardwareParentId != null &&
                    HardwareParentId.Equals(other.HardwareParentId)
                ) && 
                (
                    ExpectedPeerId == other.ExpectedPeerId ||
                    ExpectedPeerId != null &&
                    ExpectedPeerId.Equals(other.ExpectedPeerId)
                ) && 
                (
                    ActualPeerId == other.ActualPeerId ||
                    ActualPeerId != null &&
                    ActualPeerId.Equals(other.ActualPeerId)
                ) && 
                (
                    Protocols == other.Protocols ||
                    Protocols != null &&
                    Protocols.SequenceEqual(other.Protocols)
                ) && 
                (
                    StaleState == other.StaleState ||
                    StaleState != null &&
                    StaleState.Equals(other.StaleState)
                ) && 
                (
                    SpeedL10n == other.SpeedL10n ||
                    SpeedL10n != null &&
                    SpeedL10n.Equals(other.SpeedL10n)
                ) && 
                (
                    PortConnectorTypeL10n == other.PortConnectorTypeL10n ||
                    PortConnectorTypeL10n != null &&
                    PortConnectorTypeL10n.Equals(other.PortConnectorTypeL10n)
                ) && 
                (
                    ProtocolsL10n == other.ProtocolsL10n ||
                    ProtocolsL10n != null &&
                    ProtocolsL10n.SequenceEqual(other.ProtocolsL10n)
                ) && 
                (
                    StaleStateL10n == other.StaleStateL10n ||
                    StaleStateL10n != null &&
                    StaleStateL10n.Equals(other.StaleStateL10n)
                ) && 
                (
                    Appliance == other.Appliance ||
                    Appliance != null &&
                    Appliance.Equals(other.Appliance)
                ) && 
                (
                    Node == other.Node ||
                    Node != null &&
                    Node.Equals(other.Node)
                ) && 
                (
                    Sfp == other.Sfp ||
                    Sfp != null &&
                    Sfp.Equals(other.Sfp)
                ) && 
                (
                    HardwareParent == other.HardwareParent ||
                    HardwareParent != null &&
                    HardwareParent.Equals(other.HardwareParent)
                ) && 
                (
                    ExpectedPeer == other.ExpectedPeer ||
                    ExpectedPeer != null &&
                    ExpectedPeer.Equals(other.ExpectedPeer)
                ) && 
                (
                    ActualPeer == other.ActualPeer ||
                    ActualPeer != null &&
                    ActualPeer.Equals(other.ActualPeer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (MacAddress != null)
                    hashCode = hashCode * 59 + MacAddress.GetHashCode();
                    if (IsLinkUp != null)
                    hashCode = hashCode * 59 + IsLinkUp.GetHashCode();
                    if (Speed != null)
                    hashCode = hashCode * 59 + Speed.GetHashCode();
                    if (SfpId != null)
                    hashCode = hashCode * 59 + SfpId.GetHashCode();
                    if (PortIndex != null)
                    hashCode = hashCode * 59 + PortIndex.GetHashCode();
                    if (PortConnectorType != null)
                    hashCode = hashCode * 59 + PortConnectorType.GetHashCode();
                    if (HardwareParentId != null)
                    hashCode = hashCode * 59 + HardwareParentId.GetHashCode();
                    if (ExpectedPeerId != null)
                    hashCode = hashCode * 59 + ExpectedPeerId.GetHashCode();
                    if (ActualPeerId != null)
                    hashCode = hashCode * 59 + ActualPeerId.GetHashCode();
                    if (Protocols != null)
                    hashCode = hashCode * 59 + Protocols.GetHashCode();
                    if (StaleState != null)
                    hashCode = hashCode * 59 + StaleState.GetHashCode();
                    if (SpeedL10n != null)
                    hashCode = hashCode * 59 + SpeedL10n.GetHashCode();
                    if (PortConnectorTypeL10n != null)
                    hashCode = hashCode * 59 + PortConnectorTypeL10n.GetHashCode();
                    if (ProtocolsL10n != null)
                    hashCode = hashCode * 59 + ProtocolsL10n.GetHashCode();
                    if (StaleStateL10n != null)
                    hashCode = hashCode * 59 + StaleStateL10n.GetHashCode();
                    if (Appliance != null)
                    hashCode = hashCode * 59 + Appliance.GetHashCode();
                    if (Node != null)
                    hashCode = hashCode * 59 + Node.GetHashCode();
                    if (Sfp != null)
                    hashCode = hashCode * 59 + Sfp.GetHashCode();
                    if (HardwareParent != null)
                    hashCode = hashCode * 59 + HardwareParent.GetHashCode();
                    if (ExpectedPeer != null)
                    hashCode = hashCode * 59 + ExpectedPeer.GetHashCode();
                    if (ActualPeer != null)
                    hashCode = hashCode * 59 + ActualPeer.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EthBePortInstance left, EthBePortInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EthBePortInstance left, EthBePortInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
