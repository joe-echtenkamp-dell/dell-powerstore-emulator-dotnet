/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// System security configuration. Values was added in 2.0.0.0: protocol_mode. Values was added in 3.0.0.0: is_http_redirect_enabled. Values was added in 3.5.0.0: is_stig_enabled, is_fips_enabled.
    /// </summary>
    [DataContract]
    public partial class SecurityConfigInstance : IEquatable<SecurityConfigInstance>
    { 
        /// <summary>
        /// Unique identifier of the security configuration.
        /// </summary>
        /// <value>Unique identifier of the security configuration.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Idle time (in seconds) after which login sessions will expire and require re-authentication. 
        /// </summary>
        /// <value>Idle time (in seconds) after which login sessions will expire and require re-authentication. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="idle_timeout")]
        public int? IdleTimeout { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="protocol_mode")]
        public SecurityProtocolModeEnum? ProtocolMode { get; set; }

        /// <summary>
        /// If true, Security Technical Implementation Guide (STIG) applicable to the PowerStore product is enabled on the cluster.  Was added in version 3.5.0.0.
        /// </summary>
        /// <value>If true, Security Technical Implementation Guide (STIG) applicable to the PowerStore product is enabled on the cluster.  Was added in version 3.5.0.0.</value>

        [DataMember(Name="is_stig_enabled")]
        public bool? IsStigEnabled { get; set; }

        /// <summary>
        /// FIPS 140-2 compliance mode of the cluster. If true, the cluster only uses FIPS-validated encryption schemes. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>FIPS 140-2 compliance mode of the cluster. If true, the cluster only uses FIPS-validated encryption schemes. Was added in version 3.5.0.0.</value>

        [DataMember(Name="is_fips_enabled")]
        public bool? IsFipsEnabled { get; set; }

        /// <summary>
        /// If true, redirecting HTTP requests to HTTPs is enabled. If false, HTTP redirection is disabled and only HTTPs is supported.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>If true, redirecting HTTP requests to HTTPs is enabled. If false, HTTP redirection is disabled and only HTTPs is supported.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_http_redirect_enabled")]
        public bool? IsHttpRedirectEnabled { get; set; }

        /// <summary>
        /// Localized message string corresponding to protocol_mode\\nWas added in version 2.0.0.0. Was deprecated in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to protocol_mode\\nWas added in version 2.0.0.0. Was deprecated in version 3.0.0.0.</value>

        [DataMember(Name="protocol_mode_l10n")]
        public string ProtocolModeL10n { get; set; }

        /// <summary>
        ///  Was added in version 3.5.0.0.
        /// </summary>
        /// <value> Was added in version 3.5.0.0.</value>

        [DataMember(Name="default_mfa_service")]
        public MfaServiceRef DefaultMfaService { get; set; }

        /// <summary>
        /// If true, VASA server certificate will not be overwritten by the vCenter.  Was added in version 3.5.0.0.
        /// </summary>
        /// <value>If true, VASA server certificate will not be overwritten by the vCenter.  Was added in version 3.5.0.0.</value>

        [DataMember(Name="vasa_retain_certificate")]
        public bool? VasaRetainCertificate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecurityConfigInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdleTimeout: ").Append(IdleTimeout).Append("\n");
            sb.Append("  ProtocolMode: ").Append(ProtocolMode).Append("\n");
            sb.Append("  IsStigEnabled: ").Append(IsStigEnabled).Append("\n");
            sb.Append("  IsFipsEnabled: ").Append(IsFipsEnabled).Append("\n");
            sb.Append("  IsHttpRedirectEnabled: ").Append(IsHttpRedirectEnabled).Append("\n");
            sb.Append("  ProtocolModeL10n: ").Append(ProtocolModeL10n).Append("\n");
            sb.Append("  DefaultMfaService: ").Append(DefaultMfaService).Append("\n");
            sb.Append("  VasaRetainCertificate: ").Append(VasaRetainCertificate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SecurityConfigInstance)obj);
        }

        /// <summary>
        /// Returns true if SecurityConfigInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of SecurityConfigInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityConfigInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IdleTimeout == other.IdleTimeout ||
                    IdleTimeout != null &&
                    IdleTimeout.Equals(other.IdleTimeout)
                ) && 
                (
                    ProtocolMode == other.ProtocolMode ||
                    ProtocolMode != null &&
                    ProtocolMode.Equals(other.ProtocolMode)
                ) && 
                (
                    IsStigEnabled == other.IsStigEnabled ||
                    IsStigEnabled != null &&
                    IsStigEnabled.Equals(other.IsStigEnabled)
                ) && 
                (
                    IsFipsEnabled == other.IsFipsEnabled ||
                    IsFipsEnabled != null &&
                    IsFipsEnabled.Equals(other.IsFipsEnabled)
                ) && 
                (
                    IsHttpRedirectEnabled == other.IsHttpRedirectEnabled ||
                    IsHttpRedirectEnabled != null &&
                    IsHttpRedirectEnabled.Equals(other.IsHttpRedirectEnabled)
                ) && 
                (
                    ProtocolModeL10n == other.ProtocolModeL10n ||
                    ProtocolModeL10n != null &&
                    ProtocolModeL10n.Equals(other.ProtocolModeL10n)
                ) && 
                (
                    DefaultMfaService == other.DefaultMfaService ||
                    DefaultMfaService != null &&
                    DefaultMfaService.Equals(other.DefaultMfaService)
                ) && 
                (
                    VasaRetainCertificate == other.VasaRetainCertificate ||
                    VasaRetainCertificate != null &&
                    VasaRetainCertificate.Equals(other.VasaRetainCertificate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IdleTimeout != null)
                    hashCode = hashCode * 59 + IdleTimeout.GetHashCode();
                    if (ProtocolMode != null)
                    hashCode = hashCode * 59 + ProtocolMode.GetHashCode();
                    if (IsStigEnabled != null)
                    hashCode = hashCode * 59 + IsStigEnabled.GetHashCode();
                    if (IsFipsEnabled != null)
                    hashCode = hashCode * 59 + IsFipsEnabled.GetHashCode();
                    if (IsHttpRedirectEnabled != null)
                    hashCode = hashCode * 59 + IsHttpRedirectEnabled.GetHashCode();
                    if (ProtocolModeL10n != null)
                    hashCode = hashCode * 59 + ProtocolModeL10n.GetHashCode();
                    if (DefaultMfaService != null)
                    hashCode = hashCode * 59 + DefaultMfaService.GetHashCode();
                    if (VasaRetainCertificate != null)
                    hashCode = hashCode * 59 + VasaRetainCertificate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SecurityConfigInstance left, SecurityConfigInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SecurityConfigInstance left, SecurityConfigInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
