/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// An event indicates that something of interest happened in the system. Normally, an event that requires attention will generate an alert as well. So, although they may be interesting for troubleshooting, it is not necessary to monitor events.  Values was added in 3.0.0.0: event_code.
    /// </summary>
    [DataContract]
    public partial class EventInstance : IEquatable<EventInstance>
    { 
        /// <summary>
        /// Unique identifier of this occurrence of an event.
        /// </summary>
        /// <value>Unique identifier of this occurrence of an event.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Identifies the specific kind of event that has occurred.
        /// </summary>
        /// <value>Identifies the specific kind of event that has occurred.</value>

        [DataMember(Name="event_code")]
        public string EventCode { get; set; }

        /// <summary>
        /// The severity of the event.
        /// </summary>
        /// <value>The severity of the event.</value>

        [DataMember(Name="severity")]
        public SeverityEnum? Severity { get; set; }

        /// <summary>
        /// The type of the object which generated this event.
        /// </summary>
        /// <value>The type of the object which generated this event.</value>

        [DataMember(Name="resource_type")]
        public ResourceTypeEnum? ResourceType { get; set; }

        /// <summary>
        /// Unique identifier of the resource instance which generated this event. 
        /// </summary>
        /// <value>Unique identifier of the resource instance which generated this event. </value>

        [DataMember(Name="resource_id")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Name of the resource instance which generated this event.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the resource instance which generated this event.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="resource_name")]
        public string ResourceName { get; set; }

        /// <summary>
        /// Timestamp at which this event occured.
        /// </summary>
        /// <value>Timestamp at which this event occured.</value>

        [DataMember(Name="generated_timestamp")]
        public DateTime? GeneratedTimestamp { get; set; }

        /// <summary>
        /// Description of this event.
        /// </summary>
        /// <value>Description of this event.</value>

        [DataMember(Name="description_l10n")]
        public string DescriptionL10n { get; set; }

        /// <summary>
        /// Describes the possible effect on the system of this event.
        /// </summary>
        /// <value>Describes the possible effect on the system of this event.</value>

        [DataMember(Name="system_impact_l10n")]
        public string SystemImpactL10n { get; set; }

        /// <summary>
        /// Suggestions for how to resolve any problems that may arise from this event. 
        /// </summary>
        /// <value>Suggestions for how to resolve any problems that may arise from this event. </value>

        [DataMember(Name="repair_flow_l10n")]
        public string RepairFlowL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to severity
        /// </summary>
        /// <value>Localized message string corresponding to severity</value>

        [DataMember(Name="severity_l10n")]
        public string SeverityL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to resource_type
        /// </summary>
        /// <value>Localized message string corresponding to resource_type</value>

        [DataMember(Name="resource_type_l10n")]
        public string ResourceTypeL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourceName: ").Append(ResourceName).Append("\n");
            sb.Append("  GeneratedTimestamp: ").Append(GeneratedTimestamp).Append("\n");
            sb.Append("  DescriptionL10n: ").Append(DescriptionL10n).Append("\n");
            sb.Append("  SystemImpactL10n: ").Append(SystemImpactL10n).Append("\n");
            sb.Append("  RepairFlowL10n: ").Append(RepairFlowL10n).Append("\n");
            sb.Append("  SeverityL10n: ").Append(SeverityL10n).Append("\n");
            sb.Append("  ResourceTypeL10n: ").Append(ResourceTypeL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EventInstance)obj);
        }

        /// <summary>
        /// Returns true if EventInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of EventInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    EventCode == other.EventCode ||
                    EventCode != null &&
                    EventCode.Equals(other.EventCode)
                ) && 
                (
                    Severity == other.Severity ||
                    Severity != null &&
                    Severity.Equals(other.Severity)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    ResourceId == other.ResourceId ||
                    ResourceId != null &&
                    ResourceId.Equals(other.ResourceId)
                ) && 
                (
                    ResourceName == other.ResourceName ||
                    ResourceName != null &&
                    ResourceName.Equals(other.ResourceName)
                ) && 
                (
                    GeneratedTimestamp == other.GeneratedTimestamp ||
                    GeneratedTimestamp != null &&
                    GeneratedTimestamp.Equals(other.GeneratedTimestamp)
                ) && 
                (
                    DescriptionL10n == other.DescriptionL10n ||
                    DescriptionL10n != null &&
                    DescriptionL10n.Equals(other.DescriptionL10n)
                ) && 
                (
                    SystemImpactL10n == other.SystemImpactL10n ||
                    SystemImpactL10n != null &&
                    SystemImpactL10n.Equals(other.SystemImpactL10n)
                ) && 
                (
                    RepairFlowL10n == other.RepairFlowL10n ||
                    RepairFlowL10n != null &&
                    RepairFlowL10n.Equals(other.RepairFlowL10n)
                ) && 
                (
                    SeverityL10n == other.SeverityL10n ||
                    SeverityL10n != null &&
                    SeverityL10n.Equals(other.SeverityL10n)
                ) && 
                (
                    ResourceTypeL10n == other.ResourceTypeL10n ||
                    ResourceTypeL10n != null &&
                    ResourceTypeL10n.Equals(other.ResourceTypeL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (EventCode != null)
                    hashCode = hashCode * 59 + EventCode.GetHashCode();
                    if (Severity != null)
                    hashCode = hashCode * 59 + Severity.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (ResourceId != null)
                    hashCode = hashCode * 59 + ResourceId.GetHashCode();
                    if (ResourceName != null)
                    hashCode = hashCode * 59 + ResourceName.GetHashCode();
                    if (GeneratedTimestamp != null)
                    hashCode = hashCode * 59 + GeneratedTimestamp.GetHashCode();
                    if (DescriptionL10n != null)
                    hashCode = hashCode * 59 + DescriptionL10n.GetHashCode();
                    if (SystemImpactL10n != null)
                    hashCode = hashCode * 59 + SystemImpactL10n.GetHashCode();
                    if (RepairFlowL10n != null)
                    hashCode = hashCode * 59 + RepairFlowL10n.GetHashCode();
                    if (SeverityL10n != null)
                    hashCode = hashCode * 59 + SeverityL10n.GetHashCode();
                    if (ResourceTypeL10n != null)
                    hashCode = hashCode * 59 + ResourceTypeL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EventInstance left, EventInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventInstance left, EventInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
