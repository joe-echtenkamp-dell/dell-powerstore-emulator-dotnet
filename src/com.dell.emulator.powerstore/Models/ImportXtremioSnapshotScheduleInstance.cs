/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// An instance of a snapshot schedule. Was added in version 1.0.2.
    /// </summary>
    [DataContract]
    public partial class ImportXtremioSnapshotScheduleInstance : IEquatable<ImportXtremioSnapshotScheduleInstance>
    { 
        /// <summary>
        /// Unique identifier of the XtremIO snapshot schedule.
        /// </summary>
        /// <value>Unique identifier of the XtremIO snapshot schedule.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the XtremIO snapshot schedule.
        /// </summary>
        /// <value>Name of the XtremIO snapshot schedule.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public XtremIOScheduleStateEnum? State { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleType
        /// </summary>

        [DataMember(Name="schedule_type")]
        public XtremIOScheduleTypeEnum? ScheduleType { get; set; }

        /// <summary>
        /// For schedule_type of interval, a triplet in the form of &#39;[hours : minutes : seconds&#39;], where a schedule using hours and minutes must have a seconds value of 0 and a schedule in seconds must have hours and minutes of 0. For example, &#39;[1:30:0&#39;] takes a snapshot every 1.5 hours and &#39;[0:0:15&#39;] takes a snapshot every 15 seconds.  â¢ For schedule_type of explicit, a triplet in the form of &#39;[day-of-week : hour : minute&#39;], where day-of week values 0 is every day, 1 is Sunday, 2 is Monday, 3 is Tuesday, 4 is Wednesday, 5 is Thursday, and 6 is Saturday (for example, &#39;[1:12:30&#39;] takes a snapshot on Sunday at 12:30, and &#39;[0:12:30&#39;] takes a snapshot every day at 12:30. 
        /// </summary>
        /// <value>For schedule_type of interval, a triplet in the form of &#39;[hours : minutes : seconds&#39;], where a schedule using hours and minutes must have a seconds value of 0 and a schedule in seconds must have hours and minutes of 0. For example, &#39;[1:30:0&#39;] takes a snapshot every 1.5 hours and &#39;[0:0:15&#39;] takes a snapshot every 15 seconds.  â¢ For schedule_type of explicit, a triplet in the form of &#39;[day-of-week : hour : minute&#39;], where day-of week values 0 is every day, 1 is Sunday, 2 is Monday, 3 is Tuesday, 4 is Wednesday, 5 is Thursday, and 6 is Saturday (for example, &#39;[1:12:30&#39;] takes a snapshot on Sunday at 12:30, and &#39;[0:12:30&#39;] takes a snapshot every day at 12:30. </value>

        [DataMember(Name="schedule")]
        public string Schedule { get; set; }

        /// <summary>
        /// The time period, in seconds, for which a Snapshot is retained. When the defined time has passed, the snapshot is automatically removed.  â¢ Minimum value is 60 (1 minute).  â¢ Maximum value is 15768000 (5 Years). This value is present if the retention_policy is not present.
        /// </summary>
        /// <value>The time period, in seconds, for which a Snapshot is retained. When the defined time has passed, the snapshot is automatically removed.  â¢ Minimum value is 60 (1 minute).  â¢ Maximum value is 15768000 (5 Years). This value is present if the retention_policy is not present.</value>

        [Range(60, 15768000)]
        [DataMember(Name="snapshots_to_keep_time")]
        public int? SnapshotsToKeepTime { get; set; }

        /// <summary>
        /// Defines the number of Snapshots to be saved. This value is present if the retention_policy is not present. 
        /// </summary>
        /// <value>Defines the number of Snapshots to be saved. This value is present if the retention_policy is not present. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="snapshots_to_keep_number")]
        public int? SnapshotsToKeepNumber { get; set; }

        /// <summary>
        /// Gets or Sets RetentionPolicy
        /// </summary>

        [DataMember(Name="retention_policy")]
        public ImportXtremioSnapshotScheduleRetentionPolicyInstance RetentionPolicy { get; set; }

        /// <summary>
        /// Localized message string corresponding to state Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to state Was added in version 1.0.2.</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to schedule_type Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to schedule_type Was added in version 1.0.2.</value>

        [DataMember(Name="schedule_type_l10n")]
        public string ScheduleTypeL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportXtremioSnapshotScheduleInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  SnapshotsToKeepTime: ").Append(SnapshotsToKeepTime).Append("\n");
            sb.Append("  SnapshotsToKeepNumber: ").Append(SnapshotsToKeepNumber).Append("\n");
            sb.Append("  RetentionPolicy: ").Append(RetentionPolicy).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  ScheduleTypeL10n: ").Append(ScheduleTypeL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportXtremioSnapshotScheduleInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportXtremioSnapshotScheduleInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportXtremioSnapshotScheduleInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportXtremioSnapshotScheduleInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    ScheduleType == other.ScheduleType ||
                    ScheduleType != null &&
                    ScheduleType.Equals(other.ScheduleType)
                ) && 
                (
                    Schedule == other.Schedule ||
                    Schedule != null &&
                    Schedule.Equals(other.Schedule)
                ) && 
                (
                    SnapshotsToKeepTime == other.SnapshotsToKeepTime ||
                    SnapshotsToKeepTime != null &&
                    SnapshotsToKeepTime.Equals(other.SnapshotsToKeepTime)
                ) && 
                (
                    SnapshotsToKeepNumber == other.SnapshotsToKeepNumber ||
                    SnapshotsToKeepNumber != null &&
                    SnapshotsToKeepNumber.Equals(other.SnapshotsToKeepNumber)
                ) && 
                (
                    RetentionPolicy == other.RetentionPolicy ||
                    RetentionPolicy != null &&
                    RetentionPolicy.Equals(other.RetentionPolicy)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    ScheduleTypeL10n == other.ScheduleTypeL10n ||
                    ScheduleTypeL10n != null &&
                    ScheduleTypeL10n.Equals(other.ScheduleTypeL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (ScheduleType != null)
                    hashCode = hashCode * 59 + ScheduleType.GetHashCode();
                    if (Schedule != null)
                    hashCode = hashCode * 59 + Schedule.GetHashCode();
                    if (SnapshotsToKeepTime != null)
                    hashCode = hashCode * 59 + SnapshotsToKeepTime.GetHashCode();
                    if (SnapshotsToKeepNumber != null)
                    hashCode = hashCode * 59 + SnapshotsToKeepNumber.GetHashCode();
                    if (RetentionPolicy != null)
                    hashCode = hashCode * 59 + RetentionPolicy.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (ScheduleTypeL10n != null)
                    hashCode = hashCode * 59 + ScheduleTypeL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportXtremioSnapshotScheduleInstance left, ImportXtremioSnapshotScheduleInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportXtremioSnapshotScheduleInstance left, ImportXtremioSnapshotScheduleInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
