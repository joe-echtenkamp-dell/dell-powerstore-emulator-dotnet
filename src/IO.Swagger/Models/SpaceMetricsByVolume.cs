/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Space metrics for the volume collected at five minute interval.
    /// </summary>
    [DataContract]
    public partial class SpaceMetricsByVolume : MetricsGenerateResponse, IEquatable<SpaceMetricsByVolume>
    { 
        /// <summary>
        /// Reference to the associated appliance on which these metrics were recorded.
        /// </summary>
        /// <value>Reference to the associated appliance on which these metrics were recorded.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// ID of the volume.
        /// </summary>
        /// <value>ID of the volume.</value>

        [DataMember(Name="volume_id")]
        public string VolumeId { get; set; }

        /// <summary>
        /// End of sample period.
        /// </summary>
        /// <value>End of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Configured size in bytes of a volume which amount of data can be written to. This metric includes primaries, snaps and clones.
        /// </summary>
        /// <value>Configured size in bytes of a volume which amount of data can be written to. This metric includes primaries, snaps and clones.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="logical_provisioned")]
        public long? LogicalProvisioned { get; set; }

        /// <summary>
        /// Amount of data in bytes host has written to a volume without any deduplication, compression or sharing. This metric includes primaries, snaps and clones.
        /// </summary>
        /// <value>Amount of data in bytes host has written to a volume without any deduplication, compression or sharing. This metric includes primaries, snaps and clones.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="logical_used")]
        public long? LogicalUsed { get; set; }

        /// <summary>
        /// Ratio of all the volumes provisioned to data being written to them. For example, an appliance has two 2 GB volumes and have written 500 MB of data to them. The thin savings would be (2 GB * 2) / (0.5 GB * 2) or 4:1, so the thin_savings value would be 4.0.
        /// </summary>
        /// <value>Ratio of all the volumes provisioned to data being written to them. For example, an appliance has two 2 GB volumes and have written 500 MB of data to them. The thin savings would be (2 GB * 2) / (0.5 GB * 2) or 4:1, so the thin_savings value would be 4.0.</value>

        [DataMember(Name="thin_savings")]
        public float? ThinSavings { get; set; }

        /// <summary>
        /// Number of times the metrics are repeated.
        /// </summary>
        /// <value>Number of times the metrics are repeated.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpaceMetricsByVolume {\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  VolumeId: ").Append(VolumeId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  LogicalProvisioned: ").Append(LogicalProvisioned).Append("\n");
            sb.Append("  LogicalUsed: ").Append(LogicalUsed).Append("\n");
            sb.Append("  ThinSavings: ").Append(ThinSavings).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SpaceMetricsByVolume)obj);
        }

        /// <summary>
        /// Returns true if SpaceMetricsByVolume instances are equal
        /// </summary>
        /// <param name="other">Instance of SpaceMetricsByVolume to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpaceMetricsByVolume other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    VolumeId == other.VolumeId ||
                    VolumeId != null &&
                    VolumeId.Equals(other.VolumeId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    LogicalProvisioned == other.LogicalProvisioned ||
                    LogicalProvisioned != null &&
                    LogicalProvisioned.Equals(other.LogicalProvisioned)
                ) && 
                (
                    LogicalUsed == other.LogicalUsed ||
                    LogicalUsed != null &&
                    LogicalUsed.Equals(other.LogicalUsed)
                ) && 
                (
                    ThinSavings == other.ThinSavings ||
                    ThinSavings != null &&
                    ThinSavings.Equals(other.ThinSavings)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (VolumeId != null)
                    hashCode = hashCode * 59 + VolumeId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (LogicalProvisioned != null)
                    hashCode = hashCode * 59 + LogicalProvisioned.GetHashCode();
                    if (LogicalUsed != null)
                    hashCode = hashCode * 59 + LogicalUsed.GetHashCode();
                    if (ThinSavings != null)
                    hashCode = hashCode * 59 + ThinSavings.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SpaceMetricsByVolume left, SpaceMetricsByVolume right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SpaceMetricsByVolume left, SpaceMetricsByVolume right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
