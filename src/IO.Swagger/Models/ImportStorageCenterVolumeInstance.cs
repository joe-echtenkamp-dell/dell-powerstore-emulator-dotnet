/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// This resource type has queriable associations from import_storage_center, import_storage_center_consistency_group
    /// </summary>
    [DataContract]
    public partial class ImportStorageCenterVolumeInstance : IEquatable<ImportStorageCenterVolumeInstance>
    { 
        /// <summary>
        /// Unique identifier of the SC volume.
        /// </summary>
        /// <value>Unique identifier of the SC volume.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the SC volume.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the SC volume.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Size of the SC volume, in bytes.
        /// </summary>
        /// <value>Size of the SC volume, in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="size")]
        public long? Size { get; set; }

        /// <summary>
        /// Device identifier presented to the server to which the volume is mapped. 
        /// </summary>
        /// <value>Device identifier presented to the server to which the volume is mapped. </value>

        [DataMember(Name="wwn")]
        public string Wwn { get; set; }

        /// <summary>
        /// Gets or Sets Health
        /// </summary>

        [DataMember(Name="health")]
        public SCStatusEnum? Health { get; set; }

        /// <summary>
        /// Indicates whether the SC volume is active on any controller. Only volumes that are active are importable. 
        /// </summary>
        /// <value>Indicates whether the SC volume is active on any controller. Only volumes that are active are importable. </value>

        [DataMember(Name="is_active")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Unique identifier of the SC array where the volume resides.
        /// </summary>
        /// <value>Unique identifier of the SC array where the volume resides.</value>

        [DataMember(Name="import_storage_center_id")]
        public string ImportStorageCenterId { get; set; }

        /// <summary>
        /// Gets or Sets MigrationState
        /// </summary>

        [DataMember(Name="migration_state")]
        public MigrationStateEnum? MigrationState { get; set; }

        /// <summary>
        /// Indicates whether the volume is read-only.
        /// </summary>
        /// <value>Indicates whether the volume is read-only.</value>

        [DataMember(Name="is_read_only")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Volume import criteria. If the value is not Ready, the volume is not importable. 
        /// </summary>
        /// <value>Volume import criteria. If the value is not Ready, the volume is not importable. </value>

        [DataMember(Name="importable_criteria")]
        public VolumeImportableCriteriaEnum? ImportableCriteria { get; set; }

        /// <summary>
        /// List of host volume identifiers that correspond to SC volumes.
        /// </summary>
        /// <value>List of host volume identifiers that correspond to SC volumes.</value>

        [DataMember(Name="host_volume_ids")]
        public List<string> HostVolumeIds { get; set; }

        /// <summary>
        /// Unique identifier of an SC consistency group, if the volume is part of one consistency group only. If the volume is part of multiple consistency groups, the attribute is empty. 
        /// </summary>
        /// <value>Unique identifier of an SC consistency group, if the volume is part of one consistency group only. If the volume is part of multiple consistency groups, the attribute is empty. </value>

        [DataMember(Name="import_storage_center_consistency_group_id")]
        public string ImportStorageCenterConsistencyGroupId { get; set; }

        /// <summary>
        /// Names of the consistency groups of which the volume is a member, if this volume is in multiple consistency groups. 
        /// </summary>
        /// <value>Names of the consistency groups of which the volume is a member, if this volume is in multiple consistency groups. </value>

        [DataMember(Name="import_storage_center_consistency_group_names")]
        public List<string> ImportStorageCenterConsistencyGroupNames { get; set; }

        /// <summary>
        /// Localized message string corresponding to health
        /// </summary>
        /// <value>Localized message string corresponding to health</value>

        [DataMember(Name="health_l10n")]
        public string HealthL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to migration_state
        /// </summary>
        /// <value>Localized message string corresponding to migration_state</value>

        [DataMember(Name="migration_state_l10n")]
        public string MigrationStateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to importable_criteria
        /// </summary>
        /// <value>Localized message string corresponding to importable_criteria</value>

        [DataMember(Name="importable_criteria_l10n")]
        public string ImportableCriteriaL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of import_storage_center_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of import_storage_center_id attribute.</value>

        [DataMember(Name="import_storage_center")]
        public ImportStorageCenterInstance ImportStorageCenter { get; set; }

        /// <summary>
        /// This is the embeddable reference form of import_storage_center_consistency_group_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of import_storage_center_consistency_group_id attribute.</value>

        [DataMember(Name="import_storage_center_consistency_group")]
        public ImportStorageCenterConsistencyGroupInstance ImportStorageCenterConsistencyGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportStorageCenterVolumeInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Wwn: ").Append(Wwn).Append("\n");
            sb.Append("  Health: ").Append(Health).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  ImportStorageCenterId: ").Append(ImportStorageCenterId).Append("\n");
            sb.Append("  MigrationState: ").Append(MigrationState).Append("\n");
            sb.Append("  IsReadOnly: ").Append(IsReadOnly).Append("\n");
            sb.Append("  ImportableCriteria: ").Append(ImportableCriteria).Append("\n");
            sb.Append("  HostVolumeIds: ").Append(HostVolumeIds).Append("\n");
            sb.Append("  ImportStorageCenterConsistencyGroupId: ").Append(ImportStorageCenterConsistencyGroupId).Append("\n");
            sb.Append("  ImportStorageCenterConsistencyGroupNames: ").Append(ImportStorageCenterConsistencyGroupNames).Append("\n");
            sb.Append("  HealthL10n: ").Append(HealthL10n).Append("\n");
            sb.Append("  MigrationStateL10n: ").Append(MigrationStateL10n).Append("\n");
            sb.Append("  ImportableCriteriaL10n: ").Append(ImportableCriteriaL10n).Append("\n");
            sb.Append("  ImportStorageCenter: ").Append(ImportStorageCenter).Append("\n");
            sb.Append("  ImportStorageCenterConsistencyGroup: ").Append(ImportStorageCenterConsistencyGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportStorageCenterVolumeInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportStorageCenterVolumeInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportStorageCenterVolumeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportStorageCenterVolumeInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    Wwn == other.Wwn ||
                    Wwn != null &&
                    Wwn.Equals(other.Wwn)
                ) && 
                (
                    Health == other.Health ||
                    Health != null &&
                    Health.Equals(other.Health)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    ImportStorageCenterId == other.ImportStorageCenterId ||
                    ImportStorageCenterId != null &&
                    ImportStorageCenterId.Equals(other.ImportStorageCenterId)
                ) && 
                (
                    MigrationState == other.MigrationState ||
                    MigrationState != null &&
                    MigrationState.Equals(other.MigrationState)
                ) && 
                (
                    IsReadOnly == other.IsReadOnly ||
                    IsReadOnly != null &&
                    IsReadOnly.Equals(other.IsReadOnly)
                ) && 
                (
                    ImportableCriteria == other.ImportableCriteria ||
                    ImportableCriteria != null &&
                    ImportableCriteria.Equals(other.ImportableCriteria)
                ) && 
                (
                    HostVolumeIds == other.HostVolumeIds ||
                    HostVolumeIds != null &&
                    HostVolumeIds.SequenceEqual(other.HostVolumeIds)
                ) && 
                (
                    ImportStorageCenterConsistencyGroupId == other.ImportStorageCenterConsistencyGroupId ||
                    ImportStorageCenterConsistencyGroupId != null &&
                    ImportStorageCenterConsistencyGroupId.Equals(other.ImportStorageCenterConsistencyGroupId)
                ) && 
                (
                    ImportStorageCenterConsistencyGroupNames == other.ImportStorageCenterConsistencyGroupNames ||
                    ImportStorageCenterConsistencyGroupNames != null &&
                    ImportStorageCenterConsistencyGroupNames.SequenceEqual(other.ImportStorageCenterConsistencyGroupNames)
                ) && 
                (
                    HealthL10n == other.HealthL10n ||
                    HealthL10n != null &&
                    HealthL10n.Equals(other.HealthL10n)
                ) && 
                (
                    MigrationStateL10n == other.MigrationStateL10n ||
                    MigrationStateL10n != null &&
                    MigrationStateL10n.Equals(other.MigrationStateL10n)
                ) && 
                (
                    ImportableCriteriaL10n == other.ImportableCriteriaL10n ||
                    ImportableCriteriaL10n != null &&
                    ImportableCriteriaL10n.Equals(other.ImportableCriteriaL10n)
                ) && 
                (
                    ImportStorageCenter == other.ImportStorageCenter ||
                    ImportStorageCenter != null &&
                    ImportStorageCenter.Equals(other.ImportStorageCenter)
                ) && 
                (
                    ImportStorageCenterConsistencyGroup == other.ImportStorageCenterConsistencyGroup ||
                    ImportStorageCenterConsistencyGroup != null &&
                    ImportStorageCenterConsistencyGroup.Equals(other.ImportStorageCenterConsistencyGroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (Wwn != null)
                    hashCode = hashCode * 59 + Wwn.GetHashCode();
                    if (Health != null)
                    hashCode = hashCode * 59 + Health.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (ImportStorageCenterId != null)
                    hashCode = hashCode * 59 + ImportStorageCenterId.GetHashCode();
                    if (MigrationState != null)
                    hashCode = hashCode * 59 + MigrationState.GetHashCode();
                    if (IsReadOnly != null)
                    hashCode = hashCode * 59 + IsReadOnly.GetHashCode();
                    if (ImportableCriteria != null)
                    hashCode = hashCode * 59 + ImportableCriteria.GetHashCode();
                    if (HostVolumeIds != null)
                    hashCode = hashCode * 59 + HostVolumeIds.GetHashCode();
                    if (ImportStorageCenterConsistencyGroupId != null)
                    hashCode = hashCode * 59 + ImportStorageCenterConsistencyGroupId.GetHashCode();
                    if (ImportStorageCenterConsistencyGroupNames != null)
                    hashCode = hashCode * 59 + ImportStorageCenterConsistencyGroupNames.GetHashCode();
                    if (HealthL10n != null)
                    hashCode = hashCode * 59 + HealthL10n.GetHashCode();
                    if (MigrationStateL10n != null)
                    hashCode = hashCode * 59 + MigrationStateL10n.GetHashCode();
                    if (ImportableCriteriaL10n != null)
                    hashCode = hashCode * 59 + ImportableCriteriaL10n.GetHashCode();
                    if (ImportStorageCenter != null)
                    hashCode = hashCode * 59 + ImportStorageCenter.GetHashCode();
                    if (ImportStorageCenterConsistencyGroup != null)
                    hashCode = hashCode * 59 + ImportStorageCenterConsistencyGroup.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportStorageCenterVolumeInstance left, ImportStorageCenterVolumeInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportStorageCenterVolumeInstance left, ImportStorageCenterVolumeInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
