/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a bond. Values was added in 2.0.0.0: type, description, partner_id. Values was added in 3.0.0.0: status. This resource type has queriable associations from bond, fsn, ip_port, eth_port
    /// </summary>
    [DataContract]
    public partial class BondInstance : IEquatable<BondInstance>
    { 
        /// <summary>
        /// Unique identifier of the bond.
        /// </summary>
        /// <value>Unique identifier of the bond.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Bond name.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Bond name.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Identifier of the bond with the same physical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance.  Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Identifier of the bond with the same physical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance.  Was added in version 2.0.0.0.</value>

        [DataMember(Name="partner_id")]
        public string PartnerId { get; set; }

        /// <summary>
        /// Identifier of the associated fail-safe network, or null if the bond is not in an FSN. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Identifier of the associated fail-safe network, or null if the bond is not in an FSN. Was added in version 3.5.0.0.</value>

        [DataMember(Name="fsn_id")]
        public string FsnId { get; set; }

        /// <summary>
        /// Indicates whether the bond&#39;s link is up. Values are: * true - Link is up. * false - Link is down. 
        /// </summary>
        /// <value>Indicates whether the bond&#39;s link is up. Values are: * true - Link is up. * false - Link is down. </value>

        [DataMember(Name="is_link_up")]
        public bool? IsLinkUp { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="status")]
        public BondStatusEnum? Status { get; set; }

        /// <summary>
        /// Maximum Transmission Unit (MTU) packet size of the bond, in bytes.
        /// </summary>
        /// <value>Maximum Transmission Unit (MTU) packet size of the bond, in bytes.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="mtu")]
        public int? Mtu { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>

        [DataMember(Name="mode")]
        public BondingModeEnum? Mode { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="type")]
        public BondingTypeEnum? Type { get; set; }

        /// <summary>
        /// User supplied description of the bond.
        /// </summary>
        /// <value>User supplied description of the bond.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Localized message string corresponding to status Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to status Was added in version 3.0.0.0.</value>

        [DataMember(Name="status_l10n")]
        public string StatusL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to mode
        /// </summary>
        /// <value>Localized message string corresponding to mode</value>

        [DataMember(Name="mode_l10n")]
        public string ModeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to type Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to type Was added in version 2.0.0.0.</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type ip_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type ip_port association.</value>

        [DataMember(Name="ip_ports")]
        public List<IpPortInstance> IpPorts { get; set; }

        /// <summary>
        /// This is the embeddable reference form of partner_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of partner_id attribute.</value>

        [DataMember(Name="partner")]
        public BondInstance Partner { get; set; }

        /// <summary>
        /// This is the embeddable reference form of fsn_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of fsn_id attribute.</value>

        [DataMember(Name="fsn")]
        public FsnInstance Fsn { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_port association.</value>

        [DataMember(Name="eth_ports")]
        public List<EthPortInstance> EthPorts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BondInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  FsnId: ").Append(FsnId).Append("\n");
            sb.Append("  IsLinkUp: ").Append(IsLinkUp).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Mtu: ").Append(Mtu).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StatusL10n: ").Append(StatusL10n).Append("\n");
            sb.Append("  ModeL10n: ").Append(ModeL10n).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  IpPorts: ").Append(IpPorts).Append("\n");
            sb.Append("  Partner: ").Append(Partner).Append("\n");
            sb.Append("  Fsn: ").Append(Fsn).Append("\n");
            sb.Append("  EthPorts: ").Append(EthPorts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BondInstance)obj);
        }

        /// <summary>
        /// Returns true if BondInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of BondInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BondInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PartnerId == other.PartnerId ||
                    PartnerId != null &&
                    PartnerId.Equals(other.PartnerId)
                ) && 
                (
                    FsnId == other.FsnId ||
                    FsnId != null &&
                    FsnId.Equals(other.FsnId)
                ) && 
                (
                    IsLinkUp == other.IsLinkUp ||
                    IsLinkUp != null &&
                    IsLinkUp.Equals(other.IsLinkUp)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Mtu == other.Mtu ||
                    Mtu != null &&
                    Mtu.Equals(other.Mtu)
                ) && 
                (
                    Mode == other.Mode ||
                    Mode != null &&
                    Mode.Equals(other.Mode)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    StatusL10n == other.StatusL10n ||
                    StatusL10n != null &&
                    StatusL10n.Equals(other.StatusL10n)
                ) && 
                (
                    ModeL10n == other.ModeL10n ||
                    ModeL10n != null &&
                    ModeL10n.Equals(other.ModeL10n)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    IpPorts == other.IpPorts ||
                    IpPorts != null &&
                    IpPorts.SequenceEqual(other.IpPorts)
                ) && 
                (
                    Partner == other.Partner ||
                    Partner != null &&
                    Partner.Equals(other.Partner)
                ) && 
                (
                    Fsn == other.Fsn ||
                    Fsn != null &&
                    Fsn.Equals(other.Fsn)
                ) && 
                (
                    EthPorts == other.EthPorts ||
                    EthPorts != null &&
                    EthPorts.SequenceEqual(other.EthPorts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PartnerId != null)
                    hashCode = hashCode * 59 + PartnerId.GetHashCode();
                    if (FsnId != null)
                    hashCode = hashCode * 59 + FsnId.GetHashCode();
                    if (IsLinkUp != null)
                    hashCode = hashCode * 59 + IsLinkUp.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Mtu != null)
                    hashCode = hashCode * 59 + Mtu.GetHashCode();
                    if (Mode != null)
                    hashCode = hashCode * 59 + Mode.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (StatusL10n != null)
                    hashCode = hashCode * 59 + StatusL10n.GetHashCode();
                    if (ModeL10n != null)
                    hashCode = hashCode * 59 + ModeL10n.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (IpPorts != null)
                    hashCode = hashCode * 59 + IpPorts.GetHashCode();
                    if (Partner != null)
                    hashCode = hashCode * 59 + Partner.GetHashCode();
                    if (Fsn != null)
                    hashCode = hashCode * 59 + Fsn.GetHashCode();
                    if (EthPorts != null)
                    hashCode = hashCode * 59 + EthPorts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BondInstance left, BondInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BondInstance left, BondInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
