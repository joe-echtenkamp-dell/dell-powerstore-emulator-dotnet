/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// This resource type has queriable associations from nas_server, ip_port, file_interface_route
    /// </summary>
    [DataContract]
    public partial class FileInterfaceInstance : IEquatable<FileInterfaceInstance>
    { 
        /// <summary>
        /// Unique identifier of the file interface.
        /// </summary>
        /// <value>Unique identifier of the file interface.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier of the NAS server.
        /// </summary>
        /// <value>Unique identifier of the NAS server.</value>

        [DataMember(Name="nas_server_id")]
        public string NasServerId { get; set; }

        /// <summary>
        /// IP address of the network interface. IPv4 and IPv6 are supported.
        /// </summary>
        /// <value>IP address of the network interface. IPv4 and IPv6 are supported.</value>

        [DataMember(Name="ip_address")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Prefix length for the interface. IPv4 and IPv6 are supported.
        /// </summary>
        /// <value>Prefix length for the interface. IPv4 and IPv6 are supported.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="prefix_length")]
        public int? PrefixLength { get; set; }

        /// <summary>
        /// Gateway address for the network interface. IPv4 and IPv6 are supported.
        /// </summary>
        /// <value>Gateway address for the network interface. IPv4 and IPv6 are supported.</value>

        [DataMember(Name="gateway")]
        public string Gateway { get; set; }

        /// <summary>
        /// Virtual Local Area Network (VLAN) identifier for the interface. The interface uses the identifier to accept packets that have matching VLAN tags.
        /// </summary>
        /// <value>Virtual Local Area Network (VLAN) identifier for the interface. The interface uses the identifier to accept packets that have matching VLAN tags.</value>

        [Range(0, 4094)]
        [DataMember(Name="vlan_id")]
        public int? VlanId { get; set; }

        /// <summary>
        /// Name of the network interface.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the network interface.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>

        [DataMember(Name="role")]
        public FileInterfaceRoleEnum? Role { get; set; }

        /// <summary>
        /// Indicates whether the network interface is disabled.
        /// </summary>
        /// <value>Indicates whether the network interface is disabled.</value>

        [DataMember(Name="is_disabled")]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// Used in replication context when the user wants to override the settings on the destination. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Used in replication context when the user wants to override the settings on the destination. Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_destination_override_enabled")]
        public bool? IsDestinationOverrideEnabled { get; set; }

        /// <summary>
        /// Unique Identifier of the IP Port that is associated with the file interface. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique Identifier of the IP Port that is associated with the file interface. Was added in version 3.0.0.0.</value>

        [DataMember(Name="ip_port_id")]
        public string IpPortId { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="source_parameters")]
        public FileInterfaceSourceParameters SourceParameters { get; set; }

        /// <summary>
        /// True when the associated nas_server has been created as a clone with the is_dr_test option set to true. Disaster Recovery Testing provides following functionalities   1. The ability to create a DR Test (DRT) enabled nas_server by cloning a replicated nas_server on destination PowerStore.   2. The ability to create the necessary isolated networking environment on the destination PowerStore.   3. With isolated network, DRT-enabled nas_server can operate with same IP address(es) as the the production      nas_server on the source PowerStore.   4. DRT-enabled nas_servers can run without IP address conflicts even if failover/failback of the replication occurs.   5. If isolated network is configured, do not configure production nas_servers with isolated network interfaces      on destination PowerStore.  Was added in version 3.6.0.0.
        /// </summary>
        /// <value>True when the associated nas_server has been created as a clone with the is_dr_test option set to true. Disaster Recovery Testing provides following functionalities   1. The ability to create a DR Test (DRT) enabled nas_server by cloning a replicated nas_server on destination PowerStore.   2. The ability to create the necessary isolated networking environment on the destination PowerStore.   3. With isolated network, DRT-enabled nas_server can operate with same IP address(es) as the the production      nas_server on the source PowerStore.   4. DRT-enabled nas_servers can run without IP address conflicts even if failover/failback of the replication occurs.   5. If isolated network is configured, do not configure production nas_servers with isolated network interfaces      on destination PowerStore.  Was added in version 3.6.0.0.</value>

        [DataMember(Name="is_dr_test")]
        public bool? IsDrTest { get; set; }

        /// <summary>
        /// Localized message string corresponding to role
        /// </summary>
        /// <value>Localized message string corresponding to role</value>

        [DataMember(Name="role_l10n")]
        public string RoleL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of nas_server_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of nas_server_id attribute.</value>

        [DataMember(Name="nas_server")]
        public NasServerInstance NasServer { get; set; }

        /// <summary>
        /// This is the embeddable reference form of ip_port_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of ip_port_id attribute.</value>

        [DataMember(Name="ip_port")]
        public IpPortInstance IpPort { get; set; }

        /// <summary>
        /// This is the inverse of the resource type file_interface_route association.
        /// </summary>
        /// <value>This is the inverse of the resource type file_interface_route association.</value>

        [DataMember(Name="file_interface_routes")]
        public List<FileInterfaceRouteInstance> FileInterfaceRoutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileInterfaceInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NasServerId: ").Append(NasServerId).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  PrefixLength: ").Append(PrefixLength).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  VlanId: ").Append(VlanId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  IsDestinationOverrideEnabled: ").Append(IsDestinationOverrideEnabled).Append("\n");
            sb.Append("  IpPortId: ").Append(IpPortId).Append("\n");
            sb.Append("  SourceParameters: ").Append(SourceParameters).Append("\n");
            sb.Append("  IsDrTest: ").Append(IsDrTest).Append("\n");
            sb.Append("  RoleL10n: ").Append(RoleL10n).Append("\n");
            sb.Append("  NasServer: ").Append(NasServer).Append("\n");
            sb.Append("  IpPort: ").Append(IpPort).Append("\n");
            sb.Append("  FileInterfaceRoutes: ").Append(FileInterfaceRoutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileInterfaceInstance)obj);
        }

        /// <summary>
        /// Returns true if FileInterfaceInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of FileInterfaceInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileInterfaceInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    NasServerId == other.NasServerId ||
                    NasServerId != null &&
                    NasServerId.Equals(other.NasServerId)
                ) && 
                (
                    IpAddress == other.IpAddress ||
                    IpAddress != null &&
                    IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    PrefixLength == other.PrefixLength ||
                    PrefixLength != null &&
                    PrefixLength.Equals(other.PrefixLength)
                ) && 
                (
                    Gateway == other.Gateway ||
                    Gateway != null &&
                    Gateway.Equals(other.Gateway)
                ) && 
                (
                    VlanId == other.VlanId ||
                    VlanId != null &&
                    VlanId.Equals(other.VlanId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Role == other.Role ||
                    Role != null &&
                    Role.Equals(other.Role)
                ) && 
                (
                    IsDisabled == other.IsDisabled ||
                    IsDisabled != null &&
                    IsDisabled.Equals(other.IsDisabled)
                ) && 
                (
                    IsDestinationOverrideEnabled == other.IsDestinationOverrideEnabled ||
                    IsDestinationOverrideEnabled != null &&
                    IsDestinationOverrideEnabled.Equals(other.IsDestinationOverrideEnabled)
                ) && 
                (
                    IpPortId == other.IpPortId ||
                    IpPortId != null &&
                    IpPortId.Equals(other.IpPortId)
                ) && 
                (
                    SourceParameters == other.SourceParameters ||
                    SourceParameters != null &&
                    SourceParameters.Equals(other.SourceParameters)
                ) && 
                (
                    IsDrTest == other.IsDrTest ||
                    IsDrTest != null &&
                    IsDrTest.Equals(other.IsDrTest)
                ) && 
                (
                    RoleL10n == other.RoleL10n ||
                    RoleL10n != null &&
                    RoleL10n.Equals(other.RoleL10n)
                ) && 
                (
                    NasServer == other.NasServer ||
                    NasServer != null &&
                    NasServer.Equals(other.NasServer)
                ) && 
                (
                    IpPort == other.IpPort ||
                    IpPort != null &&
                    IpPort.Equals(other.IpPort)
                ) && 
                (
                    FileInterfaceRoutes == other.FileInterfaceRoutes ||
                    FileInterfaceRoutes != null &&
                    FileInterfaceRoutes.SequenceEqual(other.FileInterfaceRoutes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (NasServerId != null)
                    hashCode = hashCode * 59 + NasServerId.GetHashCode();
                    if (IpAddress != null)
                    hashCode = hashCode * 59 + IpAddress.GetHashCode();
                    if (PrefixLength != null)
                    hashCode = hashCode * 59 + PrefixLength.GetHashCode();
                    if (Gateway != null)
                    hashCode = hashCode * 59 + Gateway.GetHashCode();
                    if (VlanId != null)
                    hashCode = hashCode * 59 + VlanId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Role != null)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                    if (IsDisabled != null)
                    hashCode = hashCode * 59 + IsDisabled.GetHashCode();
                    if (IsDestinationOverrideEnabled != null)
                    hashCode = hashCode * 59 + IsDestinationOverrideEnabled.GetHashCode();
                    if (IpPortId != null)
                    hashCode = hashCode * 59 + IpPortId.GetHashCode();
                    if (SourceParameters != null)
                    hashCode = hashCode * 59 + SourceParameters.GetHashCode();
                    if (IsDrTest != null)
                    hashCode = hashCode * 59 + IsDrTest.GetHashCode();
                    if (RoleL10n != null)
                    hashCode = hashCode * 59 + RoleL10n.GetHashCode();
                    if (NasServer != null)
                    hashCode = hashCode * 59 + NasServer.GetHashCode();
                    if (IpPort != null)
                    hashCode = hashCode * 59 + IpPort.GetHashCode();
                    if (FileInterfaceRoutes != null)
                    hashCode = hashCode * 59 + FileInterfaceRoutes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileInterfaceInstance left, FileInterfaceInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileInterfaceInstance left, FileInterfaceInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
