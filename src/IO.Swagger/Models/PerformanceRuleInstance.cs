/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Quality of service rule in a performance policy for policy based management of storage resources. This resource type has queriable association from policy
    /// </summary>
    [DataContract]
    public partial class PerformanceRuleInstance : IEquatable<PerformanceRuleInstance>
    { 
        /// <summary>
        /// Unique identifier representing a performance rule.
        /// </summary>
        /// <value>Unique identifier representing a performance rule.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the performance rule.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the performance rule.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IoPriority
        /// </summary>

        [DataMember(Name="io_priority")]
        public IoPriorityEnum? IoPriority { get; set; }

        /// <summary>
        /// Localized message string corresponding to io_priority
        /// </summary>
        /// <value>Localized message string corresponding to io_priority</value>

        [DataMember(Name="io_priority_l10n")]
        public string IoPriorityL10n { get; set; }

        /// <summary>
        /// List of the policies that are associated with this performance_rule.
        /// </summary>
        /// <value>List of the policies that are associated with this performance_rule.</value>

        [DataMember(Name="policies")]
        public List<PolicyInstance> Policies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceRuleInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IoPriority: ").Append(IoPriority).Append("\n");
            sb.Append("  IoPriorityL10n: ").Append(IoPriorityL10n).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PerformanceRuleInstance)obj);
        }

        /// <summary>
        /// Returns true if PerformanceRuleInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceRuleInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceRuleInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    IoPriority == other.IoPriority ||
                    IoPriority != null &&
                    IoPriority.Equals(other.IoPriority)
                ) && 
                (
                    IoPriorityL10n == other.IoPriorityL10n ||
                    IoPriorityL10n != null &&
                    IoPriorityL10n.Equals(other.IoPriorityL10n)
                ) && 
                (
                    Policies == other.Policies ||
                    Policies != null &&
                    Policies.SequenceEqual(other.Policies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IoPriority != null)
                    hashCode = hashCode * 59 + IoPriority.GetHashCode();
                    if (IoPriorityL10n != null)
                    hashCode = hashCode * 59 + IoPriorityL10n.GetHashCode();
                    if (Policies != null)
                    hashCode = hashCode * 59 + Policies.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PerformanceRuleInstance left, PerformanceRuleInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PerformanceRuleInstance left, PerformanceRuleInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
