/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Performance metrics for the nfs collected at twenty second interval.
    /// </summary>
    [DataContract]
    public partial class BasePerformanceMetricsByNfsv3 : IEquatable<BasePerformanceMetricsByNfsv3>
    { 
        /// <summary>
        /// Unique identifier of the nfs.
        /// </summary>
        /// <value>Unique identifier of the nfs.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// Unique identifier of the appliance. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the appliance. Was added in version 3.0.0.0.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// End of sample period.
        /// </summary>
        /// <value>End of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Number of consecutive sampling periods during which there were no changes in the metrics values. If the value is omitted from the response, it is 1 (no additional repeats). 
        /// </summary>
        /// <value>Number of consecutive sampling periods during which there were no changes in the metrics values. If the value is omitted from the response, it is 1 (no additional repeats). </value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Total md operations per second.
        /// </summary>
        /// <value>Total md operations per second.</value>

        [DataMember(Name="md_ops")]
        public float? MdOps { get; set; }

        /// <summary>
        /// Total failed md operations per second.
        /// </summary>
        /// <value>Total failed md operations per second.</value>

        [DataMember(Name="failed_md_ops")]
        public float? FailedMdOps { get; set; }

        /// <summary>
        /// Average md latency operations per second.
        /// </summary>
        /// <value>Average md latency operations per second.</value>

        [DataMember(Name="avg_md_latency")]
        public float? AvgMdLatency { get; set; }

        /// <summary>
        /// Total read iops in microseconds.
        /// </summary>
        /// <value>Total read iops in microseconds.</value>

        [DataMember(Name="read_iops")]
        public float? ReadIops { get; set; }

        /// <summary>
        /// Total write iops in microseconds.
        /// </summary>
        /// <value>Total write iops in microseconds.</value>

        [DataMember(Name="write_iops")]
        public float? WriteIops { get; set; }

        /// <summary>
        /// Total read and write iops in microseconds.
        /// </summary>
        /// <value>Total read and write iops in microseconds.</value>

        [DataMember(Name="total_iops")]
        public float? TotalIops { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasePerformanceMetricsByNfsv3 {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("  MdOps: ").Append(MdOps).Append("\n");
            sb.Append("  FailedMdOps: ").Append(FailedMdOps).Append("\n");
            sb.Append("  AvgMdLatency: ").Append(AvgMdLatency).Append("\n");
            sb.Append("  ReadIops: ").Append(ReadIops).Append("\n");
            sb.Append("  WriteIops: ").Append(WriteIops).Append("\n");
            sb.Append("  TotalIops: ").Append(TotalIops).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BasePerformanceMetricsByNfsv3)obj);
        }

        /// <summary>
        /// Returns true if BasePerformanceMetricsByNfsv3 instances are equal
        /// </summary>
        /// <param name="other">Instance of BasePerformanceMetricsByNfsv3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasePerformanceMetricsByNfsv3 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                ) && 
                (
                    MdOps == other.MdOps ||
                    MdOps != null &&
                    MdOps.Equals(other.MdOps)
                ) && 
                (
                    FailedMdOps == other.FailedMdOps ||
                    FailedMdOps != null &&
                    FailedMdOps.Equals(other.FailedMdOps)
                ) && 
                (
                    AvgMdLatency == other.AvgMdLatency ||
                    AvgMdLatency != null &&
                    AvgMdLatency.Equals(other.AvgMdLatency)
                ) && 
                (
                    ReadIops == other.ReadIops ||
                    ReadIops != null &&
                    ReadIops.Equals(other.ReadIops)
                ) && 
                (
                    WriteIops == other.WriteIops ||
                    WriteIops != null &&
                    WriteIops.Equals(other.WriteIops)
                ) && 
                (
                    TotalIops == other.TotalIops ||
                    TotalIops != null &&
                    TotalIops.Equals(other.TotalIops)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                    if (MdOps != null)
                    hashCode = hashCode * 59 + MdOps.GetHashCode();
                    if (FailedMdOps != null)
                    hashCode = hashCode * 59 + FailedMdOps.GetHashCode();
                    if (AvgMdLatency != null)
                    hashCode = hashCode * 59 + AvgMdLatency.GetHashCode();
                    if (ReadIops != null)
                    hashCode = hashCode * 59 + ReadIops.GetHashCode();
                    if (WriteIops != null)
                    hashCode = hashCode * 59 + WriteIops.GetHashCode();
                    if (TotalIops != null)
                    hashCode = hashCode * 59 + TotalIops.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BasePerformanceMetricsByNfsv3 left, BasePerformanceMetricsByNfsv3 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BasePerformanceMetricsByNfsv3 left, BasePerformanceMetricsByNfsv3 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
