/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    ///  Was added in version 3.0.0.0. This resource type has queriable association from file_events_publisher
    /// </summary>
    [DataContract]
    public partial class FileEventsPoolInstance : IEquatable<FileEventsPoolInstance>
    { 
        /// <summary>
        /// Unique identifier of the file event pool instance.
        /// </summary>
        /// <value>Unique identifier of the file event pool instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name assigned to the set of Windows servers where file event service software is installed.   This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name assigned to the set of Windows servers where file event service software is installed.   This property supports case-insensitive filtering.</value>

        [StringLength(80, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool. 
        /// </summary>
        /// <value>File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool. </value>

        [DataMember(Name="file_events_publisher_servers")]
        public List<string> FileEventsPublisherServers { get; set; }

        /// <summary>
        /// This value is used to modify file event service server addresses of this resource when the associated NAS server is a replication destination i.e, is_replica is set.  - If this value is set, file event service server addresses on the destination will be overridden with these values. - If this value is empty, file event service server addresses on the destination will be reset to the ones from the source.  File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool. 
        /// </summary>
        /// <value>This value is used to modify file event service server addresses of this resource when the associated NAS server is a replication destination i.e, is_replica is set.  - If this value is set, file event service server addresses on the destination will be overridden with these values. - If this value is empty, file event service server addresses on the destination will be reset to the ones from the source.  File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool. </value>

        [DataMember(Name="destination_file_events_publisher_servers")]
        public List<string> DestinationFileEventsPublisherServers { get; set; }

        /// <summary>
        /// List of up to three (one per category) sets of file event settings.   Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>List of up to three (one per category) sets of file event settings.   Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="file_events_settings")]
        public List<FileEventsSettingsInstance> FileEventsSettings { get; set; }

        /// <summary>
        /// Flag indicates if the file events pool is a replicated pool. 
        /// </summary>
        /// <value>Flag indicates if the file events pool is a replicated pool. </value>

        [DataMember(Name="is_replica")]
        public bool? IsReplica { get; set; }

        /// <summary>
        /// List of the file_events_publishers that are associated with this file_events_pool.
        /// </summary>
        /// <value>List of the file_events_publishers that are associated with this file_events_pool.</value>

        [DataMember(Name="file_events_publishers")]
        public List<FileEventsPublisherInstance> FileEventsPublishers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileEventsPoolInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FileEventsPublisherServers: ").Append(FileEventsPublisherServers).Append("\n");
            sb.Append("  DestinationFileEventsPublisherServers: ").Append(DestinationFileEventsPublisherServers).Append("\n");
            sb.Append("  FileEventsSettings: ").Append(FileEventsSettings).Append("\n");
            sb.Append("  IsReplica: ").Append(IsReplica).Append("\n");
            sb.Append("  FileEventsPublishers: ").Append(FileEventsPublishers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileEventsPoolInstance)obj);
        }

        /// <summary>
        /// Returns true if FileEventsPoolInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of FileEventsPoolInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileEventsPoolInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    FileEventsPublisherServers == other.FileEventsPublisherServers ||
                    FileEventsPublisherServers != null &&
                    FileEventsPublisherServers.SequenceEqual(other.FileEventsPublisherServers)
                ) && 
                (
                    DestinationFileEventsPublisherServers == other.DestinationFileEventsPublisherServers ||
                    DestinationFileEventsPublisherServers != null &&
                    DestinationFileEventsPublisherServers.SequenceEqual(other.DestinationFileEventsPublisherServers)
                ) && 
                (
                    FileEventsSettings == other.FileEventsSettings ||
                    FileEventsSettings != null &&
                    FileEventsSettings.SequenceEqual(other.FileEventsSettings)
                ) && 
                (
                    IsReplica == other.IsReplica ||
                    IsReplica != null &&
                    IsReplica.Equals(other.IsReplica)
                ) && 
                (
                    FileEventsPublishers == other.FileEventsPublishers ||
                    FileEventsPublishers != null &&
                    FileEventsPublishers.SequenceEqual(other.FileEventsPublishers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (FileEventsPublisherServers != null)
                    hashCode = hashCode * 59 + FileEventsPublisherServers.GetHashCode();
                    if (DestinationFileEventsPublisherServers != null)
                    hashCode = hashCode * 59 + DestinationFileEventsPublisherServers.GetHashCode();
                    if (FileEventsSettings != null)
                    hashCode = hashCode * 59 + FileEventsSettings.GetHashCode();
                    if (IsReplica != null)
                    hashCode = hashCode * 59 + IsReplica.GetHashCode();
                    if (FileEventsPublishers != null)
                    hashCode = hashCode * 59 + FileEventsPublishers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileEventsPoolInstance left, FileEventsPoolInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileEventsPoolInstance left, FileEventsPoolInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
