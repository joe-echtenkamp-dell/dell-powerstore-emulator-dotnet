/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Snapshot profile rule.
    /// </summary>
    [DataContract]
    public partial class ScProfileRuleInstance : IEquatable<ScProfileRuleInstance>
    { 
        /// <summary>
        /// Name of the snapshot profile rule.
        /// </summary>
        /// <value>Name of the snapshot profile rule.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Length of time to keep snapshots before deleting them, in minutes.
        /// </summary>
        /// <value>Length of time to keep snapshots before deleting them, in minutes.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="expiration")]
        public int? Expiration { get; set; }

        /// <summary>
        /// Frequency at which the snapshot will be taken.
        /// </summary>
        /// <value>Frequency at which the snapshot will be taken.</value>

        [DataMember(Name="frequency")]
        public ScScheduleTypeEnum? Frequency { get; set; }

        /// <summary>
        /// Date and time when the snapshot will be created. This applies to the value Once in the ScScheduleTypeEnum. 
        /// </summary>
        /// <value>Date and time when the snapshot will be created. This applies to the value Once in the ScScheduleTypeEnum. </value>

        [DataMember(Name="start_date_time")]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Time when snapshot creation will start.
        /// </summary>
        /// <value>Time when snapshot creation will start.</value>

        [DataMember(Name="start_time")]
        public string StartTime { get; set; }

        /// <summary>
        /// Time when snapshot creation will stop.
        /// </summary>
        /// <value>Time when snapshot creation will stop.</value>

        [DataMember(Name="end_time")]
        public string EndTime { get; set; }

        /// <summary>
        /// Time interval between any two snapshot creations, in minutes.
        /// </summary>
        /// <value>Time interval between any two snapshot creations, in minutes.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="interval")]
        public int? Interval { get; set; }

        /// <summary>
        /// Months of the year in which a snapshot will be taken.
        /// </summary>
        /// <value>Months of the year in which a snapshot will be taken.</value>

        [DataMember(Name="month_of_year")]
        public List<MonthOfYearEnum> MonthOfYear { get; set; }

        /// <summary>
        /// Weeks of the month in which a snapshot will be taken.
        /// </summary>
        /// <value>Weeks of the month in which a snapshot will be taken.</value>

        [DataMember(Name="week_of_month")]
        public List<WeekOfMonthEnum> WeekOfMonth { get; set; }

        /// <summary>
        /// Days of the week in which a snapshot will be taken.
        /// </summary>
        /// <value>Days of the week in which a snapshot will be taken.</value>

        [DataMember(Name="day_of_week")]
        public List<DayOfWeekEnum> DayOfWeek { get; set; }

        /// <summary>
        /// Dates of the month in which a snapshot will be taken.
        /// </summary>
        /// <value>Dates of the month in which a snapshot will be taken.</value>

        [DataMember(Name="date_of_month")]
        public List<int?> DateOfMonth { get; set; }

        /// <summary>
        /// Localized message string corresponding to frequency
        /// </summary>
        /// <value>Localized message string corresponding to frequency</value>

        [DataMember(Name="frequency_l10n")]
        public string FrequencyL10n { get; set; }

        /// <summary>
        /// Localized message array corresponding to month_of_year
        /// </summary>
        /// <value>Localized message array corresponding to month_of_year</value>

        [DataMember(Name="month_of_year_l10n")]
        public List<string> MonthOfYearL10n { get; set; }

        /// <summary>
        /// Localized message array corresponding to week_of_month
        /// </summary>
        /// <value>Localized message array corresponding to week_of_month</value>

        [DataMember(Name="week_of_month_l10n")]
        public List<string> WeekOfMonthL10n { get; set; }

        /// <summary>
        /// Localized message array corresponding to day_of_week
        /// </summary>
        /// <value>Localized message array corresponding to day_of_week</value>

        [DataMember(Name="day_of_week_l10n")]
        public List<string> DayOfWeekL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScProfileRuleInstance {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  MonthOfYear: ").Append(MonthOfYear).Append("\n");
            sb.Append("  WeekOfMonth: ").Append(WeekOfMonth).Append("\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  DateOfMonth: ").Append(DateOfMonth).Append("\n");
            sb.Append("  FrequencyL10n: ").Append(FrequencyL10n).Append("\n");
            sb.Append("  MonthOfYearL10n: ").Append(MonthOfYearL10n).Append("\n");
            sb.Append("  WeekOfMonthL10n: ").Append(WeekOfMonthL10n).Append("\n");
            sb.Append("  DayOfWeekL10n: ").Append(DayOfWeekL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScProfileRuleInstance)obj);
        }

        /// <summary>
        /// Returns true if ScProfileRuleInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ScProfileRuleInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScProfileRuleInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Expiration == other.Expiration ||
                    Expiration != null &&
                    Expiration.Equals(other.Expiration)
                ) && 
                (
                    Frequency == other.Frequency ||
                    Frequency != null &&
                    Frequency.Equals(other.Frequency)
                ) && 
                (
                    StartDateTime == other.StartDateTime ||
                    StartDateTime != null &&
                    StartDateTime.Equals(other.StartDateTime)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    Interval == other.Interval ||
                    Interval != null &&
                    Interval.Equals(other.Interval)
                ) && 
                (
                    MonthOfYear == other.MonthOfYear ||
                    MonthOfYear != null &&
                    MonthOfYear.SequenceEqual(other.MonthOfYear)
                ) && 
                (
                    WeekOfMonth == other.WeekOfMonth ||
                    WeekOfMonth != null &&
                    WeekOfMonth.SequenceEqual(other.WeekOfMonth)
                ) && 
                (
                    DayOfWeek == other.DayOfWeek ||
                    DayOfWeek != null &&
                    DayOfWeek.SequenceEqual(other.DayOfWeek)
                ) && 
                (
                    DateOfMonth == other.DateOfMonth ||
                    DateOfMonth != null &&
                    DateOfMonth.SequenceEqual(other.DateOfMonth)
                ) && 
                (
                    FrequencyL10n == other.FrequencyL10n ||
                    FrequencyL10n != null &&
                    FrequencyL10n.Equals(other.FrequencyL10n)
                ) && 
                (
                    MonthOfYearL10n == other.MonthOfYearL10n ||
                    MonthOfYearL10n != null &&
                    MonthOfYearL10n.SequenceEqual(other.MonthOfYearL10n)
                ) && 
                (
                    WeekOfMonthL10n == other.WeekOfMonthL10n ||
                    WeekOfMonthL10n != null &&
                    WeekOfMonthL10n.SequenceEqual(other.WeekOfMonthL10n)
                ) && 
                (
                    DayOfWeekL10n == other.DayOfWeekL10n ||
                    DayOfWeekL10n != null &&
                    DayOfWeekL10n.SequenceEqual(other.DayOfWeekL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Expiration != null)
                    hashCode = hashCode * 59 + Expiration.GetHashCode();
                    if (Frequency != null)
                    hashCode = hashCode * 59 + Frequency.GetHashCode();
                    if (StartDateTime != null)
                    hashCode = hashCode * 59 + StartDateTime.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (Interval != null)
                    hashCode = hashCode * 59 + Interval.GetHashCode();
                    if (MonthOfYear != null)
                    hashCode = hashCode * 59 + MonthOfYear.GetHashCode();
                    if (WeekOfMonth != null)
                    hashCode = hashCode * 59 + WeekOfMonth.GetHashCode();
                    if (DayOfWeek != null)
                    hashCode = hashCode * 59 + DayOfWeek.GetHashCode();
                    if (DateOfMonth != null)
                    hashCode = hashCode * 59 + DateOfMonth.GetHashCode();
                    if (FrequencyL10n != null)
                    hashCode = hashCode * 59 + FrequencyL10n.GetHashCode();
                    if (MonthOfYearL10n != null)
                    hashCode = hashCode * 59 + MonthOfYearL10n.GetHashCode();
                    if (WeekOfMonthL10n != null)
                    hashCode = hashCode * 59 + WeekOfMonthL10n.GetHashCode();
                    if (DayOfWeekL10n != null)
                    hashCode = hashCode * 59 + DayOfWeekL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScProfileRuleInstance left, ScProfileRuleInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScProfileRuleInstance left, ScProfileRuleInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
