/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// This resource type has queriable association from remote_system
    /// </summary>
    [DataContract]
    public partial class ImportSessionInstance : IEquatable<ImportSessionInstance>
    { 
        /// <summary>
        /// Unique identifier of the import session.
        /// </summary>
        /// <value>Unique identifier of the import session.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        ///  Was added in version 1.0.2.
        /// </summary>
        /// <value> Was added in version 1.0.2.</value>

        [DataMember(Name="type")]
        public ImportSessionTypeEnum? Type { get; set; }

        /// <summary>
        /// User-specified name of the import session.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>User-specified name of the import session.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Global storage discovery iSCSI ip address that will be used for import workflow. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name).  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Global storage discovery iSCSI ip address that will be used for import workflow. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name).  Was added in version 3.0.0.0.</value>

        [DataMember(Name="global_storage_discovery_address")]
        public string GlobalStorageDiscoveryAddress { get; set; }

        /// <summary>
        /// User-specified description of the import session.
        /// </summary>
        /// <value>User-specified description of the import session.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Unique identifier of the storage system that contains the source volume or consistency group to be imported. 
        /// </summary>
        /// <value>Unique identifier of the storage system that contains the source volume or consistency group to be imported. </value>

        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Unique identifier of the volume or consistency group to be imported.
        /// </summary>
        /// <value>Unique identifier of the volume or consistency group to be imported.</value>

        [DataMember(Name="source_resource_id")]
        public string SourceResourceId { get; set; }

        /// <summary>
        /// Unique identifier of the destination volume or volume group created as part of the import process. 
        /// </summary>
        /// <value>Unique identifier of the destination volume or volume group created as part of the import process. </value>

        [DataMember(Name="destination_resource_id")]
        public string DestinationResourceId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationResourceType
        /// </summary>

        [DataMember(Name="destination_resource_type")]
        public ImportDestinationResourceTypeEnum? DestinationResourceType { get; set; }

        /// <summary>
        /// For a volume that is part of a consistency group import, this value is the session identifier of the import session. For an individual volume import, this value is null. 
        /// </summary>
        /// <value>For a volume that is part of a consistency group import, this value is the session identifier of the import session. For an individual volume import, this value is null. </value>

        [DataMember(Name="parent_session_id")]
        public string ParentSessionId { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public ImportSessionStateEnum? State { get; set; }

        /// <summary>
        /// When the import is in the Copy_In_Progress state, this value indicates the estimated time at which the data copy will complete. Before the import is in the Copy_In_Progress state, the value is null. 
        /// </summary>
        /// <value>When the import is in the Copy_In_Progress state, this value indicates the estimated time at which the data copy will complete. Before the import is in the Copy_In_Progress state, the value is null. </value>

        [DataMember(Name="estimated_completion_timestamp")]
        public DateTime? EstimatedCompletionTimestamp { get; set; }

        /// <summary>
        /// When the import is in the Copy_In_Progress state, this value indicates the completion percent for the import. Before the import is in the Copy_In_Progress state, this value is 0. After the cutover or if there is a failure, this value is null. 
        /// </summary>
        /// <value>When the import is in the Copy_In_Progress state, this value indicates the completion percent for the import. Before the import is in the Copy_In_Progress state, this value is 0. After the cutover or if there is a failure, this value is null. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="progress_percentage")]
        public int? ProgressPercentage { get; set; }

        /// <summary>
        /// Average transfer rate of a data import operation in bytes/sec over the whole copy period. Before and after the import is in the Copy_In_Progress state, this value is null. 
        /// </summary>
        /// <value>Average transfer rate of a data import operation in bytes/sec over the whole copy period. Before and after the import is in the Copy_In_Progress state, this value is null. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="average_transfer_rate")]
        public long? AverageTransferRate { get; set; }

        /// <summary>
        /// Current transfer rate of a data import operation in bytes/sec. Before and after the import is in the Copy_In_Progress state, this value is null. 
        /// </summary>
        /// <value>Current transfer rate of a data import operation in bytes/sec. Before and after the import is in the Copy_In_Progress state, this value is null. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="current_transfer_rate")]
        public long? CurrentTransferRate { get; set; }

        /// <summary>
        /// Unique identifier of the local protection policy in the PowerStore storage system that will be applied on an imported destination volume or consistency group after cutover. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy. 
        /// </summary>
        /// <value>Unique identifier of the local protection policy in the PowerStore storage system that will be applied on an imported destination volume or consistency group after cutover. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy. </value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Unique identifier of the volume group to which the destination volume will be added, if any. 
        /// </summary>
        /// <value>Unique identifier of the volume group to which the destination volume will be added, if any. </value>

        [DataMember(Name="volume_group_id")]
        public string VolumeGroupId { get; set; }

        /// <summary>
        /// Indicates whether the import session cutover is manual (true) or automatic (false). 
        /// </summary>
        /// <value>Indicates whether the import session cutover is manual (true) or automatic (false). </value>

        [DataMember(Name="automatic_cutover")]
        public bool? AutomaticCutover { get; set; }

        /// <summary>
        /// Date and time at which the import session is scheduled to run. The date is specified in ISO 8601 format with the time expressed in UTC format. 
        /// </summary>
        /// <value>Date and time at which the import session is scheduled to run. The date is specified in ISO 8601 format with the time expressed in UTC format. </value>

        [DataMember(Name="scheduled_timestamp")]
        public DateTime? ScheduledTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>

        [DataMember(Name="error")]
        public ErrorInstance Error { get; set; }

        /// <summary>
        /// Date and time when was the import was last updated. This value is updated each time the import job updates. 
        /// </summary>
        /// <value>Date and time when was the import was last updated. This value is updated each time the import job updates. </value>

        [DataMember(Name="last_update_timestamp")]
        public DateTime? LastUpdateTimestamp { get; set; }

        /// <summary>
        /// Localized message string corresponding to type Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to type Was added in version 1.0.2.</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to destination_resource_type
        /// </summary>
        /// <value>Localized message string corresponding to destination_resource_type</value>

        [DataMember(Name="destination_resource_type_l10n")]
        public string DestinationResourceTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to state
        /// </summary>
        /// <value>Localized message string corresponding to state</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of remote_system_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of remote_system_id attribute.</value>

        [DataMember(Name="remote_system")]
        public RemoteSystemInstance RemoteSystem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportSessionInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  GlobalStorageDiscoveryAddress: ").Append(GlobalStorageDiscoveryAddress).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  SourceResourceId: ").Append(SourceResourceId).Append("\n");
            sb.Append("  DestinationResourceId: ").Append(DestinationResourceId).Append("\n");
            sb.Append("  DestinationResourceType: ").Append(DestinationResourceType).Append("\n");
            sb.Append("  ParentSessionId: ").Append(ParentSessionId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  EstimatedCompletionTimestamp: ").Append(EstimatedCompletionTimestamp).Append("\n");
            sb.Append("  ProgressPercentage: ").Append(ProgressPercentage).Append("\n");
            sb.Append("  AverageTransferRate: ").Append(AverageTransferRate).Append("\n");
            sb.Append("  CurrentTransferRate: ").Append(CurrentTransferRate).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  VolumeGroupId: ").Append(VolumeGroupId).Append("\n");
            sb.Append("  AutomaticCutover: ").Append(AutomaticCutover).Append("\n");
            sb.Append("  ScheduledTimestamp: ").Append(ScheduledTimestamp).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  LastUpdateTimestamp: ").Append(LastUpdateTimestamp).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  DestinationResourceTypeL10n: ").Append(DestinationResourceTypeL10n).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  RemoteSystem: ").Append(RemoteSystem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportSessionInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportSessionInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportSessionInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportSessionInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    GlobalStorageDiscoveryAddress == other.GlobalStorageDiscoveryAddress ||
                    GlobalStorageDiscoveryAddress != null &&
                    GlobalStorageDiscoveryAddress.Equals(other.GlobalStorageDiscoveryAddress)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    SourceResourceId == other.SourceResourceId ||
                    SourceResourceId != null &&
                    SourceResourceId.Equals(other.SourceResourceId)
                ) && 
                (
                    DestinationResourceId == other.DestinationResourceId ||
                    DestinationResourceId != null &&
                    DestinationResourceId.Equals(other.DestinationResourceId)
                ) && 
                (
                    DestinationResourceType == other.DestinationResourceType ||
                    DestinationResourceType != null &&
                    DestinationResourceType.Equals(other.DestinationResourceType)
                ) && 
                (
                    ParentSessionId == other.ParentSessionId ||
                    ParentSessionId != null &&
                    ParentSessionId.Equals(other.ParentSessionId)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    EstimatedCompletionTimestamp == other.EstimatedCompletionTimestamp ||
                    EstimatedCompletionTimestamp != null &&
                    EstimatedCompletionTimestamp.Equals(other.EstimatedCompletionTimestamp)
                ) && 
                (
                    ProgressPercentage == other.ProgressPercentage ||
                    ProgressPercentage != null &&
                    ProgressPercentage.Equals(other.ProgressPercentage)
                ) && 
                (
                    AverageTransferRate == other.AverageTransferRate ||
                    AverageTransferRate != null &&
                    AverageTransferRate.Equals(other.AverageTransferRate)
                ) && 
                (
                    CurrentTransferRate == other.CurrentTransferRate ||
                    CurrentTransferRate != null &&
                    CurrentTransferRate.Equals(other.CurrentTransferRate)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    VolumeGroupId == other.VolumeGroupId ||
                    VolumeGroupId != null &&
                    VolumeGroupId.Equals(other.VolumeGroupId)
                ) && 
                (
                    AutomaticCutover == other.AutomaticCutover ||
                    AutomaticCutover != null &&
                    AutomaticCutover.Equals(other.AutomaticCutover)
                ) && 
                (
                    ScheduledTimestamp == other.ScheduledTimestamp ||
                    ScheduledTimestamp != null &&
                    ScheduledTimestamp.Equals(other.ScheduledTimestamp)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    LastUpdateTimestamp == other.LastUpdateTimestamp ||
                    LastUpdateTimestamp != null &&
                    LastUpdateTimestamp.Equals(other.LastUpdateTimestamp)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    DestinationResourceTypeL10n == other.DestinationResourceTypeL10n ||
                    DestinationResourceTypeL10n != null &&
                    DestinationResourceTypeL10n.Equals(other.DestinationResourceTypeL10n)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    RemoteSystem == other.RemoteSystem ||
                    RemoteSystem != null &&
                    RemoteSystem.Equals(other.RemoteSystem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (GlobalStorageDiscoveryAddress != null)
                    hashCode = hashCode * 59 + GlobalStorageDiscoveryAddress.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (SourceResourceId != null)
                    hashCode = hashCode * 59 + SourceResourceId.GetHashCode();
                    if (DestinationResourceId != null)
                    hashCode = hashCode * 59 + DestinationResourceId.GetHashCode();
                    if (DestinationResourceType != null)
                    hashCode = hashCode * 59 + DestinationResourceType.GetHashCode();
                    if (ParentSessionId != null)
                    hashCode = hashCode * 59 + ParentSessionId.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (EstimatedCompletionTimestamp != null)
                    hashCode = hashCode * 59 + EstimatedCompletionTimestamp.GetHashCode();
                    if (ProgressPercentage != null)
                    hashCode = hashCode * 59 + ProgressPercentage.GetHashCode();
                    if (AverageTransferRate != null)
                    hashCode = hashCode * 59 + AverageTransferRate.GetHashCode();
                    if (CurrentTransferRate != null)
                    hashCode = hashCode * 59 + CurrentTransferRate.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (VolumeGroupId != null)
                    hashCode = hashCode * 59 + VolumeGroupId.GetHashCode();
                    if (AutomaticCutover != null)
                    hashCode = hashCode * 59 + AutomaticCutover.GetHashCode();
                    if (ScheduledTimestamp != null)
                    hashCode = hashCode * 59 + ScheduledTimestamp.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (LastUpdateTimestamp != null)
                    hashCode = hashCode * 59 + LastUpdateTimestamp.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (DestinationResourceTypeL10n != null)
                    hashCode = hashCode * 59 + DestinationResourceTypeL10n.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (RemoteSystem != null)
                    hashCode = hashCode * 59 + RemoteSystem.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportSessionInstance left, ImportSessionInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportSessionInstance left, ImportSessionInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
