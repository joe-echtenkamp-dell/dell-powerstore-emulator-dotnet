/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Create universal consistency group request. Was added in version 4.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ImportUniversalConsistencyGroupCreate : IEquatable<ImportUniversalConsistencyGroupCreate>
    { 
        /// <summary>
        /// Unique name for the universal consistency group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is preserved, the uniqueness check is case-insensitive, so the same name in two different cases is not considered unique. 
        /// </summary>
        /// <value>Unique name for the universal consistency group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is preserved, the uniqueness check is case-insensitive, so the same name in two different cases is not considered unique. </value>
        [Required]
        
        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The remote_system from which all of the universal import volumes will be imported. name:{name} can be used instead of {id}. For example: &#39;remote_system_id&#39;:&#39;name:remote_system_name&#39;
        /// </summary>
        /// <value>The remote_system from which all of the universal import volumes will be imported. name:{name} can be used instead of {id}. For example: &#39;remote_system_id&#39;:&#39;name:remote_system_name&#39;</value>
        [Required]
        
        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// A list of universal volumes to be added to the universal consistency group. 
        /// </summary>
        /// <value>A list of universal volumes to be added to the universal consistency group. </value>

        [DataMember(Name="import_universal_volume_ids")]
        public List<string> ImportUniversalVolumeIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportUniversalConsistencyGroupCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  ImportUniversalVolumeIds: ").Append(ImportUniversalVolumeIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportUniversalConsistencyGroupCreate)obj);
        }

        /// <summary>
        /// Returns true if ImportUniversalConsistencyGroupCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportUniversalConsistencyGroupCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportUniversalConsistencyGroupCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    ImportUniversalVolumeIds == other.ImportUniversalVolumeIds ||
                    ImportUniversalVolumeIds != null &&
                    ImportUniversalVolumeIds.SequenceEqual(other.ImportUniversalVolumeIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (ImportUniversalVolumeIds != null)
                    hashCode = hashCode * 59 + ImportUniversalVolumeIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportUniversalConsistencyGroupCreate left, ImportUniversalConsistencyGroupCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportUniversalConsistencyGroupCreate left, ImportUniversalConsistencyGroupCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
