/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Modify parameters for remote syslog server configurations. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class RemoteSyslogServerModify : IEquatable<RemoteSyslogServerModify>
    { 
        /// <summary>
        /// IPv4 or IPv6 address, or DNS name of the log server.
        /// </summary>
        /// <value>IPv4 or IPv6 address, or DNS name of the log server.</value>

        [DataMember(Name="remote_server_address")]
        public string RemoteServerAddress { get; set; }

        /// <summary>
        /// Port used for connection to the remote server.
        /// </summary>
        /// <value>Port used for connection to the remote server.</value>

        [Range(0, 65535)]
        [DataMember(Name="port")]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or Sets ProtocolType
        /// </summary>

        [DataMember(Name="protocol_type")]
        public ProtocolTypeEnum? ProtocolType { get; set; }

        /// <summary>
        /// Gets or Sets Encryption
        /// </summary>

        [DataMember(Name="encryption")]
        public EncryptionTypeEnum? Encryption { get; set; }

        /// <summary>
        /// Audit types to send to the syslog service. If the value is an empty list, no types of audit events will be sent to the syslog service. If the value is null (not specified), then all types of audit events will be sent to the syslog service. 
        /// </summary>
        /// <value>Audit types to send to the syslog service. If the value is an empty list, no types of audit events will be sent to the syslog service. If the value is null (not specified), then all types of audit events will be sent to the syslog service. </value>

        [DataMember(Name="audit_types")]
        public List<AuditEventTypeEnum> AuditTypes { get; set; }

        /// <summary>
        /// If false, then no events will be sent to the syslog service.
        /// </summary>
        /// <value>If false, then no events will be sent to the syslog service.</value>

        [DataMember(Name="is_enabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// If true, then events associated with alerts will be included in the logs. Was added in version 3.6.0.0.
        /// </summary>
        /// <value>If true, then events associated with alerts will be included in the logs. Was added in version 3.6.0.0.</value>

        [DataMember(Name="is_alert_events_included")]
        public bool? IsAlertEventsIncluded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSyslogServerModify {\n");
            sb.Append("  RemoteServerAddress: ").Append(RemoteServerAddress).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  ProtocolType: ").Append(ProtocolType).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("  AuditTypes: ").Append(AuditTypes).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsAlertEventsIncluded: ").Append(IsAlertEventsIncluded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteSyslogServerModify)obj);
        }

        /// <summary>
        /// Returns true if RemoteSyslogServerModify instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteSyslogServerModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSyslogServerModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RemoteServerAddress == other.RemoteServerAddress ||
                    RemoteServerAddress != null &&
                    RemoteServerAddress.Equals(other.RemoteServerAddress)
                ) && 
                (
                    Port == other.Port ||
                    Port != null &&
                    Port.Equals(other.Port)
                ) && 
                (
                    ProtocolType == other.ProtocolType ||
                    ProtocolType != null &&
                    ProtocolType.Equals(other.ProtocolType)
                ) && 
                (
                    Encryption == other.Encryption ||
                    Encryption != null &&
                    Encryption.Equals(other.Encryption)
                ) && 
                (
                    AuditTypes == other.AuditTypes ||
                    AuditTypes != null &&
                    AuditTypes.SequenceEqual(other.AuditTypes)
                ) && 
                (
                    IsEnabled == other.IsEnabled ||
                    IsEnabled != null &&
                    IsEnabled.Equals(other.IsEnabled)
                ) && 
                (
                    IsAlertEventsIncluded == other.IsAlertEventsIncluded ||
                    IsAlertEventsIncluded != null &&
                    IsAlertEventsIncluded.Equals(other.IsAlertEventsIncluded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RemoteServerAddress != null)
                    hashCode = hashCode * 59 + RemoteServerAddress.GetHashCode();
                    if (Port != null)
                    hashCode = hashCode * 59 + Port.GetHashCode();
                    if (ProtocolType != null)
                    hashCode = hashCode * 59 + ProtocolType.GetHashCode();
                    if (Encryption != null)
                    hashCode = hashCode * 59 + Encryption.GetHashCode();
                    if (AuditTypes != null)
                    hashCode = hashCode * 59 + AuditTypes.GetHashCode();
                    if (IsEnabled != null)
                    hashCode = hashCode * 59 + IsEnabled.GetHashCode();
                    if (IsAlertEventsIncluded != null)
                    hashCode = hashCode * 59 + IsAlertEventsIncluded.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteSyslogServerModify left, RemoteSyslogServerModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteSyslogServerModify left, RemoteSyslogServerModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
