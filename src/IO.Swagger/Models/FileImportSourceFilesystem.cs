/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The list of filesystems mounted on the NAS server. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileImportSourceFilesystem : IEquatable<FileImportSourceFilesystem>
    { 
        /// <summary>
        /// Unique identifier of the source file system. Was added in version 3.0.0.0. Was deprecated in version 3.2.0.0.
        /// </summary>
        /// <value>Unique identifier of the source file system. Was added in version 3.0.0.0. Was deprecated in version 3.2.0.0.</value>

        [DataMember(Name="import_source_nas_server_id")]
        public string ImportSourceNasServerId { get; set; }

        /// <summary>
        /// Source name of the filesystem.  Was added in version 3.0.0.0. Was deprecated in version 3.2.0.0.
        /// </summary>
        /// <value>Source name of the filesystem.  Was added in version 3.0.0.0. Was deprecated in version 3.2.0.0.</value>

        [DataMember(Name="sourcename")]
        public string Sourcename { get; set; }

        /// <summary>
        /// Target name of the filesystem.  Was added in version 3.0.0.0. Was deprecated in version 3.2.0.0.
        /// </summary>
        /// <value>Target name of the filesystem.  Was added in version 3.0.0.0. Was deprecated in version 3.2.0.0.</value>

        [DataMember(Name="targetname")]
        public string Targetname { get; set; }

        /// <summary>
        /// The size, in bytes, of the filesystem. 
        /// </summary>
        /// <value>The size, in bytes, of the filesystem. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="size")]
        public long? Size { get; set; }

        /// <summary>
        /// Name of the filesystem. Was added in version 3.2.0.0.
        /// </summary>
        /// <value>Name of the filesystem. Was added in version 3.2.0.0.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Indicates whether File Level Retention feature is enabled on the Filesystem. 
        /// </summary>
        /// <value>Indicates whether File Level Retention feature is enabled on the Filesystem. </value>

        [DataMember(Name="is_flr_enabled")]
        public bool? IsFlrEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileImportSourceFilesystem {\n");
            sb.Append("  ImportSourceNasServerId: ").Append(ImportSourceNasServerId).Append("\n");
            sb.Append("  Sourcename: ").Append(Sourcename).Append("\n");
            sb.Append("  Targetname: ").Append(Targetname).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsFlrEnabled: ").Append(IsFlrEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileImportSourceFilesystem)obj);
        }

        /// <summary>
        /// Returns true if FileImportSourceFilesystem instances are equal
        /// </summary>
        /// <param name="other">Instance of FileImportSourceFilesystem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileImportSourceFilesystem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImportSourceNasServerId == other.ImportSourceNasServerId ||
                    ImportSourceNasServerId != null &&
                    ImportSourceNasServerId.Equals(other.ImportSourceNasServerId)
                ) && 
                (
                    Sourcename == other.Sourcename ||
                    Sourcename != null &&
                    Sourcename.Equals(other.Sourcename)
                ) && 
                (
                    Targetname == other.Targetname ||
                    Targetname != null &&
                    Targetname.Equals(other.Targetname)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    IsFlrEnabled == other.IsFlrEnabled ||
                    IsFlrEnabled != null &&
                    IsFlrEnabled.Equals(other.IsFlrEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImportSourceNasServerId != null)
                    hashCode = hashCode * 59 + ImportSourceNasServerId.GetHashCode();
                    if (Sourcename != null)
                    hashCode = hashCode * 59 + Sourcename.GetHashCode();
                    if (Targetname != null)
                    hashCode = hashCode * 59 + Targetname.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IsFlrEnabled != null)
                    hashCode = hashCode * 59 + IsFlrEnabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileImportSourceFilesystem left, FileImportSourceFilesystem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileImportSourceFilesystem left, FileImportSourceFilesystem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
