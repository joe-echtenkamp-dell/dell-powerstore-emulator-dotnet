/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
        /// <summary>
        /// Migration session states.  * Initializing - Migration session starts and stays in this state until the session initialization completes.  * Automatic_Rescan_In_Progress - Migration session is rescanning hosts that are capable of being automatically rescanned.  * Manual_Rescan_Required - Migration session has discovered hosts that need to be manually rescanned.  * Initialized - Migration session transitions to this state when session initialization completes and no further rescans are required.  * Synchronizing - Background copy is in progress.  * Idle - Migration session transitions to this state when initial background copy completes.  * Cutting_Over - Final phase of the migration, when ownership of the volume, vVol, or application group is transferred to the new appliance.  * Deleting - Migration session is being deleted.  * Completed - Migration session is complete and it is safe to delete the session.  * Pausing - Migration session transitions to this state when the pause command is issued.  * Paused - Migration session is paused. User intervention is required to resume the session.  * System_Paused - Migration session transitions to this state if it encounters any error. User may resume or delete the migration session after resolving the error.  * Resuming - Migration session background copy being resumed.  * Failed - Migration session encountered an error.  Values was added in 3.0.0.0: Automatic_Rescan_In_Progress, Manual_Rescan_Required.
        /// </summary>
        /// <value>Migration session states.  * Initializing - Migration session starts and stays in this state until the session initialization completes.  * Automatic_Rescan_In_Progress - Migration session is rescanning hosts that are capable of being automatically rescanned.  * Manual_Rescan_Required - Migration session has discovered hosts that need to be manually rescanned.  * Initialized - Migration session transitions to this state when session initialization completes and no further rescans are required.  * Synchronizing - Background copy is in progress.  * Idle - Migration session transitions to this state when initial background copy completes.  * Cutting_Over - Final phase of the migration, when ownership of the volume, vVol, or application group is transferred to the new appliance.  * Deleting - Migration session is being deleted.  * Completed - Migration session is complete and it is safe to delete the session.  * Pausing - Migration session transitions to this state when the pause command is issued.  * Paused - Migration session is paused. User intervention is required to resume the session.  * System_Paused - Migration session transitions to this state if it encounters any error. User may resume or delete the migration session after resolving the error.  * Resuming - Migration session background copy being resumed.  * Failed - Migration session encountered an error.  Values was added in 3.0.0.0: Automatic_Rescan_In_Progress, Manual_Rescan_Required.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MigrationSessionStateEnum
        {
            
            /// <summary>
            /// Enum InitializingEnum for Initializing
            /// </summary>
            [EnumMember(Value = "Initializing")]
            InitializingEnum = 1,
            
            /// <summary>
            /// Enum AutomaticRescanInProgressEnum for Automatic_Rescan_In_Progress
            /// </summary>
            [EnumMember(Value = "Automatic_Rescan_In_Progress")]
            AutomaticRescanInProgressEnum = 2,
            
            /// <summary>
            /// Enum ManualRescanRequiredEnum for Manual_Rescan_Required
            /// </summary>
            [EnumMember(Value = "Manual_Rescan_Required")]
            ManualRescanRequiredEnum = 3,
            
            /// <summary>
            /// Enum InitializedEnum for Initialized
            /// </summary>
            [EnumMember(Value = "Initialized")]
            InitializedEnum = 4,
            
            /// <summary>
            /// Enum SynchronizingEnum for Synchronizing
            /// </summary>
            [EnumMember(Value = "Synchronizing")]
            SynchronizingEnum = 5,
            
            /// <summary>
            /// Enum IdleEnum for Idle
            /// </summary>
            [EnumMember(Value = "Idle")]
            IdleEnum = 6,
            
            /// <summary>
            /// Enum CuttingOverEnum for Cutting_Over
            /// </summary>
            [EnumMember(Value = "Cutting_Over")]
            CuttingOverEnum = 7,
            
            /// <summary>
            /// Enum DeletingEnum for Deleting
            /// </summary>
            [EnumMember(Value = "Deleting")]
            DeletingEnum = 8,
            
            /// <summary>
            /// Enum CompletedEnum for Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            CompletedEnum = 9,
            
            /// <summary>
            /// Enum PausingEnum for Pausing
            /// </summary>
            [EnumMember(Value = "Pausing")]
            PausingEnum = 10,
            
            /// <summary>
            /// Enum PausedEnum for Paused
            /// </summary>
            [EnumMember(Value = "Paused")]
            PausedEnum = 11,
            
            /// <summary>
            /// Enum SystemPausedEnum for System_Paused
            /// </summary>
            [EnumMember(Value = "System_Paused")]
            SystemPausedEnum = 12,
            
            /// <summary>
            /// Enum ResumingEnum for Resuming
            /// </summary>
            [EnumMember(Value = "Resuming")]
            ResumingEnum = 13,
            
            /// <summary>
            /// Enum FailedEnum for Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            FailedEnum = 14
        }
}
