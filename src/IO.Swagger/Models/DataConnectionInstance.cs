/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Data connection status between the local node and a remote target. 
    /// </summary>
    [DataContract]
    public partial class DataConnectionInstance : IEquatable<DataConnectionInstance>
    { 
        /// <summary>
        /// Unique identifier of the local, initiating node. 
        /// </summary>
        /// <value>Unique identifier of the local, initiating node. </value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// Initiating address from the local node. IP for ISCSI and TCP data connection type. WWN for FC data connection type. 
        /// </summary>
        /// <value>Initiating address from the local node. IP for ISCSI and TCP data connection type. WWN for FC data connection type. </value>

        [DataMember(Name="initiator_address")]
        public string InitiatorAddress { get; set; }

        /// <summary>
        /// Target address from the remote system. IP for ISCSI and TCP data connection type. WWN for FC data connection type. 
        /// </summary>
        /// <value>Target address from the remote system. IP for ISCSI and TCP data connection type. WWN for FC data connection type. </value>

        [DataMember(Name="target_address")]
        public string TargetAddress { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public TransitConnectionStatusEnum? Status { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="data_connection_type")]
        public DataConnectionTypeEnum? DataConnectionType { get; set; }

        /// <summary>
        /// Localized message string corresponding to status
        /// </summary>
        /// <value>Localized message string corresponding to status</value>

        [DataMember(Name="status_l10n")]
        public string StatusL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to data_connection_type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to data_connection_type Was added in version 3.0.0.0.</value>

        [DataMember(Name="data_connection_type_l10n")]
        public string DataConnectionTypeL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataConnectionInstance {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  InitiatorAddress: ").Append(InitiatorAddress).Append("\n");
            sb.Append("  TargetAddress: ").Append(TargetAddress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DataConnectionType: ").Append(DataConnectionType).Append("\n");
            sb.Append("  StatusL10n: ").Append(StatusL10n).Append("\n");
            sb.Append("  DataConnectionTypeL10n: ").Append(DataConnectionTypeL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DataConnectionInstance)obj);
        }

        /// <summary>
        /// Returns true if DataConnectionInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of DataConnectionInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataConnectionInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    InitiatorAddress == other.InitiatorAddress ||
                    InitiatorAddress != null &&
                    InitiatorAddress.Equals(other.InitiatorAddress)
                ) && 
                (
                    TargetAddress == other.TargetAddress ||
                    TargetAddress != null &&
                    TargetAddress.Equals(other.TargetAddress)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    DataConnectionType == other.DataConnectionType ||
                    DataConnectionType != null &&
                    DataConnectionType.Equals(other.DataConnectionType)
                ) && 
                (
                    StatusL10n == other.StatusL10n ||
                    StatusL10n != null &&
                    StatusL10n.Equals(other.StatusL10n)
                ) && 
                (
                    DataConnectionTypeL10n == other.DataConnectionTypeL10n ||
                    DataConnectionTypeL10n != null &&
                    DataConnectionTypeL10n.Equals(other.DataConnectionTypeL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (InitiatorAddress != null)
                    hashCode = hashCode * 59 + InitiatorAddress.GetHashCode();
                    if (TargetAddress != null)
                    hashCode = hashCode * 59 + TargetAddress.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (DataConnectionType != null)
                    hashCode = hashCode * 59 + DataConnectionType.GetHashCode();
                    if (StatusL10n != null)
                    hashCode = hashCode * 59 + StatusL10n.GetHashCode();
                    if (DataConnectionTypeL10n != null)
                    hashCode = hashCode * 59 + DataConnectionTypeL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DataConnectionInstance left, DataConnectionInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DataConnectionInstance left, DataConnectionInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
