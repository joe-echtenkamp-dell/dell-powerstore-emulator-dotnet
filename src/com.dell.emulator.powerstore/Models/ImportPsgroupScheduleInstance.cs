/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Snapshot schedule of a volume
    /// </summary>
    [DataContract]
    public partial class ImportPsgroupScheduleInstance : IEquatable<ImportPsgroupScheduleInstance>
    { 
        /// <summary>
        /// Name of the snapshot schedule.
        /// </summary>
        /// <value>Name of the snapshot schedule.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public ImportPsgroupScheduleTypeEnum? Type { get; set; }

        /// <summary>
        /// Number of days for which the snapshot schedule has been active.
        /// </summary>
        /// <value>Number of days for which the snapshot schedule has been active.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="active_date")]
        public int? ActiveDate { get; set; }

        /// <summary>
        /// Number of days for which the snapshot schedule has been inactive.
        /// </summary>
        /// <value>Number of days for which the snapshot schedule has been inactive.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="inactive_date")]
        public int? InactiveDate { get; set; }

        /// <summary>
        /// Repeat interval of the snapshot schedule, in days. The value is 1 for the schedule frequencies Once and Hourly. It can be greater than 1 for the schedule frequencies Daily and Weekly. 
        /// </summary>
        /// <value>Repeat interval of the snapshot schedule, in days. The value is 1 for the schedule frequencies Once and Hourly. It can be greater than 1 for the schedule frequencies Daily and Weekly. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="repetition_interval")]
        public int? RepetitionInterval { get; set; }

        /// <summary>
        /// Time when snapshot creation begins each day, in minutes.
        /// </summary>
        /// <value>Time when snapshot creation begins each day, in minutes.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="start_time")]
        public int? StartTime { get; set; }

        /// <summary>
        /// Time when snapshot creation ends each day, in minutes.
        /// </summary>
        /// <value>Time when snapshot creation ends each day, in minutes.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="end_time")]
        public int? EndTime { get; set; }

        /// <summary>
        /// Frequency at which snapshots are created, in minutes.
        /// </summary>
        /// <value>Frequency at which snapshots are created, in minutes.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="frequency")]
        public int? Frequency { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public ImportPsgroupScheduleStatusEnum? Status { get; set; }

        /// <summary>
        /// Number of snapshots to retain.
        /// </summary>
        /// <value>Number of snapshots to retain.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="keep_count")]
        public int? KeepCount { get; set; }

        /// <summary>
        /// Localized message string corresponding to type
        /// </summary>
        /// <value>Localized message string corresponding to type</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to status
        /// </summary>
        /// <value>Localized message string corresponding to status</value>

        [DataMember(Name="status_l10n")]
        public string StatusL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportPsgroupScheduleInstance {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ActiveDate: ").Append(ActiveDate).Append("\n");
            sb.Append("  InactiveDate: ").Append(InactiveDate).Append("\n");
            sb.Append("  RepetitionInterval: ").Append(RepetitionInterval).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  KeepCount: ").Append(KeepCount).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  StatusL10n: ").Append(StatusL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportPsgroupScheduleInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportPsgroupScheduleInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportPsgroupScheduleInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportPsgroupScheduleInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    ActiveDate == other.ActiveDate ||
                    ActiveDate != null &&
                    ActiveDate.Equals(other.ActiveDate)
                ) && 
                (
                    InactiveDate == other.InactiveDate ||
                    InactiveDate != null &&
                    InactiveDate.Equals(other.InactiveDate)
                ) && 
                (
                    RepetitionInterval == other.RepetitionInterval ||
                    RepetitionInterval != null &&
                    RepetitionInterval.Equals(other.RepetitionInterval)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    Frequency == other.Frequency ||
                    Frequency != null &&
                    Frequency.Equals(other.Frequency)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    KeepCount == other.KeepCount ||
                    KeepCount != null &&
                    KeepCount.Equals(other.KeepCount)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    StatusL10n == other.StatusL10n ||
                    StatusL10n != null &&
                    StatusL10n.Equals(other.StatusL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (ActiveDate != null)
                    hashCode = hashCode * 59 + ActiveDate.GetHashCode();
                    if (InactiveDate != null)
                    hashCode = hashCode * 59 + InactiveDate.GetHashCode();
                    if (RepetitionInterval != null)
                    hashCode = hashCode * 59 + RepetitionInterval.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (Frequency != null)
                    hashCode = hashCode * 59 + Frequency.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (KeepCount != null)
                    hashCode = hashCode * 59 + KeepCount.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (StatusL10n != null)
                    hashCode = hashCode * 59 + StatusL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportPsgroupScheduleInstance left, ImportPsgroupScheduleInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportPsgroupScheduleInstance left, ImportPsgroupScheduleInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
