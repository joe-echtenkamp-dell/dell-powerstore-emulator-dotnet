/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Arguments for the Delete operation.
    /// </summary>
    [DataContract]
    public partial class NasServerDelete : IEquatable<NasServerDelete>
    { 
        /// <summary>
        /// Indicates whether to keep the associated SMB servers joined to the Active Directory when the NAS server is deleted. Values are:\\n - true - Keep the associated SMB servers joined to the Active Directory when the NAS server is deleted. - false - (Default) Try to unjoin the associated SMB servers from the Active Directory before deleting the NAS server.
        /// </summary>
        /// <value>Indicates whether to keep the associated SMB servers joined to the Active Directory when the NAS server is deleted. Values are:\\n - true - Keep the associated SMB servers joined to the Active Directory when the NAS server is deleted. - false - (Default) Try to unjoin the associated SMB servers from the Active Directory before deleting the NAS server.</value>

        [DataMember(Name="is_skip_domain_unjoin")]
        public bool? IsSkipDomainUnjoin { get; set; }

        /// <summary>
        /// Administrator login used to unjoin the associated SMB servers from the Active Directory (AD) domain before deleting the NAS server. This parameter is required when the skipDomainUnjoin parameter is false or not set, and the NAS server has SMB servers joined to an AD domain.
        /// </summary>
        /// <value>Administrator login used to unjoin the associated SMB servers from the Active Directory (AD) domain before deleting the NAS server. This parameter is required when the skipDomainUnjoin parameter is false or not set, and the NAS server has SMB servers joined to an AD domain.</value>

        [DataMember(Name="domain_user_name")]
        public string DomainUserName { get; set; }

        /// <summary>
        /// Administrator password used to unjoin the associated SMB servers from the Active Directory (AD) domain before deleting the NAS server. This parameter is required when the skipDomainUnjoin parameter is false or not set, and the NAS server has SMB servers joined to an AD domain.
        /// </summary>
        /// <value>Administrator password used to unjoin the associated SMB servers from the Active Directory (AD) domain before deleting the NAS server. This parameter is required when the skipDomainUnjoin parameter is false or not set, and the NAS server has SMB servers joined to an AD domain.</value>

        [DataMember(Name="domain_password")]
        public string DomainPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NasServerDelete {\n");
            sb.Append("  IsSkipDomainUnjoin: ").Append(IsSkipDomainUnjoin).Append("\n");
            sb.Append("  DomainUserName: ").Append(DomainUserName).Append("\n");
            sb.Append("  DomainPassword: ").Append(DomainPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NasServerDelete)obj);
        }

        /// <summary>
        /// Returns true if NasServerDelete instances are equal
        /// </summary>
        /// <param name="other">Instance of NasServerDelete to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NasServerDelete other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsSkipDomainUnjoin == other.IsSkipDomainUnjoin ||
                    IsSkipDomainUnjoin != null &&
                    IsSkipDomainUnjoin.Equals(other.IsSkipDomainUnjoin)
                ) && 
                (
                    DomainUserName == other.DomainUserName ||
                    DomainUserName != null &&
                    DomainUserName.Equals(other.DomainUserName)
                ) && 
                (
                    DomainPassword == other.DomainPassword ||
                    DomainPassword != null &&
                    DomainPassword.Equals(other.DomainPassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsSkipDomainUnjoin != null)
                    hashCode = hashCode * 59 + IsSkipDomainUnjoin.GetHashCode();
                    if (DomainUserName != null)
                    hashCode = hashCode * 59 + DomainUserName.GetHashCode();
                    if (DomainPassword != null)
                    hashCode = hashCode * 59 + DomainPassword.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NasServerDelete left, NasServerDelete right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NasServerDelete left, NasServerDelete right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
