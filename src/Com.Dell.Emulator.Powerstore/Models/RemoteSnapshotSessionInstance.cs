/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Information about a remote snapshot session. Was added in version 3.5.0.0. This resource type has queriable associations from remote_system, volume, volume_group, remote_snapshot, snapshot_rule
    /// </summary>
    [DataContract]
    public partial class RemoteSnapshotSessionInstance : IEquatable<RemoteSnapshotSessionInstance>
    { 
        /// <summary>
        /// Unique identifier of the remote snapshot session.
        /// </summary>
        /// <value>Unique identifier of the remote snapshot session.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// System-specified name of the remote snapshot session.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>System-specified name of the remote snapshot session.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SessionType
        /// </summary>

        [DataMember(Name="session_type")]
        public RemoteSnapshotSessionTypeEnum? SessionType { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>

        [DataMember(Name="resource_type")]
        public RemoteSnapshotResourceTypeEnum? ResourceType { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public RemoteSnapshotSessionStateEnum? State { get; set; }

        /// <summary>
        /// Unique identifier of the remote system.
        /// </summary>
        /// <value>Unique identifier of the remote system.</value>

        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// ID of the volume to which this session belongs.
        /// </summary>
        /// <value>ID of the volume to which this session belongs.</value>

        [DataMember(Name="volume_id")]
        public string VolumeId { get; set; }

        /// <summary>
        /// ID of the volume_group to which this session belongs.
        /// </summary>
        /// <value>ID of the volume_group to which this session belongs.</value>

        [DataMember(Name="volume_group_id")]
        public string VolumeGroupId { get; set; }

        /// <summary>
        /// Unique identifier of snapshot generated by remote system. Not applicable for backup session.
        /// </summary>
        /// <value>Unique identifier of snapshot generated by remote system. Not applicable for backup session.</value>

        [DataMember(Name="remote_backup_identifier")]
        public string RemoteBackupIdentifier { get; set; }

        /// <summary>
        /// ID of the volume to which this session belongs.
        /// </summary>
        /// <value>ID of the volume to which this session belongs.</value>

        [DataMember(Name="remote_snapshot_id")]
        public string RemoteSnapshotId { get; set; }

        /// <summary>
        /// Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="member_details")]
        public List<MemberDetailsInstance> MemberDetails { get; set; }

        /// <summary>
        /// Date/time when backup/retrieve of snapshot began. Not applicable for instant_access session.
        /// </summary>
        /// <value>Date/time when backup/retrieve of snapshot began. Not applicable for instant_access session.</value>

        [DataMember(Name="start_timestamp")]
        public DateTime? StartTimestamp { get; set; }

        /// <summary>
        /// Date/time when backup/retrieve of snapshot completed. Not applicable for instant_access session.
        /// </summary>
        /// <value>Date/time when backup/retrieve of snapshot completed. Not applicable for instant_access session.</value>

        [DataMember(Name="end_timestamp")]
        public DateTime? EndTimestamp { get; set; }

        /// <summary>
        /// When the session is in the In_Progress state, this value indicates the estimated time at which the data copy will complete. Before the session is in the In_Progress state, the value is null.
        /// </summary>
        /// <value>When the session is in the In_Progress state, this value indicates the estimated time at which the data copy will complete. Before the session is in the In_Progress state, the value is null.</value>

        [DataMember(Name="estimated_completion_timestamp")]
        public DateTime? EstimatedCompletionTimestamp { get; set; }

        /// <summary>
        /// When the session is in the In_Progress state, this value indicates the completion percent for the session. Before the session is in the In_Progress state, this value is 0.
        /// </summary>
        /// <value>When the session is in the In_Progress state, this value indicates the completion percent for the session. Before the session is in the In_Progress state, this value is 0.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="progress_percentage")]
        public int? ProgressPercentage { get; set; }

        /// <summary>
        /// Average transfer rate of a data operation in bytes/sec over the whole copy period. Before and after the session is in the In_Progress state, this value is null.
        /// </summary>
        /// <value>Average transfer rate of a data operation in bytes/sec over the whole copy period. Before and after the session is in the In_Progress state, this value is null.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="average_transfer_rate")]
        public long? AverageTransferRate { get; set; }

        /// <summary>
        /// Current transfer rate of a data operation in bytes/sec. Before and after the session is in the In_Progress state, this value is null.
        /// </summary>
        /// <value>Current transfer rate of a data operation in bytes/sec. Before and after the session is in the In_Progress state, this value is null.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="current_transfer_rate")]
        public long? CurrentTransferRate { get; set; }

        /// <summary>
        /// Id of the associated remote snapshot rule.
        /// </summary>
        /// <value>Id of the associated remote snapshot rule.</value>

        [DataMember(Name="rule_id")]
        public string RuleId { get; set; }

        /// <summary>
        /// For a volume backup type session, this is the id of the most recently protected local snapshot type volume. For a retrieve type session, this is the id of the local snapshot type volume to which the retrieve is copying. This is null for volume_group sessions.
        /// </summary>
        /// <value>For a volume backup type session, this is the id of the most recently protected local snapshot type volume. For a retrieve type session, this is the id of the local snapshot type volume to which the retrieve is copying. This is null for volume_group sessions.</value>

        [DataMember(Name="local_volume_snapshot_id")]
        public string LocalVolumeSnapshotId { get; set; }

        /// <summary>
        /// For a volume_group backup type session, this is the id of the most recently protected local snapshot type volume_group. For a retrieve type session, this is the id of the local snapshot type volume group to which the retrieve is copying. This is null for volume sessions.
        /// </summary>
        /// <value>For a volume_group backup type session, this is the id of the most recently protected local snapshot type volume_group. For a retrieve type session, this is the id of the local snapshot type volume group to which the retrieve is copying. This is null for volume sessions.</value>

        [DataMember(Name="local_volume_group_snapshot_id")]
        public string LocalVolumeGroupSnapshotId { get; set; }

        /// <summary>
        /// Unique identifier of the corresponding session on the remote system.
        /// </summary>
        /// <value>Unique identifier of the corresponding session on the remote system.</value>

        [DataMember(Name="remote_session_id")]
        public string RemoteSessionId { get; set; }

        /// <summary>
        /// For backup type session, the timestamp of the most recent snapshot successfully copied to the remote system.
        /// </summary>
        /// <value>For backup type session, the timestamp of the most recent snapshot successfully copied to the remote system.</value>

        [DataMember(Name="last_backup_timestamp")]
        public DateTime? LastBackupTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets CreatorType
        /// </summary>

        [DataMember(Name="creator_type")]
        public RemoteSnapshotCreatorTypeEnum? CreatorType { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>

        [DataMember(Name="error")]
        public ErrorInstance Error { get; set; }

        /// <summary>
        /// Localized message string corresponding to session_type Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to session_type Was added in version 3.5.0.0.</value>

        [DataMember(Name="session_type_l10n")]
        public string SessionTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to resource_type Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to resource_type Was added in version 3.5.0.0.</value>

        [DataMember(Name="resource_type_l10n")]
        public string ResourceTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to state Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to state Was added in version 3.5.0.0.</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to creator_type Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to creator_type Was added in version 3.5.0.0.</value>

        [DataMember(Name="creator_type_l10n")]
        public string CreatorTypeL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of remote_system_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of remote_system_id attribute.</value>

        [DataMember(Name="remote_system")]
        public RemoteSystemInstance RemoteSystem { get; set; }

        /// <summary>
        /// This is the embeddable reference form of volume_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of volume_id attribute.</value>

        [DataMember(Name="volume")]
        public VolumeInstance Volume { get; set; }

        /// <summary>
        /// This is the embeddable reference form of volume_group_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of volume_group_id attribute.</value>

        [DataMember(Name="volume_group")]
        public VolumeGroupInstance VolumeGroup { get; set; }

        /// <summary>
        /// This is the embeddable reference form of remote_snapshot_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of remote_snapshot_id attribute.</value>

        [DataMember(Name="remote_snapshot")]
        public RemoteSnapshotInstance RemoteSnapshot { get; set; }

        /// <summary>
        /// This is the embeddable reference form of rule_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of rule_id attribute.</value>

        [DataMember(Name="rule")]
        public SnapshotRuleInstance Rule { get; set; }

        /// <summary>
        /// This is the embeddable reference form of local_volume_snapshot_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of local_volume_snapshot_id attribute.</value>

        [DataMember(Name="local_volume_snapshot")]
        public VolumeInstance LocalVolumeSnapshot { get; set; }

        /// <summary>
        /// This is the embeddable reference form of local_volume_group_snapshot_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of local_volume_group_snapshot_id attribute.</value>

        [DataMember(Name="local_volume_group_snapshot")]
        public VolumeGroupInstance LocalVolumeGroupSnapshot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSnapshotSessionInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  VolumeId: ").Append(VolumeId).Append("\n");
            sb.Append("  VolumeGroupId: ").Append(VolumeGroupId).Append("\n");
            sb.Append("  RemoteBackupIdentifier: ").Append(RemoteBackupIdentifier).Append("\n");
            sb.Append("  RemoteSnapshotId: ").Append(RemoteSnapshotId).Append("\n");
            sb.Append("  MemberDetails: ").Append(MemberDetails).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  EndTimestamp: ").Append(EndTimestamp).Append("\n");
            sb.Append("  EstimatedCompletionTimestamp: ").Append(EstimatedCompletionTimestamp).Append("\n");
            sb.Append("  ProgressPercentage: ").Append(ProgressPercentage).Append("\n");
            sb.Append("  AverageTransferRate: ").Append(AverageTransferRate).Append("\n");
            sb.Append("  CurrentTransferRate: ").Append(CurrentTransferRate).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  LocalVolumeSnapshotId: ").Append(LocalVolumeSnapshotId).Append("\n");
            sb.Append("  LocalVolumeGroupSnapshotId: ").Append(LocalVolumeGroupSnapshotId).Append("\n");
            sb.Append("  RemoteSessionId: ").Append(RemoteSessionId).Append("\n");
            sb.Append("  LastBackupTimestamp: ").Append(LastBackupTimestamp).Append("\n");
            sb.Append("  CreatorType: ").Append(CreatorType).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  SessionTypeL10n: ").Append(SessionTypeL10n).Append("\n");
            sb.Append("  ResourceTypeL10n: ").Append(ResourceTypeL10n).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  CreatorTypeL10n: ").Append(CreatorTypeL10n).Append("\n");
            sb.Append("  RemoteSystem: ").Append(RemoteSystem).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  VolumeGroup: ").Append(VolumeGroup).Append("\n");
            sb.Append("  RemoteSnapshot: ").Append(RemoteSnapshot).Append("\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  LocalVolumeSnapshot: ").Append(LocalVolumeSnapshot).Append("\n");
            sb.Append("  LocalVolumeGroupSnapshot: ").Append(LocalVolumeGroupSnapshot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteSnapshotSessionInstance)obj);
        }

        /// <summary>
        /// Returns true if RemoteSnapshotSessionInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteSnapshotSessionInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSnapshotSessionInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SessionType == other.SessionType ||
                    SessionType != null &&
                    SessionType.Equals(other.SessionType)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    VolumeId == other.VolumeId ||
                    VolumeId != null &&
                    VolumeId.Equals(other.VolumeId)
                ) && 
                (
                    VolumeGroupId == other.VolumeGroupId ||
                    VolumeGroupId != null &&
                    VolumeGroupId.Equals(other.VolumeGroupId)
                ) && 
                (
                    RemoteBackupIdentifier == other.RemoteBackupIdentifier ||
                    RemoteBackupIdentifier != null &&
                    RemoteBackupIdentifier.Equals(other.RemoteBackupIdentifier)
                ) && 
                (
                    RemoteSnapshotId == other.RemoteSnapshotId ||
                    RemoteSnapshotId != null &&
                    RemoteSnapshotId.Equals(other.RemoteSnapshotId)
                ) && 
                (
                    MemberDetails == other.MemberDetails ||
                    MemberDetails != null &&
                    MemberDetails.SequenceEqual(other.MemberDetails)
                ) && 
                (
                    StartTimestamp == other.StartTimestamp ||
                    StartTimestamp != null &&
                    StartTimestamp.Equals(other.StartTimestamp)
                ) && 
                (
                    EndTimestamp == other.EndTimestamp ||
                    EndTimestamp != null &&
                    EndTimestamp.Equals(other.EndTimestamp)
                ) && 
                (
                    EstimatedCompletionTimestamp == other.EstimatedCompletionTimestamp ||
                    EstimatedCompletionTimestamp != null &&
                    EstimatedCompletionTimestamp.Equals(other.EstimatedCompletionTimestamp)
                ) && 
                (
                    ProgressPercentage == other.ProgressPercentage ||
                    ProgressPercentage != null &&
                    ProgressPercentage.Equals(other.ProgressPercentage)
                ) && 
                (
                    AverageTransferRate == other.AverageTransferRate ||
                    AverageTransferRate != null &&
                    AverageTransferRate.Equals(other.AverageTransferRate)
                ) && 
                (
                    CurrentTransferRate == other.CurrentTransferRate ||
                    CurrentTransferRate != null &&
                    CurrentTransferRate.Equals(other.CurrentTransferRate)
                ) && 
                (
                    RuleId == other.RuleId ||
                    RuleId != null &&
                    RuleId.Equals(other.RuleId)
                ) && 
                (
                    LocalVolumeSnapshotId == other.LocalVolumeSnapshotId ||
                    LocalVolumeSnapshotId != null &&
                    LocalVolumeSnapshotId.Equals(other.LocalVolumeSnapshotId)
                ) && 
                (
                    LocalVolumeGroupSnapshotId == other.LocalVolumeGroupSnapshotId ||
                    LocalVolumeGroupSnapshotId != null &&
                    LocalVolumeGroupSnapshotId.Equals(other.LocalVolumeGroupSnapshotId)
                ) && 
                (
                    RemoteSessionId == other.RemoteSessionId ||
                    RemoteSessionId != null &&
                    RemoteSessionId.Equals(other.RemoteSessionId)
                ) && 
                (
                    LastBackupTimestamp == other.LastBackupTimestamp ||
                    LastBackupTimestamp != null &&
                    LastBackupTimestamp.Equals(other.LastBackupTimestamp)
                ) && 
                (
                    CreatorType == other.CreatorType ||
                    CreatorType != null &&
                    CreatorType.Equals(other.CreatorType)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    SessionTypeL10n == other.SessionTypeL10n ||
                    SessionTypeL10n != null &&
                    SessionTypeL10n.Equals(other.SessionTypeL10n)
                ) && 
                (
                    ResourceTypeL10n == other.ResourceTypeL10n ||
                    ResourceTypeL10n != null &&
                    ResourceTypeL10n.Equals(other.ResourceTypeL10n)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    CreatorTypeL10n == other.CreatorTypeL10n ||
                    CreatorTypeL10n != null &&
                    CreatorTypeL10n.Equals(other.CreatorTypeL10n)
                ) && 
                (
                    RemoteSystem == other.RemoteSystem ||
                    RemoteSystem != null &&
                    RemoteSystem.Equals(other.RemoteSystem)
                ) && 
                (
                    Volume == other.Volume ||
                    Volume != null &&
                    Volume.Equals(other.Volume)
                ) && 
                (
                    VolumeGroup == other.VolumeGroup ||
                    VolumeGroup != null &&
                    VolumeGroup.Equals(other.VolumeGroup)
                ) && 
                (
                    RemoteSnapshot == other.RemoteSnapshot ||
                    RemoteSnapshot != null &&
                    RemoteSnapshot.Equals(other.RemoteSnapshot)
                ) && 
                (
                    Rule == other.Rule ||
                    Rule != null &&
                    Rule.Equals(other.Rule)
                ) && 
                (
                    LocalVolumeSnapshot == other.LocalVolumeSnapshot ||
                    LocalVolumeSnapshot != null &&
                    LocalVolumeSnapshot.Equals(other.LocalVolumeSnapshot)
                ) && 
                (
                    LocalVolumeGroupSnapshot == other.LocalVolumeGroupSnapshot ||
                    LocalVolumeGroupSnapshot != null &&
                    LocalVolumeGroupSnapshot.Equals(other.LocalVolumeGroupSnapshot)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (SessionType != null)
                    hashCode = hashCode * 59 + SessionType.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (VolumeId != null)
                    hashCode = hashCode * 59 + VolumeId.GetHashCode();
                    if (VolumeGroupId != null)
                    hashCode = hashCode * 59 + VolumeGroupId.GetHashCode();
                    if (RemoteBackupIdentifier != null)
                    hashCode = hashCode * 59 + RemoteBackupIdentifier.GetHashCode();
                    if (RemoteSnapshotId != null)
                    hashCode = hashCode * 59 + RemoteSnapshotId.GetHashCode();
                    if (MemberDetails != null)
                    hashCode = hashCode * 59 + MemberDetails.GetHashCode();
                    if (StartTimestamp != null)
                    hashCode = hashCode * 59 + StartTimestamp.GetHashCode();
                    if (EndTimestamp != null)
                    hashCode = hashCode * 59 + EndTimestamp.GetHashCode();
                    if (EstimatedCompletionTimestamp != null)
                    hashCode = hashCode * 59 + EstimatedCompletionTimestamp.GetHashCode();
                    if (ProgressPercentage != null)
                    hashCode = hashCode * 59 + ProgressPercentage.GetHashCode();
                    if (AverageTransferRate != null)
                    hashCode = hashCode * 59 + AverageTransferRate.GetHashCode();
                    if (CurrentTransferRate != null)
                    hashCode = hashCode * 59 + CurrentTransferRate.GetHashCode();
                    if (RuleId != null)
                    hashCode = hashCode * 59 + RuleId.GetHashCode();
                    if (LocalVolumeSnapshotId != null)
                    hashCode = hashCode * 59 + LocalVolumeSnapshotId.GetHashCode();
                    if (LocalVolumeGroupSnapshotId != null)
                    hashCode = hashCode * 59 + LocalVolumeGroupSnapshotId.GetHashCode();
                    if (RemoteSessionId != null)
                    hashCode = hashCode * 59 + RemoteSessionId.GetHashCode();
                    if (LastBackupTimestamp != null)
                    hashCode = hashCode * 59 + LastBackupTimestamp.GetHashCode();
                    if (CreatorType != null)
                    hashCode = hashCode * 59 + CreatorType.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (SessionTypeL10n != null)
                    hashCode = hashCode * 59 + SessionTypeL10n.GetHashCode();
                    if (ResourceTypeL10n != null)
                    hashCode = hashCode * 59 + ResourceTypeL10n.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (CreatorTypeL10n != null)
                    hashCode = hashCode * 59 + CreatorTypeL10n.GetHashCode();
                    if (RemoteSystem != null)
                    hashCode = hashCode * 59 + RemoteSystem.GetHashCode();
                    if (Volume != null)
                    hashCode = hashCode * 59 + Volume.GetHashCode();
                    if (VolumeGroup != null)
                    hashCode = hashCode * 59 + VolumeGroup.GetHashCode();
                    if (RemoteSnapshot != null)
                    hashCode = hashCode * 59 + RemoteSnapshot.GetHashCode();
                    if (Rule != null)
                    hashCode = hashCode * 59 + Rule.GetHashCode();
                    if (LocalVolumeSnapshot != null)
                    hashCode = hashCode * 59 + LocalVolumeSnapshot.GetHashCode();
                    if (LocalVolumeGroupSnapshot != null)
                    hashCode = hashCode * 59 + LocalVolumeGroupSnapshot.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteSnapshotSessionInstance left, RemoteSnapshotSessionInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteSnapshotSessionInstance left, RemoteSnapshotSessionInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
