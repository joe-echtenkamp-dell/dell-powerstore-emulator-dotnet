/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Parameter(s) to stop a disaster recovery (DR) failover simulation test in progress at the destination site of a replication session.   Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ReplicationStopFailoverTest : IEquatable<ReplicationStopFailoverTest>
    { 
        /// <summary>
        /// Indicates whether a snapshot of the destination resource should be created at the end of the test.  If set to true, the name of the created snapshot will contain a timestamp indicating its time of creation and will be of the format \&quot;failover_test_STOPPED_&amp;lt;timestamp&amp;gt;\&quot;. The snapshot will be set to automatically expire after a system determined interval. 
        /// </summary>
        /// <value>Indicates whether a snapshot of the destination resource should be created at the end of the test.  If set to true, the name of the created snapshot will contain a timestamp indicating its time of creation and will be of the format \&quot;failover_test_STOPPED_&amp;lt;timestamp&amp;gt;\&quot;. The snapshot will be set to automatically expire after a system determined interval. </value>

        [DataMember(Name="create_end_of_test_snapshot")]
        public bool? CreateEndOfTestSnapshot { get; set; }

        /// <summary>
        /// By default a failover test cannot be stopped if the remote system is not reachable. This option allows for stopping the test even if the remote system is down. The intention is to enable disaster recovery to a point in time different than the one under test.
        /// </summary>
        /// <value>By default a failover test cannot be stopped if the remote system is not reachable. This option allows for stopping the test even if the remote system is down. The intention is to enable disaster recovery to a point in time different than the one under test.</value>

        [DataMember(Name="force")]
        public bool? Force { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationStopFailoverTest {\n");
            sb.Append("  CreateEndOfTestSnapshot: ").Append(CreateEndOfTestSnapshot).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReplicationStopFailoverTest)obj);
        }

        /// <summary>
        /// Returns true if ReplicationStopFailoverTest instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationStopFailoverTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationStopFailoverTest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreateEndOfTestSnapshot == other.CreateEndOfTestSnapshot ||
                    CreateEndOfTestSnapshot != null &&
                    CreateEndOfTestSnapshot.Equals(other.CreateEndOfTestSnapshot)
                ) && 
                (
                    Force == other.Force ||
                    Force != null &&
                    Force.Equals(other.Force)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreateEndOfTestSnapshot != null)
                    hashCode = hashCode * 59 + CreateEndOfTestSnapshot.GetHashCode();
                    if (Force != null)
                    hashCode = hashCode * 59 + Force.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReplicationStopFailoverTest left, ReplicationStopFailoverTest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReplicationStopFailoverTest left, ReplicationStopFailoverTest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
