/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A virtual volume. This resource type has queriable associations from appliance, storage_container, replication_group, migration_session, virtual_volume, policy, host_virtual_volume_mapping, virtual_machine
    /// </summary>
    [DataContract]
    public partial class VirtualVolumeInstance : IEquatable<VirtualVolumeInstance>
    { 
        /// <summary>
        /// The unique identifier of the virtual volume.
        /// </summary>
        /// <value>The unique identifier of the virtual volume.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The name of the virtual volume, based on metadata provided by vSphere.   This property supports case-insensitive filtering.
        /// </summary>
        /// <value>The name of the virtual volume, based on metadata provided by vSphere.   This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The size of the virtual volume in bytes.
        /// </summary>
        /// <value>The size of the virtual volume in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="size")]
        public long? Size { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public VirtualVolumeTypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets UsageType
        /// </summary>

        [DataMember(Name="usage_type")]
        public VirtualVolumeUsageTypeEnum? UsageType { get; set; }

        /// <summary>
        /// The appliance where the virtual volume resides.
        /// </summary>
        /// <value>The appliance where the virtual volume resides.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// The storage container where the virtual volume resides.
        /// </summary>
        /// <value>The storage container where the virtual volume resides.</value>

        [DataMember(Name="storage_container_id")]
        public string StorageContainerId { get; set; }

        /// <summary>
        /// Gets or Sets IoPriority
        /// </summary>

        [DataMember(Name="io_priority")]
        public IoPriorityEnum? IoPriority { get; set; }

        /// <summary>
        /// The ID of the storage profile governing this virtual volume.
        /// </summary>
        /// <value>The ID of the storage profile governing this virtual volume.</value>

        [DataMember(Name="profile_id")]
        public string ProfileId { get; set; }

        /// <summary>
        /// The unique identifier of the replication group object that this virtual volume belongs to. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>The unique identifier of the replication group object that this virtual volume belongs to. Was added in version 3.0.0.0.</value>

        [DataMember(Name="replication_group_id")]
        public string ReplicationGroupId { get; set; }

        /// <summary>
        /// Gets or Sets CreatorType
        /// </summary>

        [DataMember(Name="creator_type")]
        public StorageCreatorTypeEnum? CreatorType { get; set; }

        /// <summary>
        /// Indicates whether the virtual volume is read-only.
        /// </summary>
        /// <value>Indicates whether the virtual volume is read-only.</value>

        [DataMember(Name="is_readonly")]
        public bool? IsReadonly { get; set; }

        /// <summary>
        /// If the virtual volume is part of a migration activity, the session ID for that migration.
        /// </summary>
        /// <value>If the virtual volume is part of a migration activity, the session ID for that migration.</value>

        [DataMember(Name="migration_session_id")]
        public string MigrationSessionId { get; set; }

        /// <summary>
        /// UUID of the virtual machine that owns this virtual volume.
        /// </summary>
        /// <value>UUID of the virtual machine that owns this virtual volume.</value>

        [DataMember(Name="virtual_machine_uuid")]
        public string VirtualMachineUuid { get; set; }

        /// <summary>
        /// Family id of the virtual volume. This is the id of the primary object at the root of the family tree. For a primary virtual volume this will be the same as the id of the object. For snap-sets and clone vVols it will be set to the source objects family ID. 
        /// </summary>
        /// <value>Family id of the virtual volume. This is the id of the primary object at the root of the family tree. For a primary virtual volume this will be the same as the id of the object. For snap-sets and clone vVols it will be set to the source objects family ID. </value>

        [DataMember(Name="family_id")]
        public string FamilyId { get; set; }

        /// <summary>
        /// For snapshots and clones, the ID of the parent virtual volume. The parent_id is set when an virtual volume is created and will only change if its parent virtual volume is deleted. 
        /// </summary>
        /// <value>For snapshots and clones, the ID of the parent virtual volume. The parent_id is set when an virtual volume is created and will only change if its parent virtual volume is deleted. </value>

        [DataMember(Name="parent_id")]
        public string ParentId { get; set; }

        /// <summary>
        /// Id of the virtual volume from which the content has been sourced. Data is sourced from another virtual volume when a snapshot or clone is created, or when a refresh or restore occurs. Only applies to snap and clones. 
        /// </summary>
        /// <value>Id of the virtual volume from which the content has been sourced. Data is sourced from another virtual volume when a snapshot or clone is created, or when a refresh or restore occurs. Only applies to snap and clones. </value>

        [DataMember(Name="source_id")]
        public string SourceId { get; set; }

        /// <summary>
        /// The source data time-stamp of the virtual volume.
        /// </summary>
        /// <value>The source data time-stamp of the virtual volume.</value>

        [DataMember(Name="source_timestamp")]
        public DateTime? SourceTimestamp { get; set; }

        /// <summary>
        /// Timestamp of the moment virtual volume was created at.
        /// </summary>
        /// <value>Timestamp of the moment virtual volume was created at.</value>

        [DataMember(Name="creation_timestamp")]
        public DateTime? CreationTimestamp { get; set; }

        /// <summary>
        /// The NAA name used by hosts for I/O.  This is the VASA equivalent of a LUN&#39;s WWN. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>The NAA name used by hosts for I/O.  This is the VASA equivalent of a LUN&#39;s WWN. Was added in version 3.0.0.0.</value>

        [DataMember(Name="naa_name")]
        public string NaaName { get; set; }

        /// <summary>
        /// Indicates whether virtual volume is replication destination or not. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Indicates whether virtual volume is replication destination or not. Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_replication_destination")]
        public bool? IsReplicationDestination { get; set; }

        /// <summary>
        /// Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="location_history")]
        public List<LocationHistoryInstance> LocationHistory { get; set; }

        /// <summary>
        /// The unique identifier of the protection policy applied to this virtual volume. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>The unique identifier of the protection policy applied to this virtual volume. Was added in version 3.0.0.0.</value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// NVMe Namespace unique identifier in the NVMe subsystem. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>NVMe Namespace unique identifier in the NVMe subsystem. Was added in version 3.0.0.0.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="nsid")]
        public int? Nsid { get; set; }

        /// <summary>
        /// NVMe Namespace globally unique identifier. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>NVMe Namespace globally unique identifier. Was added in version 3.0.0.0.</value>

        [DataMember(Name="nguid")]
        public string Nguid { get; set; }

        /// <summary>
        /// Localized message string corresponding to type
        /// </summary>
        /// <value>Localized message string corresponding to type</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to usage_type
        /// </summary>
        /// <value>Localized message string corresponding to usage_type</value>

        [DataMember(Name="usage_type_l10n")]
        public string UsageTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to io_priority
        /// </summary>
        /// <value>Localized message string corresponding to io_priority</value>

        [DataMember(Name="io_priority_l10n")]
        public string IoPriorityL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to creator_type
        /// </summary>
        /// <value>Localized message string corresponding to creator_type</value>

        [DataMember(Name="creator_type_l10n")]
        public string CreatorTypeL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of appliance_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of appliance_id attribute.</value>

        [DataMember(Name="appliance")]
        public ApplianceInstance Appliance { get; set; }

        /// <summary>
        /// This is the embeddable reference form of storage_container_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of storage_container_id attribute.</value>

        [DataMember(Name="storage_container")]
        public StorageContainerInstance StorageContainer { get; set; }

        /// <summary>
        /// This is the embeddable reference form of replication_group_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of replication_group_id attribute.</value>

        [DataMember(Name="replication_group")]
        public ReplicationGroupInstance ReplicationGroup { get; set; }

        /// <summary>
        /// This is the embeddable reference form of migration_session_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of migration_session_id attribute.</value>

        [DataMember(Name="migration_session")]
        public MigrationSessionInstance MigrationSession { get; set; }

        /// <summary>
        /// This is the embeddable reference form of parent_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of parent_id attribute.</value>

        [DataMember(Name="parent")]
        public VirtualVolumeInstance Parent { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_volume association.</value>

        [DataMember(Name="child_virtual_volumes")]
        public List<VirtualVolumeInstance> ChildVirtualVolumes { get; set; }

        /// <summary>
        /// This is the embeddable reference form of source_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of source_id attribute.</value>

        [DataMember(Name="source")]
        public VirtualVolumeInstance Source { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_volume association.</value>

        [DataMember(Name="target_virtual_volumes")]
        public List<VirtualVolumeInstance> TargetVirtualVolumes { get; set; }

        /// <summary>
        /// This is the embeddable reference form of protection_policy_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of protection_policy_id attribute.</value>

        [DataMember(Name="protection_policy")]
        public PolicyInstance ProtectionPolicy { get; set; }

        /// <summary>
        /// This is the inverse of the resource type host_virtual_volume_mapping association.
        /// </summary>
        /// <value>This is the inverse of the resource type host_virtual_volume_mapping association.</value>

        [DataMember(Name="host_virtual_volume_mappings")]
        public List<HostVirtualVolumeMappingInstance> HostVirtualVolumeMappings { get; set; }

        /// <summary>
        /// List of the virtual_machines that are associated with this virtual_volume.
        /// </summary>
        /// <value>List of the virtual_machines that are associated with this virtual_volume.</value>

        [DataMember(Name="virtual_machines")]
        public List<VirtualMachineInstance> VirtualMachines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VirtualVolumeInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UsageType: ").Append(UsageType).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  StorageContainerId: ").Append(StorageContainerId).Append("\n");
            sb.Append("  IoPriority: ").Append(IoPriority).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ReplicationGroupId: ").Append(ReplicationGroupId).Append("\n");
            sb.Append("  CreatorType: ").Append(CreatorType).Append("\n");
            sb.Append("  IsReadonly: ").Append(IsReadonly).Append("\n");
            sb.Append("  MigrationSessionId: ").Append(MigrationSessionId).Append("\n");
            sb.Append("  VirtualMachineUuid: ").Append(VirtualMachineUuid).Append("\n");
            sb.Append("  FamilyId: ").Append(FamilyId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceTimestamp: ").Append(SourceTimestamp).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  NaaName: ").Append(NaaName).Append("\n");
            sb.Append("  IsReplicationDestination: ").Append(IsReplicationDestination).Append("\n");
            sb.Append("  LocationHistory: ").Append(LocationHistory).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  Nsid: ").Append(Nsid).Append("\n");
            sb.Append("  Nguid: ").Append(Nguid).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  UsageTypeL10n: ").Append(UsageTypeL10n).Append("\n");
            sb.Append("  IoPriorityL10n: ").Append(IoPriorityL10n).Append("\n");
            sb.Append("  CreatorTypeL10n: ").Append(CreatorTypeL10n).Append("\n");
            sb.Append("  Appliance: ").Append(Appliance).Append("\n");
            sb.Append("  StorageContainer: ").Append(StorageContainer).Append("\n");
            sb.Append("  ReplicationGroup: ").Append(ReplicationGroup).Append("\n");
            sb.Append("  MigrationSession: ").Append(MigrationSession).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  ChildVirtualVolumes: ").Append(ChildVirtualVolumes).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TargetVirtualVolumes: ").Append(TargetVirtualVolumes).Append("\n");
            sb.Append("  ProtectionPolicy: ").Append(ProtectionPolicy).Append("\n");
            sb.Append("  HostVirtualVolumeMappings: ").Append(HostVirtualVolumeMappings).Append("\n");
            sb.Append("  VirtualMachines: ").Append(VirtualMachines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VirtualVolumeInstance)obj);
        }

        /// <summary>
        /// Returns true if VirtualVolumeInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of VirtualVolumeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VirtualVolumeInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    UsageType == other.UsageType ||
                    UsageType != null &&
                    UsageType.Equals(other.UsageType)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    StorageContainerId == other.StorageContainerId ||
                    StorageContainerId != null &&
                    StorageContainerId.Equals(other.StorageContainerId)
                ) && 
                (
                    IoPriority == other.IoPriority ||
                    IoPriority != null &&
                    IoPriority.Equals(other.IoPriority)
                ) && 
                (
                    ProfileId == other.ProfileId ||
                    ProfileId != null &&
                    ProfileId.Equals(other.ProfileId)
                ) && 
                (
                    ReplicationGroupId == other.ReplicationGroupId ||
                    ReplicationGroupId != null &&
                    ReplicationGroupId.Equals(other.ReplicationGroupId)
                ) && 
                (
                    CreatorType == other.CreatorType ||
                    CreatorType != null &&
                    CreatorType.Equals(other.CreatorType)
                ) && 
                (
                    IsReadonly == other.IsReadonly ||
                    IsReadonly != null &&
                    IsReadonly.Equals(other.IsReadonly)
                ) && 
                (
                    MigrationSessionId == other.MigrationSessionId ||
                    MigrationSessionId != null &&
                    MigrationSessionId.Equals(other.MigrationSessionId)
                ) && 
                (
                    VirtualMachineUuid == other.VirtualMachineUuid ||
                    VirtualMachineUuid != null &&
                    VirtualMachineUuid.Equals(other.VirtualMachineUuid)
                ) && 
                (
                    FamilyId == other.FamilyId ||
                    FamilyId != null &&
                    FamilyId.Equals(other.FamilyId)
                ) && 
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    SourceId == other.SourceId ||
                    SourceId != null &&
                    SourceId.Equals(other.SourceId)
                ) && 
                (
                    SourceTimestamp == other.SourceTimestamp ||
                    SourceTimestamp != null &&
                    SourceTimestamp.Equals(other.SourceTimestamp)
                ) && 
                (
                    CreationTimestamp == other.CreationTimestamp ||
                    CreationTimestamp != null &&
                    CreationTimestamp.Equals(other.CreationTimestamp)
                ) && 
                (
                    NaaName == other.NaaName ||
                    NaaName != null &&
                    NaaName.Equals(other.NaaName)
                ) && 
                (
                    IsReplicationDestination == other.IsReplicationDestination ||
                    IsReplicationDestination != null &&
                    IsReplicationDestination.Equals(other.IsReplicationDestination)
                ) && 
                (
                    LocationHistory == other.LocationHistory ||
                    LocationHistory != null &&
                    LocationHistory.SequenceEqual(other.LocationHistory)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    Nsid == other.Nsid ||
                    Nsid != null &&
                    Nsid.Equals(other.Nsid)
                ) && 
                (
                    Nguid == other.Nguid ||
                    Nguid != null &&
                    Nguid.Equals(other.Nguid)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    UsageTypeL10n == other.UsageTypeL10n ||
                    UsageTypeL10n != null &&
                    UsageTypeL10n.Equals(other.UsageTypeL10n)
                ) && 
                (
                    IoPriorityL10n == other.IoPriorityL10n ||
                    IoPriorityL10n != null &&
                    IoPriorityL10n.Equals(other.IoPriorityL10n)
                ) && 
                (
                    CreatorTypeL10n == other.CreatorTypeL10n ||
                    CreatorTypeL10n != null &&
                    CreatorTypeL10n.Equals(other.CreatorTypeL10n)
                ) && 
                (
                    Appliance == other.Appliance ||
                    Appliance != null &&
                    Appliance.Equals(other.Appliance)
                ) && 
                (
                    StorageContainer == other.StorageContainer ||
                    StorageContainer != null &&
                    StorageContainer.Equals(other.StorageContainer)
                ) && 
                (
                    ReplicationGroup == other.ReplicationGroup ||
                    ReplicationGroup != null &&
                    ReplicationGroup.Equals(other.ReplicationGroup)
                ) && 
                (
                    MigrationSession == other.MigrationSession ||
                    MigrationSession != null &&
                    MigrationSession.Equals(other.MigrationSession)
                ) && 
                (
                    Parent == other.Parent ||
                    Parent != null &&
                    Parent.Equals(other.Parent)
                ) && 
                (
                    ChildVirtualVolumes == other.ChildVirtualVolumes ||
                    ChildVirtualVolumes != null &&
                    ChildVirtualVolumes.SequenceEqual(other.ChildVirtualVolumes)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    TargetVirtualVolumes == other.TargetVirtualVolumes ||
                    TargetVirtualVolumes != null &&
                    TargetVirtualVolumes.SequenceEqual(other.TargetVirtualVolumes)
                ) && 
                (
                    ProtectionPolicy == other.ProtectionPolicy ||
                    ProtectionPolicy != null &&
                    ProtectionPolicy.Equals(other.ProtectionPolicy)
                ) && 
                (
                    HostVirtualVolumeMappings == other.HostVirtualVolumeMappings ||
                    HostVirtualVolumeMappings != null &&
                    HostVirtualVolumeMappings.SequenceEqual(other.HostVirtualVolumeMappings)
                ) && 
                (
                    VirtualMachines == other.VirtualMachines ||
                    VirtualMachines != null &&
                    VirtualMachines.SequenceEqual(other.VirtualMachines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (UsageType != null)
                    hashCode = hashCode * 59 + UsageType.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (StorageContainerId != null)
                    hashCode = hashCode * 59 + StorageContainerId.GetHashCode();
                    if (IoPriority != null)
                    hashCode = hashCode * 59 + IoPriority.GetHashCode();
                    if (ProfileId != null)
                    hashCode = hashCode * 59 + ProfileId.GetHashCode();
                    if (ReplicationGroupId != null)
                    hashCode = hashCode * 59 + ReplicationGroupId.GetHashCode();
                    if (CreatorType != null)
                    hashCode = hashCode * 59 + CreatorType.GetHashCode();
                    if (IsReadonly != null)
                    hashCode = hashCode * 59 + IsReadonly.GetHashCode();
                    if (MigrationSessionId != null)
                    hashCode = hashCode * 59 + MigrationSessionId.GetHashCode();
                    if (VirtualMachineUuid != null)
                    hashCode = hashCode * 59 + VirtualMachineUuid.GetHashCode();
                    if (FamilyId != null)
                    hashCode = hashCode * 59 + FamilyId.GetHashCode();
                    if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (SourceId != null)
                    hashCode = hashCode * 59 + SourceId.GetHashCode();
                    if (SourceTimestamp != null)
                    hashCode = hashCode * 59 + SourceTimestamp.GetHashCode();
                    if (CreationTimestamp != null)
                    hashCode = hashCode * 59 + CreationTimestamp.GetHashCode();
                    if (NaaName != null)
                    hashCode = hashCode * 59 + NaaName.GetHashCode();
                    if (IsReplicationDestination != null)
                    hashCode = hashCode * 59 + IsReplicationDestination.GetHashCode();
                    if (LocationHistory != null)
                    hashCode = hashCode * 59 + LocationHistory.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (Nsid != null)
                    hashCode = hashCode * 59 + Nsid.GetHashCode();
                    if (Nguid != null)
                    hashCode = hashCode * 59 + Nguid.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (UsageTypeL10n != null)
                    hashCode = hashCode * 59 + UsageTypeL10n.GetHashCode();
                    if (IoPriorityL10n != null)
                    hashCode = hashCode * 59 + IoPriorityL10n.GetHashCode();
                    if (CreatorTypeL10n != null)
                    hashCode = hashCode * 59 + CreatorTypeL10n.GetHashCode();
                    if (Appliance != null)
                    hashCode = hashCode * 59 + Appliance.GetHashCode();
                    if (StorageContainer != null)
                    hashCode = hashCode * 59 + StorageContainer.GetHashCode();
                    if (ReplicationGroup != null)
                    hashCode = hashCode * 59 + ReplicationGroup.GetHashCode();
                    if (MigrationSession != null)
                    hashCode = hashCode * 59 + MigrationSession.GetHashCode();
                    if (Parent != null)
                    hashCode = hashCode * 59 + Parent.GetHashCode();
                    if (ChildVirtualVolumes != null)
                    hashCode = hashCode * 59 + ChildVirtualVolumes.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (TargetVirtualVolumes != null)
                    hashCode = hashCode * 59 + TargetVirtualVolumes.GetHashCode();
                    if (ProtectionPolicy != null)
                    hashCode = hashCode * 59 + ProtectionPolicy.GetHashCode();
                    if (HostVirtualVolumeMappings != null)
                    hashCode = hashCode * 59 + HostVirtualVolumeMappings.GetHashCode();
                    if (VirtualMachines != null)
                    hashCode = hashCode * 59 + VirtualMachines.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VirtualVolumeInstance left, VirtualVolumeInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VirtualVolumeInstance left, VirtualVolumeInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
