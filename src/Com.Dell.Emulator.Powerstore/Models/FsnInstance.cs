/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Properties of a fail-safe network (FSN). Was added in version 3.5.0.0. This resource type has queriable associations from fsn, appliance, ip_port, bond, eth_port
    /// </summary>
    [DataContract]
    public partial class FsnInstance : IEquatable<FsnInstance>
    { 
        /// <summary>
        /// Unique identifier of the fail-safe network, or null if the FSN is not in a link group.
        /// </summary>
        /// <value>Unique identifier of the fail-safe network, or null if the FSN is not in a link group.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Identifier of the fail-safe network with the same physical location on the other node of the appliance.
        /// </summary>
        /// <value>Identifier of the fail-safe network with the same physical location on the other node of the appliance.</value>

        [DataMember(Name="partner_id")]
        public string PartnerId { get; set; }

        /// <summary>
        /// The id of the appliance containing the fail-safe network.
        /// </summary>
        /// <value>The id of the appliance containing the fail-safe network.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Fail-safe network name.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Fail-safe network name.  This property supports case-insensitive filtering.</value>

        [MaxLength(64)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Indicates whether the fail-safe network&#39;s link is up. Values are: * true - Link is up. * false - Link is down. 
        /// </summary>
        /// <value>Indicates whether the fail-safe network&#39;s link is up. Values are: * true - Link is up. * false - Link is down. </value>

        [DataMember(Name="is_link_up")]
        public bool? IsLinkUp { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public FSNStatusEnum? Status { get; set; }

        /// <summary>
        /// Maximum Transmission Unit (MTU) packet size of the bond, in bytes.
        /// </summary>
        /// <value>Maximum Transmission Unit (MTU) packet size of the bond, in bytes.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="mtu")]
        public int? Mtu { get; set; }

        /// <summary>
        /// The unique identifier of the Ethernet port or bond to be used and is not abandoned unless it fails.
        /// </summary>
        /// <value>The unique identifier of the Ethernet port or bond to be used and is not abandoned unless it fails.</value>

        [DataMember(Name="primary_port_id")]
        public string PrimaryPortId { get; set; }

        /// <summary>
        /// The unique identifier of the Ethernet port or bond which is currently used as an active connection.
        /// </summary>
        /// <value>The unique identifier of the Ethernet port or bond which is currently used as an active connection.</value>

        [DataMember(Name="active_port_id")]
        public string ActivePortId { get; set; }

        /// <summary>
        /// User supplied description of the fail-safe network.
        /// </summary>
        /// <value>User supplied description of the fail-safe network.</value>

        [MaxLength(128)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Localized message string corresponding to status Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to status Was added in version 3.5.0.0.</value>

        [DataMember(Name="status_l10n")]
        public string StatusL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type ip_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type ip_port association.</value>

        [DataMember(Name="ip_ports")]
        public List<IpPortInstance> IpPorts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type bond association.
        /// </summary>
        /// <value>This is the inverse of the resource type bond association.</value>

        [DataMember(Name="bonds")]
        public List<BondInstance> Bonds { get; set; }

        /// <summary>
        /// This is the embeddable reference form of partner_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of partner_id attribute.</value>

        [DataMember(Name="partner")]
        public FsnInstance Partner { get; set; }

        /// <summary>
        /// This is the embeddable reference form of appliance_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of appliance_id attribute.</value>

        [DataMember(Name="appliance")]
        public ApplianceInstance Appliance { get; set; }

        /// <summary>
        /// This is the inverse of the resource type eth_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type eth_port association.</value>

        [DataMember(Name="eth_ports")]
        public List<EthPortInstance> EthPorts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FsnInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsLinkUp: ").Append(IsLinkUp).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Mtu: ").Append(Mtu).Append("\n");
            sb.Append("  PrimaryPortId: ").Append(PrimaryPortId).Append("\n");
            sb.Append("  ActivePortId: ").Append(ActivePortId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StatusL10n: ").Append(StatusL10n).Append("\n");
            sb.Append("  IpPorts: ").Append(IpPorts).Append("\n");
            sb.Append("  Bonds: ").Append(Bonds).Append("\n");
            sb.Append("  Partner: ").Append(Partner).Append("\n");
            sb.Append("  Appliance: ").Append(Appliance).Append("\n");
            sb.Append("  EthPorts: ").Append(EthPorts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FsnInstance)obj);
        }

        /// <summary>
        /// Returns true if FsnInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of FsnInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FsnInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PartnerId == other.PartnerId ||
                    PartnerId != null &&
                    PartnerId.Equals(other.PartnerId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    IsLinkUp == other.IsLinkUp ||
                    IsLinkUp != null &&
                    IsLinkUp.Equals(other.IsLinkUp)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Mtu == other.Mtu ||
                    Mtu != null &&
                    Mtu.Equals(other.Mtu)
                ) && 
                (
                    PrimaryPortId == other.PrimaryPortId ||
                    PrimaryPortId != null &&
                    PrimaryPortId.Equals(other.PrimaryPortId)
                ) && 
                (
                    ActivePortId == other.ActivePortId ||
                    ActivePortId != null &&
                    ActivePortId.Equals(other.ActivePortId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    StatusL10n == other.StatusL10n ||
                    StatusL10n != null &&
                    StatusL10n.Equals(other.StatusL10n)
                ) && 
                (
                    IpPorts == other.IpPorts ||
                    IpPorts != null &&
                    IpPorts.SequenceEqual(other.IpPorts)
                ) && 
                (
                    Bonds == other.Bonds ||
                    Bonds != null &&
                    Bonds.SequenceEqual(other.Bonds)
                ) && 
                (
                    Partner == other.Partner ||
                    Partner != null &&
                    Partner.Equals(other.Partner)
                ) && 
                (
                    Appliance == other.Appliance ||
                    Appliance != null &&
                    Appliance.Equals(other.Appliance)
                ) && 
                (
                    EthPorts == other.EthPorts ||
                    EthPorts != null &&
                    EthPorts.SequenceEqual(other.EthPorts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (PartnerId != null)
                    hashCode = hashCode * 59 + PartnerId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IsLinkUp != null)
                    hashCode = hashCode * 59 + IsLinkUp.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Mtu != null)
                    hashCode = hashCode * 59 + Mtu.GetHashCode();
                    if (PrimaryPortId != null)
                    hashCode = hashCode * 59 + PrimaryPortId.GetHashCode();
                    if (ActivePortId != null)
                    hashCode = hashCode * 59 + ActivePortId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (StatusL10n != null)
                    hashCode = hashCode * 59 + StatusL10n.GetHashCode();
                    if (IpPorts != null)
                    hashCode = hashCode * 59 + IpPorts.GetHashCode();
                    if (Bonds != null)
                    hashCode = hashCode * 59 + Bonds.GetHashCode();
                    if (Partner != null)
                    hashCode = hashCode * 59 + Partner.GetHashCode();
                    if (Appliance != null)
                    hashCode = hashCode * 59 + Appliance.GetHashCode();
                    if (EthPorts != null)
                    hashCode = hashCode * 59 + EthPorts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FsnInstance left, FsnInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FsnInstance left, FsnInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
