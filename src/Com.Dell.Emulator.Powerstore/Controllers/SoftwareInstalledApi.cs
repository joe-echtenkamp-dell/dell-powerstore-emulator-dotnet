/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Com.Dell.Emulator.Powerstore.Attributes;

using Microsoft.AspNetCore.Authorization;
using Com.Dell.Emulator.Powerstore.Models;

namespace Com.Dell.Emulator.Powerstore.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SoftwareInstalledApiController : ControllerBase
    { 
        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query the software that is installed on each appliance. The output returns a list of JSON objects representing the software that is installed on each appliance and one entry representing the common software installed version that is supported for all appliances in the cluster.</remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of software installed instance objects</response>
        [HttpGet]
        [Route("/api/rest/software_installed")]
        [ValidateModelState]
        [SwaggerOperation("SoftwareInstalledGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SoftwareInstalledInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<SoftwareInstalledInstance>), description: "Partial content of software installed instance objects")]
        public virtual IActionResult SoftwareInstalledGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SoftwareInstalledInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<SoftwareInstalledInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<SoftwareInstalledInstance>>(exampleJson)
            : default(List<SoftwareInstalledInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query a specific item from the list of installed software.</remarks>
        /// <param name="id">Unique identifier of the installed software to query.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/software_installed/{id}")]
        [ValidateModelState]
        [SwaggerOperation("SoftwareInstalledIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SoftwareInstalledInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult SoftwareInstalledIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SoftwareInstalledInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SoftwareInstalledInstance>(exampleJson)
            : default(SoftwareInstalledInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
