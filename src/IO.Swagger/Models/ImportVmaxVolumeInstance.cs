/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// An instance of an VMAX volume. Was added in version 3.0.0.0. This resource type has queriable associations from import_vmax, import_vmax_storage_group
    /// </summary>
    [DataContract]
    public partial class ImportVmaxVolumeInstance : IEquatable<ImportVmaxVolumeInstance>
    { 
        /// <summary>
        /// Unique identifier of the VMAX volume.
        /// </summary>
        /// <value>Unique identifier of the VMAX volume.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// World Wide Name (WWN) of the VMAX volume.
        /// </summary>
        /// <value>World Wide Name (WWN) of the VMAX volume.</value>

        [DataMember(Name="wwn")]
        public string Wwn { get; set; }

        /// <summary>
        /// Name of the VMAX volume.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the VMAX volume.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Size of the VMAX volume, in bytes.
        /// </summary>
        /// <value>Size of the VMAX volume, in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="size")]
        public long? Size { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public VmaxVolumeStateEnum? State { get; set; }

        /// <summary>
        /// Indicates whether the VMAX volume is a read only volume.
        /// </summary>
        /// <value>Indicates whether the VMAX volume is a read only volume.</value>

        [DataMember(Name="is_read_only")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Indicates whether the VMAX volume is a SnapVX target.
        /// </summary>
        /// <value>Indicates whether the VMAX volume is a SnapVX target.</value>

        [DataMember(Name="is_snap_vx_target")]
        public bool? IsSnapVxTarget { get; set; }

        /// <summary>
        /// Gets or Sets ImportableCriteria
        /// </summary>

        [DataMember(Name="importable_criteria")]
        public VolumeImportableCriteriaEnum? ImportableCriteria { get; set; }

        /// <summary>
        /// Unique identifier of the VMAX storage system to which the VMAX volume belongs. 
        /// </summary>
        /// <value>Unique identifier of the VMAX storage system to which the VMAX volume belongs. </value>

        [DataMember(Name="import_vmax_id")]
        public string ImportVmaxId { get; set; }

        /// <summary>
        /// Unique identifier of the storage group to which the VMAX volume belongs. 
        /// </summary>
        /// <value>Unique identifier of the storage group to which the VMAX volume belongs. </value>

        [DataMember(Name="import_vmax_storage_group_id")]
        public string ImportVmaxStorageGroupId { get; set; }

        /// <summary>
        /// Indicates whether the VMAX storage group is a replication destination.
        /// </summary>
        /// <value>Indicates whether the VMAX storage group is a replication destination.</value>

        [DataMember(Name="is_replication_destination")]
        public bool? IsReplicationDestination { get; set; }

        /// <summary>
        /// Gets or Sets BlockSize
        /// </summary>

        [DataMember(Name="block_size")]
        public VolumeBlockSizeEnum? BlockSize { get; set; }

        /// <summary>
        /// Localized message string corresponding to state Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to state Was added in version 3.0.0.0.</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to importable_criteria Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to importable_criteria Was added in version 3.0.0.0.</value>

        [DataMember(Name="importable_criteria_l10n")]
        public string ImportableCriteriaL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to block_size Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to block_size Was added in version 3.0.0.0.</value>

        [DataMember(Name="block_size_l10n")]
        public string BlockSizeL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of import_vmax_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of import_vmax_id attribute.</value>

        [DataMember(Name="import_vmax")]
        public ImportVmaxInstance ImportVmax { get; set; }

        /// <summary>
        /// This is the embeddable reference form of import_vmax_storage_group_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of import_vmax_storage_group_id attribute.</value>

        [DataMember(Name="import_vmax_storage_group")]
        public ImportVmaxStorageGroupInstance ImportVmaxStorageGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportVmaxVolumeInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Wwn: ").Append(Wwn).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  IsReadOnly: ").Append(IsReadOnly).Append("\n");
            sb.Append("  IsSnapVxTarget: ").Append(IsSnapVxTarget).Append("\n");
            sb.Append("  ImportableCriteria: ").Append(ImportableCriteria).Append("\n");
            sb.Append("  ImportVmaxId: ").Append(ImportVmaxId).Append("\n");
            sb.Append("  ImportVmaxStorageGroupId: ").Append(ImportVmaxStorageGroupId).Append("\n");
            sb.Append("  IsReplicationDestination: ").Append(IsReplicationDestination).Append("\n");
            sb.Append("  BlockSize: ").Append(BlockSize).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  ImportableCriteriaL10n: ").Append(ImportableCriteriaL10n).Append("\n");
            sb.Append("  BlockSizeL10n: ").Append(BlockSizeL10n).Append("\n");
            sb.Append("  ImportVmax: ").Append(ImportVmax).Append("\n");
            sb.Append("  ImportVmaxStorageGroup: ").Append(ImportVmaxStorageGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportVmaxVolumeInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportVmaxVolumeInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportVmaxVolumeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportVmaxVolumeInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Wwn == other.Wwn ||
                    Wwn != null &&
                    Wwn.Equals(other.Wwn)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    IsReadOnly == other.IsReadOnly ||
                    IsReadOnly != null &&
                    IsReadOnly.Equals(other.IsReadOnly)
                ) && 
                (
                    IsSnapVxTarget == other.IsSnapVxTarget ||
                    IsSnapVxTarget != null &&
                    IsSnapVxTarget.Equals(other.IsSnapVxTarget)
                ) && 
                (
                    ImportableCriteria == other.ImportableCriteria ||
                    ImportableCriteria != null &&
                    ImportableCriteria.Equals(other.ImportableCriteria)
                ) && 
                (
                    ImportVmaxId == other.ImportVmaxId ||
                    ImportVmaxId != null &&
                    ImportVmaxId.Equals(other.ImportVmaxId)
                ) && 
                (
                    ImportVmaxStorageGroupId == other.ImportVmaxStorageGroupId ||
                    ImportVmaxStorageGroupId != null &&
                    ImportVmaxStorageGroupId.Equals(other.ImportVmaxStorageGroupId)
                ) && 
                (
                    IsReplicationDestination == other.IsReplicationDestination ||
                    IsReplicationDestination != null &&
                    IsReplicationDestination.Equals(other.IsReplicationDestination)
                ) && 
                (
                    BlockSize == other.BlockSize ||
                    BlockSize != null &&
                    BlockSize.Equals(other.BlockSize)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    ImportableCriteriaL10n == other.ImportableCriteriaL10n ||
                    ImportableCriteriaL10n != null &&
                    ImportableCriteriaL10n.Equals(other.ImportableCriteriaL10n)
                ) && 
                (
                    BlockSizeL10n == other.BlockSizeL10n ||
                    BlockSizeL10n != null &&
                    BlockSizeL10n.Equals(other.BlockSizeL10n)
                ) && 
                (
                    ImportVmax == other.ImportVmax ||
                    ImportVmax != null &&
                    ImportVmax.Equals(other.ImportVmax)
                ) && 
                (
                    ImportVmaxStorageGroup == other.ImportVmaxStorageGroup ||
                    ImportVmaxStorageGroup != null &&
                    ImportVmaxStorageGroup.Equals(other.ImportVmaxStorageGroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Wwn != null)
                    hashCode = hashCode * 59 + Wwn.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (IsReadOnly != null)
                    hashCode = hashCode * 59 + IsReadOnly.GetHashCode();
                    if (IsSnapVxTarget != null)
                    hashCode = hashCode * 59 + IsSnapVxTarget.GetHashCode();
                    if (ImportableCriteria != null)
                    hashCode = hashCode * 59 + ImportableCriteria.GetHashCode();
                    if (ImportVmaxId != null)
                    hashCode = hashCode * 59 + ImportVmaxId.GetHashCode();
                    if (ImportVmaxStorageGroupId != null)
                    hashCode = hashCode * 59 + ImportVmaxStorageGroupId.GetHashCode();
                    if (IsReplicationDestination != null)
                    hashCode = hashCode * 59 + IsReplicationDestination.GetHashCode();
                    if (BlockSize != null)
                    hashCode = hashCode * 59 + BlockSize.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (ImportableCriteriaL10n != null)
                    hashCode = hashCode * 59 + ImportableCriteriaL10n.GetHashCode();
                    if (BlockSizeL10n != null)
                    hashCode = hashCode * 59 + BlockSizeL10n.GetHashCode();
                    if (ImportVmax != null)
                    hashCode = hashCode * 59 + ImportVmax.GetHashCode();
                    if (ImportVmaxStorageGroup != null)
                    hashCode = hashCode * 59 + ImportVmaxStorageGroup.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportVmaxVolumeInstance left, ImportVmaxVolumeInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportVmaxVolumeInstance left, ImportVmaxVolumeInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
