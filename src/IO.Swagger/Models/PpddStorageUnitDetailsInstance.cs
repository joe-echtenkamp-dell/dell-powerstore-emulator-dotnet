/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// PowerProtect DD details to register with Powerstore as a remote system.  Was added in version 3.5.0.0.  Filtering on the fields of this embedded resource is not supported.
    /// </summary>
    [DataContract]
    public partial class PpddStorageUnitDetailsInstance : IEquatable<PpddStorageUnitDetailsInstance>
    { 
        /// <summary>
        /// DDBoost address of the PowerProtect DD remote system. IPv4 and FQDN is the supported DDBoost address. 
        /// </summary>
        /// <value>DDBoost address of the PowerProtect DD remote system. IPv4 and FQDN is the supported DDBoost address. </value>

        [DataMember(Name="dd_boost_address")]
        public string DdBoostAddress { get; set; }

        /// <summary>
        /// Name of the storage unit in the PowerProtect DD.
        /// </summary>
        /// <value>Name of the storage unit in the PowerProtect DD.</value>

        [DataMember(Name="storage_unit_name")]
        public string StorageUnitName { get; set; }

        /// <summary>
        /// Username used to access the storage unit of a PowerProtect DD remote system. 
        /// </summary>
        /// <value>Username used to access the storage unit of a PowerProtect DD remote system. </value>

        [DataMember(Name="dd_boost_username")]
        public string DdBoostUsername { get; set; }

        /// <summary>
        /// Enable or Disable encryption for all backup session from Powerstore to a storage unit in PowerProtect DD. 
        /// </summary>
        /// <value>Enable or Disable encryption for all backup session from Powerstore to a storage unit in PowerProtect DD. </value>

        [DataMember(Name="is_data_encryption_enabled")]
        public bool? IsDataEncryptionEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PpddStorageUnitDetailsInstance {\n");
            sb.Append("  DdBoostAddress: ").Append(DdBoostAddress).Append("\n");
            sb.Append("  StorageUnitName: ").Append(StorageUnitName).Append("\n");
            sb.Append("  DdBoostUsername: ").Append(DdBoostUsername).Append("\n");
            sb.Append("  IsDataEncryptionEnabled: ").Append(IsDataEncryptionEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PpddStorageUnitDetailsInstance)obj);
        }

        /// <summary>
        /// Returns true if PpddStorageUnitDetailsInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of PpddStorageUnitDetailsInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PpddStorageUnitDetailsInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DdBoostAddress == other.DdBoostAddress ||
                    DdBoostAddress != null &&
                    DdBoostAddress.Equals(other.DdBoostAddress)
                ) && 
                (
                    StorageUnitName == other.StorageUnitName ||
                    StorageUnitName != null &&
                    StorageUnitName.Equals(other.StorageUnitName)
                ) && 
                (
                    DdBoostUsername == other.DdBoostUsername ||
                    DdBoostUsername != null &&
                    DdBoostUsername.Equals(other.DdBoostUsername)
                ) && 
                (
                    IsDataEncryptionEnabled == other.IsDataEncryptionEnabled ||
                    IsDataEncryptionEnabled != null &&
                    IsDataEncryptionEnabled.Equals(other.IsDataEncryptionEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DdBoostAddress != null)
                    hashCode = hashCode * 59 + DdBoostAddress.GetHashCode();
                    if (StorageUnitName != null)
                    hashCode = hashCode * 59 + StorageUnitName.GetHashCode();
                    if (DdBoostUsername != null)
                    hashCode = hashCode * 59 + DdBoostUsername.GetHashCode();
                    if (IsDataEncryptionEnabled != null)
                    hashCode = hashCode * 59 + IsDataEncryptionEnabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PpddStorageUnitDetailsInstance left, PpddStorageUnitDetailsInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PpddStorageUnitDetailsInstance left, PpddStorageUnitDetailsInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
