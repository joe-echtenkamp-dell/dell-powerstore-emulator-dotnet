/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Modify host group parameters.
    /// </summary>
    [DataContract]
    public partial class HostGroupModify : IEquatable<HostGroupModify>
    { 
        /// <summary>
        /// A new host group name. The name should not be more than 128 UTF-8 characters long and should not have any unprintable characters. 
        /// </summary>
        /// <value>A new host group name. The name should not be more than 128 UTF-8 characters long and should not have any unprintable characters. </value>

        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// An optional description for the host group. The description should not be more than 256 UTF-8  characters long and should not have any unprintable characters. 
        /// </summary>
        /// <value>An optional description for the host group. The description should not be more than 256 UTF-8  characters long and should not have any unprintable characters. </value>

        [MaxLength(256)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="host_connectivity")]
        public HostConnectivityEnum? HostConnectivity { get; set; }

        /// <summary>
        /// List of hosts to be removed from the host group. The operation fails if the host group is attached to any volume and the list includes all hosts in the host group. 
        /// </summary>
        /// <value>List of hosts to be removed from the host group. The operation fails if the host group is attached to any volume and the list includes all hosts in the host group. </value>

        [DataMember(Name="remove_host_ids")]
        public List<string> RemoveHostIds { get; set; }

        /// <summary>
        /// List of hosts to be added to host group. The operation fails if the host(s) to be added are attached to volume. 
        /// </summary>
        /// <value>List of hosts to be added to host group. The operation fails if the host(s) to be added are attached to volume. </value>

        [DataMember(Name="add_host_ids")]
        public List<string> AddHostIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostGroupModify {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HostConnectivity: ").Append(HostConnectivity).Append("\n");
            sb.Append("  RemoveHostIds: ").Append(RemoveHostIds).Append("\n");
            sb.Append("  AddHostIds: ").Append(AddHostIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HostGroupModify)obj);
        }

        /// <summary>
        /// Returns true if HostGroupModify instances are equal
        /// </summary>
        /// <param name="other">Instance of HostGroupModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostGroupModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HostConnectivity == other.HostConnectivity ||
                    HostConnectivity != null &&
                    HostConnectivity.Equals(other.HostConnectivity)
                ) && 
                (
                    RemoveHostIds == other.RemoveHostIds ||
                    RemoveHostIds != null &&
                    RemoveHostIds.SequenceEqual(other.RemoveHostIds)
                ) && 
                (
                    AddHostIds == other.AddHostIds ||
                    AddHostIds != null &&
                    AddHostIds.SequenceEqual(other.AddHostIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (HostConnectivity != null)
                    hashCode = hashCode * 59 + HostConnectivity.GetHashCode();
                    if (RemoveHostIds != null)
                    hashCode = hashCode * 59 + RemoveHostIds.GetHashCode();
                    if (AddHostIds != null)
                    hashCode = hashCode * 59 + AddHostIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HostGroupModify left, HostGroupModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HostGroupModify left, HostGroupModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
