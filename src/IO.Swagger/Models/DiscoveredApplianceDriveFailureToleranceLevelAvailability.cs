/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Drive failure tolerance level availability. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class DiscoveredApplianceDriveFailureToleranceLevelAvailability : IEquatable<DiscoveredApplianceDriveFailureToleranceLevelAvailability>
    { 
        /// <summary>
        /// Gets or Sets Level
        /// </summary>

        [DataMember(Name="level")]
        public DriveFailureToleranceLevelEnum? Level { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>

        [DataMember(Name="availability")]
        public DriveFailureToleranceAvailabilityEnum? Availability { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>

        [DataMember(Name="messages")]
        public List<DiscoveredApplianceDriveFailureToleranceLevelAvailabilityMessages> Messages { get; set; }

        /// <summary>
        /// Localized message string corresponding to level Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to level Was added in version 3.0.0.0.</value>

        [DataMember(Name="level_l10n")]
        public string LevelL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoveredApplianceDriveFailureToleranceLevelAvailability {\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  LevelL10n: ").Append(LevelL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DiscoveredApplianceDriveFailureToleranceLevelAvailability)obj);
        }

        /// <summary>
        /// Returns true if DiscoveredApplianceDriveFailureToleranceLevelAvailability instances are equal
        /// </summary>
        /// <param name="other">Instance of DiscoveredApplianceDriveFailureToleranceLevelAvailability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoveredApplianceDriveFailureToleranceLevelAvailability other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Level == other.Level ||
                    Level != null &&
                    Level.Equals(other.Level)
                ) && 
                (
                    Availability == other.Availability ||
                    Availability != null &&
                    Availability.Equals(other.Availability)
                ) && 
                (
                    Messages == other.Messages ||
                    Messages != null &&
                    Messages.SequenceEqual(other.Messages)
                ) && 
                (
                    LevelL10n == other.LevelL10n ||
                    LevelL10n != null &&
                    LevelL10n.Equals(other.LevelL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Level != null)
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (Availability != null)
                    hashCode = hashCode * 59 + Availability.GetHashCode();
                    if (Messages != null)
                    hashCode = hashCode * 59 + Messages.GetHashCode();
                    if (LevelL10n != null)
                    hashCode = hashCode * 59 + LevelL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DiscoveredApplianceDriveFailureToleranceLevelAvailability left, DiscoveredApplianceDriveFailureToleranceLevelAvailability right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DiscoveredApplianceDriveFailureToleranceLevelAvailability left, DiscoveredApplianceDriveFailureToleranceLevelAvailability right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
