/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// This resource type has queriable association from file_system
    /// </summary>
    [DataContract]
    public partial class SmbShareInstance : IEquatable<SmbShareInstance>
    { 
        /// <summary>
        /// Id of the SMB Share.
        /// </summary>
        /// <value>Id of the SMB Share.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The file system from which the share was created.
        /// </summary>
        /// <value>The file system from which the share was created.</value>

        [DataMember(Name="file_system_id")]
        public string FileSystemId { get; set; }

        /// <summary>
        /// SMB share name.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>SMB share name.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Local path to the file system or any existing sub-folder of the file system that is shared over the network. This path is relative to the NAS Server and must start with the filesystem&#39;s mountpoint path, which is the filesystem name. For example to share the top-level of a filesystem named svr1fs1, which is on the /svr1fs1 mountpoint of the NAS Server, use /svr1fs1 in the path parameter. SMB shares allow you to create multiple network shares for the same local path. 
        /// </summary>
        /// <value>Local path to the file system or any existing sub-folder of the file system that is shared over the network. This path is relative to the NAS Server and must start with the filesystem&#39;s mountpoint path, which is the filesystem name. For example to share the top-level of a filesystem named svr1fs1, which is on the /svr1fs1 mountpoint of the NAS Server, use /svr1fs1 in the path parameter. SMB shares allow you to create multiple network shares for the same local path. </value>

        [DataMember(Name="path")]
        public string Path { get; set; }

        /// <summary>
        /// User defined SMB share description.
        /// </summary>
        /// <value>User defined SMB share description.</value>

        [StringLength(255, MinimumLength=0)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Indicates whether continuous availability for Server Message Block (SMB) 3.0 is enabled for the SMB Share. Values are: - true - Continuous availability for SMB 3.0 is enabled for the SMB Share. - false - Continuous availability for SMB 3.0 is disabled for the SMB Share. 
        /// </summary>
        /// <value>Indicates whether continuous availability for Server Message Block (SMB) 3.0 is enabled for the SMB Share. Values are: - true - Continuous availability for SMB 3.0 is enabled for the SMB Share. - false - Continuous availability for SMB 3.0 is disabled for the SMB Share. </value>

        [DataMember(Name="is_continuous_availability_enabled")]
        public bool? IsContinuousAvailabilityEnabled { get; set; }

        /// <summary>
        /// Indicates whether encryption for Server Message Block (SMB) 3.0 is enabled at the shared folder level. Values are: - true - Encryption for SMB 3.0 is enabled. - false - Encryption for SMB 3.0 is disabled. 
        /// </summary>
        /// <value>Indicates whether encryption for Server Message Block (SMB) 3.0 is enabled at the shared folder level. Values are: - true - Encryption for SMB 3.0 is enabled. - false - Encryption for SMB 3.0 is disabled. </value>

        [DataMember(Name="is_encryption_enabled")]
        public bool? IsEncryptionEnabled { get; set; }

        /// <summary>
        /// Indicates whether Access-based Enumeration (ABE) is enabled. ABE filters the list of available files and folders on a server to include only those to which the requesting user has access. Values are: - true - ABE is enabled. - false - ABE is disabled. 
        /// </summary>
        /// <value>Indicates whether Access-based Enumeration (ABE) is enabled. ABE filters the list of available files and folders on a server to include only those to which the requesting user has access. Values are: - true - ABE is enabled. - false - ABE is disabled. </value>

        [DataMember(Name="is_ABE_enabled")]
        public bool? IsABEEnabled { get; set; }

        /// <summary>
        /// Indicates whether BranchCache optimization is enabled. BranchCache optimization technology copies content from your main office or hosted cloud content servers and caches the content at branch office locations, allowing client computers at branch offices to access the content locally rather than over the WAN. Values are: - true - BranchCache is enabled. - false - BranchCache is disabled. 
        /// </summary>
        /// <value>Indicates whether BranchCache optimization is enabled. BranchCache optimization technology copies content from your main office or hosted cloud content servers and caches the content at branch office locations, allowing client computers at branch offices to access the content locally rather than over the WAN. Values are: - true - BranchCache is enabled. - false - BranchCache is disabled. </value>

        [DataMember(Name="is_branch_cache_enabled")]
        public bool? IsBranchCacheEnabled { get; set; }

        /// <summary>
        /// Gets or Sets OfflineAvailability
        /// </summary>

        [DataMember(Name="offline_availability")]
        public SMBShareOfflineAvailabilityEnum? OfflineAvailability { get; set; }

        /// <summary>
        /// The default UNIX umask for new files created on the Share. If not specified the umask defaults to 022.
        /// </summary>
        /// <value>The default UNIX umask for new files created on the Share. If not specified the umask defaults to 022.</value>

        [StringLength(3, MinimumLength=3)]
        [DataMember(Name="umask")]
        public string Umask { get; set; }

        /// <summary>
        /// Localized message string corresponding to offline_availability
        /// </summary>
        /// <value>Localized message string corresponding to offline_availability</value>

        [DataMember(Name="offline_availability_l10n")]
        public string OfflineAvailabilityL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of file_system_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of file_system_id attribute.</value>

        [DataMember(Name="file_system")]
        public FileSystemInstance FileSystem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmbShareInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FileSystemId: ").Append(FileSystemId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsContinuousAvailabilityEnabled: ").Append(IsContinuousAvailabilityEnabled).Append("\n");
            sb.Append("  IsEncryptionEnabled: ").Append(IsEncryptionEnabled).Append("\n");
            sb.Append("  IsABEEnabled: ").Append(IsABEEnabled).Append("\n");
            sb.Append("  IsBranchCacheEnabled: ").Append(IsBranchCacheEnabled).Append("\n");
            sb.Append("  OfflineAvailability: ").Append(OfflineAvailability).Append("\n");
            sb.Append("  Umask: ").Append(Umask).Append("\n");
            sb.Append("  OfflineAvailabilityL10n: ").Append(OfflineAvailabilityL10n).Append("\n");
            sb.Append("  FileSystem: ").Append(FileSystem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmbShareInstance)obj);
        }

        /// <summary>
        /// Returns true if SmbShareInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of SmbShareInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmbShareInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    FileSystemId == other.FileSystemId ||
                    FileSystemId != null &&
                    FileSystemId.Equals(other.FileSystemId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    IsContinuousAvailabilityEnabled == other.IsContinuousAvailabilityEnabled ||
                    IsContinuousAvailabilityEnabled != null &&
                    IsContinuousAvailabilityEnabled.Equals(other.IsContinuousAvailabilityEnabled)
                ) && 
                (
                    IsEncryptionEnabled == other.IsEncryptionEnabled ||
                    IsEncryptionEnabled != null &&
                    IsEncryptionEnabled.Equals(other.IsEncryptionEnabled)
                ) && 
                (
                    IsABEEnabled == other.IsABEEnabled ||
                    IsABEEnabled != null &&
                    IsABEEnabled.Equals(other.IsABEEnabled)
                ) && 
                (
                    IsBranchCacheEnabled == other.IsBranchCacheEnabled ||
                    IsBranchCacheEnabled != null &&
                    IsBranchCacheEnabled.Equals(other.IsBranchCacheEnabled)
                ) && 
                (
                    OfflineAvailability == other.OfflineAvailability ||
                    OfflineAvailability != null &&
                    OfflineAvailability.Equals(other.OfflineAvailability)
                ) && 
                (
                    Umask == other.Umask ||
                    Umask != null &&
                    Umask.Equals(other.Umask)
                ) && 
                (
                    OfflineAvailabilityL10n == other.OfflineAvailabilityL10n ||
                    OfflineAvailabilityL10n != null &&
                    OfflineAvailabilityL10n.Equals(other.OfflineAvailabilityL10n)
                ) && 
                (
                    FileSystem == other.FileSystem ||
                    FileSystem != null &&
                    FileSystem.Equals(other.FileSystem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (FileSystemId != null)
                    hashCode = hashCode * 59 + FileSystemId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsContinuousAvailabilityEnabled != null)
                    hashCode = hashCode * 59 + IsContinuousAvailabilityEnabled.GetHashCode();
                    if (IsEncryptionEnabled != null)
                    hashCode = hashCode * 59 + IsEncryptionEnabled.GetHashCode();
                    if (IsABEEnabled != null)
                    hashCode = hashCode * 59 + IsABEEnabled.GetHashCode();
                    if (IsBranchCacheEnabled != null)
                    hashCode = hashCode * 59 + IsBranchCacheEnabled.GetHashCode();
                    if (OfflineAvailability != null)
                    hashCode = hashCode * 59 + OfflineAvailability.GetHashCode();
                    if (Umask != null)
                    hashCode = hashCode * 59 + Umask.GetHashCode();
                    if (OfflineAvailabilityL10n != null)
                    hashCode = hashCode * 59 + OfflineAvailabilityL10n.GetHashCode();
                    if (FileSystem != null)
                    hashCode = hashCode * 59 + FileSystem.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmbShareInstance left, SmbShareInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmbShareInstance left, SmbShareInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
