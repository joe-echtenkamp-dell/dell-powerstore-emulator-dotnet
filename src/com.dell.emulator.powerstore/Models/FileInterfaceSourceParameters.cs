/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Information about the corresponding source NAS server&#39;s File Interface settings. Only populated when is_destination_override_enabled flag is set to true. Was added in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.
    /// </summary>
    [DataContract]
    public partial class FileInterfaceSourceParameters : IEquatable<FileInterfaceSourceParameters>
    { 
        /// <summary>
        /// IP address of the network interface. IPv4 and IPv6 are supported.
        /// </summary>
        /// <value>IP address of the network interface. IPv4 and IPv6 are supported.</value>

        [StringLength(45, MinimumLength=1)]
        [DataMember(Name="ip_address")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Prefix length for the interface. IPv4 and IPv6 are supported.
        /// </summary>
        /// <value>Prefix length for the interface. IPv4 and IPv6 are supported.</value>

        [Range(1, 128)]
        [DataMember(Name="prefix_length")]
        public int? PrefixLength { get; set; }

        /// <summary>
        /// Gateway address for the network interface. IPv4 and IPv6 are supported.
        /// </summary>
        /// <value>Gateway address for the network interface. IPv4 and IPv6 are supported.</value>

        [StringLength(45, MinimumLength=0)]
        [DataMember(Name="gateway")]
        public string Gateway { get; set; }

        /// <summary>
        /// Virtual Local Area Network (VLAN) identifier for the interface. The interface uses the identifier to accept packets that have matching VLAN tags.
        /// </summary>
        /// <value>Virtual Local Area Network (VLAN) identifier for the interface. The interface uses the identifier to accept packets that have matching VLAN tags.</value>

        [Range(0, 4094)]
        [DataMember(Name="vlan_id")]
        public int? VlanId { get; set; }

        /// <summary>
        /// Unique identifier of the IP Port that is associated with the file interfacesinterface. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the IP Port that is associated with the file interfacesinterface. Was added in version 3.0.0.0.</value>

        [DataMember(Name="ip_port_id")]
        public string IpPortId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileInterfaceSourceParameters {\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  PrefixLength: ").Append(PrefixLength).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  VlanId: ").Append(VlanId).Append("\n");
            sb.Append("  IpPortId: ").Append(IpPortId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileInterfaceSourceParameters)obj);
        }

        /// <summary>
        /// Returns true if FileInterfaceSourceParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of FileInterfaceSourceParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileInterfaceSourceParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IpAddress == other.IpAddress ||
                    IpAddress != null &&
                    IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    PrefixLength == other.PrefixLength ||
                    PrefixLength != null &&
                    PrefixLength.Equals(other.PrefixLength)
                ) && 
                (
                    Gateway == other.Gateway ||
                    Gateway != null &&
                    Gateway.Equals(other.Gateway)
                ) && 
                (
                    VlanId == other.VlanId ||
                    VlanId != null &&
                    VlanId.Equals(other.VlanId)
                ) && 
                (
                    IpPortId == other.IpPortId ||
                    IpPortId != null &&
                    IpPortId.Equals(other.IpPortId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IpAddress != null)
                    hashCode = hashCode * 59 + IpAddress.GetHashCode();
                    if (PrefixLength != null)
                    hashCode = hashCode * 59 + PrefixLength.GetHashCode();
                    if (Gateway != null)
                    hashCode = hashCode * 59 + Gateway.GetHashCode();
                    if (VlanId != null)
                    hashCode = hashCode * 59 + VlanId.GetHashCode();
                    if (IpPortId != null)
                    hashCode = hashCode * 59 + IpPortId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileInterfaceSourceParameters left, FileInterfaceSourceParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileInterfaceSourceParameters left, FileInterfaceSourceParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
