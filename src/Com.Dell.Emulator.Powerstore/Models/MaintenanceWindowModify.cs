/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MaintenanceWindowModify : IEquatable<MaintenanceWindowModify>
    { 
        /// <summary>
        /// Activate or deactivate the window for one appliance.
        /// </summary>
        /// <value>Activate or deactivate the window for one appliance.</value>

        [DataMember(Name="is_enabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Number of seconds from the current timestamp the maintenance window will expire. This value is required if is_enabled is passed as true, and may not be more than 172800 (48 hours). The maintenance window can be extended, but not reduced, by setting this while the window is already enabled. 
        /// </summary>
        /// <value>Number of seconds from the current timestamp the maintenance window will expire. This value is required if is_enabled is passed as true, and may not be more than 172800 (48 hours). The maintenance window can be extended, but not reduced, by setting this while the window is already enabled. </value>

        [Range(0, 172800)]
        [DataMember(Name="end_offset")]
        public int? EndOffset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaintenanceWindowModify {\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  EndOffset: ").Append(EndOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MaintenanceWindowModify)obj);
        }

        /// <summary>
        /// Returns true if MaintenanceWindowModify instances are equal
        /// </summary>
        /// <param name="other">Instance of MaintenanceWindowModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaintenanceWindowModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsEnabled == other.IsEnabled ||
                    IsEnabled != null &&
                    IsEnabled.Equals(other.IsEnabled)
                ) && 
                (
                    EndOffset == other.EndOffset ||
                    EndOffset != null &&
                    EndOffset.Equals(other.EndOffset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsEnabled != null)
                    hashCode = hashCode * 59 + IsEnabled.GetHashCode();
                    if (EndOffset != null)
                    hashCode = hashCode * 59 + EndOffset.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MaintenanceWindowModify left, MaintenanceWindowModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MaintenanceWindowModify left, MaintenanceWindowModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
