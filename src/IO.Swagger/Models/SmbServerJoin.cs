/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Argument to join the SMB server to a Active Directory domain.
    /// </summary>
    [DataContract]
    public partial class SmbServerJoin : IEquatable<SmbServerJoin>
    { 
        /// <summary>
        /// Name of a domain-user with sufficient privileges to join the Active Directory domain.
        /// </summary>
        /// <value>Name of a domain-user with sufficient privileges to join the Active Directory domain.</value>
        [Required]
        
        [DataMember(Name="domain_user_name")]
        public string DomainUserName { get; set; }

        /// <summary>
        /// Password of the domain-user specified to join the Active Directory domain.
        /// </summary>
        /// <value>Password of the domain-user specified to join the Active Directory domain.</value>
        [Required]
        
        [DataMember(Name="domain_password")]
        public string DomainPassword { get; set; }

        /// <summary>
        /// Organizational unit of the SMB server in Active Directory, if applicable.
        /// </summary>
        /// <value>Organizational unit of the SMB server in Active Directory, if applicable.</value>

        [DataMember(Name="organizational_unit")]
        public string OrganizationalUnit { get; set; }

        /// <summary>
        /// If set to yes: try to reuse the existing SMB server account in the Active Directory when joining.
        /// </summary>
        /// <value>If set to yes: try to reuse the existing SMB server account in the Active Directory when joining.</value>

        [DataMember(Name="reuse_computer_account")]
        public bool? ReuseComputerAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmbServerJoin {\n");
            sb.Append("  DomainUserName: ").Append(DomainUserName).Append("\n");
            sb.Append("  DomainPassword: ").Append(DomainPassword).Append("\n");
            sb.Append("  OrganizationalUnit: ").Append(OrganizationalUnit).Append("\n");
            sb.Append("  ReuseComputerAccount: ").Append(ReuseComputerAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmbServerJoin)obj);
        }

        /// <summary>
        /// Returns true if SmbServerJoin instances are equal
        /// </summary>
        /// <param name="other">Instance of SmbServerJoin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmbServerJoin other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DomainUserName == other.DomainUserName ||
                    DomainUserName != null &&
                    DomainUserName.Equals(other.DomainUserName)
                ) && 
                (
                    DomainPassword == other.DomainPassword ||
                    DomainPassword != null &&
                    DomainPassword.Equals(other.DomainPassword)
                ) && 
                (
                    OrganizationalUnit == other.OrganizationalUnit ||
                    OrganizationalUnit != null &&
                    OrganizationalUnit.Equals(other.OrganizationalUnit)
                ) && 
                (
                    ReuseComputerAccount == other.ReuseComputerAccount ||
                    ReuseComputerAccount != null &&
                    ReuseComputerAccount.Equals(other.ReuseComputerAccount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DomainUserName != null)
                    hashCode = hashCode * 59 + DomainUserName.GetHashCode();
                    if (DomainPassword != null)
                    hashCode = hashCode * 59 + DomainPassword.GetHashCode();
                    if (OrganizationalUnit != null)
                    hashCode = hashCode * 59 + OrganizationalUnit.GetHashCode();
                    if (ReuseComputerAccount != null)
                    hashCode = hashCode * 59 + ReuseComputerAccount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmbServerJoin left, SmbServerJoin right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmbServerJoin left, SmbServerJoin right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
