/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Summary of the software packages that are installed on each appliance, or on the cluster as a whole.
    /// </summary>
    [DataContract]
    public partial class SoftwareInstalledInstance : IEquatable<SoftwareInstalledInstance>
    { 
        /// <summary>
        /// Unique identifier of the installed software instance.
        /// </summary>
        /// <value>Unique identifier of the installed software instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Whether this information represents the common software release version that is supported on all appliances in the cluster. The value is true for the instance representing the cluster. The value is false for appliance software instances.
        /// </summary>
        /// <value>Whether this information represents the common software release version that is supported on all appliances in the cluster. The value is true for the instance representing the cluster. The value is false for appliance software instances.</value>

        [DataMember(Name="is_cluster")]
        public bool? IsCluster { get; set; }

        /// <summary>
        /// Version of the installed release software package release.
        /// </summary>
        /// <value>Version of the installed release software package release.</value>

        [DataMember(Name="release_version")]
        public string ReleaseVersion { get; set; }

        /// <summary>
        /// Build version of the installed software package release. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Build version of the installed software package release. Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_version")]
        public string BuildVersion { get; set; }

        /// <summary>
        /// Date and time when this software package was produced.
        /// </summary>
        /// <value>Date and time when this software package was produced.</value>

        [DataMember(Name="release_timestamp")]
        public DateTime? ReleaseTimestamp { get; set; }

        /// <summary>
        /// Date and time when the software was successfully installed and committed on the cluster. If the software package has not been commited, this value is null.
        /// </summary>
        /// <value>Date and time when the software was successfully installed and committed on the cluster. If the software package has not been commited, this value is null.</value>

        [DataMember(Name="installed_date")]
        public DateTime? InstalledDate { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_flavor")]
        public SoftwareInstalledBuildFlavorEnum? BuildFlavor { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_type")]
        public SoftwareInstalledBuildTypeEnum? BuildType { get; set; }

        /// <summary>
        /// Unique identifier of this build. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Unique identifier of this build. Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_id")]
        public string BuildId { get; set; }

        /// <summary>
        /// Localized message string corresponding to build_flavor Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to build_flavor Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_flavor_l10n")]
        public string BuildFlavorL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to build_type Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to build_type Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_type_l10n")]
        public string BuildTypeL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of appliance_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of appliance_id attribute.</value>

        [DataMember(Name="appliance")]
        public ApplianceInstance Appliance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SoftwareInstalledInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsCluster: ").Append(IsCluster).Append("\n");
            sb.Append("  ReleaseVersion: ").Append(ReleaseVersion).Append("\n");
            sb.Append("  BuildVersion: ").Append(BuildVersion).Append("\n");
            sb.Append("  ReleaseTimestamp: ").Append(ReleaseTimestamp).Append("\n");
            sb.Append("  InstalledDate: ").Append(InstalledDate).Append("\n");
            sb.Append("  BuildFlavor: ").Append(BuildFlavor).Append("\n");
            sb.Append("  BuildType: ").Append(BuildType).Append("\n");
            sb.Append("  BuildId: ").Append(BuildId).Append("\n");
            sb.Append("  BuildFlavorL10n: ").Append(BuildFlavorL10n).Append("\n");
            sb.Append("  BuildTypeL10n: ").Append(BuildTypeL10n).Append("\n");
            sb.Append("  Appliance: ").Append(Appliance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SoftwareInstalledInstance)obj);
        }

        /// <summary>
        /// Returns true if SoftwareInstalledInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of SoftwareInstalledInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SoftwareInstalledInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsCluster == other.IsCluster ||
                    IsCluster != null &&
                    IsCluster.Equals(other.IsCluster)
                ) && 
                (
                    ReleaseVersion == other.ReleaseVersion ||
                    ReleaseVersion != null &&
                    ReleaseVersion.Equals(other.ReleaseVersion)
                ) && 
                (
                    BuildVersion == other.BuildVersion ||
                    BuildVersion != null &&
                    BuildVersion.Equals(other.BuildVersion)
                ) && 
                (
                    ReleaseTimestamp == other.ReleaseTimestamp ||
                    ReleaseTimestamp != null &&
                    ReleaseTimestamp.Equals(other.ReleaseTimestamp)
                ) && 
                (
                    InstalledDate == other.InstalledDate ||
                    InstalledDate != null &&
                    InstalledDate.Equals(other.InstalledDate)
                ) && 
                (
                    BuildFlavor == other.BuildFlavor ||
                    BuildFlavor != null &&
                    BuildFlavor.Equals(other.BuildFlavor)
                ) && 
                (
                    BuildType == other.BuildType ||
                    BuildType != null &&
                    BuildType.Equals(other.BuildType)
                ) && 
                (
                    BuildId == other.BuildId ||
                    BuildId != null &&
                    BuildId.Equals(other.BuildId)
                ) && 
                (
                    BuildFlavorL10n == other.BuildFlavorL10n ||
                    BuildFlavorL10n != null &&
                    BuildFlavorL10n.Equals(other.BuildFlavorL10n)
                ) && 
                (
                    BuildTypeL10n == other.BuildTypeL10n ||
                    BuildTypeL10n != null &&
                    BuildTypeL10n.Equals(other.BuildTypeL10n)
                ) && 
                (
                    Appliance == other.Appliance ||
                    Appliance != null &&
                    Appliance.Equals(other.Appliance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IsCluster != null)
                    hashCode = hashCode * 59 + IsCluster.GetHashCode();
                    if (ReleaseVersion != null)
                    hashCode = hashCode * 59 + ReleaseVersion.GetHashCode();
                    if (BuildVersion != null)
                    hashCode = hashCode * 59 + BuildVersion.GetHashCode();
                    if (ReleaseTimestamp != null)
                    hashCode = hashCode * 59 + ReleaseTimestamp.GetHashCode();
                    if (InstalledDate != null)
                    hashCode = hashCode * 59 + InstalledDate.GetHashCode();
                    if (BuildFlavor != null)
                    hashCode = hashCode * 59 + BuildFlavor.GetHashCode();
                    if (BuildType != null)
                    hashCode = hashCode * 59 + BuildType.GetHashCode();
                    if (BuildId != null)
                    hashCode = hashCode * 59 + BuildId.GetHashCode();
                    if (BuildFlavorL10n != null)
                    hashCode = hashCode * 59 + BuildFlavorL10n.GetHashCode();
                    if (BuildTypeL10n != null)
                    hashCode = hashCode * 59 + BuildTypeL10n.GetHashCode();
                    if (Appliance != null)
                    hashCode = hashCode * 59 + Appliance.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SoftwareInstalledInstance left, SoftwareInstalledInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SoftwareInstalledInstance left, SoftwareInstalledInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
