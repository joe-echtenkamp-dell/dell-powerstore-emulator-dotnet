/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// This resource type has queriable association from nas_server
    /// </summary>
    [DataContract]
    public partial class SmbServerInstance : IEquatable<SmbServerInstance>
    { 
        /// <summary>
        /// Unique identifier of the SMB server.
        /// </summary>
        /// <value>Unique identifier of the SMB server.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier of the NAS server.
        /// </summary>
        /// <value>Unique identifier of the NAS server.</value>

        [DataMember(Name="nas_server_id")]
        public string NasServerId { get; set; }

        /// <summary>
        /// DNS name of the associated computer account when the SMB server is joined to an Active Directory domain. This name&#39;s minimum length is 2 characters, it is limited to 63 bytes and must not contain the following characters -   - comma (.)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&amp;)   - apostrophe (&#39;)   - period (.) - note that if you enter string with period only the first word will be kept   - parentheses (())   - braces ({})   - underscore (_)   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/) 
        /// </summary>
        /// <value>DNS name of the associated computer account when the SMB server is joined to an Active Directory domain. This name&#39;s minimum length is 2 characters, it is limited to 63 bytes and must not contain the following characters -   - comma (.)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&amp;)   - apostrophe (&#39;)   - period (.) - note that if you enter string with period only the first word will be kept   - parentheses (())   - braces ({})   - underscore (_)   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/) </value>

        [DataMember(Name="computer_name")]
        public string ComputerName { get; set; }

        /// <summary>
        /// Domain name where SMB server is registered in Active Directory, if applicable.
        /// </summary>
        /// <value>Domain name where SMB server is registered in Active Directory, if applicable.</value>

        [DataMember(Name="domain")]
        public string Domain { get; set; }

        /// <summary>
        /// NetBIOS name is the network name of the standalone SMB server. SMB server joined to Active Directory also have NetBIOS Name, defaulted to the 15 first characters of the computerName attribute. Administrators can specify a custom NetBIOS Name for a SMB server using this attribute. NetBIOS Name are limited to 15 characters and cannot contain the following characters -   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\&quot;\&quot;)   - less than sign (&lt;)   - greater than sign (&gt;)   - vertical bar (|) as definied by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/) 
        /// </summary>
        /// <value>NetBIOS name is the network name of the standalone SMB server. SMB server joined to Active Directory also have NetBIOS Name, defaulted to the 15 first characters of the computerName attribute. Administrators can specify a custom NetBIOS Name for a SMB server using this attribute. NetBIOS Name are limited to 15 characters and cannot contain the following characters -   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\&quot;\&quot;)   - less than sign (&lt;)   - greater than sign (&gt;)   - vertical bar (|) as definied by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/) </value>

        [DataMember(Name="netbios_name")]
        public string NetbiosName { get; set; }

        /// <summary>
        /// Applies to stand-alone SMB servers only. Windows network workgroup for the SMB server. Workgroup names are limited to 15 alphanumeric ASCII characters. 
        /// </summary>
        /// <value>Applies to stand-alone SMB servers only. Windows network workgroup for the SMB server. Workgroup names are limited to 15 alphanumeric ASCII characters. </value>

        [DataMember(Name="workgroup")]
        public string Workgroup { get; set; }

        /// <summary>
        /// Description of the SMB server.
        /// </summary>
        /// <value>Description of the SMB server.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Indicates whether the SMB server is standalone. Values are: - true - SMB server is standalone. - false - SMB server is a domain SMB server to be joined to the Active Directory. 
        /// </summary>
        /// <value>Indicates whether the SMB server is standalone. Values are: - true - SMB server is standalone. - false - SMB server is a domain SMB server to be joined to the Active Directory. </value>

        [DataMember(Name="is_standalone")]
        public bool? IsStandalone { get; set; }

        /// <summary>
        /// Indicates whether the SMB server is joined to the Active Directory. Always false for standalone SMB servers.
        /// </summary>
        /// <value>Indicates whether the SMB server is joined to the Active Directory. Always false for standalone SMB servers.</value>

        [DataMember(Name="is_joined")]
        public bool? IsJoined { get; set; }

        /// <summary>
        /// This is the embeddable reference form of nas_server_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of nas_server_id attribute.</value>

        [DataMember(Name="nas_server")]
        public NasServerInstance NasServer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmbServerInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NasServerId: ").Append(NasServerId).Append("\n");
            sb.Append("  ComputerName: ").Append(ComputerName).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  NetbiosName: ").Append(NetbiosName).Append("\n");
            sb.Append("  Workgroup: ").Append(Workgroup).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsStandalone: ").Append(IsStandalone).Append("\n");
            sb.Append("  IsJoined: ").Append(IsJoined).Append("\n");
            sb.Append("  NasServer: ").Append(NasServer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmbServerInstance)obj);
        }

        /// <summary>
        /// Returns true if SmbServerInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of SmbServerInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmbServerInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    NasServerId == other.NasServerId ||
                    NasServerId != null &&
                    NasServerId.Equals(other.NasServerId)
                ) && 
                (
                    ComputerName == other.ComputerName ||
                    ComputerName != null &&
                    ComputerName.Equals(other.ComputerName)
                ) && 
                (
                    Domain == other.Domain ||
                    Domain != null &&
                    Domain.Equals(other.Domain)
                ) && 
                (
                    NetbiosName == other.NetbiosName ||
                    NetbiosName != null &&
                    NetbiosName.Equals(other.NetbiosName)
                ) && 
                (
                    Workgroup == other.Workgroup ||
                    Workgroup != null &&
                    Workgroup.Equals(other.Workgroup)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    IsStandalone == other.IsStandalone ||
                    IsStandalone != null &&
                    IsStandalone.Equals(other.IsStandalone)
                ) && 
                (
                    IsJoined == other.IsJoined ||
                    IsJoined != null &&
                    IsJoined.Equals(other.IsJoined)
                ) && 
                (
                    NasServer == other.NasServer ||
                    NasServer != null &&
                    NasServer.Equals(other.NasServer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (NasServerId != null)
                    hashCode = hashCode * 59 + NasServerId.GetHashCode();
                    if (ComputerName != null)
                    hashCode = hashCode * 59 + ComputerName.GetHashCode();
                    if (Domain != null)
                    hashCode = hashCode * 59 + Domain.GetHashCode();
                    if (NetbiosName != null)
                    hashCode = hashCode * 59 + NetbiosName.GetHashCode();
                    if (Workgroup != null)
                    hashCode = hashCode * 59 + Workgroup.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsStandalone != null)
                    hashCode = hashCode * 59 + IsStandalone.GetHashCode();
                    if (IsJoined != null)
                    hashCode = hashCode * 59 + IsJoined.GetHashCode();
                    if (NasServer != null)
                    hashCode = hashCode * 59 + NasServer.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmbServerInstance left, SmbServerInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmbServerInstance left, SmbServerInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
