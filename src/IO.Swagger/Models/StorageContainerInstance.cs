/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A storage container is a logical grouping of related storage objects.  For example, a storage container maps to a vVol datastore in vSphere where the storage for virtual machines can be provisioned.  This resource type has queriable associations from virtual_volume, replication_group, datastore, storage_container_destination
    /// </summary>
    [DataContract]
    public partial class StorageContainerInstance : IEquatable<StorageContainerInstance>
    { 
        /// <summary>
        /// The unique identifier of the storage container.
        /// </summary>
        /// <value>The unique identifier of the storage container.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name for the storage container. This should be unique across all storage containers in the cluster. Name can be from 1 to 64 UTF-8 characters, and not more than 127 bytes. Name cannot contain characters &#39;/&#39;, &#39;\\&#39;, &#39;%&#39;, &#39;“&#39;.   This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name for the storage container. This should be unique across all storage containers in the cluster. Name can be from 1 to 64 UTF-8 characters, and not more than 127 bytes. Name cannot contain characters &#39;/&#39;, &#39;\\&#39;, &#39;%&#39;, &#39;“&#39;.   This property supports case-insensitive filtering.</value>

        [StringLength(64, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The total number of bytes that can be provisioned/reserved against this storage container.  A value of 0 means there is no limit. It is possible to set the quota to a value that overprovisions the amount of space available in the system. 
        /// </summary>
        /// <value>The total number of bytes that can be provisioned/reserved against this storage container.  A value of 0 means there is no limit. It is possible to set the quota to a value that overprovisions the amount of space available in the system. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="quota")]
        public long? Quota { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="storage_protocol")]
        public StorageContainerStorageProtocolEnum? StorageProtocol { get; set; }

        /// <summary>
        /// Localized message string corresponding to storage_protocol Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to storage_protocol Was added in version 3.0.0.0.</value>

        [DataMember(Name="storage_protocol_l10n")]
        public string StorageProtocolL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_volume association.</value>

        [DataMember(Name="virtual_volumes")]
        public List<VirtualVolumeInstance> VirtualVolumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type replication_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type replication_group association.</value>

        [DataMember(Name="replication_groups")]
        public List<ReplicationGroupInstance> ReplicationGroups { get; set; }

        /// <summary>
        /// This is the inverse of the resource type datastore association.
        /// </summary>
        /// <value>This is the inverse of the resource type datastore association.</value>

        [DataMember(Name="datastores")]
        public List<DatastoreInstance> Datastores { get; set; }

        /// <summary>
        /// This is the inverse of the resource type storage_container_destination association.
        /// </summary>
        /// <value>This is the inverse of the resource type storage_container_destination association.</value>

        [DataMember(Name="destinations")]
        public List<StorageContainerDestinationInstance> Destinations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageContainerInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quota: ").Append(Quota).Append("\n");
            sb.Append("  StorageProtocol: ").Append(StorageProtocol).Append("\n");
            sb.Append("  StorageProtocolL10n: ").Append(StorageProtocolL10n).Append("\n");
            sb.Append("  VirtualVolumes: ").Append(VirtualVolumes).Append("\n");
            sb.Append("  ReplicationGroups: ").Append(ReplicationGroups).Append("\n");
            sb.Append("  Datastores: ").Append(Datastores).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StorageContainerInstance)obj);
        }

        /// <summary>
        /// Returns true if StorageContainerInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of StorageContainerInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageContainerInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Quota == other.Quota ||
                    Quota != null &&
                    Quota.Equals(other.Quota)
                ) && 
                (
                    StorageProtocol == other.StorageProtocol ||
                    StorageProtocol != null &&
                    StorageProtocol.Equals(other.StorageProtocol)
                ) && 
                (
                    StorageProtocolL10n == other.StorageProtocolL10n ||
                    StorageProtocolL10n != null &&
                    StorageProtocolL10n.Equals(other.StorageProtocolL10n)
                ) && 
                (
                    VirtualVolumes == other.VirtualVolumes ||
                    VirtualVolumes != null &&
                    VirtualVolumes.SequenceEqual(other.VirtualVolumes)
                ) && 
                (
                    ReplicationGroups == other.ReplicationGroups ||
                    ReplicationGroups != null &&
                    ReplicationGroups.SequenceEqual(other.ReplicationGroups)
                ) && 
                (
                    Datastores == other.Datastores ||
                    Datastores != null &&
                    Datastores.SequenceEqual(other.Datastores)
                ) && 
                (
                    Destinations == other.Destinations ||
                    Destinations != null &&
                    Destinations.SequenceEqual(other.Destinations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Quota != null)
                    hashCode = hashCode * 59 + Quota.GetHashCode();
                    if (StorageProtocol != null)
                    hashCode = hashCode * 59 + StorageProtocol.GetHashCode();
                    if (StorageProtocolL10n != null)
                    hashCode = hashCode * 59 + StorageProtocolL10n.GetHashCode();
                    if (VirtualVolumes != null)
                    hashCode = hashCode * 59 + VirtualVolumes.GetHashCode();
                    if (ReplicationGroups != null)
                    hashCode = hashCode * 59 + ReplicationGroups.GetHashCode();
                    if (Datastores != null)
                    hashCode = hashCode * 59 + Datastores.GetHashCode();
                    if (Destinations != null)
                    hashCode = hashCode * 59 + Destinations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StorageContainerInstance left, StorageContainerInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StorageContainerInstance left, StorageContainerInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
