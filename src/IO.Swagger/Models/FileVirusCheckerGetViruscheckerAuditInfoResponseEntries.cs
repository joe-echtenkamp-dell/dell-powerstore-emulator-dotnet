/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FileVirusCheckerGetViruscheckerAuditInfoResponseEntries : IEquatable<FileVirusCheckerGetViruscheckerAuditInfoResponseEntries>
    { 
        /// <summary>
        /// IP address of the virus checker server.
        /// </summary>
        /// <value>IP address of the virus checker server.</value>

        [StringLength(45, MinimumLength=1)]
        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// Virus checker server name. if the virus checker server IP address cannot resolve to a name, the IP address is provided.
        /// </summary>
        /// <value>Virus checker server name. if the virus checker server IP address cannot resolve to a name, the IP address is provided.</value>

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="server_name")]
        public string ServerName { get; set; }

        /// <summary>
        /// Version of the virus checker server.
        /// </summary>
        /// <value>Version of the virus checker server.</value>

        [StringLength(19, MinimumLength=0)]
        [DataMember(Name="server_version")]
        public string ServerVersion { get; set; }

        /// <summary>
        /// Anti Virus engine name.
        /// </summary>
        /// <value>Anti Virus engine name.</value>

        [StringLength(39, MinimumLength=0)]
        [DataMember(Name="av_engine_name")]
        public string AvEngineName { get; set; }

        /// <summary>
        /// Whether virus checker server is online(true) or offline(false)
        /// </summary>
        /// <value>Whether virus checker server is online(true) or offline(false)</value>

        [DataMember(Name="online")]
        public bool? Online { get; set; }

        /// <summary>
        /// Some VC engines detect and take an action after returning an error to SDNAS. This &#39;window&#39; allows SDNAS VC to wait a bit to identify what action was taken, rename(quarantine)/delete/modify(fix). 
        /// </summary>
        /// <value>Some VC engines detect and take an action after returning an error to SDNAS. This &#39;window&#39; allows SDNAS VC to wait a bit to identify what action was taken, rename(quarantine)/delete/modify(fix). </value>

        [DataMember(Name="remediation_window")]
        public int? RemediationWindow { get; set; }

        /// <summary>
        /// Last update time of known virus list.
        /// </summary>
        /// <value>Last update time of known virus list.</value>

        [DataMember(Name="signature_last_update_time")]
        public DateTime? SignatureLastUpdateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileVirusCheckerGetViruscheckerAuditInfoResponseEntries {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  ServerVersion: ").Append(ServerVersion).Append("\n");
            sb.Append("  AvEngineName: ").Append(AvEngineName).Append("\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("  RemediationWindow: ").Append(RemediationWindow).Append("\n");
            sb.Append("  SignatureLastUpdateTime: ").Append(SignatureLastUpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileVirusCheckerGetViruscheckerAuditInfoResponseEntries)obj);
        }

        /// <summary>
        /// Returns true if FileVirusCheckerGetViruscheckerAuditInfoResponseEntries instances are equal
        /// </summary>
        /// <param name="other">Instance of FileVirusCheckerGetViruscheckerAuditInfoResponseEntries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileVirusCheckerGetViruscheckerAuditInfoResponseEntries other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    ServerName == other.ServerName ||
                    ServerName != null &&
                    ServerName.Equals(other.ServerName)
                ) && 
                (
                    ServerVersion == other.ServerVersion ||
                    ServerVersion != null &&
                    ServerVersion.Equals(other.ServerVersion)
                ) && 
                (
                    AvEngineName == other.AvEngineName ||
                    AvEngineName != null &&
                    AvEngineName.Equals(other.AvEngineName)
                ) && 
                (
                    Online == other.Online ||
                    Online != null &&
                    Online.Equals(other.Online)
                ) && 
                (
                    RemediationWindow == other.RemediationWindow ||
                    RemediationWindow != null &&
                    RemediationWindow.Equals(other.RemediationWindow)
                ) && 
                (
                    SignatureLastUpdateTime == other.SignatureLastUpdateTime ||
                    SignatureLastUpdateTime != null &&
                    SignatureLastUpdateTime.Equals(other.SignatureLastUpdateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (ServerName != null)
                    hashCode = hashCode * 59 + ServerName.GetHashCode();
                    if (ServerVersion != null)
                    hashCode = hashCode * 59 + ServerVersion.GetHashCode();
                    if (AvEngineName != null)
                    hashCode = hashCode * 59 + AvEngineName.GetHashCode();
                    if (Online != null)
                    hashCode = hashCode * 59 + Online.GetHashCode();
                    if (RemediationWindow != null)
                    hashCode = hashCode * 59 + RemediationWindow.GetHashCode();
                    if (SignatureLastUpdateTime != null)
                    hashCode = hashCode * 59 + SignatureLastUpdateTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileVirusCheckerGetViruscheckerAuditInfoResponseEntries left, FileVirusCheckerGetViruscheckerAuditInfoResponseEntries right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileVirusCheckerGetViruscheckerAuditInfoResponseEntries left, FileVirusCheckerGetViruscheckerAuditInfoResponseEntries right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
