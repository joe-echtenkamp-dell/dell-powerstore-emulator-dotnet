/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
        /// <summary>
        /// The current operation of the file import session, the supported values are: * Initial_Provisioning - The destination NAS server and filesystems are being created.Un-exported source filesystems are being exported in case of NFS import. * Initial_Copy - Baseline Data Copy is initiated. Cold files and directory structure are being copied to the destination. The data is transferred between the dedicated source and destination import file interfaces using either NFSv3 or SMBv1 protocol * Importing_Config - Importing configuration information like production network interfaces, static routes, DNS, SMB server, SMB shares, NFS server, NFS exports, NIS, LDAP, local files, effective naming service, quotas, etc. * Ready_For_Cutover - Import is ready for cutover. * Cutting_Over - Production interfaces are being disabled on the source system and enabled on the destination system. In case of SMB import the Active Directory configuration is imported if needed; in case of NFS import the NLM locks are reclaimed on the destination system. Any access to source shares/exports is denied. * Incremental_Copy - Incremental data copy between the source and destination file storage systems has started. Client I/Os are served by PowerStore. The import process keeps the   source and destination filesystems in sync by doing I/O forwarding. I/O throughput is degraded during this operation. * Ready_For_Commit - Import is ready for commit. * Committing - I/O forwarding to the source is stopped and the destination system becomes independent. The source system is cleaned up.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>The current operation of the file import session, the supported values are: * Initial_Provisioning - The destination NAS server and filesystems are being created.Un-exported source filesystems are being exported in case of NFS import. * Initial_Copy - Baseline Data Copy is initiated. Cold files and directory structure are being copied to the destination. The data is transferred between the dedicated source and destination import file interfaces using either NFSv3 or SMBv1 protocol * Importing_Config - Importing configuration information like production network interfaces, static routes, DNS, SMB server, SMB shares, NFS server, NFS exports, NIS, LDAP, local files, effective naming service, quotas, etc. * Ready_For_Cutover - Import is ready for cutover. * Cutting_Over - Production interfaces are being disabled on the source system and enabled on the destination system. In case of SMB import the Active Directory configuration is imported if needed; in case of NFS import the NLM locks are reclaimed on the destination system. Any access to source shares/exports is denied. * Incremental_Copy - Incremental data copy between the source and destination file storage systems has started. Client I/Os are served by PowerStore. The import process keeps the   source and destination filesystems in sync by doing I/O forwarding. I/O throughput is degraded during this operation. * Ready_For_Commit - Import is ready for commit. * Committing - I/O forwarding to the source is stopped and the destination system becomes independent. The source system is cleaned up.  Was added in version 3.0.0.0.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FileImportSessionCurrentOperationEnum
        {
            
            /// <summary>
            /// Enum InitialProvisioningEnum for Initial_Provisioning
            /// </summary>
            [EnumMember(Value = "Initial_Provisioning")]
            InitialProvisioningEnum = 1,
            
            /// <summary>
            /// Enum InitialCopyEnum for Initial_Copy
            /// </summary>
            [EnumMember(Value = "Initial_Copy")]
            InitialCopyEnum = 2,
            
            /// <summary>
            /// Enum ImportingConfigEnum for Importing_Config
            /// </summary>
            [EnumMember(Value = "Importing_Config")]
            ImportingConfigEnum = 3,
            
            /// <summary>
            /// Enum ReadyForCutoverEnum for Ready_For_Cutover
            /// </summary>
            [EnumMember(Value = "Ready_For_Cutover")]
            ReadyForCutoverEnum = 4,
            
            /// <summary>
            /// Enum CuttingOverEnum for Cutting_Over
            /// </summary>
            [EnumMember(Value = "Cutting_Over")]
            CuttingOverEnum = 5,
            
            /// <summary>
            /// Enum IncrementalCopyEnum for Incremental_Copy
            /// </summary>
            [EnumMember(Value = "Incremental_Copy")]
            IncrementalCopyEnum = 6,
            
            /// <summary>
            /// Enum ReadyForCommitEnum for Ready_For_Commit
            /// </summary>
            [EnumMember(Value = "Ready_For_Commit")]
            ReadyForCommitEnum = 7,
            
            /// <summary>
            /// Enum CommittingEnum for Committing
            /// </summary>
            [EnumMember(Value = "Committing")]
            CommittingEnum = 8
        }
}
