/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Properties of the file interface route. This resource type has queriable association from file_interface
    /// </summary>
    [DataContract]
    public partial class FileInterfaceRouteInstance : IEquatable<FileInterfaceRouteInstance>
    { 
        /// <summary>
        /// Unique identifier of the file interface route.
        /// </summary>
        /// <value>Unique identifier of the file interface route.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the associated file interface.
        /// </summary>
        /// <value>Unique identifier of the associated file interface.</value>

        [DataMember(Name="file_interface_id")]
        public string FileInterfaceId { get; set; }

        /// <summary>
        /// IPv4 or IPv6 address of the target network node based on the specific route type. Values are: * For a default route, the route is specified in the gateway value for the related file interface. * For a host route, the destination value is a host IP address. For an IPV4 address the prefix_length must be 32, otherwise for an IPv6 address the prefix_length must be 128. * For a subnet route, the destination value is a subnet IP address and the appropriate prefix_length must be specified accordingly. 
        /// </summary>
        /// <value>IPv4 or IPv6 address of the target network node based on the specific route type. Values are: * For a default route, the route is specified in the gateway value for the related file interface. * For a host route, the destination value is a host IP address. For an IPV4 address the prefix_length must be 32, otherwise for an IPv6 address the prefix_length must be 128. * For a subnet route, the destination value is a subnet IP address and the appropriate prefix_length must be specified accordingly. </value>

        [DataMember(Name="destination")]
        public string Destination { get; set; }

        /// <summary>
        /// IPv4 or IPv6 prefix length for the route.
        /// </summary>
        /// <value>IPv4 or IPv6 prefix length for the route.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="prefix_length")]
        public int? PrefixLength { get; set; }

        /// <summary>
        /// IP address of the gateway associated with the route.
        /// </summary>
        /// <value>IP address of the gateway associated with the route.</value>

        [DataMember(Name="gateway")]
        public string Gateway { get; set; }

        /// <summary>
        /// Gets or Sets OperationalStatus
        /// </summary>

        [DataMember(Name="operational_status")]
        public FileInterfaceRouteOperationalStatusEnum? OperationalStatus { get; set; }

        /// <summary>
        /// Localized message string corresponding to operational_status
        /// </summary>
        /// <value>Localized message string corresponding to operational_status</value>

        [DataMember(Name="operational_status_l10n")]
        public string OperationalStatusL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of file_interface_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of file_interface_id attribute.</value>

        [DataMember(Name="file_interface")]
        public FileInterfaceInstance FileInterface { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileInterfaceRouteInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FileInterfaceId: ").Append(FileInterfaceId).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  PrefixLength: ").Append(PrefixLength).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  OperationalStatus: ").Append(OperationalStatus).Append("\n");
            sb.Append("  OperationalStatusL10n: ").Append(OperationalStatusL10n).Append("\n");
            sb.Append("  FileInterface: ").Append(FileInterface).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileInterfaceRouteInstance)obj);
        }

        /// <summary>
        /// Returns true if FileInterfaceRouteInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of FileInterfaceRouteInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileInterfaceRouteInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    FileInterfaceId == other.FileInterfaceId ||
                    FileInterfaceId != null &&
                    FileInterfaceId.Equals(other.FileInterfaceId)
                ) && 
                (
                    Destination == other.Destination ||
                    Destination != null &&
                    Destination.Equals(other.Destination)
                ) && 
                (
                    PrefixLength == other.PrefixLength ||
                    PrefixLength != null &&
                    PrefixLength.Equals(other.PrefixLength)
                ) && 
                (
                    Gateway == other.Gateway ||
                    Gateway != null &&
                    Gateway.Equals(other.Gateway)
                ) && 
                (
                    OperationalStatus == other.OperationalStatus ||
                    OperationalStatus != null &&
                    OperationalStatus.Equals(other.OperationalStatus)
                ) && 
                (
                    OperationalStatusL10n == other.OperationalStatusL10n ||
                    OperationalStatusL10n != null &&
                    OperationalStatusL10n.Equals(other.OperationalStatusL10n)
                ) && 
                (
                    FileInterface == other.FileInterface ||
                    FileInterface != null &&
                    FileInterface.Equals(other.FileInterface)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (FileInterfaceId != null)
                    hashCode = hashCode * 59 + FileInterfaceId.GetHashCode();
                    if (Destination != null)
                    hashCode = hashCode * 59 + Destination.GetHashCode();
                    if (PrefixLength != null)
                    hashCode = hashCode * 59 + PrefixLength.GetHashCode();
                    if (Gateway != null)
                    hashCode = hashCode * 59 + Gateway.GetHashCode();
                    if (OperationalStatus != null)
                    hashCode = hashCode * 59 + OperationalStatus.GetHashCode();
                    if (OperationalStatusL10n != null)
                    hashCode = hashCode * 59 + OperationalStatusL10n.GetHashCode();
                    if (FileInterface != null)
                    hashCode = hashCode * 59 + FileInterface.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileInterfaceRouteInstance left, FileInterfaceRouteInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileInterfaceRouteInstance left, FileInterfaceRouteInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
