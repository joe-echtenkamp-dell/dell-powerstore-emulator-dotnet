/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Com.Dell.Emulator.Powerstore.Attributes;

using Microsoft.AspNetCore.Authorization;
using Com.Dell.Emulator.Powerstore.Models;

namespace Com.Dell.Emulator.Powerstore.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ImportNetappApiController : ControllerBase
    { 
        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>List NetApp storage systems configured for import. Was added in version 3.0.0.0.</remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of import netapp instance objects</response>
        [HttpGet]
        [Route("/api/rest/import_netapp")]
        [ValidateModelState]
        [SwaggerOperation("ImportNetappGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ImportNetappInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<ImportNetappInstance>), description: "Partial content of import netapp instance objects")]
        public virtual IActionResult ImportNetappGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ImportNetappInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<ImportNetappInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ImportNetappInstance>>(exampleJson)
            : default(List<ImportNetappInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query a specific NetApp storage system that is configured for import Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the NetApp storage system. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/import_netapp/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ImportNetappIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ImportNetappInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult ImportNetappIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ImportNetappInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ImportNetappInstance>(exampleJson)
            : default(ImportNetappInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
