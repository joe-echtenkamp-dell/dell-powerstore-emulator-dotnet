/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// The list of file interfaces attached to the NAS server. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileImportSourceNetworkInterface : IEquatable<FileImportSourceNetworkInterface>
    { 
        /// <summary>
        /// Unique identifier of the source file system. Was added in version 3.0.0.0. Was deprecated in version 3.2.0.0.
        /// </summary>
        /// <value>Unique identifier of the source file system. Was added in version 3.0.0.0. Was deprecated in version 3.2.0.0.</value>

        [DataMember(Name="import_source_nas_server_id")]
        public string ImportSourceNasServerId { get; set; }

        /// <summary>
        /// Name of the file interface attached to the NAS server. 
        /// </summary>
        /// <value>Name of the file interface attached to the NAS server. </value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Name of the network device associated with the file interface. 
        /// </summary>
        /// <value>Name of the network device associated with the file interface. </value>

        [DataMember(Name="network_device")]
        public string NetworkDevice { get; set; }

        /// <summary>
        /// IP address of the file interface. 
        /// </summary>
        /// <value>IP address of the file interface. </value>

        [DataMember(Name="ip_address")]
        public string IpAddress { get; set; }

        /// <summary>
        /// IPv4 netmask for the file interface, if it uses an IPv4 address.  Was added in version 3.0.0.0. Was deprecated in version 3.2.0.0.
        /// </summary>
        /// <value>IPv4 netmask for the file interface, if it uses an IPv4 address.  Was added in version 3.0.0.0. Was deprecated in version 3.2.0.0.</value>

        [DataMember(Name="netmask")]
        public string Netmask { get; set; }

        /// <summary>
        /// IPv4 prefix length for the file interface, if it uses an IPv4 address. 
        /// </summary>
        /// <value>IPv4 prefix length for the file interface, if it uses an IPv4 address. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="prefix_length")]
        public int? PrefixLength { get; set; }

        /// <summary>
        /// IPv4 gateway address for the file interface. 
        /// </summary>
        /// <value>IPv4 gateway address for the file interface. </value>

        [DataMember(Name="gateway")]
        public string Gateway { get; set; }

        /// <summary>
        /// Virtual Local Area Network (VLAN) identifier for the file interface. 
        /// </summary>
        /// <value>Virtual Local Area Network (VLAN) identifier for the file interface. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="vlan_id")]
        public int? VlanId { get; set; }

        /// <summary>
        /// Indicates whether the file interface is disabled. 
        /// </summary>
        /// <value>Indicates whether the file interface is disabled. </value>

        [DataMember(Name="is_disabled")]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileImportSourceNetworkInterface {\n");
            sb.Append("  ImportSourceNasServerId: ").Append(ImportSourceNasServerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NetworkDevice: ").Append(NetworkDevice).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Netmask: ").Append(Netmask).Append("\n");
            sb.Append("  PrefixLength: ").Append(PrefixLength).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  VlanId: ").Append(VlanId).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileImportSourceNetworkInterface)obj);
        }

        /// <summary>
        /// Returns true if FileImportSourceNetworkInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of FileImportSourceNetworkInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileImportSourceNetworkInterface other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImportSourceNasServerId == other.ImportSourceNasServerId ||
                    ImportSourceNasServerId != null &&
                    ImportSourceNasServerId.Equals(other.ImportSourceNasServerId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NetworkDevice == other.NetworkDevice ||
                    NetworkDevice != null &&
                    NetworkDevice.Equals(other.NetworkDevice)
                ) && 
                (
                    IpAddress == other.IpAddress ||
                    IpAddress != null &&
                    IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    Netmask == other.Netmask ||
                    Netmask != null &&
                    Netmask.Equals(other.Netmask)
                ) && 
                (
                    PrefixLength == other.PrefixLength ||
                    PrefixLength != null &&
                    PrefixLength.Equals(other.PrefixLength)
                ) && 
                (
                    Gateway == other.Gateway ||
                    Gateway != null &&
                    Gateway.Equals(other.Gateway)
                ) && 
                (
                    VlanId == other.VlanId ||
                    VlanId != null &&
                    VlanId.Equals(other.VlanId)
                ) && 
                (
                    IsDisabled == other.IsDisabled ||
                    IsDisabled != null &&
                    IsDisabled.Equals(other.IsDisabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImportSourceNasServerId != null)
                    hashCode = hashCode * 59 + ImportSourceNasServerId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NetworkDevice != null)
                    hashCode = hashCode * 59 + NetworkDevice.GetHashCode();
                    if (IpAddress != null)
                    hashCode = hashCode * 59 + IpAddress.GetHashCode();
                    if (Netmask != null)
                    hashCode = hashCode * 59 + Netmask.GetHashCode();
                    if (PrefixLength != null)
                    hashCode = hashCode * 59 + PrefixLength.GetHashCode();
                    if (Gateway != null)
                    hashCode = hashCode * 59 + Gateway.GetHashCode();
                    if (VlanId != null)
                    hashCode = hashCode * 59 + VlanId.GetHashCode();
                    if (IsDisabled != null)
                    hashCode = hashCode * 59 + IsDisabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileImportSourceNetworkInterface left, FileImportSourceNetworkInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileImportSourceNetworkInterface left, FileImportSourceNetworkInterface right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
