/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    ///  Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileImportSessionCreate : IEquatable<FileImportSessionCreate>
    { 
        /// <summary>
        /// Name of the import session. The name must be unique in the PowerStore cluster and can contain a maximum of 32 unicode characters. It cannot contain special HTTP characters, unprintable characters, or white space. 
        /// </summary>
        /// <value>Name of the import session. The name must be unique in the PowerStore cluster and can contain a maximum of 32 unicode characters. It cannot contain special HTTP characters, unprintable characters, or white space. </value>
        [Required]
        
        [MaxLength(32)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Unique identifier of the storage system that contains the source NAS server to be imported.     You can query the source NAS server object to get the identifier of the source system.     Alternatively, you can use the remote_system object to get this information.  name:{name} can be used instead of {id}. For example: &#39;remote_system_id&#39;:&#39;name:remote_system_name&#39;
        /// </summary>
        /// <value>Unique identifier of the storage system that contains the source NAS server to be imported.     You can query the source NAS server object to get the identifier of the source system.     Alternatively, you can use the remote_system object to get this information.  name:{name} can be used instead of {id}. For example: &#39;remote_system_id&#39;:&#39;name:remote_system_name&#39;</value>
        [Required]
        
        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Unique identifier of the source NAS server to be imported. Refer to the following objects for more information: * VNX - import_vnx_nas_server.  name:{name} can be used instead of {id}. For example: &#39;source_resource_id&#39;:&#39;name:nas_server_name&#39;
        /// </summary>
        /// <value>Unique identifier of the source NAS server to be imported. Refer to the following objects for more information: * VNX - import_vnx_nas_server.  name:{name} can be used instead of {id}. For example: &#39;source_resource_id&#39;:&#39;name:nas_server_name&#39;</value>
        [Required]
        
        [DataMember(Name="source_resource_id")]
        public string SourceResourceId { get; set; }

        /// <summary>
        /// Description of the file import session.     The name can contain a maximum of 128 Unicode characters.     It cannot contain unprintable characters. 
        /// </summary>
        /// <value>Description of the file import session.     The name can contain a maximum of 128 Unicode characters.     It cannot contain unprintable characters. </value>

        [MaxLength(128)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Unique identifier of the file interface in the destination system that is used for importing data from the source system. 
        /// </summary>
        /// <value>Unique identifier of the file interface in the destination system that is used for importing data from the source system. </value>
        [Required]
        
        [DataMember(Name="import_file_interface_id")]
        public string ImportFileInterfaceId { get; set; }

        /// <summary>
        /// User name for authentication to SMB Server on the source NAS server with administrator privilege. This is required for SMB import. 
        /// </summary>
        /// <value>User name for authentication to SMB Server on the source NAS server with administrator privilege. This is required for SMB import. </value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="source_smb_admin_username")]
        public string SourceSmbAdminUsername { get; set; }

        /// <summary>
        /// Password for authentication to SMB Server on the source NAS Server with administrator privilege. This is required for SMB import. 
        /// </summary>
        /// <value>Password for authentication to SMB Server on the source NAS Server with administrator privilege. This is required for SMB import. </value>

        [MaxLength(1023)]
        [DataMember(Name="source_smb_admin_password")]
        public string SourceSmbAdminPassword { get; set; }

        /// <summary>
        /// Indicates the desired date and time at which the file import session should be scheduled to run. The date is specified in ISO 8601 format with time expressed in UTC format. 
        /// </summary>
        /// <value>Indicates the desired date and time at which the file import session should be scheduled to run. The date is specified in ISO 8601 format with time expressed in UTC format. </value>

        [DataMember(Name="scheduled_timestamp")]
        public string ScheduledTimestamp { get; set; }

        /// <summary>
        /// Unique identifier of the protection policy that will be applied to an imported NAS server or filesystem after the import completes. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy. If you try to import a replication policy, the import job will fail.  name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;
        /// </summary>
        /// <value>Unique identifier of the protection policy that will be applied to an imported NAS server or filesystem after the import completes. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy. If you try to import a replication policy, the import job will fail.  name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;</value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems. 
        /// </summary>
        /// <value>The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems. </value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="source_dhsm_username")]
        public string SourceDhsmUsername { get; set; }

        /// <summary>
        /// The password for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems. 
        /// </summary>
        /// <value>The password for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems. </value>

        [MaxLength(1023)]
        [DataMember(Name="source_dhsm_password")]
        public string SourceDhsmPassword { get; set; }

        /// <summary>
        /// Optional list of mappings from source file interfaces to local bond/FSN. By default, all file interfaces associated with source NAS Server will be mapped with system bond/FSN. For alternate mappings for some or all of the source file interfaces, use this to specify the file interface and bond/FSN pairs. Any source file interfaces without an explicit mapping will be mapped to the system bond/FSN. 
        /// </summary>
        /// <value>Optional list of mappings from source file interfaces to local bond/FSN. By default, all file interfaces associated with source NAS Server will be mapped with system bond/FSN. For alternate mappings for some or all of the source file interfaces, use this to specify the file interface and bond/FSN pairs. Any source file interfaces without an explicit mapping will be mapped to the system bond/FSN. </value>

        [DataMember(Name="file_interfaces")]
        public List<FileImportSessionFileInterfaceMapping> FileInterfaces { get; set; }

        /// <summary>
        /// Name of the migration interface on the source NAS Server. Was added in version 3.2.0.0.
        /// </summary>
        /// <value>Name of the migration interface on the source NAS Server. Was added in version 3.2.0.0.</value>

        [DataMember(Name="source_interface")]
        public string SourceInterface { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileImportSessionCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  SourceResourceId: ").Append(SourceResourceId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ImportFileInterfaceId: ").Append(ImportFileInterfaceId).Append("\n");
            sb.Append("  SourceSmbAdminUsername: ").Append(SourceSmbAdminUsername).Append("\n");
            sb.Append("  SourceSmbAdminPassword: ").Append(SourceSmbAdminPassword).Append("\n");
            sb.Append("  ScheduledTimestamp: ").Append(ScheduledTimestamp).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  SourceDhsmUsername: ").Append(SourceDhsmUsername).Append("\n");
            sb.Append("  SourceDhsmPassword: ").Append(SourceDhsmPassword).Append("\n");
            sb.Append("  FileInterfaces: ").Append(FileInterfaces).Append("\n");
            sb.Append("  SourceInterface: ").Append(SourceInterface).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileImportSessionCreate)obj);
        }

        /// <summary>
        /// Returns true if FileImportSessionCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of FileImportSessionCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileImportSessionCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    SourceResourceId == other.SourceResourceId ||
                    SourceResourceId != null &&
                    SourceResourceId.Equals(other.SourceResourceId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ImportFileInterfaceId == other.ImportFileInterfaceId ||
                    ImportFileInterfaceId != null &&
                    ImportFileInterfaceId.Equals(other.ImportFileInterfaceId)
                ) && 
                (
                    SourceSmbAdminUsername == other.SourceSmbAdminUsername ||
                    SourceSmbAdminUsername != null &&
                    SourceSmbAdminUsername.Equals(other.SourceSmbAdminUsername)
                ) && 
                (
                    SourceSmbAdminPassword == other.SourceSmbAdminPassword ||
                    SourceSmbAdminPassword != null &&
                    SourceSmbAdminPassword.Equals(other.SourceSmbAdminPassword)
                ) && 
                (
                    ScheduledTimestamp == other.ScheduledTimestamp ||
                    ScheduledTimestamp != null &&
                    ScheduledTimestamp.Equals(other.ScheduledTimestamp)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    SourceDhsmUsername == other.SourceDhsmUsername ||
                    SourceDhsmUsername != null &&
                    SourceDhsmUsername.Equals(other.SourceDhsmUsername)
                ) && 
                (
                    SourceDhsmPassword == other.SourceDhsmPassword ||
                    SourceDhsmPassword != null &&
                    SourceDhsmPassword.Equals(other.SourceDhsmPassword)
                ) && 
                (
                    FileInterfaces == other.FileInterfaces ||
                    FileInterfaces != null &&
                    FileInterfaces.SequenceEqual(other.FileInterfaces)
                ) && 
                (
                    SourceInterface == other.SourceInterface ||
                    SourceInterface != null &&
                    SourceInterface.Equals(other.SourceInterface)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (SourceResourceId != null)
                    hashCode = hashCode * 59 + SourceResourceId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ImportFileInterfaceId != null)
                    hashCode = hashCode * 59 + ImportFileInterfaceId.GetHashCode();
                    if (SourceSmbAdminUsername != null)
                    hashCode = hashCode * 59 + SourceSmbAdminUsername.GetHashCode();
                    if (SourceSmbAdminPassword != null)
                    hashCode = hashCode * 59 + SourceSmbAdminPassword.GetHashCode();
                    if (ScheduledTimestamp != null)
                    hashCode = hashCode * 59 + ScheduledTimestamp.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (SourceDhsmUsername != null)
                    hashCode = hashCode * 59 + SourceDhsmUsername.GetHashCode();
                    if (SourceDhsmPassword != null)
                    hashCode = hashCode * 59 + SourceDhsmPassword.GetHashCode();
                    if (FileInterfaces != null)
                    hashCode = hashCode * 59 + FileInterfaces.GetHashCode();
                    if (SourceInterface != null)
                    hashCode = hashCode * 59 + SourceInterface.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileImportSessionCreate left, FileImportSessionCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileImportSessionCreate left, FileImportSessionCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
