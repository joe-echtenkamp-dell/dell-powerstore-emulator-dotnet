/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Information about the job. This resource type has queriable association from job
    /// </summary>
    [DataContract]
    public partial class JobInstance : IEquatable<JobInstance>
    { 
        /// <summary>
        /// Unique identifier of the job.
        /// </summary>
        /// <value>Unique identifier of the job.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ResourceAction
        /// </summary>

        [DataMember(Name="resource_action")]
        public ResourceActionEnum? ResourceAction { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>

        [DataMember(Name="resource_type")]
        public ResourceTypeEnum? ResourceType { get; set; }

        /// <summary>
        /// Unique identifier of the resource on which the job is operating.
        /// </summary>
        /// <value>Unique identifier of the resource on which the job is operating.</value>

        [DataMember(Name="resource_id")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Name of the resource on which the job is operating.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the resource on which the job is operating.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="resource_name")]
        public string ResourceName { get; set; }

        /// <summary>
        /// Description of the job.
        /// </summary>
        /// <value>Description of the job.</value>

        [DataMember(Name="description_l10n")]
        public string DescriptionL10n { get; set; }

        /// <summary>
        ///  Was deprecated in version 1.0.2.
        /// </summary>
        /// <value> Was deprecated in version 1.0.2.</value>

        [DataMember(Name="state")]
        public JobStateEnum? State { get; set; }

        /// <summary>
        /// Date and time when the job execution started.
        /// </summary>
        /// <value>Date and time when the job execution started.</value>

        [DataMember(Name="start_time")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        ///  Was added in version 1.0.2.
        /// </summary>
        /// <value> Was added in version 1.0.2.</value>

        [DataMember(Name="phase")]
        public JobPhaseEnum? Phase { get; set; }

        /// <summary>
        /// Date and time when the job execution completed.
        /// </summary>
        /// <value>Date and time when the job execution completed.</value>

        [DataMember(Name="end_time")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Estimated completion date and time.
        /// </summary>
        /// <value>Estimated completion date and time.</value>

        [DataMember(Name="estimated_completion_time")]
        public DateTime? EstimatedCompletionTime { get; set; }

        /// <summary>
        /// Percent complete of the job.
        /// </summary>
        /// <value>Percent complete of the job.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="progress_percentage")]
        public int? ProgressPercentage { get; set; }

        /// <summary>
        /// Unique identifier of the parent job, if applicable.
        /// </summary>
        /// <value>Unique identifier of the parent job, if applicable.</value>

        [DataMember(Name="parent_id")]
        public string ParentId { get; set; }

        /// <summary>
        /// Unique identifier of the root job, if applicable. The root job is the job at the top of the parent hierarchy. 
        /// </summary>
        /// <value>Unique identifier of the root job, if applicable. The root job is the job at the top of the parent hierarchy. </value>

        [DataMember(Name="root_id")]
        public string RootId { get; set; }

        /// <summary>
        /// Name of the user associated with the job.
        /// </summary>
        /// <value>Name of the user associated with the job.</value>

        [DataMember(Name="user")]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets ResponseBody
        /// </summary>

        [DataMember(Name="response_body")]
        public BaseResponse ResponseBody { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="response_status")]
        public HttpStatusEnum? ResponseStatus { get; set; }

        /// <summary>
        /// Order of a given job step with respect to its siblings within the job hierarchy. 
        /// </summary>
        /// <value>Order of a given job step with respect to its siblings within the job hierarchy. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="step_order")]
        public int? StepOrder { get; set; }

        /// <summary>
        /// Localized message string corresponding to resource_action
        /// </summary>
        /// <value>Localized message string corresponding to resource_action</value>

        [DataMember(Name="resource_action_l10n")]
        public string ResourceActionL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to resource_type
        /// </summary>
        /// <value>Localized message string corresponding to resource_type</value>

        [DataMember(Name="resource_type_l10n")]
        public string ResourceTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to state Was deprecated in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to state Was deprecated in version 1.0.2.</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to phase Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to phase Was added in version 1.0.2.</value>

        [DataMember(Name="phase_l10n")]
        public string PhaseL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to response_status Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to response_status Was added in version 2.0.0.0.</value>

        [DataMember(Name="response_status_l10n")]
        public string ResponseStatusL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of parent_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of parent_id attribute.</value>

        [DataMember(Name="parent")]
        public JobInstance Parent { get; set; }

        /// <summary>
        /// This is the inverse of the resource type job association.
        /// </summary>
        /// <value>This is the inverse of the resource type job association.</value>

        [DataMember(Name="children")]
        public List<JobInstance> Children { get; set; }

        /// <summary>
        /// This is the embeddable reference form of root_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of root_id attribute.</value>

        [DataMember(Name="root")]
        public JobInstance Root { get; set; }

        /// <summary>
        /// This is the inverse of the resource type job association.
        /// </summary>
        /// <value>This is the inverse of the resource type job association.</value>

        [DataMember(Name="leafs")]
        public List<JobInstance> Leafs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ResourceAction: ").Append(ResourceAction).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourceName: ").Append(ResourceName).Append("\n");
            sb.Append("  DescriptionL10n: ").Append(DescriptionL10n).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  EstimatedCompletionTime: ").Append(EstimatedCompletionTime).Append("\n");
            sb.Append("  ProgressPercentage: ").Append(ProgressPercentage).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  RootId: ").Append(RootId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("  ResponseStatus: ").Append(ResponseStatus).Append("\n");
            sb.Append("  StepOrder: ").Append(StepOrder).Append("\n");
            sb.Append("  ResourceActionL10n: ").Append(ResourceActionL10n).Append("\n");
            sb.Append("  ResourceTypeL10n: ").Append(ResourceTypeL10n).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  PhaseL10n: ").Append(PhaseL10n).Append("\n");
            sb.Append("  ResponseStatusL10n: ").Append(ResponseStatusL10n).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Root: ").Append(Root).Append("\n");
            sb.Append("  Leafs: ").Append(Leafs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JobInstance)obj);
        }

        /// <summary>
        /// Returns true if JobInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of JobInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ResourceAction == other.ResourceAction ||
                    ResourceAction != null &&
                    ResourceAction.Equals(other.ResourceAction)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    ResourceId == other.ResourceId ||
                    ResourceId != null &&
                    ResourceId.Equals(other.ResourceId)
                ) && 
                (
                    ResourceName == other.ResourceName ||
                    ResourceName != null &&
                    ResourceName.Equals(other.ResourceName)
                ) && 
                (
                    DescriptionL10n == other.DescriptionL10n ||
                    DescriptionL10n != null &&
                    DescriptionL10n.Equals(other.DescriptionL10n)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    Phase == other.Phase ||
                    Phase != null &&
                    Phase.Equals(other.Phase)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    EstimatedCompletionTime == other.EstimatedCompletionTime ||
                    EstimatedCompletionTime != null &&
                    EstimatedCompletionTime.Equals(other.EstimatedCompletionTime)
                ) && 
                (
                    ProgressPercentage == other.ProgressPercentage ||
                    ProgressPercentage != null &&
                    ProgressPercentage.Equals(other.ProgressPercentage)
                ) && 
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    RootId == other.RootId ||
                    RootId != null &&
                    RootId.Equals(other.RootId)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    ResponseBody == other.ResponseBody ||
                    ResponseBody != null &&
                    ResponseBody.Equals(other.ResponseBody)
                ) && 
                (
                    ResponseStatus == other.ResponseStatus ||
                    ResponseStatus != null &&
                    ResponseStatus.Equals(other.ResponseStatus)
                ) && 
                (
                    StepOrder == other.StepOrder ||
                    StepOrder != null &&
                    StepOrder.Equals(other.StepOrder)
                ) && 
                (
                    ResourceActionL10n == other.ResourceActionL10n ||
                    ResourceActionL10n != null &&
                    ResourceActionL10n.Equals(other.ResourceActionL10n)
                ) && 
                (
                    ResourceTypeL10n == other.ResourceTypeL10n ||
                    ResourceTypeL10n != null &&
                    ResourceTypeL10n.Equals(other.ResourceTypeL10n)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    PhaseL10n == other.PhaseL10n ||
                    PhaseL10n != null &&
                    PhaseL10n.Equals(other.PhaseL10n)
                ) && 
                (
                    ResponseStatusL10n == other.ResponseStatusL10n ||
                    ResponseStatusL10n != null &&
                    ResponseStatusL10n.Equals(other.ResponseStatusL10n)
                ) && 
                (
                    Parent == other.Parent ||
                    Parent != null &&
                    Parent.Equals(other.Parent)
                ) && 
                (
                    Children == other.Children ||
                    Children != null &&
                    Children.SequenceEqual(other.Children)
                ) && 
                (
                    Root == other.Root ||
                    Root != null &&
                    Root.Equals(other.Root)
                ) && 
                (
                    Leafs == other.Leafs ||
                    Leafs != null &&
                    Leafs.SequenceEqual(other.Leafs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ResourceAction != null)
                    hashCode = hashCode * 59 + ResourceAction.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (ResourceId != null)
                    hashCode = hashCode * 59 + ResourceId.GetHashCode();
                    if (ResourceName != null)
                    hashCode = hashCode * 59 + ResourceName.GetHashCode();
                    if (DescriptionL10n != null)
                    hashCode = hashCode * 59 + DescriptionL10n.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (Phase != null)
                    hashCode = hashCode * 59 + Phase.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (EstimatedCompletionTime != null)
                    hashCode = hashCode * 59 + EstimatedCompletionTime.GetHashCode();
                    if (ProgressPercentage != null)
                    hashCode = hashCode * 59 + ProgressPercentage.GetHashCode();
                    if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (RootId != null)
                    hashCode = hashCode * 59 + RootId.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (ResponseBody != null)
                    hashCode = hashCode * 59 + ResponseBody.GetHashCode();
                    if (ResponseStatus != null)
                    hashCode = hashCode * 59 + ResponseStatus.GetHashCode();
                    if (StepOrder != null)
                    hashCode = hashCode * 59 + StepOrder.GetHashCode();
                    if (ResourceActionL10n != null)
                    hashCode = hashCode * 59 + ResourceActionL10n.GetHashCode();
                    if (ResourceTypeL10n != null)
                    hashCode = hashCode * 59 + ResourceTypeL10n.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (PhaseL10n != null)
                    hashCode = hashCode * 59 + PhaseL10n.GetHashCode();
                    if (ResponseStatusL10n != null)
                    hashCode = hashCode * 59 + ResponseStatusL10n.GetHashCode();
                    if (Parent != null)
                    hashCode = hashCode * 59 + Parent.GetHashCode();
                    if (Children != null)
                    hashCode = hashCode * 59 + Children.GetHashCode();
                    if (Root != null)
                    hashCode = hashCode * 59 + Root.GetHashCode();
                    if (Leafs != null)
                    hashCode = hashCode * 59 + Leafs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JobInstance left, JobInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JobInstance left, JobInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
