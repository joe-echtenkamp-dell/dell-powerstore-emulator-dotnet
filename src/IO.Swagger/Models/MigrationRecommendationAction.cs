/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A recommended migration action.
    /// </summary>
    [DataContract]
    public partial class MigrationRecommendationAction : IEquatable<MigrationRecommendationAction>
    { 
        /// <summary>
        /// ID of storage resource migrated by this action.
        /// </summary>
        /// <value>ID of storage resource migrated by this action.</value>
        [Required]
        
        [DataMember(Name="resource_id")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [Required]
        
        [DataMember(Name="resource_type")]
        public MigrationResourceTypeEnum? ResourceType { get; set; }

        /// <summary>
        /// ID of appliance that is the source for this migration action.
        /// </summary>
        /// <value>ID of appliance that is the source for this migration action.</value>
        [Required]
        
        [DataMember(Name="src_appliance_id")]
        public string SrcApplianceId { get; set; }

        /// <summary>
        /// ID of appliance that is the destination for this migration action.
        /// </summary>
        /// <value>ID of appliance that is the destination for this migration action.</value>
        [Required]
        
        [DataMember(Name="dst_appliance_id")]
        public string DstApplianceId { get; set; }

        /// <summary>
        /// Unitless value describing estimated cost to perform relative to other migration actions.
        /// </summary>
        /// <value>Unitless value describing estimated cost to perform relative to other migration actions.</value>
        [Required]
        
        [Range(0, 2147483647)]
        [DataMember(Name="cost")]
        public int? Cost { get; set; }

        /// <summary>
        /// Whether all hosts for the migrating resource have connectivity to the destination appliance.
        /// </summary>
        /// <value>Whether all hosts for the migrating resource have connectivity to the destination appliance.</value>
        [Required]
        
        [DataMember(Name="host_connectivity_to_destination")]
        public bool? HostConnectivityToDestination { get; set; }

        /// <summary>
        /// Gets or Sets ActionState
        /// </summary>
        [Required]
        
        [DataMember(Name="action_state")]
        public MigrationRecommendationActionStateEnum? ActionState { get; set; }

        /// <summary>
        /// Unique ID of the primary object.
        /// </summary>
        /// <value>Unique ID of the primary object.</value>
        [Required]
        
        [DataMember(Name="primary_id")]
        public string PrimaryId { get; set; }

        /// <summary>
        /// Name of the primary object.
        /// </summary>
        /// <value>Name of the primary object.</value>
        [Required]
        
        [DataMember(Name="primary_name")]
        public string PrimaryName { get; set; }

        /// <summary>
        /// Gets or Sets MigrationPrimaryResourceType
        /// </summary>
        [Required]
        
        [DataMember(Name="migration_primary_resource_type")]
        public MigrationRecommendationPrimaryResourceTypeEnum? MigrationPrimaryResourceType { get; set; }

        /// <summary>
        /// Gets or Sets MigrationReason
        /// </summary>
        [Required]
        
        [DataMember(Name="migration_reason")]
        public MigrationRecommendationReasonEnum? MigrationReason { get; set; }

        /// <summary>
        /// Whether this migration action in active or not. New recommendations will consist entirely of active recommendations but this may be changed with the modify operation. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Whether this migration action in active or not. New recommendations will consist entirely of active recommendations but this may be changed with the modify operation. Was added in version 2.0.0.0.</value>

        [DataMember(Name="active")]
        public bool? Active { get; set; }

        /// <summary>
        /// List of appliance ids to which the host attached to this resource has connectivity. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>List of appliance ids to which the host attached to this resource has connectivity. Was added in version 2.0.0.0.</value>

        [DataMember(Name="connected_appliance_ids")]
        public List<string> ConnectedApplianceIds { get; set; }

        /// <summary>
        /// Localized message string corresponding to resource_type
        /// </summary>
        /// <value>Localized message string corresponding to resource_type</value>

        [DataMember(Name="resource_type_l10n")]
        public string ResourceTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to action_state
        /// </summary>
        /// <value>Localized message string corresponding to action_state</value>

        [DataMember(Name="action_state_l10n")]
        public string ActionStateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to migration_primary_resource_type
        /// </summary>
        /// <value>Localized message string corresponding to migration_primary_resource_type</value>

        [DataMember(Name="migration_primary_resource_type_l10n")]
        public string MigrationPrimaryResourceTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to migration_reason
        /// </summary>
        /// <value>Localized message string corresponding to migration_reason</value>

        [DataMember(Name="migration_reason_l10n")]
        public string MigrationReasonL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MigrationRecommendationAction {\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  SrcApplianceId: ").Append(SrcApplianceId).Append("\n");
            sb.Append("  DstApplianceId: ").Append(DstApplianceId).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  HostConnectivityToDestination: ").Append(HostConnectivityToDestination).Append("\n");
            sb.Append("  ActionState: ").Append(ActionState).Append("\n");
            sb.Append("  PrimaryId: ").Append(PrimaryId).Append("\n");
            sb.Append("  PrimaryName: ").Append(PrimaryName).Append("\n");
            sb.Append("  MigrationPrimaryResourceType: ").Append(MigrationPrimaryResourceType).Append("\n");
            sb.Append("  MigrationReason: ").Append(MigrationReason).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ConnectedApplianceIds: ").Append(ConnectedApplianceIds).Append("\n");
            sb.Append("  ResourceTypeL10n: ").Append(ResourceTypeL10n).Append("\n");
            sb.Append("  ActionStateL10n: ").Append(ActionStateL10n).Append("\n");
            sb.Append("  MigrationPrimaryResourceTypeL10n: ").Append(MigrationPrimaryResourceTypeL10n).Append("\n");
            sb.Append("  MigrationReasonL10n: ").Append(MigrationReasonL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MigrationRecommendationAction)obj);
        }

        /// <summary>
        /// Returns true if MigrationRecommendationAction instances are equal
        /// </summary>
        /// <param name="other">Instance of MigrationRecommendationAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MigrationRecommendationAction other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ResourceId == other.ResourceId ||
                    ResourceId != null &&
                    ResourceId.Equals(other.ResourceId)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    SrcApplianceId == other.SrcApplianceId ||
                    SrcApplianceId != null &&
                    SrcApplianceId.Equals(other.SrcApplianceId)
                ) && 
                (
                    DstApplianceId == other.DstApplianceId ||
                    DstApplianceId != null &&
                    DstApplianceId.Equals(other.DstApplianceId)
                ) && 
                (
                    Cost == other.Cost ||
                    Cost != null &&
                    Cost.Equals(other.Cost)
                ) && 
                (
                    HostConnectivityToDestination == other.HostConnectivityToDestination ||
                    HostConnectivityToDestination != null &&
                    HostConnectivityToDestination.Equals(other.HostConnectivityToDestination)
                ) && 
                (
                    ActionState == other.ActionState ||
                    ActionState != null &&
                    ActionState.Equals(other.ActionState)
                ) && 
                (
                    PrimaryId == other.PrimaryId ||
                    PrimaryId != null &&
                    PrimaryId.Equals(other.PrimaryId)
                ) && 
                (
                    PrimaryName == other.PrimaryName ||
                    PrimaryName != null &&
                    PrimaryName.Equals(other.PrimaryName)
                ) && 
                (
                    MigrationPrimaryResourceType == other.MigrationPrimaryResourceType ||
                    MigrationPrimaryResourceType != null &&
                    MigrationPrimaryResourceType.Equals(other.MigrationPrimaryResourceType)
                ) && 
                (
                    MigrationReason == other.MigrationReason ||
                    MigrationReason != null &&
                    MigrationReason.Equals(other.MigrationReason)
                ) && 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                ) && 
                (
                    ConnectedApplianceIds == other.ConnectedApplianceIds ||
                    ConnectedApplianceIds != null &&
                    ConnectedApplianceIds.SequenceEqual(other.ConnectedApplianceIds)
                ) && 
                (
                    ResourceTypeL10n == other.ResourceTypeL10n ||
                    ResourceTypeL10n != null &&
                    ResourceTypeL10n.Equals(other.ResourceTypeL10n)
                ) && 
                (
                    ActionStateL10n == other.ActionStateL10n ||
                    ActionStateL10n != null &&
                    ActionStateL10n.Equals(other.ActionStateL10n)
                ) && 
                (
                    MigrationPrimaryResourceTypeL10n == other.MigrationPrimaryResourceTypeL10n ||
                    MigrationPrimaryResourceTypeL10n != null &&
                    MigrationPrimaryResourceTypeL10n.Equals(other.MigrationPrimaryResourceTypeL10n)
                ) && 
                (
                    MigrationReasonL10n == other.MigrationReasonL10n ||
                    MigrationReasonL10n != null &&
                    MigrationReasonL10n.Equals(other.MigrationReasonL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ResourceId != null)
                    hashCode = hashCode * 59 + ResourceId.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (SrcApplianceId != null)
                    hashCode = hashCode * 59 + SrcApplianceId.GetHashCode();
                    if (DstApplianceId != null)
                    hashCode = hashCode * 59 + DstApplianceId.GetHashCode();
                    if (Cost != null)
                    hashCode = hashCode * 59 + Cost.GetHashCode();
                    if (HostConnectivityToDestination != null)
                    hashCode = hashCode * 59 + HostConnectivityToDestination.GetHashCode();
                    if (ActionState != null)
                    hashCode = hashCode * 59 + ActionState.GetHashCode();
                    if (PrimaryId != null)
                    hashCode = hashCode * 59 + PrimaryId.GetHashCode();
                    if (PrimaryName != null)
                    hashCode = hashCode * 59 + PrimaryName.GetHashCode();
                    if (MigrationPrimaryResourceType != null)
                    hashCode = hashCode * 59 + MigrationPrimaryResourceType.GetHashCode();
                    if (MigrationReason != null)
                    hashCode = hashCode * 59 + MigrationReason.GetHashCode();
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (ConnectedApplianceIds != null)
                    hashCode = hashCode * 59 + ConnectedApplianceIds.GetHashCode();
                    if (ResourceTypeL10n != null)
                    hashCode = hashCode * 59 + ResourceTypeL10n.GetHashCode();
                    if (ActionStateL10n != null)
                    hashCode = hashCode * 59 + ActionStateL10n.GetHashCode();
                    if (MigrationPrimaryResourceTypeL10n != null)
                    hashCode = hashCode * 59 + MigrationPrimaryResourceTypeL10n.GetHashCode();
                    if (MigrationReasonL10n != null)
                    hashCode = hashCode * 59 + MigrationReasonL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MigrationRecommendationAction left, MigrationRecommendationAction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MigrationRecommendationAction left, MigrationRecommendationAction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
