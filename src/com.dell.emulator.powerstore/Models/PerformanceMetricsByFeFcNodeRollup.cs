/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Fibre channel performance metrics for the node rolled up at various rollup intervals.
    /// </summary>
    [DataContract]
    public partial class PerformanceMetricsByFeFcNodeRollup : MetricsGenerateResponse, IEquatable<PerformanceMetricsByFeFcNodeRollup>
    { 
        /// <summary>
        /// Reference to the associated node on which these metrics were recorded.
        /// </summary>
        /// <value>Reference to the associated node on which these metrics were recorded.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// Reference to the associated appliance on which these metrics were recorded. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Reference to the associated appliance on which these metrics were recorded. Was added in version 3.5.0.0.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// End of sample period.
        /// </summary>
        /// <value>End of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Weighted average read latency in microseconds.
        /// </summary>
        /// <value>Weighted average read latency in microseconds.</value>

        [DataMember(Name="avg_read_latency")]
        public float? AvgReadLatency { get; set; }

        /// <summary>
        /// Weighted average  write latency in microseconds.
        /// </summary>
        /// <value>Weighted average  write latency in microseconds.</value>

        [DataMember(Name="avg_write_latency")]
        public float? AvgWriteLatency { get; set; }

        /// <summary>
        /// Weighted average  latency in microseconds.
        /// </summary>
        /// <value>Weighted average  latency in microseconds.</value>

        [DataMember(Name="avg_latency")]
        public float? AvgLatency { get; set; }

        /// <summary>
        /// Weighted average read size in bytes.
        /// </summary>
        /// <value>Weighted average read size in bytes.</value>

        [DataMember(Name="avg_read_size")]
        public float? AvgReadSize { get; set; }

        /// <summary>
        /// Weighted average write size in bytes.
        /// </summary>
        /// <value>Weighted average write size in bytes.</value>

        [DataMember(Name="avg_write_size")]
        public float? AvgWriteSize { get; set; }

        /// <summary>
        /// Average size of read and write operations in bytes.
        /// </summary>
        /// <value>Average size of read and write operations in bytes.</value>

        [DataMember(Name="avg_io_size")]
        public float? AvgIoSize { get; set; }

        /// <summary>
        /// Average reads per second.
        /// </summary>
        /// <value>Average reads per second.</value>

        [DataMember(Name="avg_read_iops")]
        public float? AvgReadIops { get; set; }

        /// <summary>
        /// Average writes per second.
        /// </summary>
        /// <value>Average writes per second.</value>

        [DataMember(Name="avg_write_iops")]
        public float? AvgWriteIops { get; set; }

        /// <summary>
        /// Average total input and output operations per second.
        /// </summary>
        /// <value>Average total input and output operations per second.</value>

        [DataMember(Name="avg_total_iops")]
        public decimal? AvgTotalIops { get; set; }

        /// <summary>
        /// Weighted average read bandwidth in bytes per second.
        /// </summary>
        /// <value>Weighted average read bandwidth in bytes per second.</value>

        [DataMember(Name="avg_read_bandwidth")]
        public float? AvgReadBandwidth { get; set; }

        /// <summary>
        /// Weighted average write bandwidth in bytes per second.
        /// </summary>
        /// <value>Weighted average write bandwidth in bytes per second.</value>

        [DataMember(Name="avg_write_bandwidth")]
        public float? AvgWriteBandwidth { get; set; }

        /// <summary>
        /// Weighted average total bandwidth in bytes per second.
        /// </summary>
        /// <value>Weighted average total bandwidth in bytes per second.</value>

        [DataMember(Name="avg_total_bandwidth")]
        public float? AvgTotalBandwidth { get; set; }

        /// <summary>
        /// Average unaligned read input/output per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Average unaligned read input/output per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="avg_unaligned_read_iops")]
        public float? AvgUnalignedReadIops { get; set; }

        /// <summary>
        /// Average unaligned write input/output per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Average unaligned write input/output per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="avg_unaligned_write_iops")]
        public float? AvgUnalignedWriteIops { get; set; }

        /// <summary>
        /// Average unaligned total input/output per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Average unaligned total input/output per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="avg_unaligned_iops")]
        public float? AvgUnalignedIops { get; set; }

        /// <summary>
        /// Average unaligned read rate in bytes per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Average unaligned read rate in bytes per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="avg_unaligned_read_bandwidth")]
        public float? AvgUnalignedReadBandwidth { get; set; }

        /// <summary>
        /// Average unaligned write rate in bytes per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Average unaligned write rate in bytes per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="avg_unaligned_write_bandwidth")]
        public float? AvgUnalignedWriteBandwidth { get; set; }

        /// <summary>
        /// Average unaligned read/write rate in bytes per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Average unaligned read/write rate in bytes per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="avg_unaligned_bandwidth")]
        public float? AvgUnalignedBandwidth { get; set; }

        /// <summary>
        /// Average number of logins to the target from initiators.
        /// </summary>
        /// <value>Average number of logins to the target from initiators.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="avg_current_logins")]
        public long? AvgCurrentLogins { get; set; }

        /// <summary>
        /// Maximum read latency in microseconds.
        /// </summary>
        /// <value>Maximum read latency in microseconds.</value>

        [DataMember(Name="max_avg_read_latency")]
        public float? MaxAvgReadLatency { get; set; }

        /// <summary>
        /// Maximum of average write latency in microseconds.
        /// </summary>
        /// <value>Maximum of average write latency in microseconds.</value>

        [DataMember(Name="max_avg_write_latency")]
        public float? MaxAvgWriteLatency { get; set; }

        /// <summary>
        /// Maximum of average latency in microseconds.
        /// </summary>
        /// <value>Maximum of average latency in microseconds.</value>

        [DataMember(Name="max_avg_latency")]
        public float? MaxAvgLatency { get; set; }

        /// <summary>
        /// Maximum of average read size in bytes.
        /// </summary>
        /// <value>Maximum of average read size in bytes.</value>

        [DataMember(Name="max_avg_read_size")]
        public float? MaxAvgReadSize { get; set; }

        /// <summary>
        /// Maximum of average write size in bytes.
        /// </summary>
        /// <value>Maximum of average write size in bytes.</value>

        [DataMember(Name="max_avg_write_size")]
        public float? MaxAvgWriteSize { get; set; }

        /// <summary>
        /// Maximum average size of input and output operations in bytes.
        /// </summary>
        /// <value>Maximum average size of input and output operations in bytes.</value>

        [DataMember(Name="max_avg_io_size")]
        public float? MaxAvgIoSize { get; set; }

        /// <summary>
        /// Maximum reads per second.
        /// </summary>
        /// <value>Maximum reads per second.</value>

        [DataMember(Name="max_read_iops")]
        public float? MaxReadIops { get; set; }

        /// <summary>
        /// Maximum writes per second.
        /// </summary>
        /// <value>Maximum writes per second.</value>

        [DataMember(Name="max_write_iops")]
        public float? MaxWriteIops { get; set; }

        /// <summary>
        /// Maximum totals per second.
        /// </summary>
        /// <value>Maximum totals per second.</value>

        [DataMember(Name="max_total_iops")]
        public decimal? MaxTotalIops { get; set; }

        /// <summary>
        /// Maximum read bandwidth in bytes per second.
        /// </summary>
        /// <value>Maximum read bandwidth in bytes per second.</value>

        [DataMember(Name="max_read_bandwidth")]
        public float? MaxReadBandwidth { get; set; }

        /// <summary>
        /// Maximum write bandwidth in bytes per second.
        /// </summary>
        /// <value>Maximum write bandwidth in bytes per second.</value>

        [DataMember(Name="max_write_bandwidth")]
        public float? MaxWriteBandwidth { get; set; }

        /// <summary>
        /// Maximum total bandwidth in bytes per second.
        /// </summary>
        /// <value>Maximum total bandwidth in bytes per second.</value>

        [DataMember(Name="max_total_bandwidth")]
        public float? MaxTotalBandwidth { get; set; }

        /// <summary>
        /// Maximum unaligned read input/output per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Maximum unaligned read input/output per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="max_unaligned_read_iops")]
        public float? MaxUnalignedReadIops { get; set; }

        /// <summary>
        /// Maximum unaligned write input/output per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Maximum unaligned write input/output per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="max_unaligned_write_iops")]
        public float? MaxUnalignedWriteIops { get; set; }

        /// <summary>
        /// Maximum unaligned total input/output per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Maximum unaligned total input/output per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="max_unaligned_iops")]
        public float? MaxUnalignedIops { get; set; }

        /// <summary>
        /// Maximum unaligned read rate in bytes per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Maximum unaligned read rate in bytes per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="max_unaligned_read_bandwidth")]
        public float? MaxUnalignedReadBandwidth { get; set; }

        /// <summary>
        /// Maximum unaligned write rate in bytes per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Maximum unaligned write rate in bytes per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="max_unaligned_write_bandwidth")]
        public float? MaxUnalignedWriteBandwidth { get; set; }

        /// <summary>
        /// Maximum unaligned read/write rate in bytes per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Maximum unaligned read/write rate in bytes per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="max_unaligned_bandwidth")]
        public float? MaxUnalignedBandwidth { get; set; }

        /// <summary>
        /// Maximum number of logins to the target from initiators.
        /// </summary>
        /// <value>Maximum number of logins to the target from initiators.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="max_current_logins")]
        public long? MaxCurrentLogins { get; set; }

        /// <summary>
        /// Average dumped frames per second.
        /// </summary>
        /// <value>Average dumped frames per second.</value>

        [DataMember(Name="avg_dumped_frames_ps")]
        public float? AvgDumpedFramesPs { get; set; }

        /// <summary>
        /// Average loss of signal count per second.
        /// </summary>
        /// <value>Average loss of signal count per second.</value>

        [DataMember(Name="avg_loss_of_signal_count_ps")]
        public float? AvgLossOfSignalCountPs { get; set; }

        /// <summary>
        /// Average invalid crc count per second.
        /// </summary>
        /// <value>Average invalid crc count per second.</value>

        [DataMember(Name="avg_invalid_crc_count_ps")]
        public float? AvgInvalidCrcCountPs { get; set; }

        /// <summary>
        /// Average loss of sync count per second.
        /// </summary>
        /// <value>Average loss of sync count per second.</value>

        [DataMember(Name="avg_loss_of_sync_count_ps")]
        public float? AvgLossOfSyncCountPs { get; set; }

        /// <summary>
        /// Average invalid transmission word count per second.
        /// </summary>
        /// <value>Average invalid transmission word count per second.</value>

        [DataMember(Name="avg_invalid_tx_word_count_ps")]
        public float? AvgInvalidTxWordCountPs { get; set; }

        /// <summary>
        /// Average primitive sequence protocol error count per second.
        /// </summary>
        /// <value>Average primitive sequence protocol error count per second.</value>

        [DataMember(Name="avg_prim_seq_prot_err_count_ps")]
        public float? AvgPrimSeqProtErrCountPs { get; set; }

        /// <summary>
        /// Average link failure count per second.
        /// </summary>
        /// <value>Average link failure count per second.</value>

        [DataMember(Name="avg_link_failure_count_ps")]
        public float? AvgLinkFailureCountPs { get; set; }

        /// <summary>
        /// The maximum dumped frames per second.
        /// </summary>
        /// <value>The maximum dumped frames per second.</value>

        [DataMember(Name="max_dumped_frames_ps")]
        public float? MaxDumpedFramesPs { get; set; }

        /// <summary>
        /// The maximum loss of signal count per second.
        /// </summary>
        /// <value>The maximum loss of signal count per second.</value>

        [DataMember(Name="max_loss_of_signal_count_ps")]
        public float? MaxLossOfSignalCountPs { get; set; }

        /// <summary>
        /// The maximum invalid crc count per second.
        /// </summary>
        /// <value>The maximum invalid crc count per second.</value>

        [DataMember(Name="max_invalid_crc_count_ps")]
        public float? MaxInvalidCrcCountPs { get; set; }

        /// <summary>
        /// The maximum loss of sync count per second.
        /// </summary>
        /// <value>The maximum loss of sync count per second.</value>

        [DataMember(Name="max_loss_of_sync_count_ps")]
        public float? MaxLossOfSyncCountPs { get; set; }

        /// <summary>
        /// The maximum invalid transmission word count per second.
        /// </summary>
        /// <value>The maximum invalid transmission word count per second.</value>

        [DataMember(Name="max_invalid_tx_word_count_ps")]
        public float? MaxInvalidTxWordCountPs { get; set; }

        /// <summary>
        /// The maximum primitive sequence protocol error count per second.
        /// </summary>
        /// <value>The maximum primitive sequence protocol error count per second.</value>

        [DataMember(Name="max_prim_seq_prot_err_count_ps")]
        public float? MaxPrimSeqProtErrCountPs { get; set; }

        /// <summary>
        /// The maximum link failure count per second.
        /// </summary>
        /// <value>The maximum link failure count per second.</value>

        [DataMember(Name="max_link_failure_count_ps")]
        public float? MaxLinkFailureCountPs { get; set; }

        /// <summary>
        /// Number of times the metrics are repeated.
        /// </summary>
        /// <value>Number of times the metrics are repeated.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceMetricsByFeFcNodeRollup {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AvgReadLatency: ").Append(AvgReadLatency).Append("\n");
            sb.Append("  AvgWriteLatency: ").Append(AvgWriteLatency).Append("\n");
            sb.Append("  AvgLatency: ").Append(AvgLatency).Append("\n");
            sb.Append("  AvgReadSize: ").Append(AvgReadSize).Append("\n");
            sb.Append("  AvgWriteSize: ").Append(AvgWriteSize).Append("\n");
            sb.Append("  AvgIoSize: ").Append(AvgIoSize).Append("\n");
            sb.Append("  AvgReadIops: ").Append(AvgReadIops).Append("\n");
            sb.Append("  AvgWriteIops: ").Append(AvgWriteIops).Append("\n");
            sb.Append("  AvgTotalIops: ").Append(AvgTotalIops).Append("\n");
            sb.Append("  AvgReadBandwidth: ").Append(AvgReadBandwidth).Append("\n");
            sb.Append("  AvgWriteBandwidth: ").Append(AvgWriteBandwidth).Append("\n");
            sb.Append("  AvgTotalBandwidth: ").Append(AvgTotalBandwidth).Append("\n");
            sb.Append("  AvgUnalignedReadIops: ").Append(AvgUnalignedReadIops).Append("\n");
            sb.Append("  AvgUnalignedWriteIops: ").Append(AvgUnalignedWriteIops).Append("\n");
            sb.Append("  AvgUnalignedIops: ").Append(AvgUnalignedIops).Append("\n");
            sb.Append("  AvgUnalignedReadBandwidth: ").Append(AvgUnalignedReadBandwidth).Append("\n");
            sb.Append("  AvgUnalignedWriteBandwidth: ").Append(AvgUnalignedWriteBandwidth).Append("\n");
            sb.Append("  AvgUnalignedBandwidth: ").Append(AvgUnalignedBandwidth).Append("\n");
            sb.Append("  AvgCurrentLogins: ").Append(AvgCurrentLogins).Append("\n");
            sb.Append("  MaxAvgReadLatency: ").Append(MaxAvgReadLatency).Append("\n");
            sb.Append("  MaxAvgWriteLatency: ").Append(MaxAvgWriteLatency).Append("\n");
            sb.Append("  MaxAvgLatency: ").Append(MaxAvgLatency).Append("\n");
            sb.Append("  MaxAvgReadSize: ").Append(MaxAvgReadSize).Append("\n");
            sb.Append("  MaxAvgWriteSize: ").Append(MaxAvgWriteSize).Append("\n");
            sb.Append("  MaxAvgIoSize: ").Append(MaxAvgIoSize).Append("\n");
            sb.Append("  MaxReadIops: ").Append(MaxReadIops).Append("\n");
            sb.Append("  MaxWriteIops: ").Append(MaxWriteIops).Append("\n");
            sb.Append("  MaxTotalIops: ").Append(MaxTotalIops).Append("\n");
            sb.Append("  MaxReadBandwidth: ").Append(MaxReadBandwidth).Append("\n");
            sb.Append("  MaxWriteBandwidth: ").Append(MaxWriteBandwidth).Append("\n");
            sb.Append("  MaxTotalBandwidth: ").Append(MaxTotalBandwidth).Append("\n");
            sb.Append("  MaxUnalignedReadIops: ").Append(MaxUnalignedReadIops).Append("\n");
            sb.Append("  MaxUnalignedWriteIops: ").Append(MaxUnalignedWriteIops).Append("\n");
            sb.Append("  MaxUnalignedIops: ").Append(MaxUnalignedIops).Append("\n");
            sb.Append("  MaxUnalignedReadBandwidth: ").Append(MaxUnalignedReadBandwidth).Append("\n");
            sb.Append("  MaxUnalignedWriteBandwidth: ").Append(MaxUnalignedWriteBandwidth).Append("\n");
            sb.Append("  MaxUnalignedBandwidth: ").Append(MaxUnalignedBandwidth).Append("\n");
            sb.Append("  MaxCurrentLogins: ").Append(MaxCurrentLogins).Append("\n");
            sb.Append("  AvgDumpedFramesPs: ").Append(AvgDumpedFramesPs).Append("\n");
            sb.Append("  AvgLossOfSignalCountPs: ").Append(AvgLossOfSignalCountPs).Append("\n");
            sb.Append("  AvgInvalidCrcCountPs: ").Append(AvgInvalidCrcCountPs).Append("\n");
            sb.Append("  AvgLossOfSyncCountPs: ").Append(AvgLossOfSyncCountPs).Append("\n");
            sb.Append("  AvgInvalidTxWordCountPs: ").Append(AvgInvalidTxWordCountPs).Append("\n");
            sb.Append("  AvgPrimSeqProtErrCountPs: ").Append(AvgPrimSeqProtErrCountPs).Append("\n");
            sb.Append("  AvgLinkFailureCountPs: ").Append(AvgLinkFailureCountPs).Append("\n");
            sb.Append("  MaxDumpedFramesPs: ").Append(MaxDumpedFramesPs).Append("\n");
            sb.Append("  MaxLossOfSignalCountPs: ").Append(MaxLossOfSignalCountPs).Append("\n");
            sb.Append("  MaxInvalidCrcCountPs: ").Append(MaxInvalidCrcCountPs).Append("\n");
            sb.Append("  MaxLossOfSyncCountPs: ").Append(MaxLossOfSyncCountPs).Append("\n");
            sb.Append("  MaxInvalidTxWordCountPs: ").Append(MaxInvalidTxWordCountPs).Append("\n");
            sb.Append("  MaxPrimSeqProtErrCountPs: ").Append(MaxPrimSeqProtErrCountPs).Append("\n");
            sb.Append("  MaxLinkFailureCountPs: ").Append(MaxLinkFailureCountPs).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PerformanceMetricsByFeFcNodeRollup)obj);
        }

        /// <summary>
        /// Returns true if PerformanceMetricsByFeFcNodeRollup instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceMetricsByFeFcNodeRollup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceMetricsByFeFcNodeRollup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    AvgReadLatency == other.AvgReadLatency ||
                    AvgReadLatency != null &&
                    AvgReadLatency.Equals(other.AvgReadLatency)
                ) && 
                (
                    AvgWriteLatency == other.AvgWriteLatency ||
                    AvgWriteLatency != null &&
                    AvgWriteLatency.Equals(other.AvgWriteLatency)
                ) && 
                (
                    AvgLatency == other.AvgLatency ||
                    AvgLatency != null &&
                    AvgLatency.Equals(other.AvgLatency)
                ) && 
                (
                    AvgReadSize == other.AvgReadSize ||
                    AvgReadSize != null &&
                    AvgReadSize.Equals(other.AvgReadSize)
                ) && 
                (
                    AvgWriteSize == other.AvgWriteSize ||
                    AvgWriteSize != null &&
                    AvgWriteSize.Equals(other.AvgWriteSize)
                ) && 
                (
                    AvgIoSize == other.AvgIoSize ||
                    AvgIoSize != null &&
                    AvgIoSize.Equals(other.AvgIoSize)
                ) && 
                (
                    AvgReadIops == other.AvgReadIops ||
                    AvgReadIops != null &&
                    AvgReadIops.Equals(other.AvgReadIops)
                ) && 
                (
                    AvgWriteIops == other.AvgWriteIops ||
                    AvgWriteIops != null &&
                    AvgWriteIops.Equals(other.AvgWriteIops)
                ) && 
                (
                    AvgTotalIops == other.AvgTotalIops ||
                    AvgTotalIops != null &&
                    AvgTotalIops.Equals(other.AvgTotalIops)
                ) && 
                (
                    AvgReadBandwidth == other.AvgReadBandwidth ||
                    AvgReadBandwidth != null &&
                    AvgReadBandwidth.Equals(other.AvgReadBandwidth)
                ) && 
                (
                    AvgWriteBandwidth == other.AvgWriteBandwidth ||
                    AvgWriteBandwidth != null &&
                    AvgWriteBandwidth.Equals(other.AvgWriteBandwidth)
                ) && 
                (
                    AvgTotalBandwidth == other.AvgTotalBandwidth ||
                    AvgTotalBandwidth != null &&
                    AvgTotalBandwidth.Equals(other.AvgTotalBandwidth)
                ) && 
                (
                    AvgUnalignedReadIops == other.AvgUnalignedReadIops ||
                    AvgUnalignedReadIops != null &&
                    AvgUnalignedReadIops.Equals(other.AvgUnalignedReadIops)
                ) && 
                (
                    AvgUnalignedWriteIops == other.AvgUnalignedWriteIops ||
                    AvgUnalignedWriteIops != null &&
                    AvgUnalignedWriteIops.Equals(other.AvgUnalignedWriteIops)
                ) && 
                (
                    AvgUnalignedIops == other.AvgUnalignedIops ||
                    AvgUnalignedIops != null &&
                    AvgUnalignedIops.Equals(other.AvgUnalignedIops)
                ) && 
                (
                    AvgUnalignedReadBandwidth == other.AvgUnalignedReadBandwidth ||
                    AvgUnalignedReadBandwidth != null &&
                    AvgUnalignedReadBandwidth.Equals(other.AvgUnalignedReadBandwidth)
                ) && 
                (
                    AvgUnalignedWriteBandwidth == other.AvgUnalignedWriteBandwidth ||
                    AvgUnalignedWriteBandwidth != null &&
                    AvgUnalignedWriteBandwidth.Equals(other.AvgUnalignedWriteBandwidth)
                ) && 
                (
                    AvgUnalignedBandwidth == other.AvgUnalignedBandwidth ||
                    AvgUnalignedBandwidth != null &&
                    AvgUnalignedBandwidth.Equals(other.AvgUnalignedBandwidth)
                ) && 
                (
                    AvgCurrentLogins == other.AvgCurrentLogins ||
                    AvgCurrentLogins != null &&
                    AvgCurrentLogins.Equals(other.AvgCurrentLogins)
                ) && 
                (
                    MaxAvgReadLatency == other.MaxAvgReadLatency ||
                    MaxAvgReadLatency != null &&
                    MaxAvgReadLatency.Equals(other.MaxAvgReadLatency)
                ) && 
                (
                    MaxAvgWriteLatency == other.MaxAvgWriteLatency ||
                    MaxAvgWriteLatency != null &&
                    MaxAvgWriteLatency.Equals(other.MaxAvgWriteLatency)
                ) && 
                (
                    MaxAvgLatency == other.MaxAvgLatency ||
                    MaxAvgLatency != null &&
                    MaxAvgLatency.Equals(other.MaxAvgLatency)
                ) && 
                (
                    MaxAvgReadSize == other.MaxAvgReadSize ||
                    MaxAvgReadSize != null &&
                    MaxAvgReadSize.Equals(other.MaxAvgReadSize)
                ) && 
                (
                    MaxAvgWriteSize == other.MaxAvgWriteSize ||
                    MaxAvgWriteSize != null &&
                    MaxAvgWriteSize.Equals(other.MaxAvgWriteSize)
                ) && 
                (
                    MaxAvgIoSize == other.MaxAvgIoSize ||
                    MaxAvgIoSize != null &&
                    MaxAvgIoSize.Equals(other.MaxAvgIoSize)
                ) && 
                (
                    MaxReadIops == other.MaxReadIops ||
                    MaxReadIops != null &&
                    MaxReadIops.Equals(other.MaxReadIops)
                ) && 
                (
                    MaxWriteIops == other.MaxWriteIops ||
                    MaxWriteIops != null &&
                    MaxWriteIops.Equals(other.MaxWriteIops)
                ) && 
                (
                    MaxTotalIops == other.MaxTotalIops ||
                    MaxTotalIops != null &&
                    MaxTotalIops.Equals(other.MaxTotalIops)
                ) && 
                (
                    MaxReadBandwidth == other.MaxReadBandwidth ||
                    MaxReadBandwidth != null &&
                    MaxReadBandwidth.Equals(other.MaxReadBandwidth)
                ) && 
                (
                    MaxWriteBandwidth == other.MaxWriteBandwidth ||
                    MaxWriteBandwidth != null &&
                    MaxWriteBandwidth.Equals(other.MaxWriteBandwidth)
                ) && 
                (
                    MaxTotalBandwidth == other.MaxTotalBandwidth ||
                    MaxTotalBandwidth != null &&
                    MaxTotalBandwidth.Equals(other.MaxTotalBandwidth)
                ) && 
                (
                    MaxUnalignedReadIops == other.MaxUnalignedReadIops ||
                    MaxUnalignedReadIops != null &&
                    MaxUnalignedReadIops.Equals(other.MaxUnalignedReadIops)
                ) && 
                (
                    MaxUnalignedWriteIops == other.MaxUnalignedWriteIops ||
                    MaxUnalignedWriteIops != null &&
                    MaxUnalignedWriteIops.Equals(other.MaxUnalignedWriteIops)
                ) && 
                (
                    MaxUnalignedIops == other.MaxUnalignedIops ||
                    MaxUnalignedIops != null &&
                    MaxUnalignedIops.Equals(other.MaxUnalignedIops)
                ) && 
                (
                    MaxUnalignedReadBandwidth == other.MaxUnalignedReadBandwidth ||
                    MaxUnalignedReadBandwidth != null &&
                    MaxUnalignedReadBandwidth.Equals(other.MaxUnalignedReadBandwidth)
                ) && 
                (
                    MaxUnalignedWriteBandwidth == other.MaxUnalignedWriteBandwidth ||
                    MaxUnalignedWriteBandwidth != null &&
                    MaxUnalignedWriteBandwidth.Equals(other.MaxUnalignedWriteBandwidth)
                ) && 
                (
                    MaxUnalignedBandwidth == other.MaxUnalignedBandwidth ||
                    MaxUnalignedBandwidth != null &&
                    MaxUnalignedBandwidth.Equals(other.MaxUnalignedBandwidth)
                ) && 
                (
                    MaxCurrentLogins == other.MaxCurrentLogins ||
                    MaxCurrentLogins != null &&
                    MaxCurrentLogins.Equals(other.MaxCurrentLogins)
                ) && 
                (
                    AvgDumpedFramesPs == other.AvgDumpedFramesPs ||
                    AvgDumpedFramesPs != null &&
                    AvgDumpedFramesPs.Equals(other.AvgDumpedFramesPs)
                ) && 
                (
                    AvgLossOfSignalCountPs == other.AvgLossOfSignalCountPs ||
                    AvgLossOfSignalCountPs != null &&
                    AvgLossOfSignalCountPs.Equals(other.AvgLossOfSignalCountPs)
                ) && 
                (
                    AvgInvalidCrcCountPs == other.AvgInvalidCrcCountPs ||
                    AvgInvalidCrcCountPs != null &&
                    AvgInvalidCrcCountPs.Equals(other.AvgInvalidCrcCountPs)
                ) && 
                (
                    AvgLossOfSyncCountPs == other.AvgLossOfSyncCountPs ||
                    AvgLossOfSyncCountPs != null &&
                    AvgLossOfSyncCountPs.Equals(other.AvgLossOfSyncCountPs)
                ) && 
                (
                    AvgInvalidTxWordCountPs == other.AvgInvalidTxWordCountPs ||
                    AvgInvalidTxWordCountPs != null &&
                    AvgInvalidTxWordCountPs.Equals(other.AvgInvalidTxWordCountPs)
                ) && 
                (
                    AvgPrimSeqProtErrCountPs == other.AvgPrimSeqProtErrCountPs ||
                    AvgPrimSeqProtErrCountPs != null &&
                    AvgPrimSeqProtErrCountPs.Equals(other.AvgPrimSeqProtErrCountPs)
                ) && 
                (
                    AvgLinkFailureCountPs == other.AvgLinkFailureCountPs ||
                    AvgLinkFailureCountPs != null &&
                    AvgLinkFailureCountPs.Equals(other.AvgLinkFailureCountPs)
                ) && 
                (
                    MaxDumpedFramesPs == other.MaxDumpedFramesPs ||
                    MaxDumpedFramesPs != null &&
                    MaxDumpedFramesPs.Equals(other.MaxDumpedFramesPs)
                ) && 
                (
                    MaxLossOfSignalCountPs == other.MaxLossOfSignalCountPs ||
                    MaxLossOfSignalCountPs != null &&
                    MaxLossOfSignalCountPs.Equals(other.MaxLossOfSignalCountPs)
                ) && 
                (
                    MaxInvalidCrcCountPs == other.MaxInvalidCrcCountPs ||
                    MaxInvalidCrcCountPs != null &&
                    MaxInvalidCrcCountPs.Equals(other.MaxInvalidCrcCountPs)
                ) && 
                (
                    MaxLossOfSyncCountPs == other.MaxLossOfSyncCountPs ||
                    MaxLossOfSyncCountPs != null &&
                    MaxLossOfSyncCountPs.Equals(other.MaxLossOfSyncCountPs)
                ) && 
                (
                    MaxInvalidTxWordCountPs == other.MaxInvalidTxWordCountPs ||
                    MaxInvalidTxWordCountPs != null &&
                    MaxInvalidTxWordCountPs.Equals(other.MaxInvalidTxWordCountPs)
                ) && 
                (
                    MaxPrimSeqProtErrCountPs == other.MaxPrimSeqProtErrCountPs ||
                    MaxPrimSeqProtErrCountPs != null &&
                    MaxPrimSeqProtErrCountPs.Equals(other.MaxPrimSeqProtErrCountPs)
                ) && 
                (
                    MaxLinkFailureCountPs == other.MaxLinkFailureCountPs ||
                    MaxLinkFailureCountPs != null &&
                    MaxLinkFailureCountPs.Equals(other.MaxLinkFailureCountPs)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (AvgReadLatency != null)
                    hashCode = hashCode * 59 + AvgReadLatency.GetHashCode();
                    if (AvgWriteLatency != null)
                    hashCode = hashCode * 59 + AvgWriteLatency.GetHashCode();
                    if (AvgLatency != null)
                    hashCode = hashCode * 59 + AvgLatency.GetHashCode();
                    if (AvgReadSize != null)
                    hashCode = hashCode * 59 + AvgReadSize.GetHashCode();
                    if (AvgWriteSize != null)
                    hashCode = hashCode * 59 + AvgWriteSize.GetHashCode();
                    if (AvgIoSize != null)
                    hashCode = hashCode * 59 + AvgIoSize.GetHashCode();
                    if (AvgReadIops != null)
                    hashCode = hashCode * 59 + AvgReadIops.GetHashCode();
                    if (AvgWriteIops != null)
                    hashCode = hashCode * 59 + AvgWriteIops.GetHashCode();
                    if (AvgTotalIops != null)
                    hashCode = hashCode * 59 + AvgTotalIops.GetHashCode();
                    if (AvgReadBandwidth != null)
                    hashCode = hashCode * 59 + AvgReadBandwidth.GetHashCode();
                    if (AvgWriteBandwidth != null)
                    hashCode = hashCode * 59 + AvgWriteBandwidth.GetHashCode();
                    if (AvgTotalBandwidth != null)
                    hashCode = hashCode * 59 + AvgTotalBandwidth.GetHashCode();
                    if (AvgUnalignedReadIops != null)
                    hashCode = hashCode * 59 + AvgUnalignedReadIops.GetHashCode();
                    if (AvgUnalignedWriteIops != null)
                    hashCode = hashCode * 59 + AvgUnalignedWriteIops.GetHashCode();
                    if (AvgUnalignedIops != null)
                    hashCode = hashCode * 59 + AvgUnalignedIops.GetHashCode();
                    if (AvgUnalignedReadBandwidth != null)
                    hashCode = hashCode * 59 + AvgUnalignedReadBandwidth.GetHashCode();
                    if (AvgUnalignedWriteBandwidth != null)
                    hashCode = hashCode * 59 + AvgUnalignedWriteBandwidth.GetHashCode();
                    if (AvgUnalignedBandwidth != null)
                    hashCode = hashCode * 59 + AvgUnalignedBandwidth.GetHashCode();
                    if (AvgCurrentLogins != null)
                    hashCode = hashCode * 59 + AvgCurrentLogins.GetHashCode();
                    if (MaxAvgReadLatency != null)
                    hashCode = hashCode * 59 + MaxAvgReadLatency.GetHashCode();
                    if (MaxAvgWriteLatency != null)
                    hashCode = hashCode * 59 + MaxAvgWriteLatency.GetHashCode();
                    if (MaxAvgLatency != null)
                    hashCode = hashCode * 59 + MaxAvgLatency.GetHashCode();
                    if (MaxAvgReadSize != null)
                    hashCode = hashCode * 59 + MaxAvgReadSize.GetHashCode();
                    if (MaxAvgWriteSize != null)
                    hashCode = hashCode * 59 + MaxAvgWriteSize.GetHashCode();
                    if (MaxAvgIoSize != null)
                    hashCode = hashCode * 59 + MaxAvgIoSize.GetHashCode();
                    if (MaxReadIops != null)
                    hashCode = hashCode * 59 + MaxReadIops.GetHashCode();
                    if (MaxWriteIops != null)
                    hashCode = hashCode * 59 + MaxWriteIops.GetHashCode();
                    if (MaxTotalIops != null)
                    hashCode = hashCode * 59 + MaxTotalIops.GetHashCode();
                    if (MaxReadBandwidth != null)
                    hashCode = hashCode * 59 + MaxReadBandwidth.GetHashCode();
                    if (MaxWriteBandwidth != null)
                    hashCode = hashCode * 59 + MaxWriteBandwidth.GetHashCode();
                    if (MaxTotalBandwidth != null)
                    hashCode = hashCode * 59 + MaxTotalBandwidth.GetHashCode();
                    if (MaxUnalignedReadIops != null)
                    hashCode = hashCode * 59 + MaxUnalignedReadIops.GetHashCode();
                    if (MaxUnalignedWriteIops != null)
                    hashCode = hashCode * 59 + MaxUnalignedWriteIops.GetHashCode();
                    if (MaxUnalignedIops != null)
                    hashCode = hashCode * 59 + MaxUnalignedIops.GetHashCode();
                    if (MaxUnalignedReadBandwidth != null)
                    hashCode = hashCode * 59 + MaxUnalignedReadBandwidth.GetHashCode();
                    if (MaxUnalignedWriteBandwidth != null)
                    hashCode = hashCode * 59 + MaxUnalignedWriteBandwidth.GetHashCode();
                    if (MaxUnalignedBandwidth != null)
                    hashCode = hashCode * 59 + MaxUnalignedBandwidth.GetHashCode();
                    if (MaxCurrentLogins != null)
                    hashCode = hashCode * 59 + MaxCurrentLogins.GetHashCode();
                    if (AvgDumpedFramesPs != null)
                    hashCode = hashCode * 59 + AvgDumpedFramesPs.GetHashCode();
                    if (AvgLossOfSignalCountPs != null)
                    hashCode = hashCode * 59 + AvgLossOfSignalCountPs.GetHashCode();
                    if (AvgInvalidCrcCountPs != null)
                    hashCode = hashCode * 59 + AvgInvalidCrcCountPs.GetHashCode();
                    if (AvgLossOfSyncCountPs != null)
                    hashCode = hashCode * 59 + AvgLossOfSyncCountPs.GetHashCode();
                    if (AvgInvalidTxWordCountPs != null)
                    hashCode = hashCode * 59 + AvgInvalidTxWordCountPs.GetHashCode();
                    if (AvgPrimSeqProtErrCountPs != null)
                    hashCode = hashCode * 59 + AvgPrimSeqProtErrCountPs.GetHashCode();
                    if (AvgLinkFailureCountPs != null)
                    hashCode = hashCode * 59 + AvgLinkFailureCountPs.GetHashCode();
                    if (MaxDumpedFramesPs != null)
                    hashCode = hashCode * 59 + MaxDumpedFramesPs.GetHashCode();
                    if (MaxLossOfSignalCountPs != null)
                    hashCode = hashCode * 59 + MaxLossOfSignalCountPs.GetHashCode();
                    if (MaxInvalidCrcCountPs != null)
                    hashCode = hashCode * 59 + MaxInvalidCrcCountPs.GetHashCode();
                    if (MaxLossOfSyncCountPs != null)
                    hashCode = hashCode * 59 + MaxLossOfSyncCountPs.GetHashCode();
                    if (MaxInvalidTxWordCountPs != null)
                    hashCode = hashCode * 59 + MaxInvalidTxWordCountPs.GetHashCode();
                    if (MaxPrimSeqProtErrCountPs != null)
                    hashCode = hashCode * 59 + MaxPrimSeqProtErrCountPs.GetHashCode();
                    if (MaxLinkFailureCountPs != null)
                    hashCode = hashCode * 59 + MaxLinkFailureCountPs.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PerformanceMetricsByFeFcNodeRollup left, PerformanceMetricsByFeFcNodeRollup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PerformanceMetricsByFeFcNodeRollup left, PerformanceMetricsByFeFcNodeRollup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
