/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Summary of nfs level performance metric data for the period beginning with timestamp, including the average and maximum values for that period. 
    /// </summary>
    [DataContract]
    public partial class BasePerformanceMetricsByNfsv3Rollup : IEquatable<BasePerformanceMetricsByNfsv3Rollup>
    { 
        /// <summary>
        /// Unique identifier of the node.
        /// </summary>
        /// <value>Unique identifier of the node.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// Unique identifier of the appliance. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the appliance. Was added in version 3.0.0.0.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Time at the beginning of sample period.
        /// </summary>
        /// <value>Time at the beginning of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Number of consecutive sampling periods during which there were no changes in the metrics values.If the value is omitted from the response, it is 1 (no additional repeats).
        /// </summary>
        /// <value>Number of consecutive sampling periods during which there were no changes in the metrics values.If the value is omitted from the response, it is 1 (no additional repeats).</value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Average md operations per second.
        /// </summary>
        /// <value>Average md operations per second.</value>

        [DataMember(Name="avg_md_ops")]
        public float? AvgMdOps { get; set; }

        /// <summary>
        /// Max md operations per second. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Max md operations per second. Was added in version 3.0.0.0.</value>

        [DataMember(Name="max_md_ops")]
        public float? MaxMdOps { get; set; }

        /// <summary>
        /// Max failed operations per second.
        /// </summary>
        /// <value>Max failed operations per second.</value>

        [DataMember(Name="max_failed_md_ops")]
        public float? MaxFailedMdOps { get; set; }

        /// <summary>
        /// Average failed operations per second.
        /// </summary>
        /// <value>Average failed operations per second.</value>

        [DataMember(Name="avg_failed_md_ops")]
        public float? AvgFailedMdOps { get; set; }

        /// <summary>
        /// Average md latency per second.
        /// </summary>
        /// <value>Average md latency per second.</value>

        [DataMember(Name="avg_md_latency")]
        public float? AvgMdLatency { get; set; }

        /// <summary>
        /// Maximum average md latency per second.
        /// </summary>
        /// <value>Maximum average md latency per second.</value>

        [DataMember(Name="max_avg_md_latency")]
        public float? MaxAvgMdLatency { get; set; }

        /// <summary>
        /// Maximum read operations per second.
        /// </summary>
        /// <value>Maximum read operations per second.</value>

        [DataMember(Name="max_read_iops")]
        public float? MaxReadIops { get; set; }

        /// <summary>
        /// Average read operations per second.
        /// </summary>
        /// <value>Average read operations per second.</value>

        [DataMember(Name="avg_read_iops")]
        public float? AvgReadIops { get; set; }

        /// <summary>
        /// Maximum write operations per second.
        /// </summary>
        /// <value>Maximum write operations per second.</value>

        [DataMember(Name="max_write_iops")]
        public float? MaxWriteIops { get; set; }

        /// <summary>
        /// Average write operations per second.
        /// </summary>
        /// <value>Average write operations per second.</value>

        [DataMember(Name="avg_write_iops")]
        public float? AvgWriteIops { get; set; }

        /// <summary>
        /// Maximum read and write operations per second.
        /// </summary>
        /// <value>Maximum read and write operations per second.</value>

        [DataMember(Name="max_total_iops")]
        public float? MaxTotalIops { get; set; }

        /// <summary>
        /// Average read and write operations per second.
        /// </summary>
        /// <value>Average read and write operations per second.</value>

        [DataMember(Name="avg_total_iops")]
        public float? AvgTotalIops { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasePerformanceMetricsByNfsv3Rollup {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("  AvgMdOps: ").Append(AvgMdOps).Append("\n");
            sb.Append("  MaxMdOps: ").Append(MaxMdOps).Append("\n");
            sb.Append("  MaxFailedMdOps: ").Append(MaxFailedMdOps).Append("\n");
            sb.Append("  AvgFailedMdOps: ").Append(AvgFailedMdOps).Append("\n");
            sb.Append("  AvgMdLatency: ").Append(AvgMdLatency).Append("\n");
            sb.Append("  MaxAvgMdLatency: ").Append(MaxAvgMdLatency).Append("\n");
            sb.Append("  MaxReadIops: ").Append(MaxReadIops).Append("\n");
            sb.Append("  AvgReadIops: ").Append(AvgReadIops).Append("\n");
            sb.Append("  MaxWriteIops: ").Append(MaxWriteIops).Append("\n");
            sb.Append("  AvgWriteIops: ").Append(AvgWriteIops).Append("\n");
            sb.Append("  MaxTotalIops: ").Append(MaxTotalIops).Append("\n");
            sb.Append("  AvgTotalIops: ").Append(AvgTotalIops).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BasePerformanceMetricsByNfsv3Rollup)obj);
        }

        /// <summary>
        /// Returns true if BasePerformanceMetricsByNfsv3Rollup instances are equal
        /// </summary>
        /// <param name="other">Instance of BasePerformanceMetricsByNfsv3Rollup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasePerformanceMetricsByNfsv3Rollup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                ) && 
                (
                    AvgMdOps == other.AvgMdOps ||
                    AvgMdOps != null &&
                    AvgMdOps.Equals(other.AvgMdOps)
                ) && 
                (
                    MaxMdOps == other.MaxMdOps ||
                    MaxMdOps != null &&
                    MaxMdOps.Equals(other.MaxMdOps)
                ) && 
                (
                    MaxFailedMdOps == other.MaxFailedMdOps ||
                    MaxFailedMdOps != null &&
                    MaxFailedMdOps.Equals(other.MaxFailedMdOps)
                ) && 
                (
                    AvgFailedMdOps == other.AvgFailedMdOps ||
                    AvgFailedMdOps != null &&
                    AvgFailedMdOps.Equals(other.AvgFailedMdOps)
                ) && 
                (
                    AvgMdLatency == other.AvgMdLatency ||
                    AvgMdLatency != null &&
                    AvgMdLatency.Equals(other.AvgMdLatency)
                ) && 
                (
                    MaxAvgMdLatency == other.MaxAvgMdLatency ||
                    MaxAvgMdLatency != null &&
                    MaxAvgMdLatency.Equals(other.MaxAvgMdLatency)
                ) && 
                (
                    MaxReadIops == other.MaxReadIops ||
                    MaxReadIops != null &&
                    MaxReadIops.Equals(other.MaxReadIops)
                ) && 
                (
                    AvgReadIops == other.AvgReadIops ||
                    AvgReadIops != null &&
                    AvgReadIops.Equals(other.AvgReadIops)
                ) && 
                (
                    MaxWriteIops == other.MaxWriteIops ||
                    MaxWriteIops != null &&
                    MaxWriteIops.Equals(other.MaxWriteIops)
                ) && 
                (
                    AvgWriteIops == other.AvgWriteIops ||
                    AvgWriteIops != null &&
                    AvgWriteIops.Equals(other.AvgWriteIops)
                ) && 
                (
                    MaxTotalIops == other.MaxTotalIops ||
                    MaxTotalIops != null &&
                    MaxTotalIops.Equals(other.MaxTotalIops)
                ) && 
                (
                    AvgTotalIops == other.AvgTotalIops ||
                    AvgTotalIops != null &&
                    AvgTotalIops.Equals(other.AvgTotalIops)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                    if (AvgMdOps != null)
                    hashCode = hashCode * 59 + AvgMdOps.GetHashCode();
                    if (MaxMdOps != null)
                    hashCode = hashCode * 59 + MaxMdOps.GetHashCode();
                    if (MaxFailedMdOps != null)
                    hashCode = hashCode * 59 + MaxFailedMdOps.GetHashCode();
                    if (AvgFailedMdOps != null)
                    hashCode = hashCode * 59 + AvgFailedMdOps.GetHashCode();
                    if (AvgMdLatency != null)
                    hashCode = hashCode * 59 + AvgMdLatency.GetHashCode();
                    if (MaxAvgMdLatency != null)
                    hashCode = hashCode * 59 + MaxAvgMdLatency.GetHashCode();
                    if (MaxReadIops != null)
                    hashCode = hashCode * 59 + MaxReadIops.GetHashCode();
                    if (AvgReadIops != null)
                    hashCode = hashCode * 59 + AvgReadIops.GetHashCode();
                    if (MaxWriteIops != null)
                    hashCode = hashCode * 59 + MaxWriteIops.GetHashCode();
                    if (AvgWriteIops != null)
                    hashCode = hashCode * 59 + AvgWriteIops.GetHashCode();
                    if (MaxTotalIops != null)
                    hashCode = hashCode * 59 + MaxTotalIops.GetHashCode();
                    if (AvgTotalIops != null)
                    hashCode = hashCode * 59 + AvgTotalIops.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BasePerformanceMetricsByNfsv3Rollup left, BasePerformanceMetricsByNfsv3Rollup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BasePerformanceMetricsByNfsv3Rollup left, BasePerformanceMetricsByNfsv3Rollup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
