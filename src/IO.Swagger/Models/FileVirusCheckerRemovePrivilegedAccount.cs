/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters of virus_checker add/remove privileged account operation. Was added in version 4.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileVirusCheckerRemovePrivilegedAccount : IEquatable<FileVirusCheckerRemovePrivilegedAccount>
    { 
        /// <summary>
        /// Account to which AV privilege will be granted/Removed, using the format &#39;domain&#39;\\\\&#39;account&#39;. &#39;domain&#39; can be domain name, netbios name, or empty to set the privilege to a local account. &#39;account&#39; can be a user name or a group name. 
        /// </summary>
        /// <value>Account to which AV privilege will be granted/Removed, using the format &#39;domain&#39;\\\\&#39;account&#39;. &#39;domain&#39; can be domain name, netbios name, or empty to set the privilege to a local account. &#39;account&#39; can be a user name or a group name. </value>
        [Required]
        
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="account")]
        public string Account { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileVirusCheckerRemovePrivilegedAccount {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileVirusCheckerRemovePrivilegedAccount)obj);
        }

        /// <summary>
        /// Returns true if FileVirusCheckerRemovePrivilegedAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of FileVirusCheckerRemovePrivilegedAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileVirusCheckerRemovePrivilegedAccount other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileVirusCheckerRemovePrivilegedAccount left, FileVirusCheckerRemovePrivilegedAccount right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileVirusCheckerRemovePrivilegedAccount left, FileVirusCheckerRemovePrivilegedAccount right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
