/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Information about a universal consistency group. Was added in version 4.0.0.0. This resource type has queriable association from remote_system
    /// </summary>
    [DataContract]
    public partial class ImportUniversalConsistencyGroupInstance : IEquatable<ImportUniversalConsistencyGroupInstance>
    { 
        /// <summary>
        /// Unique identifier of the universal consistency group.
        /// </summary>
        /// <value>Unique identifier of the universal consistency group.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the universal consistency group. After import is completed this name will be applied to the new consistency group.   This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the universal consistency group. After import is completed this name will be applied to the new consistency group.   This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Unique identifier of the Remote storage system to which the Universal volume belongs.
        /// </summary>
        /// <value>Unique identifier of the Remote storage system to which the Universal volume belongs.</value>

        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Gets or Sets ImportableCriteria
        /// </summary>

        [DataMember(Name="importable_criteria")]
        public CGImportableCriteriaEnum? ImportableCriteria { get; set; }

        /// <summary>
        /// Localized message string corresponding to importable_criteria Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to importable_criteria Was added in version 4.0.0.0.</value>

        [DataMember(Name="importable_criteria_l10n")]
        public string ImportableCriteriaL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of remote_system_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of remote_system_id attribute.</value>

        [DataMember(Name="remote_system")]
        public RemoteSystemInstance RemoteSystem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportUniversalConsistencyGroupInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  ImportableCriteria: ").Append(ImportableCriteria).Append("\n");
            sb.Append("  ImportableCriteriaL10n: ").Append(ImportableCriteriaL10n).Append("\n");
            sb.Append("  RemoteSystem: ").Append(RemoteSystem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportUniversalConsistencyGroupInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportUniversalConsistencyGroupInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportUniversalConsistencyGroupInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportUniversalConsistencyGroupInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    ImportableCriteria == other.ImportableCriteria ||
                    ImportableCriteria != null &&
                    ImportableCriteria.Equals(other.ImportableCriteria)
                ) && 
                (
                    ImportableCriteriaL10n == other.ImportableCriteriaL10n ||
                    ImportableCriteriaL10n != null &&
                    ImportableCriteriaL10n.Equals(other.ImportableCriteriaL10n)
                ) && 
                (
                    RemoteSystem == other.RemoteSystem ||
                    RemoteSystem != null &&
                    RemoteSystem.Equals(other.RemoteSystem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (ImportableCriteria != null)
                    hashCode = hashCode * 59 + ImportableCriteria.GetHashCode();
                    if (ImportableCriteriaL10n != null)
                    hashCode = hashCode * 59 + ImportableCriteriaL10n.GetHashCode();
                    if (RemoteSystem != null)
                    hashCode = hashCode * 59 + RemoteSystem.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportUniversalConsistencyGroupInstance left, ImportUniversalConsistencyGroupInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportUniversalConsistencyGroupInstance left, ImportUniversalConsistencyGroupInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
