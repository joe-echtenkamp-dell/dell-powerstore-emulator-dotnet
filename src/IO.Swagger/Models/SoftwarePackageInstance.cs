/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// New releases of software are delivered in packages. Packages contain upgrade content that manage feature addition, modification, and removal. A software package contains the upgrade content (a collection of files and data) and metadata required to upgrade the PowerStore cluster to a new version of software. 
    /// </summary>
    [DataContract]
    public partial class SoftwarePackageInstance : IEquatable<SoftwarePackageInstance>
    { 
        /// <summary>
        /// Unique identifier of the software package.
        /// </summary>
        /// <value>Unique identifier of the software package.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the software package.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the software package.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Summary of the contents in this package.
        /// </summary>
        /// <value>Summary of the contents in this package.</value>

        [DataMember(Name="description_l10n")]
        public string DescriptionL10n { get; set; }

        /// <summary>
        /// Explanation of why this software release is urgently recommended for this cluster.  If is_urgent is false, justification will be empty.
        /// </summary>
        /// <value>Explanation of why this software release is urgently recommended for this cluster.  If is_urgent is false, justification will be empty.</value>

        [DataMember(Name="justification_l10n")]
        public string JustificationL10n { get; set; }

        /// <summary>
        /// Gets or Sets SoftwarePackageType
        /// </summary>

        [DataMember(Name="software_package_type")]
        public SoftwarePackageTypeEnum? SoftwarePackageType { get; set; }

        /// <summary>
        /// Gets or Sets SoftwarePackageState
        /// </summary>

        [DataMember(Name="software_package_state")]
        public SoftwarePackageStateEnum? SoftwarePackageState { get; set; }

        /// <summary>
        /// File size of the software package in bytes.
        /// </summary>
        /// <value>File size of the software package in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="size")]
        public long? Size { get; set; }

        /// <summary>
        /// Whether a reboot is required during the upgrade process.
        /// </summary>
        /// <value>Whether a reboot is required during the upgrade process.</value>

        [DataMember(Name="is_reboot_required")]
        public bool? IsRebootRequired { get; set; }

        /// <summary>
        /// Version number of the software package.
        /// </summary>
        /// <value>Version number of the software package.</value>

        [DataMember(Name="release_version")]
        public string ReleaseVersion { get; set; }

        /// <summary>
        /// Build number of the software package. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Build number of the software package. Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_version")]
        public string BuildVersion { get; set; }

        /// <summary>
        /// Date and time when this software package was produced.
        /// </summary>
        /// <value>Date and time when this software package was produced.</value>

        [DataMember(Name="release_timestamp")]
        public DateTime? ReleaseTimestamp { get; set; }

        /// <summary>
        /// Date and time when this software package was successfully installed and committed on the cluster. If the software package has not been committed, this value is null.
        /// </summary>
        /// <value>Date and time when this software package was successfully installed and committed on the cluster. If the software package has not been committed, this value is null.</value>

        [DataMember(Name="installed_date")]
        public DateTime? InstalledDate { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_flavor")]
        public SoftwarePackageBuildFlavorEnum? BuildFlavor { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_type")]
        public SoftwarePackageBuildTypeEnum? BuildType { get; set; }

        /// <summary>
        /// Unique identifier of this build. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Unique identifier of this build. Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_id")]
        public string BuildId { get; set; }

        /// <summary>
        /// Whether a software package was automatically downloaded rather than uploaded by a user. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Whether a software package was automatically downloaded rather than uploaded by a user. Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_autodownloaded")]
        public bool? IsAutodownloaded { get; set; }

        /// <summary>
        /// A link to a knowledge base article associated with this software package. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>A link to a knowledge base article associated with this software package. Was added in version 4.0.0.0.</value>

        [DataMember(Name="kb_article_link")]
        public string KbArticleLink { get; set; }

        /// <summary>
        /// Minimum version required for this software_package to be installed.  This will be empty if the dependency is already met. Packages with dependencies cannot be downloaded. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Minimum version required for this software_package to be installed.  This will be empty if the dependency is already met. Packages with dependencies cannot be downloaded. Was added in version 4.0.0.0.</value>

        [DataMember(Name="dependent_version")]
        public string DependentVersion { get; set; }

        /// <summary>
        /// If true, then installation of this package is urgently recommended. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>If true, then installation of this package is urgently recommended. Was added in version 4.0.0.0.</value>

        [DataMember(Name="is_urgent")]
        public bool? IsUrgent { get; set; }

        /// <summary>
        /// Localized message string corresponding to software_package_type
        /// </summary>
        /// <value>Localized message string corresponding to software_package_type</value>

        [DataMember(Name="software_package_type_l10n")]
        public string SoftwarePackageTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to software_package_state
        /// </summary>
        /// <value>Localized message string corresponding to software_package_state</value>

        [DataMember(Name="software_package_state_l10n")]
        public string SoftwarePackageStateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to build_flavor Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to build_flavor Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_flavor_l10n")]
        public string BuildFlavorL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to build_type Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to build_type Was added in version 2.0.0.0.</value>

        [DataMember(Name="build_type_l10n")]
        public string BuildTypeL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SoftwarePackageInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DescriptionL10n: ").Append(DescriptionL10n).Append("\n");
            sb.Append("  JustificationL10n: ").Append(JustificationL10n).Append("\n");
            sb.Append("  SoftwarePackageType: ").Append(SoftwarePackageType).Append("\n");
            sb.Append("  SoftwarePackageState: ").Append(SoftwarePackageState).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  IsRebootRequired: ").Append(IsRebootRequired).Append("\n");
            sb.Append("  ReleaseVersion: ").Append(ReleaseVersion).Append("\n");
            sb.Append("  BuildVersion: ").Append(BuildVersion).Append("\n");
            sb.Append("  ReleaseTimestamp: ").Append(ReleaseTimestamp).Append("\n");
            sb.Append("  InstalledDate: ").Append(InstalledDate).Append("\n");
            sb.Append("  BuildFlavor: ").Append(BuildFlavor).Append("\n");
            sb.Append("  BuildType: ").Append(BuildType).Append("\n");
            sb.Append("  BuildId: ").Append(BuildId).Append("\n");
            sb.Append("  IsAutodownloaded: ").Append(IsAutodownloaded).Append("\n");
            sb.Append("  KbArticleLink: ").Append(KbArticleLink).Append("\n");
            sb.Append("  DependentVersion: ").Append(DependentVersion).Append("\n");
            sb.Append("  IsUrgent: ").Append(IsUrgent).Append("\n");
            sb.Append("  SoftwarePackageTypeL10n: ").Append(SoftwarePackageTypeL10n).Append("\n");
            sb.Append("  SoftwarePackageStateL10n: ").Append(SoftwarePackageStateL10n).Append("\n");
            sb.Append("  BuildFlavorL10n: ").Append(BuildFlavorL10n).Append("\n");
            sb.Append("  BuildTypeL10n: ").Append(BuildTypeL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SoftwarePackageInstance)obj);
        }

        /// <summary>
        /// Returns true if SoftwarePackageInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of SoftwarePackageInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SoftwarePackageInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    DescriptionL10n == other.DescriptionL10n ||
                    DescriptionL10n != null &&
                    DescriptionL10n.Equals(other.DescriptionL10n)
                ) && 
                (
                    JustificationL10n == other.JustificationL10n ||
                    JustificationL10n != null &&
                    JustificationL10n.Equals(other.JustificationL10n)
                ) && 
                (
                    SoftwarePackageType == other.SoftwarePackageType ||
                    SoftwarePackageType != null &&
                    SoftwarePackageType.Equals(other.SoftwarePackageType)
                ) && 
                (
                    SoftwarePackageState == other.SoftwarePackageState ||
                    SoftwarePackageState != null &&
                    SoftwarePackageState.Equals(other.SoftwarePackageState)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    IsRebootRequired == other.IsRebootRequired ||
                    IsRebootRequired != null &&
                    IsRebootRequired.Equals(other.IsRebootRequired)
                ) && 
                (
                    ReleaseVersion == other.ReleaseVersion ||
                    ReleaseVersion != null &&
                    ReleaseVersion.Equals(other.ReleaseVersion)
                ) && 
                (
                    BuildVersion == other.BuildVersion ||
                    BuildVersion != null &&
                    BuildVersion.Equals(other.BuildVersion)
                ) && 
                (
                    ReleaseTimestamp == other.ReleaseTimestamp ||
                    ReleaseTimestamp != null &&
                    ReleaseTimestamp.Equals(other.ReleaseTimestamp)
                ) && 
                (
                    InstalledDate == other.InstalledDate ||
                    InstalledDate != null &&
                    InstalledDate.Equals(other.InstalledDate)
                ) && 
                (
                    BuildFlavor == other.BuildFlavor ||
                    BuildFlavor != null &&
                    BuildFlavor.Equals(other.BuildFlavor)
                ) && 
                (
                    BuildType == other.BuildType ||
                    BuildType != null &&
                    BuildType.Equals(other.BuildType)
                ) && 
                (
                    BuildId == other.BuildId ||
                    BuildId != null &&
                    BuildId.Equals(other.BuildId)
                ) && 
                (
                    IsAutodownloaded == other.IsAutodownloaded ||
                    IsAutodownloaded != null &&
                    IsAutodownloaded.Equals(other.IsAutodownloaded)
                ) && 
                (
                    KbArticleLink == other.KbArticleLink ||
                    KbArticleLink != null &&
                    KbArticleLink.Equals(other.KbArticleLink)
                ) && 
                (
                    DependentVersion == other.DependentVersion ||
                    DependentVersion != null &&
                    DependentVersion.Equals(other.DependentVersion)
                ) && 
                (
                    IsUrgent == other.IsUrgent ||
                    IsUrgent != null &&
                    IsUrgent.Equals(other.IsUrgent)
                ) && 
                (
                    SoftwarePackageTypeL10n == other.SoftwarePackageTypeL10n ||
                    SoftwarePackageTypeL10n != null &&
                    SoftwarePackageTypeL10n.Equals(other.SoftwarePackageTypeL10n)
                ) && 
                (
                    SoftwarePackageStateL10n == other.SoftwarePackageStateL10n ||
                    SoftwarePackageStateL10n != null &&
                    SoftwarePackageStateL10n.Equals(other.SoftwarePackageStateL10n)
                ) && 
                (
                    BuildFlavorL10n == other.BuildFlavorL10n ||
                    BuildFlavorL10n != null &&
                    BuildFlavorL10n.Equals(other.BuildFlavorL10n)
                ) && 
                (
                    BuildTypeL10n == other.BuildTypeL10n ||
                    BuildTypeL10n != null &&
                    BuildTypeL10n.Equals(other.BuildTypeL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (DescriptionL10n != null)
                    hashCode = hashCode * 59 + DescriptionL10n.GetHashCode();
                    if (JustificationL10n != null)
                    hashCode = hashCode * 59 + JustificationL10n.GetHashCode();
                    if (SoftwarePackageType != null)
                    hashCode = hashCode * 59 + SoftwarePackageType.GetHashCode();
                    if (SoftwarePackageState != null)
                    hashCode = hashCode * 59 + SoftwarePackageState.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (IsRebootRequired != null)
                    hashCode = hashCode * 59 + IsRebootRequired.GetHashCode();
                    if (ReleaseVersion != null)
                    hashCode = hashCode * 59 + ReleaseVersion.GetHashCode();
                    if (BuildVersion != null)
                    hashCode = hashCode * 59 + BuildVersion.GetHashCode();
                    if (ReleaseTimestamp != null)
                    hashCode = hashCode * 59 + ReleaseTimestamp.GetHashCode();
                    if (InstalledDate != null)
                    hashCode = hashCode * 59 + InstalledDate.GetHashCode();
                    if (BuildFlavor != null)
                    hashCode = hashCode * 59 + BuildFlavor.GetHashCode();
                    if (BuildType != null)
                    hashCode = hashCode * 59 + BuildType.GetHashCode();
                    if (BuildId != null)
                    hashCode = hashCode * 59 + BuildId.GetHashCode();
                    if (IsAutodownloaded != null)
                    hashCode = hashCode * 59 + IsAutodownloaded.GetHashCode();
                    if (KbArticleLink != null)
                    hashCode = hashCode * 59 + KbArticleLink.GetHashCode();
                    if (DependentVersion != null)
                    hashCode = hashCode * 59 + DependentVersion.GetHashCode();
                    if (IsUrgent != null)
                    hashCode = hashCode * 59 + IsUrgent.GetHashCode();
                    if (SoftwarePackageTypeL10n != null)
                    hashCode = hashCode * 59 + SoftwarePackageTypeL10n.GetHashCode();
                    if (SoftwarePackageStateL10n != null)
                    hashCode = hashCode * 59 + SoftwarePackageStateL10n.GetHashCode();
                    if (BuildFlavorL10n != null)
                    hashCode = hashCode * 59 + BuildFlavorL10n.GetHashCode();
                    if (BuildTypeL10n != null)
                    hashCode = hashCode * 59 + BuildTypeL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SoftwarePackageInstance left, SoftwarePackageInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SoftwarePackageInstance left, SoftwarePackageInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
