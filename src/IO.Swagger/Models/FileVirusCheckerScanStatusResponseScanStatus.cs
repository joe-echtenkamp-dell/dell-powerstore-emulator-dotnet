/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FileVirusCheckerScanStatusResponseScanStatus : IEquatable<FileVirusCheckerScanStatusResponseScanStatus>
    { 
        /// <summary>
        /// Unique identifier of the file system.
        /// </summary>
        /// <value>Unique identifier of the file system.</value>

        [DataMember(Name="file_system_id")]
        public string FileSystemId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public FileVirusCheckerStatusEnum? Status { get; set; }

        /// <summary>
        /// Number of directories scanned. If directory is deleted before it was scanned, it will not be counted and if directory is deleted after it was scanned the counter won?t change.
        /// </summary>
        /// <value>Number of directories scanned. If directory is deleted before it was scanned, it will not be counted and if directory is deleted after it was scanned the counter won?t change.</value>

        [DataMember(Name="directories_scanned")]
        public int? DirectoriesScanned { get; set; }

        /// <summary>
        /// Number of files scanned. If file is deleted before it was scanned, it will not be counted and if file is deleted after it was scanned the counter won?t change.
        /// </summary>
        /// <value>Number of files scanned. If file is deleted before it was scanned, it will not be counted and if file is deleted after it was scanned the counter won?t change.</value>

        [DataMember(Name="files_scanned")]
        public int? FilesScanned { get; set; }

        /// <summary>
        /// Number of files waiting for scan.
        /// </summary>
        /// <value>Number of files waiting for scan.</value>

        [DataMember(Name="files_queued")]
        public int? FilesQueued { get; set; }

        /// <summary>
        /// Indicates whether the offline files will be scanned for viruses.
        /// </summary>
        /// <value>Indicates whether the offline files will be scanned for viruses.</value>

        [DataMember(Name="is_scan_offline_files")]
        public bool? IsScanOfflineFiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileVirusCheckerScanStatusResponseScanStatus {\n");
            sb.Append("  FileSystemId: ").Append(FileSystemId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DirectoriesScanned: ").Append(DirectoriesScanned).Append("\n");
            sb.Append("  FilesScanned: ").Append(FilesScanned).Append("\n");
            sb.Append("  FilesQueued: ").Append(FilesQueued).Append("\n");
            sb.Append("  IsScanOfflineFiles: ").Append(IsScanOfflineFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileVirusCheckerScanStatusResponseScanStatus)obj);
        }

        /// <summary>
        /// Returns true if FileVirusCheckerScanStatusResponseScanStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of FileVirusCheckerScanStatusResponseScanStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileVirusCheckerScanStatusResponseScanStatus other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FileSystemId == other.FileSystemId ||
                    FileSystemId != null &&
                    FileSystemId.Equals(other.FileSystemId)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    DirectoriesScanned == other.DirectoriesScanned ||
                    DirectoriesScanned != null &&
                    DirectoriesScanned.Equals(other.DirectoriesScanned)
                ) && 
                (
                    FilesScanned == other.FilesScanned ||
                    FilesScanned != null &&
                    FilesScanned.Equals(other.FilesScanned)
                ) && 
                (
                    FilesQueued == other.FilesQueued ||
                    FilesQueued != null &&
                    FilesQueued.Equals(other.FilesQueued)
                ) && 
                (
                    IsScanOfflineFiles == other.IsScanOfflineFiles ||
                    IsScanOfflineFiles != null &&
                    IsScanOfflineFiles.Equals(other.IsScanOfflineFiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FileSystemId != null)
                    hashCode = hashCode * 59 + FileSystemId.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (DirectoriesScanned != null)
                    hashCode = hashCode * 59 + DirectoriesScanned.GetHashCode();
                    if (FilesScanned != null)
                    hashCode = hashCode * 59 + FilesScanned.GetHashCode();
                    if (FilesQueued != null)
                    hashCode = hashCode * 59 + FilesQueued.GetHashCode();
                    if (IsScanOfflineFiles != null)
                    hashCode = hashCode * 59 + IsScanOfflineFiles.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileVirusCheckerScanStatusResponseScanStatus left, FileVirusCheckerScanStatusResponseScanStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileVirusCheckerScanStatusResponseScanStatus left, FileVirusCheckerScanStatusResponseScanStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
