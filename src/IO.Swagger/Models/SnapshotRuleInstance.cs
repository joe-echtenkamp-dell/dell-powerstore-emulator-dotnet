/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Snapshot rule instance. Values was added in 3.0.0.0: timezone, is_read_only, is_replica. Values was added in 3.5.0.0: remote_system_id. This resource type has queriable associations from remote_system, remote_snapshot_session, policy
    /// </summary>
    [DataContract]
    public partial class SnapshotRuleInstance : IEquatable<SnapshotRuleInstance>
    { 
        /// <summary>
        /// Unique identifier of the snapshot rule.
        /// </summary>
        /// <value>Unique identifier of the snapshot rule.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Snapshot rule name.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Snapshot rule name.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// If set, the unique identifier of the Data Domain remote system to which snaps will be transported. Otherwise, snaps will be taken locally. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>If set, the unique identifier of the Data Domain remote system to which snaps will be transported. Otherwise, snaps will be taken locally. Was added in version 3.5.0.0.</value>

        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>

        [DataMember(Name="interval")]
        public SnapRuleIntervalEnum? Interval { get; set; }

        /// <summary>
        /// Time of the day to take a daily snapshot, with format \&quot;hh:mm\&quot; using a 24 hour clock. Either the interval parameter or the time_of_day parameter will be set, but not both. 
        /// </summary>
        /// <value>Time of the day to take a daily snapshot, with format \&quot;hh:mm\&quot; using a 24 hour clock. Either the interval parameter or the time_of_day parameter will be set, but not both. </value>

        [DataMember(Name="time_of_day")]
        public string TimeOfDay { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="timezone")]
        public TimeZoneEnum? Timezone { get; set; }

        /// <summary>
        /// Days of the week when the snapshot rule should be applied. Days are determined based on the UTC time zone, unless the time_of_day and timezone properties are set. 
        /// </summary>
        /// <value>Days of the week when the snapshot rule should be applied. Days are determined based on the UTC time zone, unless the time_of_day and timezone properties are set. </value>

        [DataMember(Name="days_of_week")]
        public List<DaysOfWeekEnum> DaysOfWeek { get; set; }

        /// <summary>
        /// Desired snapshot retention period in hours. The system will retain snapshots for this time period. 
        /// </summary>
        /// <value>Desired snapshot retention period in hours. The system will retain snapshots for this time period. </value>

        [Range(1, 613200)]
        [DataMember(Name="desired_retention")]
        public int? DesiredRetention { get; set; }

        /// <summary>
        /// Indicates whether this is a replica of a snapshot rule on a remote system that is the source of a replication session replicating a storage resource to the local system. 
        /// </summary>
        /// <value>Indicates whether this is a replica of a snapshot rule on a remote system that is the source of a replication session replicating a storage resource to the local system. </value>

        [DataMember(Name="is_replica")]
        public bool? IsReplica { get; set; }

        /// <summary>
        /// The access type for file snapshots created by this snapshot rule.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>The access type for file snapshots created by this snapshot rule.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="nas_access_type")]
        public NASAccessTypeEnum? NasAccessType { get; set; }

        /// <summary>
        /// Indicates whether this snapshot rule can be modified.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Indicates whether this snapshot rule can be modified.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_read_only")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="managed_by")]
        public PolicyManagedByEnum? ManagedBy { get; set; }

        /// <summary>
        /// Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="managed_by_id")]
        public string ManagedById { get; set; }

        /// <summary>
        /// Indicates whether snapshots created by this rule should be secure. Secure snapshots cannot be deleted before the expiration time, and the expiration time cannot be reduced. Secure snapshots will only be created for block volume and volume group storage resources.  Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Indicates whether snapshots created by this rule should be secure. Secure snapshots cannot be deleted before the expiration time, and the expiration time cannot be reduced. Secure snapshots will only be created for block volume and volume group storage resources.  Was added in version 3.5.0.0.</value>

        [DataMember(Name="is_secure")]
        public bool? IsSecure { get; set; }

        /// <summary>
        /// Localized message string corresponding to interval
        /// </summary>
        /// <value>Localized message string corresponding to interval</value>

        [DataMember(Name="interval_l10n")]
        public string IntervalL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to timezone Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to timezone Was added in version 2.0.0.0.</value>

        [DataMember(Name="timezone_l10n")]
        public string TimezoneL10n { get; set; }

        /// <summary>
        /// Localized message array corresponding to days_of_week
        /// </summary>
        /// <value>Localized message array corresponding to days_of_week</value>

        [DataMember(Name="days_of_week_l10n")]
        public List<string> DaysOfWeekL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to nas_access_type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to nas_access_type Was added in version 3.0.0.0.</value>

        [DataMember(Name="nas_access_type_l10n")]
        public string NasAccessTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to managed_by Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to managed_by Was added in version 3.0.0.0.</value>

        [DataMember(Name="managed_by_l10n")]
        public string ManagedByL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of remote_system_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of remote_system_id attribute.</value>

        [DataMember(Name="remote_system")]
        public RemoteSystemInstance RemoteSystem { get; set; }

        /// <summary>
        /// This is the inverse of the resource type remote_snapshot_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type remote_snapshot_session association.</value>

        [DataMember(Name="remote_snapshot_sessions")]
        public List<RemoteSnapshotSessionInstance> RemoteSnapshotSessions { get; set; }

        /// <summary>
        /// List of the policies that are associated with this snapshot_rule.
        /// </summary>
        /// <value>List of the policies that are associated with this snapshot_rule.</value>

        [DataMember(Name="policies")]
        public List<PolicyInstance> Policies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SnapshotRuleInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  TimeOfDay: ").Append(TimeOfDay).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  DaysOfWeek: ").Append(DaysOfWeek).Append("\n");
            sb.Append("  DesiredRetention: ").Append(DesiredRetention).Append("\n");
            sb.Append("  IsReplica: ").Append(IsReplica).Append("\n");
            sb.Append("  NasAccessType: ").Append(NasAccessType).Append("\n");
            sb.Append("  IsReadOnly: ").Append(IsReadOnly).Append("\n");
            sb.Append("  ManagedBy: ").Append(ManagedBy).Append("\n");
            sb.Append("  ManagedById: ").Append(ManagedById).Append("\n");
            sb.Append("  IsSecure: ").Append(IsSecure).Append("\n");
            sb.Append("  IntervalL10n: ").Append(IntervalL10n).Append("\n");
            sb.Append("  TimezoneL10n: ").Append(TimezoneL10n).Append("\n");
            sb.Append("  DaysOfWeekL10n: ").Append(DaysOfWeekL10n).Append("\n");
            sb.Append("  NasAccessTypeL10n: ").Append(NasAccessTypeL10n).Append("\n");
            sb.Append("  ManagedByL10n: ").Append(ManagedByL10n).Append("\n");
            sb.Append("  RemoteSystem: ").Append(RemoteSystem).Append("\n");
            sb.Append("  RemoteSnapshotSessions: ").Append(RemoteSnapshotSessions).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SnapshotRuleInstance)obj);
        }

        /// <summary>
        /// Returns true if SnapshotRuleInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of SnapshotRuleInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SnapshotRuleInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    Interval == other.Interval ||
                    Interval != null &&
                    Interval.Equals(other.Interval)
                ) && 
                (
                    TimeOfDay == other.TimeOfDay ||
                    TimeOfDay != null &&
                    TimeOfDay.Equals(other.TimeOfDay)
                ) && 
                (
                    Timezone == other.Timezone ||
                    Timezone != null &&
                    Timezone.Equals(other.Timezone)
                ) && 
                (
                    DaysOfWeek == other.DaysOfWeek ||
                    DaysOfWeek != null &&
                    DaysOfWeek.SequenceEqual(other.DaysOfWeek)
                ) && 
                (
                    DesiredRetention == other.DesiredRetention ||
                    DesiredRetention != null &&
                    DesiredRetention.Equals(other.DesiredRetention)
                ) && 
                (
                    IsReplica == other.IsReplica ||
                    IsReplica != null &&
                    IsReplica.Equals(other.IsReplica)
                ) && 
                (
                    NasAccessType == other.NasAccessType ||
                    NasAccessType != null &&
                    NasAccessType.Equals(other.NasAccessType)
                ) && 
                (
                    IsReadOnly == other.IsReadOnly ||
                    IsReadOnly != null &&
                    IsReadOnly.Equals(other.IsReadOnly)
                ) && 
                (
                    ManagedBy == other.ManagedBy ||
                    ManagedBy != null &&
                    ManagedBy.Equals(other.ManagedBy)
                ) && 
                (
                    ManagedById == other.ManagedById ||
                    ManagedById != null &&
                    ManagedById.Equals(other.ManagedById)
                ) && 
                (
                    IsSecure == other.IsSecure ||
                    IsSecure != null &&
                    IsSecure.Equals(other.IsSecure)
                ) && 
                (
                    IntervalL10n == other.IntervalL10n ||
                    IntervalL10n != null &&
                    IntervalL10n.Equals(other.IntervalL10n)
                ) && 
                (
                    TimezoneL10n == other.TimezoneL10n ||
                    TimezoneL10n != null &&
                    TimezoneL10n.Equals(other.TimezoneL10n)
                ) && 
                (
                    DaysOfWeekL10n == other.DaysOfWeekL10n ||
                    DaysOfWeekL10n != null &&
                    DaysOfWeekL10n.SequenceEqual(other.DaysOfWeekL10n)
                ) && 
                (
                    NasAccessTypeL10n == other.NasAccessTypeL10n ||
                    NasAccessTypeL10n != null &&
                    NasAccessTypeL10n.Equals(other.NasAccessTypeL10n)
                ) && 
                (
                    ManagedByL10n == other.ManagedByL10n ||
                    ManagedByL10n != null &&
                    ManagedByL10n.Equals(other.ManagedByL10n)
                ) && 
                (
                    RemoteSystem == other.RemoteSystem ||
                    RemoteSystem != null &&
                    RemoteSystem.Equals(other.RemoteSystem)
                ) && 
                (
                    RemoteSnapshotSessions == other.RemoteSnapshotSessions ||
                    RemoteSnapshotSessions != null &&
                    RemoteSnapshotSessions.SequenceEqual(other.RemoteSnapshotSessions)
                ) && 
                (
                    Policies == other.Policies ||
                    Policies != null &&
                    Policies.SequenceEqual(other.Policies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (Interval != null)
                    hashCode = hashCode * 59 + Interval.GetHashCode();
                    if (TimeOfDay != null)
                    hashCode = hashCode * 59 + TimeOfDay.GetHashCode();
                    if (Timezone != null)
                    hashCode = hashCode * 59 + Timezone.GetHashCode();
                    if (DaysOfWeek != null)
                    hashCode = hashCode * 59 + DaysOfWeek.GetHashCode();
                    if (DesiredRetention != null)
                    hashCode = hashCode * 59 + DesiredRetention.GetHashCode();
                    if (IsReplica != null)
                    hashCode = hashCode * 59 + IsReplica.GetHashCode();
                    if (NasAccessType != null)
                    hashCode = hashCode * 59 + NasAccessType.GetHashCode();
                    if (IsReadOnly != null)
                    hashCode = hashCode * 59 + IsReadOnly.GetHashCode();
                    if (ManagedBy != null)
                    hashCode = hashCode * 59 + ManagedBy.GetHashCode();
                    if (ManagedById != null)
                    hashCode = hashCode * 59 + ManagedById.GetHashCode();
                    if (IsSecure != null)
                    hashCode = hashCode * 59 + IsSecure.GetHashCode();
                    if (IntervalL10n != null)
                    hashCode = hashCode * 59 + IntervalL10n.GetHashCode();
                    if (TimezoneL10n != null)
                    hashCode = hashCode * 59 + TimezoneL10n.GetHashCode();
                    if (DaysOfWeekL10n != null)
                    hashCode = hashCode * 59 + DaysOfWeekL10n.GetHashCode();
                    if (NasAccessTypeL10n != null)
                    hashCode = hashCode * 59 + NasAccessTypeL10n.GetHashCode();
                    if (ManagedByL10n != null)
                    hashCode = hashCode * 59 + ManagedByL10n.GetHashCode();
                    if (RemoteSystem != null)
                    hashCode = hashCode * 59 + RemoteSystem.GetHashCode();
                    if (RemoteSnapshotSessions != null)
                    hashCode = hashCode * 59 + RemoteSnapshotSessions.GetHashCode();
                    if (Policies != null)
                    hashCode = hashCode * 59 + Policies.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SnapshotRuleInstance left, SnapshotRuleInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SnapshotRuleInstance left, SnapshotRuleInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
