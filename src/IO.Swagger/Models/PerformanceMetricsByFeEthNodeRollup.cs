/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Ethernet performance metrics for the node rolled up at various rollup intervals.
    /// </summary>
    [DataContract]
    public partial class PerformanceMetricsByFeEthNodeRollup : MetricsGenerateResponse, IEquatable<PerformanceMetricsByFeEthNodeRollup>
    { 
        /// <summary>
        /// Reference to the associated node on which these metrics were recorded.
        /// </summary>
        /// <value>Reference to the associated node on which these metrics were recorded.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// Reference to the associated appliance on which these metrics were recorded.
        /// </summary>
        /// <value>Reference to the associated appliance on which these metrics were recorded.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// End of sample period.
        /// </summary>
        /// <value>End of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// The average total bytes received per second.
        /// </summary>
        /// <value>The average total bytes received per second.</value>

        [DataMember(Name="avg_bytes_rx_ps")]
        public float? AvgBytesRxPs { get; set; }

        /// <summary>
        /// The average total bytes transmitted per second.
        /// </summary>
        /// <value>The average total bytes transmitted per second.</value>

        [DataMember(Name="avg_bytes_tx_ps")]
        public float? AvgBytesTxPs { get; set; }

        /// <summary>
        /// The average number of packets received per second.
        /// </summary>
        /// <value>The average number of packets received per second.</value>

        [DataMember(Name="avg_pkt_rx_ps")]
        public float? AvgPktRxPs { get; set; }

        /// <summary>
        /// The average number of packets transmitted per second.
        /// </summary>
        /// <value>The average number of packets transmitted per second.</value>

        [DataMember(Name="avg_pkt_tx_ps")]
        public float? AvgPktTxPs { get; set; }

        /// <summary>
        /// The average number of packets discarded per second due to lack of buffer space.
        /// </summary>
        /// <value>The average number of packets discarded per second due to lack of buffer space.</value>

        [DataMember(Name="avg_pkt_rx_no_buffer_error_ps")]
        public float? AvgPktRxNoBufferErrorPs { get; set; }

        /// <summary>
        /// The average number of packets received with CRC error (and thus dropped) per second.
        /// </summary>
        /// <value>The average number of packets received with CRC error (and thus dropped) per second.</value>

        [DataMember(Name="avg_pkt_rx_crc_error_ps")]
        public float? AvgPktRxCrcErrorPs { get; set; }

        /// <summary>
        /// The average number of packets that failed to be transmitted per second due to error.
        /// </summary>
        /// <value>The average number of packets that failed to be transmitted per second due to error.</value>

        [DataMember(Name="avg_pkt_tx_error_ps")]
        public float? AvgPktTxErrorPs { get; set; }

        /// <summary>
        /// The maximum total bytes received per second.
        /// </summary>
        /// <value>The maximum total bytes received per second.</value>

        [DataMember(Name="max_bytes_rx_ps")]
        public float? MaxBytesRxPs { get; set; }

        /// <summary>
        /// The maximum total bytes transmitted per second.
        /// </summary>
        /// <value>The maximum total bytes transmitted per second.</value>

        [DataMember(Name="max_bytes_tx_ps")]
        public float? MaxBytesTxPs { get; set; }

        /// <summary>
        /// The maximum number of packets received per second.
        /// </summary>
        /// <value>The maximum number of packets received per second.</value>

        [DataMember(Name="max_pkt_rx_ps")]
        public float? MaxPktRxPs { get; set; }

        /// <summary>
        /// The maximum number of packets transmitted per second.
        /// </summary>
        /// <value>The maximum number of packets transmitted per second.</value>

        [DataMember(Name="max_pkt_tx_ps")]
        public float? MaxPktTxPs { get; set; }

        /// <summary>
        /// The maximum number of packets discarded per second due to lack of buffer space.
        /// </summary>
        /// <value>The maximum number of packets discarded per second due to lack of buffer space.</value>

        [DataMember(Name="max_pkt_rx_no_buffer_error_ps")]
        public float? MaxPktRxNoBufferErrorPs { get; set; }

        /// <summary>
        /// The maximum number of packets received with CRC error (and thus dropped) per second.
        /// </summary>
        /// <value>The maximum number of packets received with CRC error (and thus dropped) per second.</value>

        [DataMember(Name="max_pkt_rx_crc_error_ps")]
        public float? MaxPktRxCrcErrorPs { get; set; }

        /// <summary>
        /// The maximum number of packets that failed to be transmitted per second due to error.
        /// </summary>
        /// <value>The maximum number of packets that failed to be transmitted per second due to error.</value>

        [DataMember(Name="max_pkt_tx_error_ps")]
        public float? MaxPktTxErrorPs { get; set; }

        /// <summary>
        /// Number of times the metrics are repeated.
        /// </summary>
        /// <value>Number of times the metrics are repeated.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceMetricsByFeEthNodeRollup {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AvgBytesRxPs: ").Append(AvgBytesRxPs).Append("\n");
            sb.Append("  AvgBytesTxPs: ").Append(AvgBytesTxPs).Append("\n");
            sb.Append("  AvgPktRxPs: ").Append(AvgPktRxPs).Append("\n");
            sb.Append("  AvgPktTxPs: ").Append(AvgPktTxPs).Append("\n");
            sb.Append("  AvgPktRxNoBufferErrorPs: ").Append(AvgPktRxNoBufferErrorPs).Append("\n");
            sb.Append("  AvgPktRxCrcErrorPs: ").Append(AvgPktRxCrcErrorPs).Append("\n");
            sb.Append("  AvgPktTxErrorPs: ").Append(AvgPktTxErrorPs).Append("\n");
            sb.Append("  MaxBytesRxPs: ").Append(MaxBytesRxPs).Append("\n");
            sb.Append("  MaxBytesTxPs: ").Append(MaxBytesTxPs).Append("\n");
            sb.Append("  MaxPktRxPs: ").Append(MaxPktRxPs).Append("\n");
            sb.Append("  MaxPktTxPs: ").Append(MaxPktTxPs).Append("\n");
            sb.Append("  MaxPktRxNoBufferErrorPs: ").Append(MaxPktRxNoBufferErrorPs).Append("\n");
            sb.Append("  MaxPktRxCrcErrorPs: ").Append(MaxPktRxCrcErrorPs).Append("\n");
            sb.Append("  MaxPktTxErrorPs: ").Append(MaxPktTxErrorPs).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PerformanceMetricsByFeEthNodeRollup)obj);
        }

        /// <summary>
        /// Returns true if PerformanceMetricsByFeEthNodeRollup instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceMetricsByFeEthNodeRollup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceMetricsByFeEthNodeRollup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    AvgBytesRxPs == other.AvgBytesRxPs ||
                    AvgBytesRxPs != null &&
                    AvgBytesRxPs.Equals(other.AvgBytesRxPs)
                ) && 
                (
                    AvgBytesTxPs == other.AvgBytesTxPs ||
                    AvgBytesTxPs != null &&
                    AvgBytesTxPs.Equals(other.AvgBytesTxPs)
                ) && 
                (
                    AvgPktRxPs == other.AvgPktRxPs ||
                    AvgPktRxPs != null &&
                    AvgPktRxPs.Equals(other.AvgPktRxPs)
                ) && 
                (
                    AvgPktTxPs == other.AvgPktTxPs ||
                    AvgPktTxPs != null &&
                    AvgPktTxPs.Equals(other.AvgPktTxPs)
                ) && 
                (
                    AvgPktRxNoBufferErrorPs == other.AvgPktRxNoBufferErrorPs ||
                    AvgPktRxNoBufferErrorPs != null &&
                    AvgPktRxNoBufferErrorPs.Equals(other.AvgPktRxNoBufferErrorPs)
                ) && 
                (
                    AvgPktRxCrcErrorPs == other.AvgPktRxCrcErrorPs ||
                    AvgPktRxCrcErrorPs != null &&
                    AvgPktRxCrcErrorPs.Equals(other.AvgPktRxCrcErrorPs)
                ) && 
                (
                    AvgPktTxErrorPs == other.AvgPktTxErrorPs ||
                    AvgPktTxErrorPs != null &&
                    AvgPktTxErrorPs.Equals(other.AvgPktTxErrorPs)
                ) && 
                (
                    MaxBytesRxPs == other.MaxBytesRxPs ||
                    MaxBytesRxPs != null &&
                    MaxBytesRxPs.Equals(other.MaxBytesRxPs)
                ) && 
                (
                    MaxBytesTxPs == other.MaxBytesTxPs ||
                    MaxBytesTxPs != null &&
                    MaxBytesTxPs.Equals(other.MaxBytesTxPs)
                ) && 
                (
                    MaxPktRxPs == other.MaxPktRxPs ||
                    MaxPktRxPs != null &&
                    MaxPktRxPs.Equals(other.MaxPktRxPs)
                ) && 
                (
                    MaxPktTxPs == other.MaxPktTxPs ||
                    MaxPktTxPs != null &&
                    MaxPktTxPs.Equals(other.MaxPktTxPs)
                ) && 
                (
                    MaxPktRxNoBufferErrorPs == other.MaxPktRxNoBufferErrorPs ||
                    MaxPktRxNoBufferErrorPs != null &&
                    MaxPktRxNoBufferErrorPs.Equals(other.MaxPktRxNoBufferErrorPs)
                ) && 
                (
                    MaxPktRxCrcErrorPs == other.MaxPktRxCrcErrorPs ||
                    MaxPktRxCrcErrorPs != null &&
                    MaxPktRxCrcErrorPs.Equals(other.MaxPktRxCrcErrorPs)
                ) && 
                (
                    MaxPktTxErrorPs == other.MaxPktTxErrorPs ||
                    MaxPktTxErrorPs != null &&
                    MaxPktTxErrorPs.Equals(other.MaxPktTxErrorPs)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (AvgBytesRxPs != null)
                    hashCode = hashCode * 59 + AvgBytesRxPs.GetHashCode();
                    if (AvgBytesTxPs != null)
                    hashCode = hashCode * 59 + AvgBytesTxPs.GetHashCode();
                    if (AvgPktRxPs != null)
                    hashCode = hashCode * 59 + AvgPktRxPs.GetHashCode();
                    if (AvgPktTxPs != null)
                    hashCode = hashCode * 59 + AvgPktTxPs.GetHashCode();
                    if (AvgPktRxNoBufferErrorPs != null)
                    hashCode = hashCode * 59 + AvgPktRxNoBufferErrorPs.GetHashCode();
                    if (AvgPktRxCrcErrorPs != null)
                    hashCode = hashCode * 59 + AvgPktRxCrcErrorPs.GetHashCode();
                    if (AvgPktTxErrorPs != null)
                    hashCode = hashCode * 59 + AvgPktTxErrorPs.GetHashCode();
                    if (MaxBytesRxPs != null)
                    hashCode = hashCode * 59 + MaxBytesRxPs.GetHashCode();
                    if (MaxBytesTxPs != null)
                    hashCode = hashCode * 59 + MaxBytesTxPs.GetHashCode();
                    if (MaxPktRxPs != null)
                    hashCode = hashCode * 59 + MaxPktRxPs.GetHashCode();
                    if (MaxPktTxPs != null)
                    hashCode = hashCode * 59 + MaxPktTxPs.GetHashCode();
                    if (MaxPktRxNoBufferErrorPs != null)
                    hashCode = hashCode * 59 + MaxPktRxNoBufferErrorPs.GetHashCode();
                    if (MaxPktRxCrcErrorPs != null)
                    hashCode = hashCode * 59 + MaxPktRxCrcErrorPs.GetHashCode();
                    if (MaxPktTxErrorPs != null)
                    hashCode = hashCode * 59 + MaxPktTxErrorPs.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PerformanceMetricsByFeEthNodeRollup left, PerformanceMetricsByFeEthNodeRollup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PerformanceMetricsByFeEthNodeRollup left, PerformanceMetricsByFeEthNodeRollup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
