/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Summary of storage container level space metric data for a specific period of time beginning with timestamp, including the maximum and final values for that period. Current support is for a time period of one hour and one day.
    /// </summary>
    [DataContract]
    public partial class SpaceMetricsByStorageContainerRollup : MetricsGenerateResponse, IEquatable<SpaceMetricsByStorageContainerRollup>
    { 
        /// <summary>
        /// Internal ID of the storage container.
        /// </summary>
        /// <value>Internal ID of the storage container.</value>

        [DataMember(Name="storage_container_id")]
        public string StorageContainerId { get; set; }

        /// <summary>
        /// End of sample period.
        /// </summary>
        /// <value>End of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Last logical provisioned space during the period.
        /// </summary>
        /// <value>Last logical provisioned space during the period.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="last_logical_provisioned")]
        public long? LastLogicalProvisioned { get; set; }

        /// <summary>
        /// Last logical used space during the period.
        /// </summary>
        /// <value>Last logical used space during the period.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="last_logical_used")]
        public long? LastLogicalUsed { get; set; }

        /// <summary>
        /// Last shared logical used space during the period. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Last shared logical used space during the period. Was added in version 2.0.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="last_shared_logical_used")]
        public long? LastSharedLogicalUsed { get; set; }

        /// <summary>
        /// Last snapshot savings during the period.
        /// </summary>
        /// <value>Last snapshot savings during the period.</value>

        [DataMember(Name="last_snapshot_savings")]
        public float? LastSnapshotSavings { get; set; }

        /// <summary>
        /// Last unique physical used space during the period. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Last unique physical used space during the period. Was added in version 3.5.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="last_unique_physical_used")]
        public long? LastUniquePhysicalUsed { get; set; }

        /// <summary>
        /// Last snap and clone logical used space during the period. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Last snap and clone logical used space during the period. Was added in version 3.5.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="last_snap_clone_logical_used")]
        public long? LastSnapCloneLogicalUsed { get; set; }

        /// <summary>
        /// Last thin savings ratio during the period. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Last thin savings ratio during the period. Was added in version 3.5.0.0.</value>

        [DataMember(Name="last_thin_savings")]
        public float? LastThinSavings { get; set; }

        /// <summary>
        /// Last amount of data that cannot be compressed or deduped during the period. A null value indicates insufficient data to calculate the unreducible data. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Last amount of data that cannot be compressed or deduped during the period. A null value indicates insufficient data to calculate the unreducible data. Was added in version 4.0.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="last_unreducible_data")]
        public long? LastUnreducibleData { get; set; }

        /// <summary>
        /// Last data reduction ratio during the period. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Last data reduction ratio during the period. Was added in version 4.0.0.0.</value>

        [DataMember(Name="last_data_reduction")]
        public float? LastDataReduction { get; set; }

        /// <summary>
        /// Last reducible data reduction ratio during the period. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Last reducible data reduction ratio during the period. Was added in version 4.0.0.0.</value>

        [DataMember(Name="last_reducible_data_reduction")]
        public float? LastReducibleDataReduction { get; set; }

        /// <summary>
        /// Maximum logical provisioned space during the period.
        /// </summary>
        /// <value>Maximum logical provisioned space during the period.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="max_logical_provisioned")]
        public long? MaxLogicalProvisioned { get; set; }

        /// <summary>
        /// Maximum logical used space during the period.
        /// </summary>
        /// <value>Maximum logical used space during the period.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="max_logical_used")]
        public long? MaxLogicalUsed { get; set; }

        /// <summary>
        /// Maximum shared logical used space during the period. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Maximum shared logical used space during the period. Was added in version 2.0.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="max_shared_logical_used")]
        public long? MaxSharedLogicalUsed { get; set; }

        /// <summary>
        /// Maximum snapshot savings during the period.
        /// </summary>
        /// <value>Maximum snapshot savings during the period.</value>

        [DataMember(Name="max_snapshot_savings")]
        public float? MaxSnapshotSavings { get; set; }

        /// <summary>
        /// Max unique physical used space during the period. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Max unique physical used space during the period. Was added in version 3.5.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="max_unique_physical_used")]
        public long? MaxUniquePhysicalUsed { get; set; }

        /// <summary>
        /// Max snap and clone logical used space during the period. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Max snap and clone logical used space during the period. Was added in version 3.5.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="max_snap_clone_logical_used")]
        public long? MaxSnapCloneLogicalUsed { get; set; }

        /// <summary>
        /// Max thin savings ratio during the period. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Max thin savings ratio during the period. Was added in version 3.5.0.0.</value>

        [DataMember(Name="max_thin_savings")]
        public float? MaxThinSavings { get; set; }

        /// <summary>
        /// Maximum amount of data that cannot be compressed or deduped during the period. A null value indicates insufficient data to calculate the unreducible data. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Maximum amount of data that cannot be compressed or deduped during the period. A null value indicates insufficient data to calculate the unreducible data. Was added in version 4.0.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="max_unreducible_data")]
        public long? MaxUnreducibleData { get; set; }

        /// <summary>
        /// Max data reduction ratio during the period. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Max data reduction ratio during the period. Was added in version 4.0.0.0.</value>

        [DataMember(Name="max_data_reduction")]
        public float? MaxDataReduction { get; set; }

        /// <summary>
        /// Max reducible data reduction ratio during the period. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Max reducible data reduction ratio during the period. Was added in version 4.0.0.0.</value>

        [DataMember(Name="max_reducible_data_reduction")]
        public float? MaxReducibleDataReduction { get; set; }

        /// <summary>
        /// Number of times the metrics are repeated.
        /// </summary>
        /// <value>Number of times the metrics are repeated.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpaceMetricsByStorageContainerRollup {\n");
            sb.Append("  StorageContainerId: ").Append(StorageContainerId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  LastLogicalProvisioned: ").Append(LastLogicalProvisioned).Append("\n");
            sb.Append("  LastLogicalUsed: ").Append(LastLogicalUsed).Append("\n");
            sb.Append("  LastSharedLogicalUsed: ").Append(LastSharedLogicalUsed).Append("\n");
            sb.Append("  LastSnapshotSavings: ").Append(LastSnapshotSavings).Append("\n");
            sb.Append("  LastUniquePhysicalUsed: ").Append(LastUniquePhysicalUsed).Append("\n");
            sb.Append("  LastSnapCloneLogicalUsed: ").Append(LastSnapCloneLogicalUsed).Append("\n");
            sb.Append("  LastThinSavings: ").Append(LastThinSavings).Append("\n");
            sb.Append("  LastUnreducibleData: ").Append(LastUnreducibleData).Append("\n");
            sb.Append("  LastDataReduction: ").Append(LastDataReduction).Append("\n");
            sb.Append("  LastReducibleDataReduction: ").Append(LastReducibleDataReduction).Append("\n");
            sb.Append("  MaxLogicalProvisioned: ").Append(MaxLogicalProvisioned).Append("\n");
            sb.Append("  MaxLogicalUsed: ").Append(MaxLogicalUsed).Append("\n");
            sb.Append("  MaxSharedLogicalUsed: ").Append(MaxSharedLogicalUsed).Append("\n");
            sb.Append("  MaxSnapshotSavings: ").Append(MaxSnapshotSavings).Append("\n");
            sb.Append("  MaxUniquePhysicalUsed: ").Append(MaxUniquePhysicalUsed).Append("\n");
            sb.Append("  MaxSnapCloneLogicalUsed: ").Append(MaxSnapCloneLogicalUsed).Append("\n");
            sb.Append("  MaxThinSavings: ").Append(MaxThinSavings).Append("\n");
            sb.Append("  MaxUnreducibleData: ").Append(MaxUnreducibleData).Append("\n");
            sb.Append("  MaxDataReduction: ").Append(MaxDataReduction).Append("\n");
            sb.Append("  MaxReducibleDataReduction: ").Append(MaxReducibleDataReduction).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SpaceMetricsByStorageContainerRollup)obj);
        }

        /// <summary>
        /// Returns true if SpaceMetricsByStorageContainerRollup instances are equal
        /// </summary>
        /// <param name="other">Instance of SpaceMetricsByStorageContainerRollup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpaceMetricsByStorageContainerRollup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StorageContainerId == other.StorageContainerId ||
                    StorageContainerId != null &&
                    StorageContainerId.Equals(other.StorageContainerId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    LastLogicalProvisioned == other.LastLogicalProvisioned ||
                    LastLogicalProvisioned != null &&
                    LastLogicalProvisioned.Equals(other.LastLogicalProvisioned)
                ) && 
                (
                    LastLogicalUsed == other.LastLogicalUsed ||
                    LastLogicalUsed != null &&
                    LastLogicalUsed.Equals(other.LastLogicalUsed)
                ) && 
                (
                    LastSharedLogicalUsed == other.LastSharedLogicalUsed ||
                    LastSharedLogicalUsed != null &&
                    LastSharedLogicalUsed.Equals(other.LastSharedLogicalUsed)
                ) && 
                (
                    LastSnapshotSavings == other.LastSnapshotSavings ||
                    LastSnapshotSavings != null &&
                    LastSnapshotSavings.Equals(other.LastSnapshotSavings)
                ) && 
                (
                    LastUniquePhysicalUsed == other.LastUniquePhysicalUsed ||
                    LastUniquePhysicalUsed != null &&
                    LastUniquePhysicalUsed.Equals(other.LastUniquePhysicalUsed)
                ) && 
                (
                    LastSnapCloneLogicalUsed == other.LastSnapCloneLogicalUsed ||
                    LastSnapCloneLogicalUsed != null &&
                    LastSnapCloneLogicalUsed.Equals(other.LastSnapCloneLogicalUsed)
                ) && 
                (
                    LastThinSavings == other.LastThinSavings ||
                    LastThinSavings != null &&
                    LastThinSavings.Equals(other.LastThinSavings)
                ) && 
                (
                    LastUnreducibleData == other.LastUnreducibleData ||
                    LastUnreducibleData != null &&
                    LastUnreducibleData.Equals(other.LastUnreducibleData)
                ) && 
                (
                    LastDataReduction == other.LastDataReduction ||
                    LastDataReduction != null &&
                    LastDataReduction.Equals(other.LastDataReduction)
                ) && 
                (
                    LastReducibleDataReduction == other.LastReducibleDataReduction ||
                    LastReducibleDataReduction != null &&
                    LastReducibleDataReduction.Equals(other.LastReducibleDataReduction)
                ) && 
                (
                    MaxLogicalProvisioned == other.MaxLogicalProvisioned ||
                    MaxLogicalProvisioned != null &&
                    MaxLogicalProvisioned.Equals(other.MaxLogicalProvisioned)
                ) && 
                (
                    MaxLogicalUsed == other.MaxLogicalUsed ||
                    MaxLogicalUsed != null &&
                    MaxLogicalUsed.Equals(other.MaxLogicalUsed)
                ) && 
                (
                    MaxSharedLogicalUsed == other.MaxSharedLogicalUsed ||
                    MaxSharedLogicalUsed != null &&
                    MaxSharedLogicalUsed.Equals(other.MaxSharedLogicalUsed)
                ) && 
                (
                    MaxSnapshotSavings == other.MaxSnapshotSavings ||
                    MaxSnapshotSavings != null &&
                    MaxSnapshotSavings.Equals(other.MaxSnapshotSavings)
                ) && 
                (
                    MaxUniquePhysicalUsed == other.MaxUniquePhysicalUsed ||
                    MaxUniquePhysicalUsed != null &&
                    MaxUniquePhysicalUsed.Equals(other.MaxUniquePhysicalUsed)
                ) && 
                (
                    MaxSnapCloneLogicalUsed == other.MaxSnapCloneLogicalUsed ||
                    MaxSnapCloneLogicalUsed != null &&
                    MaxSnapCloneLogicalUsed.Equals(other.MaxSnapCloneLogicalUsed)
                ) && 
                (
                    MaxThinSavings == other.MaxThinSavings ||
                    MaxThinSavings != null &&
                    MaxThinSavings.Equals(other.MaxThinSavings)
                ) && 
                (
                    MaxUnreducibleData == other.MaxUnreducibleData ||
                    MaxUnreducibleData != null &&
                    MaxUnreducibleData.Equals(other.MaxUnreducibleData)
                ) && 
                (
                    MaxDataReduction == other.MaxDataReduction ||
                    MaxDataReduction != null &&
                    MaxDataReduction.Equals(other.MaxDataReduction)
                ) && 
                (
                    MaxReducibleDataReduction == other.MaxReducibleDataReduction ||
                    MaxReducibleDataReduction != null &&
                    MaxReducibleDataReduction.Equals(other.MaxReducibleDataReduction)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StorageContainerId != null)
                    hashCode = hashCode * 59 + StorageContainerId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (LastLogicalProvisioned != null)
                    hashCode = hashCode * 59 + LastLogicalProvisioned.GetHashCode();
                    if (LastLogicalUsed != null)
                    hashCode = hashCode * 59 + LastLogicalUsed.GetHashCode();
                    if (LastSharedLogicalUsed != null)
                    hashCode = hashCode * 59 + LastSharedLogicalUsed.GetHashCode();
                    if (LastSnapshotSavings != null)
                    hashCode = hashCode * 59 + LastSnapshotSavings.GetHashCode();
                    if (LastUniquePhysicalUsed != null)
                    hashCode = hashCode * 59 + LastUniquePhysicalUsed.GetHashCode();
                    if (LastSnapCloneLogicalUsed != null)
                    hashCode = hashCode * 59 + LastSnapCloneLogicalUsed.GetHashCode();
                    if (LastThinSavings != null)
                    hashCode = hashCode * 59 + LastThinSavings.GetHashCode();
                    if (LastUnreducibleData != null)
                    hashCode = hashCode * 59 + LastUnreducibleData.GetHashCode();
                    if (LastDataReduction != null)
                    hashCode = hashCode * 59 + LastDataReduction.GetHashCode();
                    if (LastReducibleDataReduction != null)
                    hashCode = hashCode * 59 + LastReducibleDataReduction.GetHashCode();
                    if (MaxLogicalProvisioned != null)
                    hashCode = hashCode * 59 + MaxLogicalProvisioned.GetHashCode();
                    if (MaxLogicalUsed != null)
                    hashCode = hashCode * 59 + MaxLogicalUsed.GetHashCode();
                    if (MaxSharedLogicalUsed != null)
                    hashCode = hashCode * 59 + MaxSharedLogicalUsed.GetHashCode();
                    if (MaxSnapshotSavings != null)
                    hashCode = hashCode * 59 + MaxSnapshotSavings.GetHashCode();
                    if (MaxUniquePhysicalUsed != null)
                    hashCode = hashCode * 59 + MaxUniquePhysicalUsed.GetHashCode();
                    if (MaxSnapCloneLogicalUsed != null)
                    hashCode = hashCode * 59 + MaxSnapCloneLogicalUsed.GetHashCode();
                    if (MaxThinSavings != null)
                    hashCode = hashCode * 59 + MaxThinSavings.GetHashCode();
                    if (MaxUnreducibleData != null)
                    hashCode = hashCode * 59 + MaxUnreducibleData.GetHashCode();
                    if (MaxDataReduction != null)
                    hashCode = hashCode * 59 + MaxDataReduction.GetHashCode();
                    if (MaxReducibleDataReduction != null)
                    hashCode = hashCode * 59 + MaxReducibleDataReduction.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SpaceMetricsByStorageContainerRollup left, SpaceMetricsByStorageContainerRollup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SpaceMetricsByStorageContainerRollup left, SpaceMetricsByStorageContainerRollup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
