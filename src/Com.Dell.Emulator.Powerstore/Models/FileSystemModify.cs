/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Parameters for the file system modify operation. Modify a filesystem settings, where {id} is the unique identifier of the filesystem instance to modify Please note that modifying any of the following filesystem settings while in production may interrupt clients I/Os:     - access_policy     - locking_policy     - folder_rename_policy     - is_smb_sync_writes_enabled     - is_smb_op_locks_enabled     - is_async_MTime_enabled     - file_events_publishing_mode     - smb_notify_on_change_dir_depth 
    /// </summary>
    [DataContract]
    public partial class FileSystemModify : IEquatable<FileSystemModify>
    { 
        /// <summary>
        /// Description of the file system. (255 UTF-8 characters).
        /// </summary>
        /// <value>Description of the file system. (255 UTF-8 characters).</value>

        [StringLength(255, MinimumLength=0)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Size, in bytes, presented to the host or end user. This can be used for both expand and shrink on a file system. Value is always rounded up to next MB. 
        /// </summary>
        /// <value>Size, in bytes, presented to the host or end user. This can be used for both expand and shrink on a file system. Value is always rounded up to next MB. </value>

        [Range(3221225472, 281474976710656)]
        [DataMember(Name="size_total")]
        public long? SizeTotal { get; set; }

        /// <summary>
        /// Gets or Sets AccessPolicy
        /// </summary>

        [DataMember(Name="access_policy")]
        public FileSystemAccessPolicyEnum? AccessPolicy { get; set; }

        /// <summary>
        /// Gets or Sets LockingPolicy
        /// </summary>

        [DataMember(Name="locking_policy")]
        public FileSystemLockingPolicyEnum? LockingPolicy { get; set; }

        /// <summary>
        /// Gets or Sets FolderRenamePolicy
        /// </summary>

        [DataMember(Name="folder_rename_policy")]
        public FileSystemFolderRenamePolicyEnum? FolderRenamePolicy { get; set; }

        /// <summary>
        /// Indicates whether the synchronous writes option is enabled on the file system. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system. 
        /// </summary>
        /// <value>Indicates whether the synchronous writes option is enabled on the file system. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system. </value>

        [DataMember(Name="is_smb_sync_writes_enabled")]
        public bool? IsSmbSyncWritesEnabled { get; set; }

        /// <summary>
        /// Indicates whether opportunistic file locking is enabled on the file system. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system. 
        /// </summary>
        /// <value>Indicates whether opportunistic file locking is enabled on the file system. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system. </value>

        [DataMember(Name="is_smb_op_locks_enabled")]
        public bool? IsSmbOpLocksEnabled { get; set; }

        /// <summary>
        /// Indicates whether file access notifications are enabled on the file system. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications on file access are disabled on the file system. 
        /// </summary>
        /// <value>Indicates whether file access notifications are enabled on the file system. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications on file access are disabled on the file system. </value>

        [DataMember(Name="is_smb_notify_on_access_enabled")]
        public bool? IsSmbNotifyOnAccessEnabled { get; set; }

        /// <summary>
        /// Indicates whether notifications on file writes are enabled on the file system. Values are: * true - File writes notifications are enabled on the file system. * false - File writes notifications are disabled on the file system. 
        /// </summary>
        /// <value>Indicates whether notifications on file writes are enabled on the file system. Values are: * true - File writes notifications are enabled on the file system. * false - File writes notifications are disabled on the file system. </value>

        [DataMember(Name="is_smb_notify_on_write_enabled")]
        public bool? IsSmbNotifyOnWriteEnabled { get; set; }

        /// <summary>
        /// Lowest directory level to which the enabled notifications apply, if any.
        /// </summary>
        /// <value>Lowest directory level to which the enabled notifications apply, if any.</value>

        [Range(1, 512)]
        [DataMember(Name="smb_notify_on_change_dir_depth")]
        public int? SmbNotifyOnChangeDirDepth { get; set; }

        /// <summary>
        /// Indicates whether notifications of changes to a directory file structure are enabled. Values are: * true - Change directory notifications are disabled. * false - Change directory notifications are enabled. 
        /// </summary>
        /// <value>Indicates whether notifications of changes to a directory file structure are enabled. Values are: * true - Change directory notifications are disabled. * false - Change directory notifications are enabled. </value>

        [DataMember(Name="is_smb_no_notify_enabled")]
        public bool? IsSmbNoNotifyEnabled { get; set; }

        /// <summary>
        /// Indicates whether asynchronous MTIME is enabled on the file system or protocol snaps that are mounted writeable. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system. 
        /// </summary>
        /// <value>Indicates whether asynchronous MTIME is enabled on the file system or protocol snaps that are mounted writeable. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system. </value>

        [DataMember(Name="is_async_MTime_enabled")]
        public bool? IsAsyncMTimeEnabled { get; set; }

        /// <summary>
        /// Unique identifier of the protection policy applied to the file system. name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;
        /// </summary>
        /// <value>Unique identifier of the protection policy applied to the file system. name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;</value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Indicates whether quota is enabled. Quotas are not supported for read-only file systems. Default value for the grace period is set to infinite&#x3D;-1 to match Windows&#39; quota policy Values are: * true - Start tracking usages for all users on a file system or a quota tree, and user quota limits will be enforced. * false - Stop tracking usages for all users on a file system or a quota tree, and user quota limits will not be enforced. 
        /// </summary>
        /// <value>Indicates whether quota is enabled. Quotas are not supported for read-only file systems. Default value for the grace period is set to infinite&#x3D;-1 to match Windows&#39; quota policy Values are: * true - Start tracking usages for all users on a file system or a quota tree, and user quota limits will be enforced. * false - Stop tracking usages for all users on a file system or a quota tree, and user quota limits will not be enforced. </value>

        [DataMember(Name="is_quota_enabled")]
        public bool? IsQuotaEnabled { get; set; }

        /// <summary>
        /// Grace period of soft limits (seconds):  * -1: default: Infinite grace (Windows policy).  *  0: Use system default of 1 week.  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds). 
        /// </summary>
        /// <value>Grace period of soft limits (seconds):  * -1: default: Infinite grace (Windows policy).  *  0: Use system default of 1 week.  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds). </value>

        [Range(-1, 2147483647)]
        [DataMember(Name="grace_period")]
        public int? GracePeriod { get; set; }

        /// <summary>
        /// Default hard limit of user quotas and tree quotas (bytes). The hard limit value is always rounded up to match the file system&#39;s physical block size. (0 means &#39;No limitation&#39;. This value can be used to compute the amount of space consumed without limiting the space). 
        /// </summary>
        /// <value>Default hard limit of user quotas and tree quotas (bytes). The hard limit value is always rounded up to match the file system&#39;s physical block size. (0 means &#39;No limitation&#39;. This value can be used to compute the amount of space consumed without limiting the space). </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="default_hard_limit")]
        public long? DefaultHardLimit { get; set; }

        /// <summary>
        /// Default soft limit of user quotas and tree quotas (bytes). Value is always rounded up to match the file system&#39;s physical block size. (0 means &#39;No limitation&#39;.) 
        /// </summary>
        /// <value>Default soft limit of user quotas and tree quotas (bytes). Value is always rounded up to match the file system&#39;s physical block size. (0 means &#39;No limitation&#39;.) </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="default_soft_limit")]
        public long? DefaultSoftLimit { get; set; }

        /// <summary>
        /// Time when the snapshot will expire. Use 1970-01-01T00:00:00.000Z to set expiration timestamp to null.
        /// </summary>
        /// <value>Time when the snapshot will expire. Use 1970-01-01T00:00:00.000Z to set expiration timestamp to null.</value>

        [DataMember(Name="expiration_timestamp")]
        public DateTime? ExpirationTimestamp { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="file_events_publishing_mode")]
        public FileEventsPublishingModeEnum? FileEventsPublishingMode { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="flr_attributes")]
        public FlrModify FlrAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileSystemModify {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SizeTotal: ").Append(SizeTotal).Append("\n");
            sb.Append("  AccessPolicy: ").Append(AccessPolicy).Append("\n");
            sb.Append("  LockingPolicy: ").Append(LockingPolicy).Append("\n");
            sb.Append("  FolderRenamePolicy: ").Append(FolderRenamePolicy).Append("\n");
            sb.Append("  IsSmbSyncWritesEnabled: ").Append(IsSmbSyncWritesEnabled).Append("\n");
            sb.Append("  IsSmbOpLocksEnabled: ").Append(IsSmbOpLocksEnabled).Append("\n");
            sb.Append("  IsSmbNotifyOnAccessEnabled: ").Append(IsSmbNotifyOnAccessEnabled).Append("\n");
            sb.Append("  IsSmbNotifyOnWriteEnabled: ").Append(IsSmbNotifyOnWriteEnabled).Append("\n");
            sb.Append("  SmbNotifyOnChangeDirDepth: ").Append(SmbNotifyOnChangeDirDepth).Append("\n");
            sb.Append("  IsSmbNoNotifyEnabled: ").Append(IsSmbNoNotifyEnabled).Append("\n");
            sb.Append("  IsAsyncMTimeEnabled: ").Append(IsAsyncMTimeEnabled).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  IsQuotaEnabled: ").Append(IsQuotaEnabled).Append("\n");
            sb.Append("  GracePeriod: ").Append(GracePeriod).Append("\n");
            sb.Append("  DefaultHardLimit: ").Append(DefaultHardLimit).Append("\n");
            sb.Append("  DefaultSoftLimit: ").Append(DefaultSoftLimit).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  FileEventsPublishingMode: ").Append(FileEventsPublishingMode).Append("\n");
            sb.Append("  FlrAttributes: ").Append(FlrAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileSystemModify)obj);
        }

        /// <summary>
        /// Returns true if FileSystemModify instances are equal
        /// </summary>
        /// <param name="other">Instance of FileSystemModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileSystemModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    SizeTotal == other.SizeTotal ||
                    SizeTotal != null &&
                    SizeTotal.Equals(other.SizeTotal)
                ) && 
                (
                    AccessPolicy == other.AccessPolicy ||
                    AccessPolicy != null &&
                    AccessPolicy.Equals(other.AccessPolicy)
                ) && 
                (
                    LockingPolicy == other.LockingPolicy ||
                    LockingPolicy != null &&
                    LockingPolicy.Equals(other.LockingPolicy)
                ) && 
                (
                    FolderRenamePolicy == other.FolderRenamePolicy ||
                    FolderRenamePolicy != null &&
                    FolderRenamePolicy.Equals(other.FolderRenamePolicy)
                ) && 
                (
                    IsSmbSyncWritesEnabled == other.IsSmbSyncWritesEnabled ||
                    IsSmbSyncWritesEnabled != null &&
                    IsSmbSyncWritesEnabled.Equals(other.IsSmbSyncWritesEnabled)
                ) && 
                (
                    IsSmbOpLocksEnabled == other.IsSmbOpLocksEnabled ||
                    IsSmbOpLocksEnabled != null &&
                    IsSmbOpLocksEnabled.Equals(other.IsSmbOpLocksEnabled)
                ) && 
                (
                    IsSmbNotifyOnAccessEnabled == other.IsSmbNotifyOnAccessEnabled ||
                    IsSmbNotifyOnAccessEnabled != null &&
                    IsSmbNotifyOnAccessEnabled.Equals(other.IsSmbNotifyOnAccessEnabled)
                ) && 
                (
                    IsSmbNotifyOnWriteEnabled == other.IsSmbNotifyOnWriteEnabled ||
                    IsSmbNotifyOnWriteEnabled != null &&
                    IsSmbNotifyOnWriteEnabled.Equals(other.IsSmbNotifyOnWriteEnabled)
                ) && 
                (
                    SmbNotifyOnChangeDirDepth == other.SmbNotifyOnChangeDirDepth ||
                    SmbNotifyOnChangeDirDepth != null &&
                    SmbNotifyOnChangeDirDepth.Equals(other.SmbNotifyOnChangeDirDepth)
                ) && 
                (
                    IsSmbNoNotifyEnabled == other.IsSmbNoNotifyEnabled ||
                    IsSmbNoNotifyEnabled != null &&
                    IsSmbNoNotifyEnabled.Equals(other.IsSmbNoNotifyEnabled)
                ) && 
                (
                    IsAsyncMTimeEnabled == other.IsAsyncMTimeEnabled ||
                    IsAsyncMTimeEnabled != null &&
                    IsAsyncMTimeEnabled.Equals(other.IsAsyncMTimeEnabled)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    IsQuotaEnabled == other.IsQuotaEnabled ||
                    IsQuotaEnabled != null &&
                    IsQuotaEnabled.Equals(other.IsQuotaEnabled)
                ) && 
                (
                    GracePeriod == other.GracePeriod ||
                    GracePeriod != null &&
                    GracePeriod.Equals(other.GracePeriod)
                ) && 
                (
                    DefaultHardLimit == other.DefaultHardLimit ||
                    DefaultHardLimit != null &&
                    DefaultHardLimit.Equals(other.DefaultHardLimit)
                ) && 
                (
                    DefaultSoftLimit == other.DefaultSoftLimit ||
                    DefaultSoftLimit != null &&
                    DefaultSoftLimit.Equals(other.DefaultSoftLimit)
                ) && 
                (
                    ExpirationTimestamp == other.ExpirationTimestamp ||
                    ExpirationTimestamp != null &&
                    ExpirationTimestamp.Equals(other.ExpirationTimestamp)
                ) && 
                (
                    FileEventsPublishingMode == other.FileEventsPublishingMode ||
                    FileEventsPublishingMode != null &&
                    FileEventsPublishingMode.Equals(other.FileEventsPublishingMode)
                ) && 
                (
                    FlrAttributes == other.FlrAttributes ||
                    FlrAttributes != null &&
                    FlrAttributes.Equals(other.FlrAttributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (SizeTotal != null)
                    hashCode = hashCode * 59 + SizeTotal.GetHashCode();
                    if (AccessPolicy != null)
                    hashCode = hashCode * 59 + AccessPolicy.GetHashCode();
                    if (LockingPolicy != null)
                    hashCode = hashCode * 59 + LockingPolicy.GetHashCode();
                    if (FolderRenamePolicy != null)
                    hashCode = hashCode * 59 + FolderRenamePolicy.GetHashCode();
                    if (IsSmbSyncWritesEnabled != null)
                    hashCode = hashCode * 59 + IsSmbSyncWritesEnabled.GetHashCode();
                    if (IsSmbOpLocksEnabled != null)
                    hashCode = hashCode * 59 + IsSmbOpLocksEnabled.GetHashCode();
                    if (IsSmbNotifyOnAccessEnabled != null)
                    hashCode = hashCode * 59 + IsSmbNotifyOnAccessEnabled.GetHashCode();
                    if (IsSmbNotifyOnWriteEnabled != null)
                    hashCode = hashCode * 59 + IsSmbNotifyOnWriteEnabled.GetHashCode();
                    if (SmbNotifyOnChangeDirDepth != null)
                    hashCode = hashCode * 59 + SmbNotifyOnChangeDirDepth.GetHashCode();
                    if (IsSmbNoNotifyEnabled != null)
                    hashCode = hashCode * 59 + IsSmbNoNotifyEnabled.GetHashCode();
                    if (IsAsyncMTimeEnabled != null)
                    hashCode = hashCode * 59 + IsAsyncMTimeEnabled.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (IsQuotaEnabled != null)
                    hashCode = hashCode * 59 + IsQuotaEnabled.GetHashCode();
                    if (GracePeriod != null)
                    hashCode = hashCode * 59 + GracePeriod.GetHashCode();
                    if (DefaultHardLimit != null)
                    hashCode = hashCode * 59 + DefaultHardLimit.GetHashCode();
                    if (DefaultSoftLimit != null)
                    hashCode = hashCode * 59 + DefaultSoftLimit.GetHashCode();
                    if (ExpirationTimestamp != null)
                    hashCode = hashCode * 59 + ExpirationTimestamp.GetHashCode();
                    if (FileEventsPublishingMode != null)
                    hashCode = hashCode * 59 + FileEventsPublishingMode.GetHashCode();
                    if (FlrAttributes != null)
                    hashCode = hashCode * 59 + FlrAttributes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileSystemModify left, FileSystemModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileSystemModify left, FileSystemModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
