/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Refresh volume group request.
    /// </summary>
    [DataContract]
    public partial class VolumeGroupRefresh : IEquatable<VolumeGroupRefresh>
    { 
        /// <summary>
        /// Unique identifier of the volume group to refresh from. This is referred to as the source volume group.  name:{name} can be used instead of {id}. For example: &#39;from_object_id&#39;:&#39;name:volume_group_name&#39;
        /// </summary>
        /// <value>Unique identifier of the volume group to refresh from. This is referred to as the source volume group.  name:{name} can be used instead of {id}. For example: &#39;from_object_id&#39;:&#39;name:volume_group_name&#39;</value>
        [Required]
        
        [DataMember(Name="from_object_id")]
        public string FromObjectId { get; set; }

        /// <summary>
        /// This parameter specifies whether a backup snapshot set of the target volume group needs to be created before refreshing it.  This parameter defaults to true, if not specified. 
        /// </summary>
        /// <value>This parameter specifies whether a backup snapshot set of the target volume group needs to be created before refreshing it.  This parameter defaults to true, if not specified. </value>

        [DataMember(Name="create_backup_snap")]
        public bool? CreateBackupSnap { get; set; }

        /// <summary>
        /// Gets or Sets BackupSnapProfile
        /// </summary>

        [DataMember(Name="backup_snap_profile")]
        public VolumeGroupSnapshot BackupSnapProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeGroupRefresh {\n");
            sb.Append("  FromObjectId: ").Append(FromObjectId).Append("\n");
            sb.Append("  CreateBackupSnap: ").Append(CreateBackupSnap).Append("\n");
            sb.Append("  BackupSnapProfile: ").Append(BackupSnapProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VolumeGroupRefresh)obj);
        }

        /// <summary>
        /// Returns true if VolumeGroupRefresh instances are equal
        /// </summary>
        /// <param name="other">Instance of VolumeGroupRefresh to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeGroupRefresh other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FromObjectId == other.FromObjectId ||
                    FromObjectId != null &&
                    FromObjectId.Equals(other.FromObjectId)
                ) && 
                (
                    CreateBackupSnap == other.CreateBackupSnap ||
                    CreateBackupSnap != null &&
                    CreateBackupSnap.Equals(other.CreateBackupSnap)
                ) && 
                (
                    BackupSnapProfile == other.BackupSnapProfile ||
                    BackupSnapProfile != null &&
                    BackupSnapProfile.Equals(other.BackupSnapProfile)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FromObjectId != null)
                    hashCode = hashCode * 59 + FromObjectId.GetHashCode();
                    if (CreateBackupSnap != null)
                    hashCode = hashCode * 59 + CreateBackupSnap.GetHashCode();
                    if (BackupSnapProfile != null)
                    hashCode = hashCode * 59 + BackupSnapProfile.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VolumeGroupRefresh left, VolumeGroupRefresh right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VolumeGroupRefresh left, VolumeGroupRefresh right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
