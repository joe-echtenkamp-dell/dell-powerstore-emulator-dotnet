/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Parameters of the replication group delete operation. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ReplicationGroupDelete : IEquatable<ReplicationGroupDelete>
    { 
        /// <summary>
        /// Normally, only replication groups without a session can be deleted. This option overrides that behavior and deletes replication session before deleting the replication group. Note that this option only deletes the session on local appliance. Peer session and replication group won&#39;t be affected and may require separate delete operation. 
        /// </summary>
        /// <value>Normally, only replication groups without a session can be deleted. This option overrides that behavior and deletes replication session before deleting the replication group. Note that this option only deletes the session on local appliance. Peer session and replication group won&#39;t be affected and may require separate delete operation. </value>

        [DataMember(Name="delete_session")]
        public bool? DeleteSession { get; set; }

        /// <summary>
        /// Normally, only empty replication groups can be deleted. This option overrides that behavior and deletes member vVols before deleting the replication group. Deletes bound and attached vVols, which is equivalent to virtual_volume delete with force set to true. May not be used together with unassign_members. 
        /// </summary>
        /// <value>Normally, only empty replication groups can be deleted. This option overrides that behavior and deletes member vVols before deleting the replication group. Deletes bound and attached vVols, which is equivalent to virtual_volume delete with force set to true. May not be used together with unassign_members. </value>

        [DataMember(Name="delete_members")]
        public bool? DeleteMembers { get; set; }

        /// <summary>
        /// Normally, only empty replication groups can be deleted. This option overrides that behavior and unassigns replication group from member vVols before deleting the replication group. May not be used together with delete_members. 
        /// </summary>
        /// <value>Normally, only empty replication groups can be deleted. This option overrides that behavior and unassigns replication group from member vVols before deleting the replication group. May not be used together with delete_members. </value>

        [DataMember(Name="unassign_members")]
        public bool? UnassignMembers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationGroupDelete {\n");
            sb.Append("  DeleteSession: ").Append(DeleteSession).Append("\n");
            sb.Append("  DeleteMembers: ").Append(DeleteMembers).Append("\n");
            sb.Append("  UnassignMembers: ").Append(UnassignMembers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReplicationGroupDelete)obj);
        }

        /// <summary>
        /// Returns true if ReplicationGroupDelete instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationGroupDelete to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationGroupDelete other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DeleteSession == other.DeleteSession ||
                    DeleteSession != null &&
                    DeleteSession.Equals(other.DeleteSession)
                ) && 
                (
                    DeleteMembers == other.DeleteMembers ||
                    DeleteMembers != null &&
                    DeleteMembers.Equals(other.DeleteMembers)
                ) && 
                (
                    UnassignMembers == other.UnassignMembers ||
                    UnassignMembers != null &&
                    UnassignMembers.Equals(other.UnassignMembers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DeleteSession != null)
                    hashCode = hashCode * 59 + DeleteSession.GetHashCode();
                    if (DeleteMembers != null)
                    hashCode = hashCode * 59 + DeleteMembers.GetHashCode();
                    if (UnassignMembers != null)
                    hashCode = hashCode * 59 + UnassignMembers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReplicationGroupDelete left, ReplicationGroupDelete right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReplicationGroupDelete left, ReplicationGroupDelete right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
