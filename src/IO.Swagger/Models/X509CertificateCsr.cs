/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// x509 certificate model specifically defined for Generating a Certificate Signing Request. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class X509CertificateCsr : IEquatable<X509CertificateCsr>
    { 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        
        [DataMember(Name="type")]
        public X509CertificateUsageTypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [Required]
        
        [DataMember(Name="service")]
        public X509CertificateServiceEnum? Service { get; set; }

        /// <summary>
        /// Scope defines a subset of certificates belonging to one Service. Scope here defines what Certificate Signing Request (CSR) can be generated. The scope for CSR Generation only includes: - Certificate with Service Management_HTTP and Type of Server, Scope value can only be External - Certificate with Service VASA_HTTP and Type of Server, Scope value can be null(unused and optional) - Certificate with Service KMIP_HTTP and Type of Client, Scope value can be null(unused and optional) - Certificate with Service Syslog_HTTP and Type of Client, Scope value can be null(unused and optional) - Certificate with Service SecurID_HTTP and Type of CA, scope has to be the unique ID of the MFA service. 
        /// </summary>
        /// <value>Scope defines a subset of certificates belonging to one Service. Scope here defines what Certificate Signing Request (CSR) can be generated. The scope for CSR Generation only includes: - Certificate with Service Management_HTTP and Type of Server, Scope value can only be External - Certificate with Service VASA_HTTP and Type of Server, Scope value can be null(unused and optional) - Certificate with Service KMIP_HTTP and Type of Client, Scope value can be null(unused and optional) - Certificate with Service Syslog_HTTP and Type of Client, Scope value can be null(unused and optional) - Certificate with Service SecurID_HTTP and Type of CA, scope has to be the unique ID of the MFA service. </value>

        [DataMember(Name="scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Part of distinguished name. e.g., www.dell.common.
        /// </summary>
        /// <value>Part of distinguished name. e.g., www.dell.common.</value>

        [StringLength(64, MinimumLength=0)]
        [DataMember(Name="common_name")]
        public string CommonName { get; set; }

        /// <summary>
        /// DNS names in the certificate extensions
        /// </summary>
        /// <value>DNS names in the certificate extensions</value>

        [DataMember(Name="dns_name")]
        public List<string> DnsName { get; set; }

        /// <summary>
        /// IP addresses in the certificate extensions
        /// </summary>
        /// <value>IP addresses in the certificate extensions</value>

        [DataMember(Name="ip_addresses")]
        public List<string> IpAddresses { get; set; }

        /// <summary>
        /// Part of distinguished name. e.g., Security Department.
        /// </summary>
        /// <value>Part of distinguished name. e.g., Security Department.</value>

        [StringLength(64, MinimumLength=0)]
        [DataMember(Name="organizational_unit")]
        public string OrganizationalUnit { get; set; }

        /// <summary>
        /// Part of distinguished name. e.g., Dell.
        /// </summary>
        /// <value>Part of distinguished name. e.g., Dell.</value>

        [StringLength(64, MinimumLength=0)]
        [DataMember(Name="organization")]
        public string Organization { get; set; }

        /// <summary>
        /// Part of distinguished name. e.g., Hopkinton.
        /// </summary>
        /// <value>Part of distinguished name. e.g., Hopkinton.</value>

        [StringLength(128, MinimumLength=0)]
        [DataMember(Name="locality")]
        public string Locality { get; set; }

        /// <summary>
        /// Part of distinguished name. e.g., Massachusetts.
        /// </summary>
        /// <value>Part of distinguished name. e.g., Massachusetts.</value>

        [StringLength(128, MinimumLength=0)]
        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// Part of distinguished name. e.g., US.
        /// </summary>
        /// <value>Part of distinguished name. e.g., US.</value>

        [StringLength(2, MinimumLength=2)]
        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Private key length. It can only be 2048 or 4096.
        /// </summary>
        /// <value>Private key length. It can only be 2048 or 4096.</value>
        [Required]
        
        [Range(2048, 4096)]
        [DataMember(Name="key_length")]
        public int? KeyLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class X509CertificateCsr {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  DnsName: ").Append(DnsName).Append("\n");
            sb.Append("  IpAddresses: ").Append(IpAddresses).Append("\n");
            sb.Append("  OrganizationalUnit: ").Append(OrganizationalUnit).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  KeyLength: ").Append(KeyLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((X509CertificateCsr)obj);
        }

        /// <summary>
        /// Returns true if X509CertificateCsr instances are equal
        /// </summary>
        /// <param name="other">Instance of X509CertificateCsr to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(X509CertificateCsr other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Service == other.Service ||
                    Service != null &&
                    Service.Equals(other.Service)
                ) && 
                (
                    Scope == other.Scope ||
                    Scope != null &&
                    Scope.Equals(other.Scope)
                ) && 
                (
                    CommonName == other.CommonName ||
                    CommonName != null &&
                    CommonName.Equals(other.CommonName)
                ) && 
                (
                    DnsName == other.DnsName ||
                    DnsName != null &&
                    DnsName.SequenceEqual(other.DnsName)
                ) && 
                (
                    IpAddresses == other.IpAddresses ||
                    IpAddresses != null &&
                    IpAddresses.SequenceEqual(other.IpAddresses)
                ) && 
                (
                    OrganizationalUnit == other.OrganizationalUnit ||
                    OrganizationalUnit != null &&
                    OrganizationalUnit.Equals(other.OrganizationalUnit)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) && 
                (
                    Locality == other.Locality ||
                    Locality != null &&
                    Locality.Equals(other.Locality)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    KeyLength == other.KeyLength ||
                    KeyLength != null &&
                    KeyLength.Equals(other.KeyLength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Service != null)
                    hashCode = hashCode * 59 + Service.GetHashCode();
                    if (Scope != null)
                    hashCode = hashCode * 59 + Scope.GetHashCode();
                    if (CommonName != null)
                    hashCode = hashCode * 59 + CommonName.GetHashCode();
                    if (DnsName != null)
                    hashCode = hashCode * 59 + DnsName.GetHashCode();
                    if (IpAddresses != null)
                    hashCode = hashCode * 59 + IpAddresses.GetHashCode();
                    if (OrganizationalUnit != null)
                    hashCode = hashCode * 59 + OrganizationalUnit.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (Locality != null)
                    hashCode = hashCode * 59 + Locality.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (KeyLength != null)
                    hashCode = hashCode * 59 + KeyLength.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(X509CertificateCsr left, X509CertificateCsr right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(X509CertificateCsr left, X509CertificateCsr right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
