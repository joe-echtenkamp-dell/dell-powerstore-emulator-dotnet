/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// One Access Control Entry (ACE) for an SMB share. An ACE can either allow or deny read, write, or full access to one trustee (a user, group, or SID).  Was added in version 3.5.0.0.
    /// </summary>
    [DataContract]
    public partial class SmbShareAce : IEquatable<SmbShareAce>
    { 
        /// <summary>
        /// Gets or Sets TrusteeType
        /// </summary>
        [Required]
        
        [DataMember(Name="trustee_type")]
        public SMBShareTrusteeTypeEnum? TrusteeType { get; set; }

        /// <summary>
        /// Trustee name can be User name or Group name or SID or WellKnown Name. Format is \&quot;domain\\username\&quot; or \&quot;domain\\groupname for domain user/group or netbiosName\\groupname or netbiosName\\username for local group. Security Identifier (SID) such as S-1-5-21-843271493-548684746-1849754324-32 wellKnown such as Everyone. 
        /// </summary>
        /// <value>Trustee name can be User name or Group name or SID or WellKnown Name. Format is \&quot;domain\\username\&quot; or \&quot;domain\\groupname for domain user/group or netbiosName\\groupname or netbiosName\\username for local group. Security Identifier (SID) such as S-1-5-21-843271493-548684746-1849754324-32 wellKnown such as Everyone. </value>
        [Required]
        
        [DataMember(Name="trustee_name")]
        public string TrusteeName { get; set; }

        /// <summary>
        /// Gets or Sets AccessLevel
        /// </summary>
        [Required]
        
        [DataMember(Name="access_level")]
        public SMBShareAccessLevelEnum? AccessLevel { get; set; }

        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [Required]
        
        [DataMember(Name="access_type")]
        public SMBShareAccessTypeEnum? AccessType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmbShareAce {\n");
            sb.Append("  TrusteeType: ").Append(TrusteeType).Append("\n");
            sb.Append("  TrusteeName: ").Append(TrusteeName).Append("\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmbShareAce)obj);
        }

        /// <summary>
        /// Returns true if SmbShareAce instances are equal
        /// </summary>
        /// <param name="other">Instance of SmbShareAce to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmbShareAce other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TrusteeType == other.TrusteeType ||
                    TrusteeType != null &&
                    TrusteeType.Equals(other.TrusteeType)
                ) && 
                (
                    TrusteeName == other.TrusteeName ||
                    TrusteeName != null &&
                    TrusteeName.Equals(other.TrusteeName)
                ) && 
                (
                    AccessLevel == other.AccessLevel ||
                    AccessLevel != null &&
                    AccessLevel.Equals(other.AccessLevel)
                ) && 
                (
                    AccessType == other.AccessType ||
                    AccessType != null &&
                    AccessType.Equals(other.AccessType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TrusteeType != null)
                    hashCode = hashCode * 59 + TrusteeType.GetHashCode();
                    if (TrusteeName != null)
                    hashCode = hashCode * 59 + TrusteeName.GetHashCode();
                    if (AccessLevel != null)
                    hashCode = hashCode * 59 + AccessLevel.GetHashCode();
                    if (AccessType != null)
                    hashCode = hashCode * 59 + AccessType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmbShareAce left, SmbShareAce right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmbShareAce left, SmbShareAce right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
