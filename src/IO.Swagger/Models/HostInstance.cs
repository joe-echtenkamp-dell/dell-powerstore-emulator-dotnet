/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a host. This resource type has queriable associations from host_group, import_host_system, initiator, host_volume_mapping, host_virtual_volume_mapping, vsphere_host
    /// </summary>
    [DataContract]
    public partial class HostInstance : IEquatable<HostInstance>
    { 
        /// <summary>
        /// Unique identifier of the host.
        /// </summary>
        /// <value>Unique identifier of the host.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The host name.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>The host name.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// A description for the host.
        /// </summary>
        /// <value>A description for the host.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        ///  Was added in version 2.0.0.0.
        /// </summary>
        /// <value> Was added in version 2.0.0.0.</value>

        [DataMember(Name="type")]
        public HostTypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets OsType
        /// </summary>

        [DataMember(Name="os_type")]
        public OSTypeEnum? OsType { get; set; }

        /// <summary>
        /// Associated host group, if host is part of host group.
        /// </summary>
        /// <value>Associated host group, if host is part of host group.</value>

        [DataMember(Name="host_group_id")]
        public string HostGroupId { get; set; }

        /// <summary>
        /// Unique Identifier of the Host Agent System.
        /// </summary>
        /// <value>Unique Identifier of the Host Agent System.</value>

        [DataMember(Name="import_host_system_id")]
        public string ImportHostSystemId { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="host_connectivity")]
        public HostConnectivityEnum? HostConnectivity { get; set; }

        /// <summary>
        ///  Was deprecated in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value> Was deprecated in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="host_initiators")]
        public List<HostInitiatorInstance> HostInitiators { get; set; }

        /// <summary>
        /// Localized message string corresponding to type Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to type Was added in version 2.0.0.0.</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to os_type
        /// </summary>
        /// <value>Localized message string corresponding to os_type</value>

        [DataMember(Name="os_type_l10n")]
        public string OsTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to host_connectivity Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to host_connectivity Was added in version 3.0.0.0.</value>

        [DataMember(Name="host_connectivity_l10n")]
        public string HostConnectivityL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type initiator association.
        /// </summary>
        /// <value>This is the inverse of the resource type initiator association.</value>

        [DataMember(Name="initiators")]
        public List<InitiatorInstance> Initiators { get; set; }

        /// <summary>
        /// This is the embeddable reference form of host_group_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of host_group_id attribute.</value>

        [DataMember(Name="host_group")]
        public HostGroupInstance HostGroup { get; set; }

        /// <summary>
        /// This is the embeddable reference form of import_host_system_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of import_host_system_id attribute.</value>

        [DataMember(Name="import_host_system")]
        public ImportHostSystemInstance ImportHostSystem { get; set; }

        /// <summary>
        /// This is the inverse of the resource type host_volume_mapping association.
        /// </summary>
        /// <value>This is the inverse of the resource type host_volume_mapping association.</value>

        [DataMember(Name="mapped_hosts")]
        public List<HostVolumeMappingInstance> MappedHosts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type host_virtual_volume_mapping association.
        /// </summary>
        /// <value>This is the inverse of the resource type host_virtual_volume_mapping association.</value>

        [DataMember(Name="host_virtual_volume_mappings")]
        public List<HostVirtualVolumeMappingInstance> HostVirtualVolumeMappings { get; set; }

        /// <summary>
        /// List of the vsphere_hosts that are associated with this host.
        /// </summary>
        /// <value>List of the vsphere_hosts that are associated with this host.</value>

        [DataMember(Name="vsphere_hosts")]
        public List<VsphereHostInstance> VsphereHosts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OsType: ").Append(OsType).Append("\n");
            sb.Append("  HostGroupId: ").Append(HostGroupId).Append("\n");
            sb.Append("  ImportHostSystemId: ").Append(ImportHostSystemId).Append("\n");
            sb.Append("  HostConnectivity: ").Append(HostConnectivity).Append("\n");
            sb.Append("  HostInitiators: ").Append(HostInitiators).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  OsTypeL10n: ").Append(OsTypeL10n).Append("\n");
            sb.Append("  HostConnectivityL10n: ").Append(HostConnectivityL10n).Append("\n");
            sb.Append("  Initiators: ").Append(Initiators).Append("\n");
            sb.Append("  HostGroup: ").Append(HostGroup).Append("\n");
            sb.Append("  ImportHostSystem: ").Append(ImportHostSystem).Append("\n");
            sb.Append("  MappedHosts: ").Append(MappedHosts).Append("\n");
            sb.Append("  HostVirtualVolumeMappings: ").Append(HostVirtualVolumeMappings).Append("\n");
            sb.Append("  VsphereHosts: ").Append(VsphereHosts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HostInstance)obj);
        }

        /// <summary>
        /// Returns true if HostInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of HostInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    OsType == other.OsType ||
                    OsType != null &&
                    OsType.Equals(other.OsType)
                ) && 
                (
                    HostGroupId == other.HostGroupId ||
                    HostGroupId != null &&
                    HostGroupId.Equals(other.HostGroupId)
                ) && 
                (
                    ImportHostSystemId == other.ImportHostSystemId ||
                    ImportHostSystemId != null &&
                    ImportHostSystemId.Equals(other.ImportHostSystemId)
                ) && 
                (
                    HostConnectivity == other.HostConnectivity ||
                    HostConnectivity != null &&
                    HostConnectivity.Equals(other.HostConnectivity)
                ) && 
                (
                    HostInitiators == other.HostInitiators ||
                    HostInitiators != null &&
                    HostInitiators.SequenceEqual(other.HostInitiators)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    OsTypeL10n == other.OsTypeL10n ||
                    OsTypeL10n != null &&
                    OsTypeL10n.Equals(other.OsTypeL10n)
                ) && 
                (
                    HostConnectivityL10n == other.HostConnectivityL10n ||
                    HostConnectivityL10n != null &&
                    HostConnectivityL10n.Equals(other.HostConnectivityL10n)
                ) && 
                (
                    Initiators == other.Initiators ||
                    Initiators != null &&
                    Initiators.SequenceEqual(other.Initiators)
                ) && 
                (
                    HostGroup == other.HostGroup ||
                    HostGroup != null &&
                    HostGroup.Equals(other.HostGroup)
                ) && 
                (
                    ImportHostSystem == other.ImportHostSystem ||
                    ImportHostSystem != null &&
                    ImportHostSystem.Equals(other.ImportHostSystem)
                ) && 
                (
                    MappedHosts == other.MappedHosts ||
                    MappedHosts != null &&
                    MappedHosts.SequenceEqual(other.MappedHosts)
                ) && 
                (
                    HostVirtualVolumeMappings == other.HostVirtualVolumeMappings ||
                    HostVirtualVolumeMappings != null &&
                    HostVirtualVolumeMappings.SequenceEqual(other.HostVirtualVolumeMappings)
                ) && 
                (
                    VsphereHosts == other.VsphereHosts ||
                    VsphereHosts != null &&
                    VsphereHosts.SequenceEqual(other.VsphereHosts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (OsType != null)
                    hashCode = hashCode * 59 + OsType.GetHashCode();
                    if (HostGroupId != null)
                    hashCode = hashCode * 59 + HostGroupId.GetHashCode();
                    if (ImportHostSystemId != null)
                    hashCode = hashCode * 59 + ImportHostSystemId.GetHashCode();
                    if (HostConnectivity != null)
                    hashCode = hashCode * 59 + HostConnectivity.GetHashCode();
                    if (HostInitiators != null)
                    hashCode = hashCode * 59 + HostInitiators.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (OsTypeL10n != null)
                    hashCode = hashCode * 59 + OsTypeL10n.GetHashCode();
                    if (HostConnectivityL10n != null)
                    hashCode = hashCode * 59 + HostConnectivityL10n.GetHashCode();
                    if (Initiators != null)
                    hashCode = hashCode * 59 + Initiators.GetHashCode();
                    if (HostGroup != null)
                    hashCode = hashCode * 59 + HostGroup.GetHashCode();
                    if (ImportHostSystem != null)
                    hashCode = hashCode * 59 + ImportHostSystem.GetHashCode();
                    if (MappedHosts != null)
                    hashCode = hashCode * 59 + MappedHosts.GetHashCode();
                    if (HostVirtualVolumeMappings != null)
                    hashCode = hashCode * 59 + HostVirtualVolumeMappings.GetHashCode();
                    if (VsphereHosts != null)
                    hashCode = hashCode * 59 + VsphereHosts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HostInstance left, HostInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HostInstance left, HostInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
