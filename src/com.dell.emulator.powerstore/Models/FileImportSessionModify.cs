/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    ///  Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileImportSessionModify : IEquatable<FileImportSessionModify>
    { 
        /// <summary>
        /// The name of the Import Session. 
        /// </summary>
        /// <value>The name of the Import Session. </value>

        [MaxLength(32)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the file import session.     The name can contain a maximum of 128 Unicode characters.     It cannot contain unprintable characters. 
        /// </summary>
        /// <value>Description of the file import session.     The name can contain a maximum of 128 Unicode characters.     It cannot contain unprintable characters. </value>

        [MaxLength(128)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Indicates the new date and time at which the import session is scheduled to run. The date is specified in ISO 8601 format with time expressed in UTC format. 
        /// </summary>
        /// <value>Indicates the new date and time at which the import session is scheduled to run. The date is specified in ISO 8601 format with time expressed in UTC format. </value>

        [DataMember(Name="scheduled_timestamp")]
        public DateTime? ScheduledTimestamp { get; set; }

        /// <summary>
        /// User name for authentication to SMB Server on the source NAS Server with administrator privilege. 
        /// </summary>
        /// <value>User name for authentication to SMB Server on the source NAS Server with administrator privilege. </value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="source_smb_admin_username")]
        public string SourceSmbAdminUsername { get; set; }

        /// <summary>
        /// Password for authentication to SMB Server on the source NAS Server with administrator privilege. 
        /// </summary>
        /// <value>Password for authentication to SMB Server on the source NAS Server with administrator privilege. </value>

        [MaxLength(1023)]
        [DataMember(Name="source_smb_admin_password")]
        public string SourceSmbAdminPassword { get; set; }

        /// <summary>
        /// The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems. 
        /// </summary>
        /// <value>The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems. </value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="source_dhsm_username")]
        public string SourceDhsmUsername { get; set; }

        /// <summary>
        /// The password for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems. 
        /// </summary>
        /// <value>The password for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems. </value>

        [MaxLength(1023)]
        [DataMember(Name="source_dhsm_password")]
        public string SourceDhsmPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileImportSessionModify {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ScheduledTimestamp: ").Append(ScheduledTimestamp).Append("\n");
            sb.Append("  SourceSmbAdminUsername: ").Append(SourceSmbAdminUsername).Append("\n");
            sb.Append("  SourceSmbAdminPassword: ").Append(SourceSmbAdminPassword).Append("\n");
            sb.Append("  SourceDhsmUsername: ").Append(SourceDhsmUsername).Append("\n");
            sb.Append("  SourceDhsmPassword: ").Append(SourceDhsmPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileImportSessionModify)obj);
        }

        /// <summary>
        /// Returns true if FileImportSessionModify instances are equal
        /// </summary>
        /// <param name="other">Instance of FileImportSessionModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileImportSessionModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ScheduledTimestamp == other.ScheduledTimestamp ||
                    ScheduledTimestamp != null &&
                    ScheduledTimestamp.Equals(other.ScheduledTimestamp)
                ) && 
                (
                    SourceSmbAdminUsername == other.SourceSmbAdminUsername ||
                    SourceSmbAdminUsername != null &&
                    SourceSmbAdminUsername.Equals(other.SourceSmbAdminUsername)
                ) && 
                (
                    SourceSmbAdminPassword == other.SourceSmbAdminPassword ||
                    SourceSmbAdminPassword != null &&
                    SourceSmbAdminPassword.Equals(other.SourceSmbAdminPassword)
                ) && 
                (
                    SourceDhsmUsername == other.SourceDhsmUsername ||
                    SourceDhsmUsername != null &&
                    SourceDhsmUsername.Equals(other.SourceDhsmUsername)
                ) && 
                (
                    SourceDhsmPassword == other.SourceDhsmPassword ||
                    SourceDhsmPassword != null &&
                    SourceDhsmPassword.Equals(other.SourceDhsmPassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ScheduledTimestamp != null)
                    hashCode = hashCode * 59 + ScheduledTimestamp.GetHashCode();
                    if (SourceSmbAdminUsername != null)
                    hashCode = hashCode * 59 + SourceSmbAdminUsername.GetHashCode();
                    if (SourceSmbAdminPassword != null)
                    hashCode = hashCode * 59 + SourceSmbAdminPassword.GetHashCode();
                    if (SourceDhsmUsername != null)
                    hashCode = hashCode * 59 + SourceDhsmUsername.GetHashCode();
                    if (SourceDhsmPassword != null)
                    hashCode = hashCode * 59 + SourceDhsmPassword.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileImportSessionModify left, FileImportSessionModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileImportSessionModify left, FileImportSessionModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
