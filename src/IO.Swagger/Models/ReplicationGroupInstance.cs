/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a Replication Group. Was added in version 3.0.0.0. This resource type has queriable associations from storage_container, replication_group, virtual_volume, virtual_machine, policy
    /// </summary>
    [DataContract]
    public partial class ReplicationGroupInstance : IEquatable<ReplicationGroupInstance>
    { 
        /// <summary>
        /// Unique identifier of the Replication Group instance.
        /// </summary>
        /// <value>Unique identifier of the Replication Group instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The storage container where the replication group resides.
        /// </summary>
        /// <value>The storage container where the replication group resides.</value>

        [DataMember(Name="storage_container_id")]
        public string StorageContainerId { get; set; }

        /// <summary>
        /// Name of the Replication Group.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the Replication Group.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the Replication Group.
        /// </summary>
        /// <value>Description of the Replication Group.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreatorType
        /// </summary>

        [DataMember(Name="creator_type")]
        public StorageCreatorTypeEnum? CreatorType { get; set; }

        /// <summary>
        /// Timestamp when given replication group was created.
        /// </summary>
        /// <value>Timestamp when given replication group was created.</value>

        [DataMember(Name="creation_timestamp")]
        public DateTime? CreationTimestamp { get; set; }

        /// <summary>
        /// Indicates whether replication group is replication destination or not.
        /// </summary>
        /// <value>Indicates whether replication group is replication destination or not.</value>

        [DataMember(Name="is_replication_destination")]
        public bool? IsReplicationDestination { get; set; }

        /// <summary>
        /// For snapshots, the ID of the parent replication group.
        /// </summary>
        /// <value>For snapshots, the ID of the parent replication group.</value>

        [DataMember(Name="parent_id")]
        public string ParentId { get; set; }

        /// <summary>
        /// Id of the replication group from which the content has been sourced.
        /// </summary>
        /// <value>Id of the replication group from which the content has been sourced.</value>

        [DataMember(Name="source_id")]
        public string SourceId { get; set; }

        /// <summary>
        /// Localized message string corresponding to creator_type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to creator_type Was added in version 3.0.0.0.</value>

        [DataMember(Name="creator_type_l10n")]
        public string CreatorTypeL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_volume association.</value>

        [DataMember(Name="virtual_volumes")]
        public List<VirtualVolumeInstance> VirtualVolumes { get; set; }

        /// <summary>
        /// This is the embeddable reference form of storage_container_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of storage_container_id attribute.</value>

        [DataMember(Name="storage_container")]
        public StorageContainerInstance StorageContainer { get; set; }

        /// <summary>
        /// This is the embeddable reference form of parent_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of parent_id attribute.</value>

        [DataMember(Name="parent")]
        public ReplicationGroupInstance Parent { get; set; }

        /// <summary>
        /// This is the inverse of the resource type replication_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type replication_group association.</value>

        [DataMember(Name="child_replication_groups")]
        public List<ReplicationGroupInstance> ChildReplicationGroups { get; set; }

        /// <summary>
        /// This is the embeddable reference form of source_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of source_id attribute.</value>

        [DataMember(Name="source")]
        public ReplicationGroupInstance Source { get; set; }

        /// <summary>
        /// This is the inverse of the resource type replication_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type replication_group association.</value>

        [DataMember(Name="target_replication_groups")]
        public List<ReplicationGroupInstance> TargetReplicationGroups { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_machine association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_machine association.</value>

        [DataMember(Name="virtual_machines")]
        public List<VirtualMachineInstance> VirtualMachines { get; set; }

        /// <summary>
        /// List of the policies that are associated with this replication_group.
        /// </summary>
        /// <value>List of the policies that are associated with this replication_group.</value>

        [DataMember(Name="policies")]
        public List<PolicyInstance> Policies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationGroupInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StorageContainerId: ").Append(StorageContainerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatorType: ").Append(CreatorType).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  IsReplicationDestination: ").Append(IsReplicationDestination).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  CreatorTypeL10n: ").Append(CreatorTypeL10n).Append("\n");
            sb.Append("  VirtualVolumes: ").Append(VirtualVolumes).Append("\n");
            sb.Append("  StorageContainer: ").Append(StorageContainer).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  ChildReplicationGroups: ").Append(ChildReplicationGroups).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TargetReplicationGroups: ").Append(TargetReplicationGroups).Append("\n");
            sb.Append("  VirtualMachines: ").Append(VirtualMachines).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReplicationGroupInstance)obj);
        }

        /// <summary>
        /// Returns true if ReplicationGroupInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationGroupInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationGroupInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    StorageContainerId == other.StorageContainerId ||
                    StorageContainerId != null &&
                    StorageContainerId.Equals(other.StorageContainerId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CreatorType == other.CreatorType ||
                    CreatorType != null &&
                    CreatorType.Equals(other.CreatorType)
                ) && 
                (
                    CreationTimestamp == other.CreationTimestamp ||
                    CreationTimestamp != null &&
                    CreationTimestamp.Equals(other.CreationTimestamp)
                ) && 
                (
                    IsReplicationDestination == other.IsReplicationDestination ||
                    IsReplicationDestination != null &&
                    IsReplicationDestination.Equals(other.IsReplicationDestination)
                ) && 
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    SourceId == other.SourceId ||
                    SourceId != null &&
                    SourceId.Equals(other.SourceId)
                ) && 
                (
                    CreatorTypeL10n == other.CreatorTypeL10n ||
                    CreatorTypeL10n != null &&
                    CreatorTypeL10n.Equals(other.CreatorTypeL10n)
                ) && 
                (
                    VirtualVolumes == other.VirtualVolumes ||
                    VirtualVolumes != null &&
                    VirtualVolumes.SequenceEqual(other.VirtualVolumes)
                ) && 
                (
                    StorageContainer == other.StorageContainer ||
                    StorageContainer != null &&
                    StorageContainer.Equals(other.StorageContainer)
                ) && 
                (
                    Parent == other.Parent ||
                    Parent != null &&
                    Parent.Equals(other.Parent)
                ) && 
                (
                    ChildReplicationGroups == other.ChildReplicationGroups ||
                    ChildReplicationGroups != null &&
                    ChildReplicationGroups.SequenceEqual(other.ChildReplicationGroups)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    TargetReplicationGroups == other.TargetReplicationGroups ||
                    TargetReplicationGroups != null &&
                    TargetReplicationGroups.SequenceEqual(other.TargetReplicationGroups)
                ) && 
                (
                    VirtualMachines == other.VirtualMachines ||
                    VirtualMachines != null &&
                    VirtualMachines.SequenceEqual(other.VirtualMachines)
                ) && 
                (
                    Policies == other.Policies ||
                    Policies != null &&
                    Policies.SequenceEqual(other.Policies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (StorageContainerId != null)
                    hashCode = hashCode * 59 + StorageContainerId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CreatorType != null)
                    hashCode = hashCode * 59 + CreatorType.GetHashCode();
                    if (CreationTimestamp != null)
                    hashCode = hashCode * 59 + CreationTimestamp.GetHashCode();
                    if (IsReplicationDestination != null)
                    hashCode = hashCode * 59 + IsReplicationDestination.GetHashCode();
                    if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (SourceId != null)
                    hashCode = hashCode * 59 + SourceId.GetHashCode();
                    if (CreatorTypeL10n != null)
                    hashCode = hashCode * 59 + CreatorTypeL10n.GetHashCode();
                    if (VirtualVolumes != null)
                    hashCode = hashCode * 59 + VirtualVolumes.GetHashCode();
                    if (StorageContainer != null)
                    hashCode = hashCode * 59 + StorageContainer.GetHashCode();
                    if (Parent != null)
                    hashCode = hashCode * 59 + Parent.GetHashCode();
                    if (ChildReplicationGroups != null)
                    hashCode = hashCode * 59 + ChildReplicationGroups.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (TargetReplicationGroups != null)
                    hashCode = hashCode * 59 + TargetReplicationGroups.GetHashCode();
                    if (VirtualMachines != null)
                    hashCode = hashCode * 59 + VirtualMachines.GetHashCode();
                    if (Policies != null)
                    hashCode = hashCode * 59 + Policies.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReplicationGroupInstance left, ReplicationGroupInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReplicationGroupInstance left, ReplicationGroupInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
