/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Information about a remote snapshot. Was added in version 3.5.0.0. This resource type has queriable associations from volume, volume_group, remote_system, remote_snapshot_session
    /// </summary>
    [DataContract]
    public partial class RemoteSnapshotInstance : IEquatable<RemoteSnapshotInstance>
    { 
        /// <summary>
        /// Unique identifier of the remote snapshot.
        /// </summary>
        /// <value>Unique identifier of the remote snapshot.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the remote snapshot.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the remote snapshot.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Unique identifier of snapshot generated by remote system.
        /// </summary>
        /// <value>Unique identifier of snapshot generated by remote system.</value>

        [DataMember(Name="remote_backup_identifier")]
        public string RemoteBackupIdentifier { get; set; }

        /// <summary>
        /// Unique identifier of the local volume to which this snapshot belongs. This will be null if the volume is deleted or this is a volume_group snapshot.
        /// </summary>
        /// <value>Unique identifier of the local volume to which this snapshot belongs. This will be null if the volume is deleted or this is a volume_group snapshot.</value>

        [DataMember(Name="volume_id")]
        public string VolumeId { get; set; }

        /// <summary>
        /// Unique identifier of the local volume_group to which this snapshot belongs. This will be null if the volume_group is deleted or this is a volume snapshot.
        /// </summary>
        /// <value>Unique identifier of the local volume_group to which this snapshot belongs. This will be null if the volume_group is deleted or this is a volume snapshot.</value>

        [DataMember(Name="volume_group_id")]
        public string VolumeGroupId { get; set; }

        /// <summary>
        /// This indicates whether local volume or volume group to which this snapshot belongs is in recycle bin. If local volume or volume group is deleted this will be false.
        /// </summary>
        /// <value>This indicates whether local volume or volume group to which this snapshot belongs is in recycle bin. If local volume or volume group is deleted this will be false.</value>

        [DataMember(Name="is_source_in_recycle_bin")]
        public bool? IsSourceInRecycleBin { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public RemoteSnapshotStateEnum? State { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>

        [DataMember(Name="resource_type")]
        public RemoteSnapshotResourceTypeEnum? ResourceType { get; set; }

        /// <summary>
        /// List of remote member snapshots. Only applies to volume_group type.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>List of remote member snapshots. Only applies to volume_group type.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="remote_member_details")]
        public List<RemoteMemberDetailsInstance> RemoteMemberDetails { get; set; }

        /// <summary>
        /// Date/time the remote snapshot was taken by the array.
        /// </summary>
        /// <value>Date/time the remote snapshot was taken by the array.</value>

        [DataMember(Name="creation_timestamp")]
        public DateTime? CreationTimestamp { get; set; }

        /// <summary>
        /// Date/time when the remote snapshot will expire.
        /// </summary>
        /// <value>Date/time when the remote snapshot will expire.</value>

        [DataMember(Name="expiration_timestamp")]
        public DateTime? ExpirationTimestamp { get; set; }

        /// <summary>
        /// Unique identifier of the remote system.
        /// </summary>
        /// <value>Unique identifier of the remote system.</value>

        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Unique identifier of the source volume or volume_group. This preserves the value when the local volume/volume_group is deleted.
        /// </summary>
        /// <value>Unique identifier of the source volume or volume_group. This preserves the value when the local volume/volume_group is deleted.</value>

        [DataMember(Name="source_id")]
        public string SourceId { get; set; }

        /// <summary>
        /// Name of the source volume or volume_group. This preserves the value when the local volume/volume_group is deleted.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the source volume or volume_group. This preserves the value when the local volume/volume_group is deleted.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="source_name")]
        public string SourceName { get; set; }

        /// <summary>
        /// Gets or Sets CreatorType
        /// </summary>

        [DataMember(Name="creator_type")]
        public RemoteSnapshotCreatorTypeEnum? CreatorType { get; set; }

        /// <summary>
        /// Localized message string corresponding to state Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to state Was added in version 3.5.0.0.</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to resource_type Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to resource_type Was added in version 3.5.0.0.</value>

        [DataMember(Name="resource_type_l10n")]
        public string ResourceTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to creator_type Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to creator_type Was added in version 3.5.0.0.</value>

        [DataMember(Name="creator_type_l10n")]
        public string CreatorTypeL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type remote_snapshot_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type remote_snapshot_session association.</value>

        [DataMember(Name="remote_snapshots")]
        public List<RemoteSnapshotSessionInstance> RemoteSnapshots { get; set; }

        /// <summary>
        /// This is the embeddable reference form of volume_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of volume_id attribute.</value>

        [DataMember(Name="volume")]
        public VolumeInstance Volume { get; set; }

        /// <summary>
        /// This is the embeddable reference form of volume_group_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of volume_group_id attribute.</value>

        [DataMember(Name="volume_group")]
        public VolumeGroupInstance VolumeGroup { get; set; }

        /// <summary>
        /// This is the embeddable reference form of remote_system_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of remote_system_id attribute.</value>

        [DataMember(Name="remote_system")]
        public RemoteSystemInstance RemoteSystem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSnapshotInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RemoteBackupIdentifier: ").Append(RemoteBackupIdentifier).Append("\n");
            sb.Append("  VolumeId: ").Append(VolumeId).Append("\n");
            sb.Append("  VolumeGroupId: ").Append(VolumeGroupId).Append("\n");
            sb.Append("  IsSourceInRecycleBin: ").Append(IsSourceInRecycleBin).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  RemoteMemberDetails: ").Append(RemoteMemberDetails).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  CreatorType: ").Append(CreatorType).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  ResourceTypeL10n: ").Append(ResourceTypeL10n).Append("\n");
            sb.Append("  CreatorTypeL10n: ").Append(CreatorTypeL10n).Append("\n");
            sb.Append("  RemoteSnapshots: ").Append(RemoteSnapshots).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  VolumeGroup: ").Append(VolumeGroup).Append("\n");
            sb.Append("  RemoteSystem: ").Append(RemoteSystem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteSnapshotInstance)obj);
        }

        /// <summary>
        /// Returns true if RemoteSnapshotInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteSnapshotInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSnapshotInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RemoteBackupIdentifier == other.RemoteBackupIdentifier ||
                    RemoteBackupIdentifier != null &&
                    RemoteBackupIdentifier.Equals(other.RemoteBackupIdentifier)
                ) && 
                (
                    VolumeId == other.VolumeId ||
                    VolumeId != null &&
                    VolumeId.Equals(other.VolumeId)
                ) && 
                (
                    VolumeGroupId == other.VolumeGroupId ||
                    VolumeGroupId != null &&
                    VolumeGroupId.Equals(other.VolumeGroupId)
                ) && 
                (
                    IsSourceInRecycleBin == other.IsSourceInRecycleBin ||
                    IsSourceInRecycleBin != null &&
                    IsSourceInRecycleBin.Equals(other.IsSourceInRecycleBin)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    RemoteMemberDetails == other.RemoteMemberDetails ||
                    RemoteMemberDetails != null &&
                    RemoteMemberDetails.SequenceEqual(other.RemoteMemberDetails)
                ) && 
                (
                    CreationTimestamp == other.CreationTimestamp ||
                    CreationTimestamp != null &&
                    CreationTimestamp.Equals(other.CreationTimestamp)
                ) && 
                (
                    ExpirationTimestamp == other.ExpirationTimestamp ||
                    ExpirationTimestamp != null &&
                    ExpirationTimestamp.Equals(other.ExpirationTimestamp)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    SourceId == other.SourceId ||
                    SourceId != null &&
                    SourceId.Equals(other.SourceId)
                ) && 
                (
                    SourceName == other.SourceName ||
                    SourceName != null &&
                    SourceName.Equals(other.SourceName)
                ) && 
                (
                    CreatorType == other.CreatorType ||
                    CreatorType != null &&
                    CreatorType.Equals(other.CreatorType)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    ResourceTypeL10n == other.ResourceTypeL10n ||
                    ResourceTypeL10n != null &&
                    ResourceTypeL10n.Equals(other.ResourceTypeL10n)
                ) && 
                (
                    CreatorTypeL10n == other.CreatorTypeL10n ||
                    CreatorTypeL10n != null &&
                    CreatorTypeL10n.Equals(other.CreatorTypeL10n)
                ) && 
                (
                    RemoteSnapshots == other.RemoteSnapshots ||
                    RemoteSnapshots != null &&
                    RemoteSnapshots.SequenceEqual(other.RemoteSnapshots)
                ) && 
                (
                    Volume == other.Volume ||
                    Volume != null &&
                    Volume.Equals(other.Volume)
                ) && 
                (
                    VolumeGroup == other.VolumeGroup ||
                    VolumeGroup != null &&
                    VolumeGroup.Equals(other.VolumeGroup)
                ) && 
                (
                    RemoteSystem == other.RemoteSystem ||
                    RemoteSystem != null &&
                    RemoteSystem.Equals(other.RemoteSystem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RemoteBackupIdentifier != null)
                    hashCode = hashCode * 59 + RemoteBackupIdentifier.GetHashCode();
                    if (VolumeId != null)
                    hashCode = hashCode * 59 + VolumeId.GetHashCode();
                    if (VolumeGroupId != null)
                    hashCode = hashCode * 59 + VolumeGroupId.GetHashCode();
                    if (IsSourceInRecycleBin != null)
                    hashCode = hashCode * 59 + IsSourceInRecycleBin.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (RemoteMemberDetails != null)
                    hashCode = hashCode * 59 + RemoteMemberDetails.GetHashCode();
                    if (CreationTimestamp != null)
                    hashCode = hashCode * 59 + CreationTimestamp.GetHashCode();
                    if (ExpirationTimestamp != null)
                    hashCode = hashCode * 59 + ExpirationTimestamp.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (SourceId != null)
                    hashCode = hashCode * 59 + SourceId.GetHashCode();
                    if (SourceName != null)
                    hashCode = hashCode * 59 + SourceName.GetHashCode();
                    if (CreatorType != null)
                    hashCode = hashCode * 59 + CreatorType.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (ResourceTypeL10n != null)
                    hashCode = hashCode * 59 + ResourceTypeL10n.GetHashCode();
                    if (CreatorTypeL10n != null)
                    hashCode = hashCode * 59 + CreatorTypeL10n.GetHashCode();
                    if (RemoteSnapshots != null)
                    hashCode = hashCode * 59 + RemoteSnapshots.GetHashCode();
                    if (Volume != null)
                    hashCode = hashCode * 59 + Volume.GetHashCode();
                    if (VolumeGroup != null)
                    hashCode = hashCode * 59 + VolumeGroup.GetHashCode();
                    if (RemoteSystem != null)
                    hashCode = hashCode * 59 + RemoteSystem.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteSnapshotInstance left, RemoteSnapshotInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteSnapshotInstance left, RemoteSnapshotInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
