/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters for the volume clone operation.
    /// </summary>
    [DataContract]
    public partial class VolumeClone : IEquatable<VolumeClone>
    { 
        /// <summary>
        /// Name of the clone. This value must contain 128 or fewer printable Unicode characters. 
        /// </summary>
        /// <value>Name of the clone. This value must contain 128 or fewer printable Unicode characters. </value>

        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the clone. This value must contain 128 or fewer printable Unicode characters. 
        /// </summary>
        /// <value>Description of the clone. This value must contain 128 or fewer printable Unicode characters. </value>

        [MaxLength(128)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Unique identifier of the host to be attached to the clone. Only one of host_id or host_group_id can be supplied.  name:{name} can be used instead of {id}. For example: &#39;host_id&#39;:&#39;name:host_name&#39;
        /// </summary>
        /// <value>Unique identifier of the host to be attached to the clone. Only one of host_id or host_group_id can be supplied.  name:{name} can be used instead of {id}. For example: &#39;host_id&#39;:&#39;name:host_name&#39;</value>

        [DataMember(Name="host_id")]
        public string HostId { get; set; }

        /// <summary>
        /// Unique identifier of the host group to be attached to the clone. Only one of host_id or host_group_id can be supplied.  name:{name} can be used instead of {id}. For example: &#39;host_group_id&#39;:&#39;name:host_group_name&#39;
        /// </summary>
        /// <value>Unique identifier of the host group to be attached to the clone. Only one of host_id or host_group_id can be supplied.  name:{name} can be used instead of {id}. For example: &#39;host_group_id&#39;:&#39;name:host_group_name&#39;</value>

        [DataMember(Name="host_group_id")]
        public string HostGroupId { get; set; }

        /// <summary>
        /// Optional logical unit number when creating a mapped volume.  If no host_id or host_group_id is specified, this property is ignored. 
        /// </summary>
        /// <value>Optional logical unit number when creating a mapped volume.  If no host_id or host_group_id is specified, this property is ignored. </value>

        [Range(0, 16383)]
        [DataMember(Name="logical_unit_number")]
        public int? LogicalUnitNumber { get; set; }

        /// <summary>
        /// Unique identifier of the  performance policy. name:{name} can be used instead of {id}. For example: &#39;performance_policy_id&#39;:&#39;name:policy_name&#39;
        /// </summary>
        /// <value>Unique identifier of the  performance policy. name:{name} can be used instead of {id}. For example: &#39;performance_policy_id&#39;:&#39;name:policy_name&#39;</value>

        [DataMember(Name="performance_policy_id")]
        public string PerformancePolicyId { get; set; }

        /// <summary>
        /// Unique identifier of the QoS performance policy. name:{name} can be used instead of {id}. For example: &#39;qos_performance_policy_id&#39;:&#39;name:policy_name&#39; Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the QoS performance policy. name:{name} can be used instead of {id}. For example: &#39;qos_performance_policy_id&#39;:&#39;name:policy_name&#39; Was added in version 4.0.0.0.</value>

        [DataMember(Name="qos_performance_policy_id")]
        public string QosPerformancePolicyId { get; set; }

        /// <summary>
        /// Unique identifier of the protection policy. name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;
        /// </summary>
        /// <value>Unique identifier of the protection policy. name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;</value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeClone {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HostId: ").Append(HostId).Append("\n");
            sb.Append("  HostGroupId: ").Append(HostGroupId).Append("\n");
            sb.Append("  LogicalUnitNumber: ").Append(LogicalUnitNumber).Append("\n");
            sb.Append("  PerformancePolicyId: ").Append(PerformancePolicyId).Append("\n");
            sb.Append("  QosPerformancePolicyId: ").Append(QosPerformancePolicyId).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VolumeClone)obj);
        }

        /// <summary>
        /// Returns true if VolumeClone instances are equal
        /// </summary>
        /// <param name="other">Instance of VolumeClone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeClone other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HostId == other.HostId ||
                    HostId != null &&
                    HostId.Equals(other.HostId)
                ) && 
                (
                    HostGroupId == other.HostGroupId ||
                    HostGroupId != null &&
                    HostGroupId.Equals(other.HostGroupId)
                ) && 
                (
                    LogicalUnitNumber == other.LogicalUnitNumber ||
                    LogicalUnitNumber != null &&
                    LogicalUnitNumber.Equals(other.LogicalUnitNumber)
                ) && 
                (
                    PerformancePolicyId == other.PerformancePolicyId ||
                    PerformancePolicyId != null &&
                    PerformancePolicyId.Equals(other.PerformancePolicyId)
                ) && 
                (
                    QosPerformancePolicyId == other.QosPerformancePolicyId ||
                    QosPerformancePolicyId != null &&
                    QosPerformancePolicyId.Equals(other.QosPerformancePolicyId)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (HostId != null)
                    hashCode = hashCode * 59 + HostId.GetHashCode();
                    if (HostGroupId != null)
                    hashCode = hashCode * 59 + HostGroupId.GetHashCode();
                    if (LogicalUnitNumber != null)
                    hashCode = hashCode * 59 + LogicalUnitNumber.GetHashCode();
                    if (PerformancePolicyId != null)
                    hashCode = hashCode * 59 + PerformancePolicyId.GetHashCode();
                    if (QosPerformancePolicyId != null)
                    hashCode = hashCode * 59 + QosPerformancePolicyId.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VolumeClone left, VolumeClone right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VolumeClone left, VolumeClone right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
