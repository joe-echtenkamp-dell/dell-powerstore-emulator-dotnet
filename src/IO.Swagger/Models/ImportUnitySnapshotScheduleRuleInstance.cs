/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ImportUnitySnapshotScheduleRuleInstance : IEquatable<ImportUnitySnapshotScheduleRuleInstance>
    { 
        /// <summary>
        /// Unique identifier of the snapshot schedule rule .
        /// </summary>
        /// <value>Unique identifier of the snapshot schedule rule .</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Type of the snapshot schedule rule.
        /// </summary>
        /// <value>Type of the snapshot schedule rule.</value>

        [DataMember(Name="type")]
        public UnityScheduleTypeEnum? Type { get; set; }

        /// <summary>
        /// Snapshot schedule frequency.[0..59].
        /// </summary>
        /// <value>Snapshot schedule frequency.[0..59].</value>

        [Range(0, 59)]
        [DataMember(Name="minute")]
        public int? Minute { get; set; }

        /// <summary>
        /// Hourly frequency for the snapshot schedule rule.[0..23].
        /// </summary>
        /// <value>Hourly frequency for the snapshot schedule rule.[0..23].</value>

        [DataMember(Name="hours")]
        public List<int?> Hours { get; set; }

        /// <summary>
        /// Days of the week for which the snapshot schedule rule applies.
        /// </summary>
        /// <value>Days of the week for which the snapshot schedule rule applies.</value>

        [DataMember(Name="days_of_week")]
        public List<UnityDayofWeekEnum> DaysOfWeek { get; set; }

        /// <summary>
        /// Days of the month for which the snapshot schedule rule applies. [1..31]. 
        /// </summary>
        /// <value>Days of the month for which the snapshot schedule rule applies. [1..31]. </value>

        [DataMember(Name="days_of_month")]
        public List<int?> DaysOfMonth { get; set; }

        /// <summary>
        /// Number of days or hours between snaps, depending on the rule type. [1..31]. 
        /// </summary>
        /// <value>Number of days or hours between snaps, depending on the rule type. [1..31]. </value>

        [Range(1, 31)]
        [DataMember(Name="interval")]
        public int? Interval { get; set; }

        /// <summary>
        /// Indicates whether the system can automatically delete the snapshot based on pool automatic-deletion thresholds. 
        /// </summary>
        /// <value>Indicates whether the system can automatically delete the snapshot based on pool automatic-deletion thresholds. </value>

        [DataMember(Name="is_auto_delete")]
        public bool? IsAutoDelete { get; set; }

        /// <summary>
        /// (Applies when the value of the isAutoDelete attribute is false.) Period of time for which to keep the snapshot, in seconds. 
        /// </summary>
        /// <value>(Applies when the value of the isAutoDelete attribute is false.) Period of time for which to keep the snapshot, in seconds. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="retention_time")]
        public int? RetentionTime { get; set; }

        /// <summary>
        /// Localized message string corresponding to type
        /// </summary>
        /// <value>Localized message string corresponding to type</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message array corresponding to days_of_week
        /// </summary>
        /// <value>Localized message array corresponding to days_of_week</value>

        [DataMember(Name="days_of_week_l10n")]
        public List<string> DaysOfWeekL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportUnitySnapshotScheduleRuleInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Minute: ").Append(Minute).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  DaysOfWeek: ").Append(DaysOfWeek).Append("\n");
            sb.Append("  DaysOfMonth: ").Append(DaysOfMonth).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  IsAutoDelete: ").Append(IsAutoDelete).Append("\n");
            sb.Append("  RetentionTime: ").Append(RetentionTime).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  DaysOfWeekL10n: ").Append(DaysOfWeekL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportUnitySnapshotScheduleRuleInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportUnitySnapshotScheduleRuleInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportUnitySnapshotScheduleRuleInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportUnitySnapshotScheduleRuleInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Minute == other.Minute ||
                    Minute != null &&
                    Minute.Equals(other.Minute)
                ) && 
                (
                    Hours == other.Hours ||
                    Hours != null &&
                    Hours.SequenceEqual(other.Hours)
                ) && 
                (
                    DaysOfWeek == other.DaysOfWeek ||
                    DaysOfWeek != null &&
                    DaysOfWeek.SequenceEqual(other.DaysOfWeek)
                ) && 
                (
                    DaysOfMonth == other.DaysOfMonth ||
                    DaysOfMonth != null &&
                    DaysOfMonth.SequenceEqual(other.DaysOfMonth)
                ) && 
                (
                    Interval == other.Interval ||
                    Interval != null &&
                    Interval.Equals(other.Interval)
                ) && 
                (
                    IsAutoDelete == other.IsAutoDelete ||
                    IsAutoDelete != null &&
                    IsAutoDelete.Equals(other.IsAutoDelete)
                ) && 
                (
                    RetentionTime == other.RetentionTime ||
                    RetentionTime != null &&
                    RetentionTime.Equals(other.RetentionTime)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    DaysOfWeekL10n == other.DaysOfWeekL10n ||
                    DaysOfWeekL10n != null &&
                    DaysOfWeekL10n.SequenceEqual(other.DaysOfWeekL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Minute != null)
                    hashCode = hashCode * 59 + Minute.GetHashCode();
                    if (Hours != null)
                    hashCode = hashCode * 59 + Hours.GetHashCode();
                    if (DaysOfWeek != null)
                    hashCode = hashCode * 59 + DaysOfWeek.GetHashCode();
                    if (DaysOfMonth != null)
                    hashCode = hashCode * 59 + DaysOfMonth.GetHashCode();
                    if (Interval != null)
                    hashCode = hashCode * 59 + Interval.GetHashCode();
                    if (IsAutoDelete != null)
                    hashCode = hashCode * 59 + IsAutoDelete.GetHashCode();
                    if (RetentionTime != null)
                    hashCode = hashCode * 59 + RetentionTime.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (DaysOfWeekL10n != null)
                    hashCode = hashCode * 59 + DaysOfWeekL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportUnitySnapshotScheduleRuleInstance left, ImportUnitySnapshotScheduleRuleInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportUnitySnapshotScheduleRuleInstance left, ImportUnitySnapshotScheduleRuleInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
