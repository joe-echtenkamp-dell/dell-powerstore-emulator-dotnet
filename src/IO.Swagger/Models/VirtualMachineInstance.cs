/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a virtual machine. This resource type has queriable associations from policy, replication_group, virtual_machine, vcenter, virtual_volume, datastore, vsphere_host
    /// </summary>
    [DataContract]
    public partial class VirtualMachineInstance : IEquatable<VirtualMachineInstance>
    { 
        /// <summary>
        /// Unique identifier of the VM instance. This value is generated by the appliance. 
        /// </summary>
        /// <value>Unique identifier of the VM instance. This value is generated by the appliance. </value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// UUID instance of the VM in vCenter. This value is stored in the VM and migrates with the VM to other vCenter instances. Not applicable to VM snapshots. 
        /// </summary>
        /// <value>UUID instance of the VM in vCenter. This value is stored in the VM and migrates with the VM to other vCenter instances. Not applicable to VM snapshots. </value>

        [DataMember(Name="instance_uuid")]
        public string InstanceUuid { get; set; }

        /// <summary>
        /// UUID instance of the vCenter that hosts the VM. Was deprecated in version 2.0.0.0.
        /// </summary>
        /// <value>UUID instance of the vCenter that hosts the VM. Was deprecated in version 2.0.0.0.</value>

        [DataMember(Name="vcenter_instance_uuid")]
        public string VcenterInstanceUuid { get; set; }

        /// <summary>
        /// User-assigned name of the VM in vCenter.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>User-assigned name of the VM in vCenter.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the VM in vCenter.
        /// </summary>
        /// <value>Description of the VM in vCenter.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public VirtualMachineTypeEnum? Type { get; set; }

        /// <summary>
        /// Unique identifier of the VM in vCenter. This value is required for events to merge information about vSphere objects. The value is stored in vCenter and is regenerated on other vCenter instances.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the VM in vCenter. This value is required for events to merge information about vSphere objects. The value is stored in vCenter and is regenerated on other vCenter instances.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="vsphere_object_id")]
        public string VsphereObjectId { get; set; }

        /// <summary>
        /// Memory size of the VM, in megabytes. Not applicable to VM snapshots.
        /// </summary>
        /// <value>Memory size of the VM, in megabytes. Not applicable to VM snapshots.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="memory_mb")]
        public int? MemoryMb { get; set; }

        /// <summary>
        /// Number of virtual CPUs in the VM. Not applicable to VM snapshots.
        /// </summary>
        /// <value>Number of virtual CPUs in the VM. Not applicable to VM snapshots.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="cpu_count")]
        public int? CpuCount { get; set; }

        /// <summary>
        /// Guest operating system of the VM. Not applicable to VM snapshots.
        /// </summary>
        /// <value>Guest operating system of the VM. Not applicable to VM snapshots.</value>

        [DataMember(Name="guest_os")]
        public string GuestOs { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public VirtualMachineStatusEnum? Status { get; set; }

        /// <summary>
        /// Unique identifier of the protection policy assigned to the VM. Not applicable to template and snapshot VMs. 
        /// </summary>
        /// <value>Unique identifier of the protection policy assigned to the VM. Not applicable to template and snapshot VMs. </value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Unique identifier of the replication group that this virtual machine belongs to. Not applicable to template and snapshot VMs.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the replication group that this virtual machine belongs to. Not applicable to template and snapshot VMs.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="replication_group_id")]
        public string ReplicationGroupId { get; set; }

        /// <summary>
        /// virtual machine from which the snapshot was created. This value must reflect the actual data structure. This information is exposed to the end-user in the parent_id field in the protection_data string. 
        /// </summary>
        /// <value>virtual machine from which the snapshot was created. This value must reflect the actual data structure. This information is exposed to the end-user in the parent_id field in the protection_data string. </value>

        [DataMember(Name="parent_id")]
        public string ParentId { get; set; }

        /// <summary>
        /// Indicates whether the VM snapshot is crash-consistent.
        /// </summary>
        /// <value>Indicates whether the VM snapshot is crash-consistent.</value>

        [DataMember(Name="is_consistent")]
        public bool? IsConsistent { get; set; }

        /// <summary>
        /// Indicates whether the VM supports creating crash-consistent snapshots. Not applicable to snapshot VMs. 
        /// </summary>
        /// <value>Indicates whether the VM supports creating crash-consistent snapshots. Not applicable to snapshot VMs. </value>

        [DataMember(Name="is_consistent_snaps_supported")]
        public bool? IsConsistentSnapsSupported { get; set; }

        /// <summary>
        /// The unique identifier of the vCenter object that hosts the VM. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>The unique identifier of the vCenter object that hosts the VM. Was added in version 2.0.0.0.</value>

        [DataMember(Name="vcenter_id")]
        public string VcenterId { get; set; }

        /// <summary>
        /// Gets or Sets ProtectionData
        /// </summary>

        [DataMember(Name="protection_data")]
        public VmProtectionDataInstance ProtectionData { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="power_state")]
        public VirtualMachinePowerStateEnum? PowerState { get; set; }

        /// <summary>
        /// Localized message string corresponding to type
        /// </summary>
        /// <value>Localized message string corresponding to type</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to status
        /// </summary>
        /// <value>Localized message string corresponding to status</value>

        [DataMember(Name="status_l10n")]
        public string StatusL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to power_state Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to power_state Was added in version 3.0.0.0.</value>

        [DataMember(Name="power_state_l10n")]
        public string PowerStateL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of protection_policy_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of protection_policy_id attribute.</value>

        [DataMember(Name="protection_policy")]
        public PolicyInstance ProtectionPolicy { get; set; }

        /// <summary>
        /// This is the embeddable reference form of replication_group_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of replication_group_id attribute.</value>

        [DataMember(Name="replication_group")]
        public ReplicationGroupInstance ReplicationGroup { get; set; }

        /// <summary>
        /// This is the embeddable reference form of parent_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of parent_id attribute.</value>

        [DataMember(Name="parent")]
        public VirtualMachineInstance Parent { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_machine association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_machine association.</value>

        [DataMember(Name="children")]
        public List<VirtualMachineInstance> Children { get; set; }

        /// <summary>
        /// This is the embeddable reference form of vcenter_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of vcenter_id attribute.</value>

        [DataMember(Name="vcenter")]
        public VcenterInstance Vcenter { get; set; }

        /// <summary>
        /// List of the virtual_volumes that are associated with this virtual_machine.
        /// </summary>
        /// <value>List of the virtual_volumes that are associated with this virtual_machine.</value>

        [DataMember(Name="virtual_volumes")]
        public List<VirtualVolumeInstance> VirtualVolumes { get; set; }

        /// <summary>
        /// List of the datastores that are associated with this virtual_machine.
        /// </summary>
        /// <value>List of the datastores that are associated with this virtual_machine.</value>

        [DataMember(Name="datastores")]
        public List<DatastoreInstance> Datastores { get; set; }

        /// <summary>
        /// List of the vsphere_host that are associated with this virtual_machine.
        /// </summary>
        /// <value>List of the vsphere_host that are associated with this virtual_machine.</value>

        [DataMember(Name="vsphere_host")]
        public List<VsphereHostInstance> VsphereHost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VirtualMachineInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstanceUuid: ").Append(InstanceUuid).Append("\n");
            sb.Append("  VcenterInstanceUuid: ").Append(VcenterInstanceUuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VsphereObjectId: ").Append(VsphereObjectId).Append("\n");
            sb.Append("  MemoryMb: ").Append(MemoryMb).Append("\n");
            sb.Append("  CpuCount: ").Append(CpuCount).Append("\n");
            sb.Append("  GuestOs: ").Append(GuestOs).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  ReplicationGroupId: ").Append(ReplicationGroupId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  IsConsistent: ").Append(IsConsistent).Append("\n");
            sb.Append("  IsConsistentSnapsSupported: ").Append(IsConsistentSnapsSupported).Append("\n");
            sb.Append("  VcenterId: ").Append(VcenterId).Append("\n");
            sb.Append("  ProtectionData: ").Append(ProtectionData).Append("\n");
            sb.Append("  PowerState: ").Append(PowerState).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  StatusL10n: ").Append(StatusL10n).Append("\n");
            sb.Append("  PowerStateL10n: ").Append(PowerStateL10n).Append("\n");
            sb.Append("  ProtectionPolicy: ").Append(ProtectionPolicy).Append("\n");
            sb.Append("  ReplicationGroup: ").Append(ReplicationGroup).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Vcenter: ").Append(Vcenter).Append("\n");
            sb.Append("  VirtualVolumes: ").Append(VirtualVolumes).Append("\n");
            sb.Append("  Datastores: ").Append(Datastores).Append("\n");
            sb.Append("  VsphereHost: ").Append(VsphereHost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VirtualMachineInstance)obj);
        }

        /// <summary>
        /// Returns true if VirtualMachineInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of VirtualMachineInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VirtualMachineInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    InstanceUuid == other.InstanceUuid ||
                    InstanceUuid != null &&
                    InstanceUuid.Equals(other.InstanceUuid)
                ) && 
                (
                    VcenterInstanceUuid == other.VcenterInstanceUuid ||
                    VcenterInstanceUuid != null &&
                    VcenterInstanceUuid.Equals(other.VcenterInstanceUuid)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    VsphereObjectId == other.VsphereObjectId ||
                    VsphereObjectId != null &&
                    VsphereObjectId.Equals(other.VsphereObjectId)
                ) && 
                (
                    MemoryMb == other.MemoryMb ||
                    MemoryMb != null &&
                    MemoryMb.Equals(other.MemoryMb)
                ) && 
                (
                    CpuCount == other.CpuCount ||
                    CpuCount != null &&
                    CpuCount.Equals(other.CpuCount)
                ) && 
                (
                    GuestOs == other.GuestOs ||
                    GuestOs != null &&
                    GuestOs.Equals(other.GuestOs)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    ReplicationGroupId == other.ReplicationGroupId ||
                    ReplicationGroupId != null &&
                    ReplicationGroupId.Equals(other.ReplicationGroupId)
                ) && 
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    IsConsistent == other.IsConsistent ||
                    IsConsistent != null &&
                    IsConsistent.Equals(other.IsConsistent)
                ) && 
                (
                    IsConsistentSnapsSupported == other.IsConsistentSnapsSupported ||
                    IsConsistentSnapsSupported != null &&
                    IsConsistentSnapsSupported.Equals(other.IsConsistentSnapsSupported)
                ) && 
                (
                    VcenterId == other.VcenterId ||
                    VcenterId != null &&
                    VcenterId.Equals(other.VcenterId)
                ) && 
                (
                    ProtectionData == other.ProtectionData ||
                    ProtectionData != null &&
                    ProtectionData.Equals(other.ProtectionData)
                ) && 
                (
                    PowerState == other.PowerState ||
                    PowerState != null &&
                    PowerState.Equals(other.PowerState)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    StatusL10n == other.StatusL10n ||
                    StatusL10n != null &&
                    StatusL10n.Equals(other.StatusL10n)
                ) && 
                (
                    PowerStateL10n == other.PowerStateL10n ||
                    PowerStateL10n != null &&
                    PowerStateL10n.Equals(other.PowerStateL10n)
                ) && 
                (
                    ProtectionPolicy == other.ProtectionPolicy ||
                    ProtectionPolicy != null &&
                    ProtectionPolicy.Equals(other.ProtectionPolicy)
                ) && 
                (
                    ReplicationGroup == other.ReplicationGroup ||
                    ReplicationGroup != null &&
                    ReplicationGroup.Equals(other.ReplicationGroup)
                ) && 
                (
                    Parent == other.Parent ||
                    Parent != null &&
                    Parent.Equals(other.Parent)
                ) && 
                (
                    Children == other.Children ||
                    Children != null &&
                    Children.SequenceEqual(other.Children)
                ) && 
                (
                    Vcenter == other.Vcenter ||
                    Vcenter != null &&
                    Vcenter.Equals(other.Vcenter)
                ) && 
                (
                    VirtualVolumes == other.VirtualVolumes ||
                    VirtualVolumes != null &&
                    VirtualVolumes.SequenceEqual(other.VirtualVolumes)
                ) && 
                (
                    Datastores == other.Datastores ||
                    Datastores != null &&
                    Datastores.SequenceEqual(other.Datastores)
                ) && 
                (
                    VsphereHost == other.VsphereHost ||
                    VsphereHost != null &&
                    VsphereHost.SequenceEqual(other.VsphereHost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (InstanceUuid != null)
                    hashCode = hashCode * 59 + InstanceUuid.GetHashCode();
                    if (VcenterInstanceUuid != null)
                    hashCode = hashCode * 59 + VcenterInstanceUuid.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (VsphereObjectId != null)
                    hashCode = hashCode * 59 + VsphereObjectId.GetHashCode();
                    if (MemoryMb != null)
                    hashCode = hashCode * 59 + MemoryMb.GetHashCode();
                    if (CpuCount != null)
                    hashCode = hashCode * 59 + CpuCount.GetHashCode();
                    if (GuestOs != null)
                    hashCode = hashCode * 59 + GuestOs.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (ReplicationGroupId != null)
                    hashCode = hashCode * 59 + ReplicationGroupId.GetHashCode();
                    if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (IsConsistent != null)
                    hashCode = hashCode * 59 + IsConsistent.GetHashCode();
                    if (IsConsistentSnapsSupported != null)
                    hashCode = hashCode * 59 + IsConsistentSnapsSupported.GetHashCode();
                    if (VcenterId != null)
                    hashCode = hashCode * 59 + VcenterId.GetHashCode();
                    if (ProtectionData != null)
                    hashCode = hashCode * 59 + ProtectionData.GetHashCode();
                    if (PowerState != null)
                    hashCode = hashCode * 59 + PowerState.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (StatusL10n != null)
                    hashCode = hashCode * 59 + StatusL10n.GetHashCode();
                    if (PowerStateL10n != null)
                    hashCode = hashCode * 59 + PowerStateL10n.GetHashCode();
                    if (ProtectionPolicy != null)
                    hashCode = hashCode * 59 + ProtectionPolicy.GetHashCode();
                    if (ReplicationGroup != null)
                    hashCode = hashCode * 59 + ReplicationGroup.GetHashCode();
                    if (Parent != null)
                    hashCode = hashCode * 59 + Parent.GetHashCode();
                    if (Children != null)
                    hashCode = hashCode * 59 + Children.GetHashCode();
                    if (Vcenter != null)
                    hashCode = hashCode * 59 + Vcenter.GetHashCode();
                    if (VirtualVolumes != null)
                    hashCode = hashCode * 59 + VirtualVolumes.GetHashCode();
                    if (Datastores != null)
                    hashCode = hashCode * 59 + Datastores.GetHashCode();
                    if (VsphereHost != null)
                    hashCode = hashCode * 59 + VsphereHost.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VirtualMachineInstance left, VirtualMachineInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VirtualMachineInstance left, VirtualMachineInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
