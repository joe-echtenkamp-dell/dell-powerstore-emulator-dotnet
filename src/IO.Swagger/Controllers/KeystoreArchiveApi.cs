/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class KeystoreArchiveApiController : ControllerBase
    { 
        /// <summary>
        /// Download a keystore backup archive file
        /// </summary>
        /// <remarks>Download a keystore backup archive file that was previously generated by a successful /api/rest/keystore_archive/regenerate POST command.  This resource type collection query does not support filtering, sorting or pagination.</remarks>
        /// <param name="filename">Filename is the last component in the URI path and becomes the filename of the downloaded file.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found.</response>
        [HttpGet]
        [Route("/api/rest/keystore_archive/{filename}")]
        [ValidateModelState]
        [SwaggerOperation("KeystoreArchiveFilenameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(KeystoreArchiveInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found.")]
        public virtual IActionResult KeystoreArchiveFilenameGet([FromRoute][Required]string filename)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(KeystoreArchiveInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<KeystoreArchiveInstance>(exampleJson)
            : default(KeystoreArchiveInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Regenerate archive file
        /// </summary>
        /// <remarks>Creates a new encryption keystore archive file to replace the existing archive file, which includes the individual keystore backup files from each appliance in the cluster. Once complete, the command response includes a Uniform Resource Identifier, which can be used in a subsequent GET request to download the keystore backup archive file. This request is valid only on systems where Data at Rest Encryption is enabled and is applicable only on systems that support Data at Rest Encryption.</remarks>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/keystore_archive/regenerate")]
        [ValidateModelState]
        [SwaggerOperation("KeystoreArchiveRegeneratePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(KeystoreArchiveRegenerateResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult KeystoreArchiveRegeneratePost()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(KeystoreArchiveRegenerateResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<KeystoreArchiveRegenerateResponse>(exampleJson)
            : default(KeystoreArchiveRegenerateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
