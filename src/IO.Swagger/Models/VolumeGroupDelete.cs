/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Delete volume group request.
    /// </summary>
    [DataContract]
    public partial class VolumeGroupDelete : IEquatable<VolumeGroupDelete>
    { 
        /// <summary>
        /// By default, the members of a volume group being deleted are only removed. Set this optional parameter to true to override this behavior and also delete the members after they are removed from the volume group.  This parameter defaults to false, if not specified. 
        /// </summary>
        /// <value>By default, the members of a volume group being deleted are only removed. Set this optional parameter to true to override this behavior and also delete the members after they are removed from the volume group.  This parameter defaults to false, if not specified. </value>

        [DataMember(Name="delete_members")]
        public bool? DeleteMembers { get; set; }

        /// <summary>
        /// Delete the volume group immediately and permanently, instead of moving the volume group to the Recycle Bin. If the volume group is empty or the delete_members parameter is false, this flag is ignored and the VG will be deleted immediately and permanently; A VG can only be added to the Recyle Bin if it has members and delete_members is true.  Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Delete the volume group immediately and permanently, instead of moving the volume group to the Recycle Bin. If the volume group is empty or the delete_members parameter is false, this flag is ignored and the VG will be deleted immediately and permanently; A VG can only be added to the Recyle Bin if it has members and delete_members is true.  Was added in version 3.5.0.0.</value>

        [DataMember(Name="immediate")]
        public bool? Immediate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeGroupDelete {\n");
            sb.Append("  DeleteMembers: ").Append(DeleteMembers).Append("\n");
            sb.Append("  Immediate: ").Append(Immediate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VolumeGroupDelete)obj);
        }

        /// <summary>
        /// Returns true if VolumeGroupDelete instances are equal
        /// </summary>
        /// <param name="other">Instance of VolumeGroupDelete to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeGroupDelete other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DeleteMembers == other.DeleteMembers ||
                    DeleteMembers != null &&
                    DeleteMembers.Equals(other.DeleteMembers)
                ) && 
                (
                    Immediate == other.Immediate ||
                    Immediate != null &&
                    Immediate.Equals(other.Immediate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DeleteMembers != null)
                    hashCode = hashCode * 59 + DeleteMembers.GetHashCode();
                    if (Immediate != null)
                    hashCode = hashCode * 59 + Immediate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VolumeGroupDelete left, VolumeGroupDelete right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VolumeGroupDelete left, VolumeGroupDelete right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
