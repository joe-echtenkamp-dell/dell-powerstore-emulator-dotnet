/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SmtpConfigInstance : IEquatable<SmtpConfigInstance>
    { 
        /// <summary>
        /// Unique identifier of the SMTP configuration. This value is always &#39;0&#39;.
        /// </summary>
        /// <value>Unique identifier of the SMTP configuration. This value is always &#39;0&#39;.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// IP address of the SMTP server.
        /// </summary>
        /// <value>IP address of the SMTP server.</value>

        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// Port used for sending SMTP messages.
        /// </summary>
        /// <value>Port used for sending SMTP messages.</value>

        [Range(0, 65535)]
        [DataMember(Name="port")]
        public int? Port { get; set; }

        /// <summary>
        /// Source email address used for sending SMTP messages.
        /// </summary>
        /// <value>Source email address used for sending SMTP messages.</value>

        [DataMember(Name="source_email")]
        public string SourceEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmtpConfigInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  SourceEmail: ").Append(SourceEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmtpConfigInstance)obj);
        }

        /// <summary>
        /// Returns true if SmtpConfigInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of SmtpConfigInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmtpConfigInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Port == other.Port ||
                    Port != null &&
                    Port.Equals(other.Port)
                ) && 
                (
                    SourceEmail == other.SourceEmail ||
                    SourceEmail != null &&
                    SourceEmail.Equals(other.SourceEmail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Port != null)
                    hashCode = hashCode * 59 + Port.GetHashCode();
                    if (SourceEmail != null)
                    hashCode = hashCode * 59 + SourceEmail.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmtpConfigInstance left, SmtpConfigInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmtpConfigInstance left, SmtpConfigInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
