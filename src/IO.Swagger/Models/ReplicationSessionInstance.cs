/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A replication session.  This resource type has queriable associations from remote_system, replication_rule, volume, volume_group
    /// </summary>
    [DataContract]
    public partial class ReplicationSessionInstance : IEquatable<ReplicationSessionInstance>
    { 
        /// <summary>
        /// Unique identifier of the replication session instance. 
        /// </summary>
        /// <value>Unique identifier of the replication session instance. </value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Current state of the replication session. 
        /// </summary>
        /// <value>Current state of the replication session. </value>

        [DataMember(Name="state")]
        public ReplicationStateEnum? State { get; set; }

        /// <summary>
        /// Role of the replication session. 
        /// </summary>
        /// <value>Role of the replication session. </value>

        [DataMember(Name="role")]
        public ReplicationRoleEnum? Role { get; set; }

        /// <summary>
        /// Type of the storage resource. 
        /// </summary>
        /// <value>Type of the storage resource. </value>

        [DataMember(Name="resource_type")]
        public ReplicatedResourceTypeEnum? ResourceType { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="data_transfer_state")]
        public DataTransferStateEnum? DataTransferState { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="type")]
        public ReplicationSessionTypeEnum? Type { get; set; }

        /// <summary>
        /// Time of last successful synchronization. For metro type replication sessions, this property is updated only during asynchronous copy phases. This is not supported for Nas Server replication sessions. 
        /// </summary>
        /// <value>Time of last successful synchronization. For metro type replication sessions, this property is updated only during asynchronous copy phases. This is not supported for Nas Server replication sessions. </value>

        [DataMember(Name="last_sync_timestamp")]
        public DateTime? LastSyncTimestamp { get; set; }

        /// <summary>
        /// Unique identifier of the local storage resource for the replication session. 
        /// </summary>
        /// <value>Unique identifier of the local storage resource for the replication session. </value>

        [DataMember(Name="local_resource_id")]
        public string LocalResourceId { get; set; }

        /// <summary>
        /// Unique identifier of the remote storage resource for the replication session. 
        /// </summary>
        /// <value>Unique identifier of the remote storage resource for the replication session. </value>

        [DataMember(Name="remote_resource_id")]
        public string RemoteResourceId { get; set; }

        /// <summary>
        /// Unique identifier of the remote system instance. 
        /// </summary>
        /// <value>Unique identifier of the remote system instance. </value>

        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Progress of the current replication operation. This value is only available from the source system for the replication session, and is not supported for Nas Server replication sessions. 
        /// </summary>
        /// <value>Progress of the current replication operation. This value is only available from the source system for the replication session, and is not supported for Nas Server replication sessions. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="progress_percentage")]
        public int? ProgressPercentage { get; set; }

        /// <summary>
        /// Estimated completion time of the current replication operation. This is not supported for Nas Server replication sessions. 
        /// </summary>
        /// <value>Estimated completion time of the current replication operation. This is not supported for Nas Server replication sessions. </value>

        [DataMember(Name="estimated_completion_timestamp")]
        public DateTime? EstimatedCompletionTimestamp { get; set; }

        /// <summary>
        /// Associated replication rule instance if created by policy engine. 
        /// </summary>
        /// <value>Associated replication rule instance if created by policy engine. </value>

        [DataMember(Name="replication_rule_id")]
        public string ReplicationRuleId { get; set; }

        /// <summary>
        /// Elapsed time of the last synchronization operation in milliseconds.  This is not supported for Nas Server replication sessions. For metro type replication sessions, this property is updated only during asynchronous copy phases.  Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Elapsed time of the last synchronization operation in milliseconds.  This is not supported for Nas Server replication sessions. For metro type replication sessions, this property is updated only during asynchronous copy phases.  Was added in version 2.0.0.0.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="last_sync_duration")]
        public int? LastSyncDuration { get; set; }

        /// <summary>
        /// Estimated start time of the next automatic synchronization operation. This is applicable to asynchronous type replication sessions. This is not supported for Nas Server replication sessions.  Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Estimated start time of the next automatic synchronization operation. This is applicable to asynchronous type replication sessions. This is not supported for Nas Server replication sessions.  Was added in version 2.0.0.0.</value>

        [DataMember(Name="next_sync_timestamp")]
        public DateTime? NextSyncTimestamp { get; set; }

        /// <summary>
        /// List of storage element pairs for a replication session. For a volume or volume group replication session, the replicating storage elements are of type &#39;volume’. For a virtual volume replication session, the replicating storage elements are of type &#39;virtual volume’. For a volume group replication session, there will be as many pairs of storage elements as the number of volumes in the volume group. For volume/virtual volume replication session, there will be only one storage element pair.   Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>List of storage element pairs for a replication session. For a volume or volume group replication session, the replicating storage elements are of type &#39;volume’. For a virtual volume replication session, the replicating storage elements are of type &#39;virtual volume’. For a volume group replication session, there will be as many pairs of storage elements as the number of volumes in the volume group. For volume/virtual volume replication session, there will be only one storage element pair.   Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="storage_element_pairs")]
        public List<ReplicationElementPair> StorageElementPairs { get; set; }

        /// <summary>
        /// Indicates whether a test failover is in progress on the destination system of this replication session. This is not supported for Nas Server replication sessions.  Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Indicates whether a test failover is in progress on the destination system of this replication session. This is not supported for Nas Server replication sessions.  Was added in version 2.0.0.0.</value>

        [DataMember(Name="failover_test_in_progress")]
        public bool? FailoverTestInProgress { get; set; }

        /// <summary>
        /// Error code for the asynchronous copy phase failure.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Error code for the asynchronous copy phase failure.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="error_code")]
        public string ErrorCode { get; set; }

        /// <summary>
        /// State of the data connection.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>State of the data connection.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="data_connection_state")]
        public DataConnectionStateEnum? DataConnectionState { get; set; }

        /// <summary>
        /// Parent Replication session identifier. This is only applicable for replication sessions of type file system.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Parent Replication session identifier. This is only applicable for replication sessions of type file system.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="parent_replication_session_id")]
        public string ParentReplicationSessionId { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="local_resource_state")]
        public ReplicationResourceStateEnum? LocalResourceState { get; set; }

        /// <summary>
        /// Witness configuration and state details associated with the replication session.  Was added in version 3.6.0.0.
        /// </summary>
        /// <value>Witness configuration and state details associated with the replication session.  Was added in version 3.6.0.0.</value>

        [DataMember(Name="witness_details")]
        public ReplicationSessionWitnessDetails WitnessDetails { get; set; }

        /// <summary>
        /// Localized message string corresponding to state
        /// </summary>
        /// <value>Localized message string corresponding to state</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to role
        /// </summary>
        /// <value>Localized message string corresponding to role</value>

        [DataMember(Name="role_l10n")]
        public string RoleL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to resource_type
        /// </summary>
        /// <value>Localized message string corresponding to resource_type</value>

        [DataMember(Name="resource_type_l10n")]
        public string ResourceTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to data_transfer_state Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to data_transfer_state Was added in version 3.0.0.0.</value>

        [DataMember(Name="data_transfer_state_l10n")]
        public string DataTransferStateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to type Was added in version 3.0.0.0.</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to data_connection_state Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to data_connection_state Was added in version 3.0.0.0.</value>

        [DataMember(Name="data_connection_state_l10n")]
        public string DataConnectionStateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to local_resource_state Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to local_resource_state Was added in version 3.0.0.0.</value>

        [DataMember(Name="local_resource_state_l10n")]
        public string LocalResourceStateL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of remote_system_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of remote_system_id attribute.</value>

        [DataMember(Name="remote_system")]
        public RemoteSystemInstance RemoteSystem { get; set; }

        /// <summary>
        /// This is the embeddable reference form of migration_session_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of migration_session_id attribute.</value>

        [DataMember(Name="migration_session")]
        public MigrationSessionInstance MigrationSession { get; set; }

        /// <summary>
        /// This is the embeddable reference form of replication_rule_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of replication_rule_id attribute.</value>

        [DataMember(Name="replication_rule")]
        public ReplicationRuleInstance ReplicationRule { get; set; }

        /// <summary>
        /// List of the volumes that are associated with this replication_session.
        /// </summary>
        /// <value>List of the volumes that are associated with this replication_session.</value>

        [DataMember(Name="volumes")]
        public List<VolumeInstance> Volumes { get; set; }

        /// <summary>
        /// List of the volume_groups that are associated with this replication_session.
        /// </summary>
        /// <value>List of the volume_groups that are associated with this replication_session.</value>

        [DataMember(Name="volume_groups")]
        public List<VolumeGroupInstance> VolumeGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationSessionInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  DataTransferState: ").Append(DataTransferState).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LastSyncTimestamp: ").Append(LastSyncTimestamp).Append("\n");
            sb.Append("  LocalResourceId: ").Append(LocalResourceId).Append("\n");
            sb.Append("  RemoteResourceId: ").Append(RemoteResourceId).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  ProgressPercentage: ").Append(ProgressPercentage).Append("\n");
            sb.Append("  EstimatedCompletionTimestamp: ").Append(EstimatedCompletionTimestamp).Append("\n");
            sb.Append("  ReplicationRuleId: ").Append(ReplicationRuleId).Append("\n");
            sb.Append("  LastSyncDuration: ").Append(LastSyncDuration).Append("\n");
            sb.Append("  NextSyncTimestamp: ").Append(NextSyncTimestamp).Append("\n");
            sb.Append("  StorageElementPairs: ").Append(StorageElementPairs).Append("\n");
            sb.Append("  FailoverTestInProgress: ").Append(FailoverTestInProgress).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  DataConnectionState: ").Append(DataConnectionState).Append("\n");
            sb.Append("  ParentReplicationSessionId: ").Append(ParentReplicationSessionId).Append("\n");
            sb.Append("  LocalResourceState: ").Append(LocalResourceState).Append("\n");
            sb.Append("  WitnessDetails: ").Append(WitnessDetails).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  RoleL10n: ").Append(RoleL10n).Append("\n");
            sb.Append("  ResourceTypeL10n: ").Append(ResourceTypeL10n).Append("\n");
            sb.Append("  DataTransferStateL10n: ").Append(DataTransferStateL10n).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  DataConnectionStateL10n: ").Append(DataConnectionStateL10n).Append("\n");
            sb.Append("  LocalResourceStateL10n: ").Append(LocalResourceStateL10n).Append("\n");
            sb.Append("  RemoteSystem: ").Append(RemoteSystem).Append("\n");
            sb.Append("  MigrationSession: ").Append(MigrationSession).Append("\n");
            sb.Append("  ReplicationRule: ").Append(ReplicationRule).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("  VolumeGroups: ").Append(VolumeGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReplicationSessionInstance)obj);
        }

        /// <summary>
        /// Returns true if ReplicationSessionInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationSessionInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationSessionInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Role == other.Role ||
                    Role != null &&
                    Role.Equals(other.Role)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    DataTransferState == other.DataTransferState ||
                    DataTransferState != null &&
                    DataTransferState.Equals(other.DataTransferState)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    LastSyncTimestamp == other.LastSyncTimestamp ||
                    LastSyncTimestamp != null &&
                    LastSyncTimestamp.Equals(other.LastSyncTimestamp)
                ) && 
                (
                    LocalResourceId == other.LocalResourceId ||
                    LocalResourceId != null &&
                    LocalResourceId.Equals(other.LocalResourceId)
                ) && 
                (
                    RemoteResourceId == other.RemoteResourceId ||
                    RemoteResourceId != null &&
                    RemoteResourceId.Equals(other.RemoteResourceId)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    ProgressPercentage == other.ProgressPercentage ||
                    ProgressPercentage != null &&
                    ProgressPercentage.Equals(other.ProgressPercentage)
                ) && 
                (
                    EstimatedCompletionTimestamp == other.EstimatedCompletionTimestamp ||
                    EstimatedCompletionTimestamp != null &&
                    EstimatedCompletionTimestamp.Equals(other.EstimatedCompletionTimestamp)
                ) && 
                (
                    ReplicationRuleId == other.ReplicationRuleId ||
                    ReplicationRuleId != null &&
                    ReplicationRuleId.Equals(other.ReplicationRuleId)
                ) && 
                (
                    LastSyncDuration == other.LastSyncDuration ||
                    LastSyncDuration != null &&
                    LastSyncDuration.Equals(other.LastSyncDuration)
                ) && 
                (
                    NextSyncTimestamp == other.NextSyncTimestamp ||
                    NextSyncTimestamp != null &&
                    NextSyncTimestamp.Equals(other.NextSyncTimestamp)
                ) && 
                (
                    StorageElementPairs == other.StorageElementPairs ||
                    StorageElementPairs != null &&
                    StorageElementPairs.SequenceEqual(other.StorageElementPairs)
                ) && 
                (
                    FailoverTestInProgress == other.FailoverTestInProgress ||
                    FailoverTestInProgress != null &&
                    FailoverTestInProgress.Equals(other.FailoverTestInProgress)
                ) && 
                (
                    ErrorCode == other.ErrorCode ||
                    ErrorCode != null &&
                    ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    DataConnectionState == other.DataConnectionState ||
                    DataConnectionState != null &&
                    DataConnectionState.Equals(other.DataConnectionState)
                ) && 
                (
                    ParentReplicationSessionId == other.ParentReplicationSessionId ||
                    ParentReplicationSessionId != null &&
                    ParentReplicationSessionId.Equals(other.ParentReplicationSessionId)
                ) && 
                (
                    LocalResourceState == other.LocalResourceState ||
                    LocalResourceState != null &&
                    LocalResourceState.Equals(other.LocalResourceState)
                ) && 
                (
                    WitnessDetails == other.WitnessDetails ||
                    WitnessDetails != null &&
                    WitnessDetails.Equals(other.WitnessDetails)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    RoleL10n == other.RoleL10n ||
                    RoleL10n != null &&
                    RoleL10n.Equals(other.RoleL10n)
                ) && 
                (
                    ResourceTypeL10n == other.ResourceTypeL10n ||
                    ResourceTypeL10n != null &&
                    ResourceTypeL10n.Equals(other.ResourceTypeL10n)
                ) && 
                (
                    DataTransferStateL10n == other.DataTransferStateL10n ||
                    DataTransferStateL10n != null &&
                    DataTransferStateL10n.Equals(other.DataTransferStateL10n)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    DataConnectionStateL10n == other.DataConnectionStateL10n ||
                    DataConnectionStateL10n != null &&
                    DataConnectionStateL10n.Equals(other.DataConnectionStateL10n)
                ) && 
                (
                    LocalResourceStateL10n == other.LocalResourceStateL10n ||
                    LocalResourceStateL10n != null &&
                    LocalResourceStateL10n.Equals(other.LocalResourceStateL10n)
                ) && 
                (
                    RemoteSystem == other.RemoteSystem ||
                    RemoteSystem != null &&
                    RemoteSystem.Equals(other.RemoteSystem)
                ) && 
                (
                    MigrationSession == other.MigrationSession ||
                    MigrationSession != null &&
                    MigrationSession.Equals(other.MigrationSession)
                ) && 
                (
                    ReplicationRule == other.ReplicationRule ||
                    ReplicationRule != null &&
                    ReplicationRule.Equals(other.ReplicationRule)
                ) && 
                (
                    Volumes == other.Volumes ||
                    Volumes != null &&
                    Volumes.SequenceEqual(other.Volumes)
                ) && 
                (
                    VolumeGroups == other.VolumeGroups ||
                    VolumeGroups != null &&
                    VolumeGroups.SequenceEqual(other.VolumeGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Role != null)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (DataTransferState != null)
                    hashCode = hashCode * 59 + DataTransferState.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (LastSyncTimestamp != null)
                    hashCode = hashCode * 59 + LastSyncTimestamp.GetHashCode();
                    if (LocalResourceId != null)
                    hashCode = hashCode * 59 + LocalResourceId.GetHashCode();
                    if (RemoteResourceId != null)
                    hashCode = hashCode * 59 + RemoteResourceId.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (ProgressPercentage != null)
                    hashCode = hashCode * 59 + ProgressPercentage.GetHashCode();
                    if (EstimatedCompletionTimestamp != null)
                    hashCode = hashCode * 59 + EstimatedCompletionTimestamp.GetHashCode();
                    if (ReplicationRuleId != null)
                    hashCode = hashCode * 59 + ReplicationRuleId.GetHashCode();
                    if (LastSyncDuration != null)
                    hashCode = hashCode * 59 + LastSyncDuration.GetHashCode();
                    if (NextSyncTimestamp != null)
                    hashCode = hashCode * 59 + NextSyncTimestamp.GetHashCode();
                    if (StorageElementPairs != null)
                    hashCode = hashCode * 59 + StorageElementPairs.GetHashCode();
                    if (FailoverTestInProgress != null)
                    hashCode = hashCode * 59 + FailoverTestInProgress.GetHashCode();
                    if (ErrorCode != null)
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                    if (DataConnectionState != null)
                    hashCode = hashCode * 59 + DataConnectionState.GetHashCode();
                    if (ParentReplicationSessionId != null)
                    hashCode = hashCode * 59 + ParentReplicationSessionId.GetHashCode();
                    if (LocalResourceState != null)
                    hashCode = hashCode * 59 + LocalResourceState.GetHashCode();
                    if (WitnessDetails != null)
                    hashCode = hashCode * 59 + WitnessDetails.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (RoleL10n != null)
                    hashCode = hashCode * 59 + RoleL10n.GetHashCode();
                    if (ResourceTypeL10n != null)
                    hashCode = hashCode * 59 + ResourceTypeL10n.GetHashCode();
                    if (DataTransferStateL10n != null)
                    hashCode = hashCode * 59 + DataTransferStateL10n.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (DataConnectionStateL10n != null)
                    hashCode = hashCode * 59 + DataConnectionStateL10n.GetHashCode();
                    if (LocalResourceStateL10n != null)
                    hashCode = hashCode * 59 + LocalResourceStateL10n.GetHashCode();
                    if (RemoteSystem != null)
                    hashCode = hashCode * 59 + RemoteSystem.GetHashCode();
                    if (MigrationSession != null)
                    hashCode = hashCode * 59 + MigrationSession.GetHashCode();
                    if (ReplicationRule != null)
                    hashCode = hashCode * 59 + ReplicationRule.GetHashCode();
                    if (Volumes != null)
                    hashCode = hashCode * 59 + Volumes.GetHashCode();
                    if (VolumeGroups != null)
                    hashCode = hashCode * 59 + VolumeGroups.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReplicationSessionInstance left, ReplicationSessionInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReplicationSessionInstance left, ReplicationSessionInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
