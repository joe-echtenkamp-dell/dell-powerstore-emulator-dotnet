/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The new SMB server configuration to be applied for the source NAS server to avoid name conflict with the destination NAS server after cutover. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileImportSessionCutoverSmbProperties : IEquatable<FileImportSessionCutoverSmbProperties>
    { 
        /// <summary>
        /// Indicates whether the source SMB server is standalone. A &#39;true&#39; value indicated the SMB server is standalone and &#39;false&#39; value indicates the SMB server is joined to an Active Directory. 
        /// </summary>
        /// <value>Indicates whether the source SMB server is standalone. A &#39;true&#39; value indicated the SMB server is standalone and &#39;false&#39; value indicates the SMB server is joined to an Active Directory. </value>

        [DataMember(Name="is_standalone")]
        public bool? IsStandalone { get; set; }

        /// <summary>
        /// DNS name of the associated computer account when the source SMB server is joined to an Active Directory domain. This name is limited to 63 characters and must not contain the following characters:   - comma (,)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&amp;)   - apostrophe (&#39;)   - period (.) - note that if you enter string with period only the first word will be kept   - parentheses (())   - braces ({})   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/)  Underscore (_) is allowed. However it is not recommended to use it. Hyphen-minus sign (-) is not allowed as last character. When creating/modifying the SMB server, if no NetBIOS name is provided, up to the 15 first computer name characters will be used to compute a default NetBIOS name. This substring shall comply with NetBIOS name limitations. 
        /// </summary>
        /// <value>DNS name of the associated computer account when the source SMB server is joined to an Active Directory domain. This name is limited to 63 characters and must not contain the following characters:   - comma (,)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&amp;)   - apostrophe (&#39;)   - period (.) - note that if you enter string with period only the first word will be kept   - parentheses (())   - braces ({})   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/)  Underscore (_) is allowed. However it is not recommended to use it. Hyphen-minus sign (-) is not allowed as last character. When creating/modifying the SMB server, if no NetBIOS name is provided, up to the 15 first computer name characters will be used to compute a default NetBIOS name. This substring shall comply with NetBIOS name limitations. </value>

        [StringLength(63, MinimumLength=1)]
        [DataMember(Name="computer_name")]
        public string ComputerName { get; set; }

        /// <summary>
        /// Fully Qualified Domain Name (FQDN) where SMB server is registered in Active Directory. The maximum length is 255 characters. A FQDN is composed with multiple components separated by a dot character. The FQDN for the SMB server computer name is computer_name. where the computer_name is the first component. Domain must not contain the following characters:   - comma (,)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&amp;)   - apostrophe (&#39;)   - parentheses (())   - braces ({})   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/)  Underscore (_) is allowed. However it is not recommended to use it. Hyphen-minus sign (-) is not allowed as last character. Period (.) is not allowed as first and last character. 
        /// </summary>
        /// <value>Fully Qualified Domain Name (FQDN) where SMB server is registered in Active Directory. The maximum length is 255 characters. A FQDN is composed with multiple components separated by a dot character. The FQDN for the SMB server computer name is computer_name. where the computer_name is the first component. Domain must not contain the following characters:   - comma (,)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&amp;)   - apostrophe (&#39;)   - parentheses (())   - braces ({})   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/)  Underscore (_) is allowed. However it is not recommended to use it. Hyphen-minus sign (-) is not allowed as last character. Period (.) is not allowed as first and last character. </value>

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Organizational unit of the source SMB server in Active Directory, if applicable. 
        /// </summary>
        /// <value>Organizational unit of the source SMB server in Active Directory, if applicable. </value>

        [MinLength(1)]
        [DataMember(Name="organizational_unit")]
        public string OrganizationalUnit { get; set; }

        /// <summary>
        /// NetBIOS name is the network name of the standalone SMB server. SMB server joined to Active Directory also have NetBIOS name, defaulted to the 15 first characters of the computerName attribute. Administrators can specify a custom NetBIOS name for a SMB server using this attribute. NetBIOS name must not contain the following characters:   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\&quot;)   - less than sign (&lt;)   - greater than sign (&gt;)   - vertical bar (|) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/)  The following characters are not allowed too:   - semicolon (;)   - comma (,)   - equal sign (&#x3D;)   - plus sign (+)   - left bracket ([)   - right bracket (])  The following characters are not allowed as first character:   - period (.)   - white space (blank)   - hyphen-minus (-)   - at sign (@)  Source system may apply additional restrictions. For example the source system may prohibit the following characters:   - white space (blank) 
        /// </summary>
        /// <value>NetBIOS name is the network name of the standalone SMB server. SMB server joined to Active Directory also have NetBIOS name, defaulted to the 15 first characters of the computerName attribute. Administrators can specify a custom NetBIOS name for a SMB server using this attribute. NetBIOS name must not contain the following characters:   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\&quot;)   - less than sign (&lt;)   - greater than sign (&gt;)   - vertical bar (|) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/)  The following characters are not allowed too:   - semicolon (;)   - comma (,)   - equal sign (&#x3D;)   - plus sign (+)   - left bracket ([)   - right bracket (])  The following characters are not allowed as first character:   - period (.)   - white space (blank)   - hyphen-minus (-)   - at sign (@)  Source system may apply additional restrictions. For example the source system may prohibit the following characters:   - white space (blank) </value>

        [StringLength(15, MinimumLength=1)]
        [DataMember(Name="netbios_name")]
        public string NetbiosName { get; set; }

        /// <summary>
        /// Applies to standalone SMB servers Only. Windows network workgroup for the SMB server. Workgroup Names are limited to 15 alphanumeric ASCII charaters and must not contain the following characters:   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\&quot;)   - less than sign (&lt;)   - greater than sign (&gt;)   - vertical bar (|) The following characters are not allowed as first character:   - period (.)   - white space (blank)  Source system may apply additional restrictions. For example the source system may prohibit the following characters:   - comma (,)   - white space (blank) 
        /// </summary>
        /// <value>Applies to standalone SMB servers Only. Windows network workgroup for the SMB server. Workgroup Names are limited to 15 alphanumeric ASCII charaters and must not contain the following characters:   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\&quot;)   - less than sign (&lt;)   - greater than sign (&gt;)   - vertical bar (|) The following characters are not allowed as first character:   - period (.)   - white space (blank)  Source system may apply additional restrictions. For example the source system may prohibit the following characters:   - comma (,)   - white space (blank) </value>

        [StringLength(15, MinimumLength=1)]
        [DataMember(Name="workgroup")]
        public string Workgroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileImportSessionCutoverSmbProperties {\n");
            sb.Append("  IsStandalone: ").Append(IsStandalone).Append("\n");
            sb.Append("  ComputerName: ").Append(ComputerName).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  OrganizationalUnit: ").Append(OrganizationalUnit).Append("\n");
            sb.Append("  NetbiosName: ").Append(NetbiosName).Append("\n");
            sb.Append("  Workgroup: ").Append(Workgroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileImportSessionCutoverSmbProperties)obj);
        }

        /// <summary>
        /// Returns true if FileImportSessionCutoverSmbProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of FileImportSessionCutoverSmbProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileImportSessionCutoverSmbProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsStandalone == other.IsStandalone ||
                    IsStandalone != null &&
                    IsStandalone.Equals(other.IsStandalone)
                ) && 
                (
                    ComputerName == other.ComputerName ||
                    ComputerName != null &&
                    ComputerName.Equals(other.ComputerName)
                ) && 
                (
                    Domain == other.Domain ||
                    Domain != null &&
                    Domain.Equals(other.Domain)
                ) && 
                (
                    OrganizationalUnit == other.OrganizationalUnit ||
                    OrganizationalUnit != null &&
                    OrganizationalUnit.Equals(other.OrganizationalUnit)
                ) && 
                (
                    NetbiosName == other.NetbiosName ||
                    NetbiosName != null &&
                    NetbiosName.Equals(other.NetbiosName)
                ) && 
                (
                    Workgroup == other.Workgroup ||
                    Workgroup != null &&
                    Workgroup.Equals(other.Workgroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsStandalone != null)
                    hashCode = hashCode * 59 + IsStandalone.GetHashCode();
                    if (ComputerName != null)
                    hashCode = hashCode * 59 + ComputerName.GetHashCode();
                    if (Domain != null)
                    hashCode = hashCode * 59 + Domain.GetHashCode();
                    if (OrganizationalUnit != null)
                    hashCode = hashCode * 59 + OrganizationalUnit.GetHashCode();
                    if (NetbiosName != null)
                    hashCode = hashCode * 59 + NetbiosName.GetHashCode();
                    if (Workgroup != null)
                    hashCode = hashCode * 59 + Workgroup.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileImportSessionCutoverSmbProperties left, FileImportSessionCutoverSmbProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileImportSessionCutoverSmbProperties left, FileImportSessionCutoverSmbProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
