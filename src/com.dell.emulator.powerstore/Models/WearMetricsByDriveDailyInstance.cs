/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Wear metrics for the drives collected daily. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class WearMetricsByDriveDailyInstance : MetricsGenerateResponse, IEquatable<WearMetricsByDriveDailyInstance>
    { 
        /// <summary>
        /// Reference to the associated drive which these metrics were recorded.
        /// </summary>
        /// <value>Reference to the associated drive which these metrics were recorded.</value>

        [DataMember(Name="drive_id")]
        public string DriveId { get; set; }

        /// <summary>
        /// End of sample period.
        /// </summary>
        /// <value>End of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// The percentage of drive wear remaining.
        /// </summary>
        /// <value>The percentage of drive wear remaining.</value>

        [DataMember(Name="percent_endurance_remaining")]
        public float? PercentEnduranceRemaining { get; set; }

        /// <summary>
        /// Number of times the metrics is repeated.
        /// </summary>
        /// <value>Number of times the metrics is repeated.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WearMetricsByDriveDailyInstance {\n");
            sb.Append("  DriveId: ").Append(DriveId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  PercentEnduranceRemaining: ").Append(PercentEnduranceRemaining).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WearMetricsByDriveDailyInstance)obj);
        }

        /// <summary>
        /// Returns true if WearMetricsByDriveDailyInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of WearMetricsByDriveDailyInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WearMetricsByDriveDailyInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DriveId == other.DriveId ||
                    DriveId != null &&
                    DriveId.Equals(other.DriveId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    PercentEnduranceRemaining == other.PercentEnduranceRemaining ||
                    PercentEnduranceRemaining != null &&
                    PercentEnduranceRemaining.Equals(other.PercentEnduranceRemaining)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DriveId != null)
                    hashCode = hashCode * 59 + DriveId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (PercentEnduranceRemaining != null)
                    hashCode = hashCode * 59 + PercentEnduranceRemaining.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WearMetricsByDriveDailyInstance left, WearMetricsByDriveDailyInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WearMetricsByDriveDailyInstance left, WearMetricsByDriveDailyInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
