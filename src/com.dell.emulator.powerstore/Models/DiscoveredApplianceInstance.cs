/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Appliance information such as the appliance&#39;s link local address, model, software version, and available drive failure tolerance levels.  Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class DiscoveredApplianceInstance : IEquatable<DiscoveredApplianceInstance>
    { 
        /// <summary>
        /// Unique identifier of a discovered appliance. The local discovered appliance has the id \&quot;0\&quot;.
        /// </summary>
        /// <value>Unique identifier of a discovered appliance. The local discovered appliance has the id \&quot;0\&quot;.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The link local IPv4 address for the appliance.
        /// </summary>
        /// <value>The link local IPv4 address for the appliance.</value>

        [DataMember(Name="link_local_address")]
        public string LinkLocalAddress { get; set; }

        /// <summary>
        /// The service name of the appliance.
        /// </summary>
        /// <value>The service name of the appliance.</value>

        [DataMember(Name="service_name")]
        public string ServiceName { get; set; }

        /// <summary>
        /// The Dell service tag.
        /// </summary>
        /// <value>The Dell service tag.</value>

        [DataMember(Name="service_tag")]
        public string ServiceTag { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public DiscoveredApplianceStateEnum? State { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>

        [DataMember(Name="mode")]
        public ApplianceModeEnum? Mode { get; set; }

        /// <summary>
        /// The model of the appliance.
        /// </summary>
        /// <value>The model of the appliance.</value>

        [DataMember(Name="model")]
        public string Model { get; set; }

        /// <summary>
        /// The Express service code for the appliance.
        /// </summary>
        /// <value>The Express service code for the appliance.</value>

        [DataMember(Name="express_service_code")]
        public string ExpressServiceCode { get; set; }

        /// <summary>
        /// Indicates whether appliance is local (serving this request) or not.
        /// </summary>
        /// <value>Indicates whether appliance is local (serving this request) or not.</value>

        [DataMember(Name="is_local")]
        public bool? IsLocal { get; set; }

        /// <summary>
        /// Indicates whether necessary management services are ready.
        /// </summary>
        /// <value>Indicates whether necessary management services are ready.</value>

        [DataMember(Name="management_service_ready")]
        public bool? ManagementServiceReady { get; set; }

        /// <summary>
        /// Gets or Sets SoftwareVersionCompatibility
        /// </summary>

        [DataMember(Name="software_version_compatibility")]
        public DiscoveredApplianceSoftwareVersionCompatibilityEnum? SoftwareVersionCompatibility { get; set; }

        /// <summary>
        /// Build version of the installed software package release.
        /// </summary>
        /// <value>Build version of the installed software package release.</value>

        [DataMember(Name="build_version")]
        public string BuildVersion { get; set; }

        /// <summary>
        /// Unique identifier of this build.
        /// </summary>
        /// <value>Unique identifier of this build.</value>

        [DataMember(Name="build_id")]
        public string BuildId { get; set; }

        /// <summary>
        /// Power rating for this appliance.
        /// </summary>
        /// <value>Power rating for this appliance.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="power_score")]
        public int? PowerScore { get; set; }

        /// <summary>
        /// The number of nodes deployed on an appliance.
        /// </summary>
        /// <value>The number of nodes deployed on an appliance.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="node_count")]
        public int? NodeCount { get; set; }

        /// <summary>
        /// Indicates whether the appliance is capable of a unified configuration
        /// </summary>
        /// <value>Indicates whether the appliance is capable of a unified configuration</value>

        [DataMember(Name="is_unified_capable")]
        public bool? IsUnifiedCapable { get; set; }

        /// <summary>
        /// Information about the drive failure tolerance levels.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Information about the drive failure tolerance levels.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="drive_failure_tolerance_level_and_availability")]
        public List<DiscoveredApplianceDriveFailureToleranceLevelAvailability> DriveFailureToleranceLevelAndAvailability { get; set; }

        /// <summary>
        /// Whether or not this is a hyper-converged appliance. Was added in version 3.2.0.0.
        /// </summary>
        /// <value>Whether or not this is a hyper-converged appliance. Was added in version 3.2.0.0.</value>

        [DataMember(Name="is_hyper_converged")]
        public bool? IsHyperConverged { get; set; }

        /// <summary>
        ///  Was added in version 4.0.0.0.
        /// </summary>
        /// <value> Was added in version 4.0.0.0.</value>

        [DataMember(Name="storage_class")]
        public ApplianceStorageClassEnum? StorageClass { get; set; }

        /// <summary>
        /// Information about compatibilities of the appliance. Was added in version 4.0.0.0.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Information about compatibilities of the appliance. Was added in version 4.0.0.0.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="clustering_compatibilities")]
        public List<DiscoveredApplianceCompatibility> ClusteringCompatibilities { get; set; }

        /// <summary>
        /// Software version Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Software version Was added in version 4.0.0.0.</value>

        [DataMember(Name="version")]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoveredApplianceInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LinkLocalAddress: ").Append(LinkLocalAddress).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  ServiceTag: ").Append(ServiceTag).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ExpressServiceCode: ").Append(ExpressServiceCode).Append("\n");
            sb.Append("  IsLocal: ").Append(IsLocal).Append("\n");
            sb.Append("  ManagementServiceReady: ").Append(ManagementServiceReady).Append("\n");
            sb.Append("  SoftwareVersionCompatibility: ").Append(SoftwareVersionCompatibility).Append("\n");
            sb.Append("  BuildVersion: ").Append(BuildVersion).Append("\n");
            sb.Append("  BuildId: ").Append(BuildId).Append("\n");
            sb.Append("  PowerScore: ").Append(PowerScore).Append("\n");
            sb.Append("  NodeCount: ").Append(NodeCount).Append("\n");
            sb.Append("  IsUnifiedCapable: ").Append(IsUnifiedCapable).Append("\n");
            sb.Append("  DriveFailureToleranceLevelAndAvailability: ").Append(DriveFailureToleranceLevelAndAvailability).Append("\n");
            sb.Append("  IsHyperConverged: ").Append(IsHyperConverged).Append("\n");
            sb.Append("  StorageClass: ").Append(StorageClass).Append("\n");
            sb.Append("  ClusteringCompatibilities: ").Append(ClusteringCompatibilities).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DiscoveredApplianceInstance)obj);
        }

        /// <summary>
        /// Returns true if DiscoveredApplianceInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of DiscoveredApplianceInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoveredApplianceInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LinkLocalAddress == other.LinkLocalAddress ||
                    LinkLocalAddress != null &&
                    LinkLocalAddress.Equals(other.LinkLocalAddress)
                ) && 
                (
                    ServiceName == other.ServiceName ||
                    ServiceName != null &&
                    ServiceName.Equals(other.ServiceName)
                ) && 
                (
                    ServiceTag == other.ServiceTag ||
                    ServiceTag != null &&
                    ServiceTag.Equals(other.ServiceTag)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Mode == other.Mode ||
                    Mode != null &&
                    Mode.Equals(other.Mode)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    ExpressServiceCode == other.ExpressServiceCode ||
                    ExpressServiceCode != null &&
                    ExpressServiceCode.Equals(other.ExpressServiceCode)
                ) && 
                (
                    IsLocal == other.IsLocal ||
                    IsLocal != null &&
                    IsLocal.Equals(other.IsLocal)
                ) && 
                (
                    ManagementServiceReady == other.ManagementServiceReady ||
                    ManagementServiceReady != null &&
                    ManagementServiceReady.Equals(other.ManagementServiceReady)
                ) && 
                (
                    SoftwareVersionCompatibility == other.SoftwareVersionCompatibility ||
                    SoftwareVersionCompatibility != null &&
                    SoftwareVersionCompatibility.Equals(other.SoftwareVersionCompatibility)
                ) && 
                (
                    BuildVersion == other.BuildVersion ||
                    BuildVersion != null &&
                    BuildVersion.Equals(other.BuildVersion)
                ) && 
                (
                    BuildId == other.BuildId ||
                    BuildId != null &&
                    BuildId.Equals(other.BuildId)
                ) && 
                (
                    PowerScore == other.PowerScore ||
                    PowerScore != null &&
                    PowerScore.Equals(other.PowerScore)
                ) && 
                (
                    NodeCount == other.NodeCount ||
                    NodeCount != null &&
                    NodeCount.Equals(other.NodeCount)
                ) && 
                (
                    IsUnifiedCapable == other.IsUnifiedCapable ||
                    IsUnifiedCapable != null &&
                    IsUnifiedCapable.Equals(other.IsUnifiedCapable)
                ) && 
                (
                    DriveFailureToleranceLevelAndAvailability == other.DriveFailureToleranceLevelAndAvailability ||
                    DriveFailureToleranceLevelAndAvailability != null &&
                    DriveFailureToleranceLevelAndAvailability.SequenceEqual(other.DriveFailureToleranceLevelAndAvailability)
                ) && 
                (
                    IsHyperConverged == other.IsHyperConverged ||
                    IsHyperConverged != null &&
                    IsHyperConverged.Equals(other.IsHyperConverged)
                ) && 
                (
                    StorageClass == other.StorageClass ||
                    StorageClass != null &&
                    StorageClass.Equals(other.StorageClass)
                ) && 
                (
                    ClusteringCompatibilities == other.ClusteringCompatibilities ||
                    ClusteringCompatibilities != null &&
                    ClusteringCompatibilities.SequenceEqual(other.ClusteringCompatibilities)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LinkLocalAddress != null)
                    hashCode = hashCode * 59 + LinkLocalAddress.GetHashCode();
                    if (ServiceName != null)
                    hashCode = hashCode * 59 + ServiceName.GetHashCode();
                    if (ServiceTag != null)
                    hashCode = hashCode * 59 + ServiceTag.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Mode != null)
                    hashCode = hashCode * 59 + Mode.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (ExpressServiceCode != null)
                    hashCode = hashCode * 59 + ExpressServiceCode.GetHashCode();
                    if (IsLocal != null)
                    hashCode = hashCode * 59 + IsLocal.GetHashCode();
                    if (ManagementServiceReady != null)
                    hashCode = hashCode * 59 + ManagementServiceReady.GetHashCode();
                    if (SoftwareVersionCompatibility != null)
                    hashCode = hashCode * 59 + SoftwareVersionCompatibility.GetHashCode();
                    if (BuildVersion != null)
                    hashCode = hashCode * 59 + BuildVersion.GetHashCode();
                    if (BuildId != null)
                    hashCode = hashCode * 59 + BuildId.GetHashCode();
                    if (PowerScore != null)
                    hashCode = hashCode * 59 + PowerScore.GetHashCode();
                    if (NodeCount != null)
                    hashCode = hashCode * 59 + NodeCount.GetHashCode();
                    if (IsUnifiedCapable != null)
                    hashCode = hashCode * 59 + IsUnifiedCapable.GetHashCode();
                    if (DriveFailureToleranceLevelAndAvailability != null)
                    hashCode = hashCode * 59 + DriveFailureToleranceLevelAndAvailability.GetHashCode();
                    if (IsHyperConverged != null)
                    hashCode = hashCode * 59 + IsHyperConverged.GetHashCode();
                    if (StorageClass != null)
                    hashCode = hashCode * 59 + StorageClass.GetHashCode();
                    if (ClusteringCompatibilities != null)
                    hashCode = hashCode * 59 + ClusteringCompatibilities.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DiscoveredApplianceInstance left, DiscoveredApplianceInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DiscoveredApplianceInstance left, DiscoveredApplianceInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
