/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    ///  Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FlrCreate : IEquatable<FlrCreate>
    { 
        /// <summary>
        /// Gets or Sets Mode
        /// </summary>

        [DataMember(Name="mode")]
        public FileSystemFLRModeEnum? Mode { get; set; }

        /// <summary>
        /// The shortest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. This value must be less than or equal to the maximum retention period. Any attempt to lock a file for less than the minimum retention period results in the file being locked until the current system time plus the minimum retention period is reached. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. Setting infinite means that the files can never be deleted. This attribute should be set only for FLR enabled filesystems. 
        /// </summary>
        /// <value>The shortest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. This value must be less than or equal to the maximum retention period. Any attempt to lock a file for less than the minimum retention period results in the file being locked until the current system time plus the minimum retention period is reached. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. Setting infinite means that the files can never be deleted. This attribute should be set only for FLR enabled filesystems. </value>

        [RegularExpression("/(^\\d+[DMY])|(^infinite$)/")]
        [DataMember(Name="minimum_retention")]
        public string MinimumRetention { get; set; }

        /// <summary>
        /// The default retention period that is used in an FLR-enabled file system when a file is locked and a retention period is not specified. This value must be greater than or equal to the minimum retention period, and less than or equal to the maximum retention period. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or infinite. The default value for the default retention period is infinite for Enterprise FLR mode, and 1 year for Compliance FLR mode. This attribute should be set only for FLR enabled filesystems. 
        /// </summary>
        /// <value>The default retention period that is used in an FLR-enabled file system when a file is locked and a retention period is not specified. This value must be greater than or equal to the minimum retention period, and less than or equal to the maximum retention period. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or infinite. The default value for the default retention period is infinite for Enterprise FLR mode, and 1 year for Compliance FLR mode. This attribute should be set only for FLR enabled filesystems. </value>

        [RegularExpression("/(^\\d+[DMY])|(^infinite$)/")]
        [DataMember(Name="default_retention")]
        public string DefaultRetention { get; set; }

        /// <summary>
        /// The longest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. Any attempt to lock a file for more than this maximum retention period results in the file being locked until the current system time plus the maximum retention period is reached. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or infinite. Setting infinite means that the files can never be deleted. This attribute should be set only for FLR enabled filesystems. 
        /// </summary>
        /// <value>The longest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. Any attempt to lock a file for more than this maximum retention period results in the file being locked until the current system time plus the maximum retention period is reached. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or infinite. Setting infinite means that the files can never be deleted. This attribute should be set only for FLR enabled filesystems. </value>

        [RegularExpression("/(^\\d+[DMY])|(^infinite$)/")]
        [DataMember(Name="maximum_retention")]
        public string MaximumRetention { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlrCreate {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  MinimumRetention: ").Append(MinimumRetention).Append("\n");
            sb.Append("  DefaultRetention: ").Append(DefaultRetention).Append("\n");
            sb.Append("  MaximumRetention: ").Append(MaximumRetention).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FlrCreate)obj);
        }

        /// <summary>
        /// Returns true if FlrCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of FlrCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlrCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Mode == other.Mode ||
                    Mode != null &&
                    Mode.Equals(other.Mode)
                ) && 
                (
                    MinimumRetention == other.MinimumRetention ||
                    MinimumRetention != null &&
                    MinimumRetention.Equals(other.MinimumRetention)
                ) && 
                (
                    DefaultRetention == other.DefaultRetention ||
                    DefaultRetention != null &&
                    DefaultRetention.Equals(other.DefaultRetention)
                ) && 
                (
                    MaximumRetention == other.MaximumRetention ||
                    MaximumRetention != null &&
                    MaximumRetention.Equals(other.MaximumRetention)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Mode != null)
                    hashCode = hashCode * 59 + Mode.GetHashCode();
                    if (MinimumRetention != null)
                    hashCode = hashCode * 59 + MinimumRetention.GetHashCode();
                    if (DefaultRetention != null)
                    hashCode = hashCode * 59 + DefaultRetention.GetHashCode();
                    if (MaximumRetention != null)
                    hashCode = hashCode * 59 + MaximumRetention.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FlrCreate left, FlrCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlrCreate left, FlrCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
