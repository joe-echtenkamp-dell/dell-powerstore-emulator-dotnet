/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Parameters for the volume snapshot operation.
    /// </summary>
    [DataContract]
    public partial class VolumeSnapshot : IEquatable<VolumeSnapshot>
    { 
        /// <summary>
        /// Name of the snapshot to be created. This value must contain 128 or fewer printable Unicode characters. The default name of the volume snapshot is the date and time when the snapshot is taken. 
        /// </summary>
        /// <value>Name of the snapshot to be created. This value must contain 128 or fewer printable Unicode characters. The default name of the volume snapshot is the date and time when the snapshot is taken. </value>

        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the snapshot. This value must contain 128 or fewer printable Unicode characters. 
        /// </summary>
        /// <value>Description of the snapshot. This value must contain 128 or fewer printable Unicode characters. </value>

        [MaxLength(128)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Unique identifier of the performance policy assigned to the snapshot. name:{name} can be used instead of {id}. For example: &#39;performance_policy_id&#39;:&#39;name:policy_name&#39;
        /// </summary>
        /// <value>Unique identifier of the performance policy assigned to the snapshot. name:{name} can be used instead of {id}. For example: &#39;performance_policy_id&#39;:&#39;name:policy_name&#39;</value>

        [DataMember(Name="performance_policy_id")]
        public string PerformancePolicyId { get; set; }

        /// <summary>
        /// Time at which the snapshot will expire. Expired snapshots are deleted by the snapshot aging service that runs periodically in the background. If not specified, the snapshot never expires.  Use a maximum timestamp value to set an expiration to never expire. 
        /// </summary>
        /// <value>Time at which the snapshot will expire. Expired snapshots are deleted by the snapshot aging service that runs periodically in the background. If not specified, the snapshot never expires.  Use a maximum timestamp value to set an expiration to never expire. </value>

        [DataMember(Name="expiration_timestamp")]
        public DateTime? ExpirationTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets CreatorType
        /// </summary>

        [DataMember(Name="creator_type")]
        public StorageCreatorTypeEnum? CreatorType { get; set; }

        /// <summary>
        /// Create a secure snapshot. This parameter requires a valid expiration_timestamp to be set in the request. Secure snapshots can only be taken on block volumes.  Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Create a secure snapshot. This parameter requires a valid expiration_timestamp to be set in the request. Secure snapshots can only be taken on block volumes.  Was added in version 3.5.0.0.</value>

        [DataMember(Name="is_secure")]
        public bool? IsSecure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeSnapshot {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PerformancePolicyId: ").Append(PerformancePolicyId).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  CreatorType: ").Append(CreatorType).Append("\n");
            sb.Append("  IsSecure: ").Append(IsSecure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VolumeSnapshot)obj);
        }

        /// <summary>
        /// Returns true if VolumeSnapshot instances are equal
        /// </summary>
        /// <param name="other">Instance of VolumeSnapshot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeSnapshot other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    PerformancePolicyId == other.PerformancePolicyId ||
                    PerformancePolicyId != null &&
                    PerformancePolicyId.Equals(other.PerformancePolicyId)
                ) && 
                (
                    ExpirationTimestamp == other.ExpirationTimestamp ||
                    ExpirationTimestamp != null &&
                    ExpirationTimestamp.Equals(other.ExpirationTimestamp)
                ) && 
                (
                    CreatorType == other.CreatorType ||
                    CreatorType != null &&
                    CreatorType.Equals(other.CreatorType)
                ) && 
                (
                    IsSecure == other.IsSecure ||
                    IsSecure != null &&
                    IsSecure.Equals(other.IsSecure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (PerformancePolicyId != null)
                    hashCode = hashCode * 59 + PerformancePolicyId.GetHashCode();
                    if (ExpirationTimestamp != null)
                    hashCode = hashCode * 59 + ExpirationTimestamp.GetHashCode();
                    if (CreatorType != null)
                    hashCode = hashCode * 59 + CreatorType.GetHashCode();
                    if (IsSecure != null)
                    hashCode = hashCode * 59 + IsSecure.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VolumeSnapshot left, VolumeSnapshot right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VolumeSnapshot left, VolumeSnapshot right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
