/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Information about a volume group. This resource type has queriable associations from policy, migration_session, remote_snapshot_session, remote_snapshot, volume, replication_session
    /// </summary>
    [DataContract]
    public partial class VolumeGroupInstance : IEquatable<VolumeGroupInstance>
    { 
        /// <summary>
        /// Unique identifier of the volume group.
        /// </summary>
        /// <value>Unique identifier of the volume group.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the volume group.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the volume group.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description for the volume group.
        /// </summary>
        /// <value>Description for the volume group.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The time at which the volume group was created.
        /// </summary>
        /// <value>The time at which the volume group was created.</value>

        [DataMember(Name="creation_timestamp")]
        public DateTime? CreationTimestamp { get; set; }

        /// <summary>
        /// This is a derived field that is set internally. It enables/disables the following functionality:  * Whether a protection_policy can be applied to the group.  * Whether manual snapshots can be taken.  * Whether clones of the group can be created. 
        /// </summary>
        /// <value>This is a derived field that is set internally. It enables/disables the following functionality:  * Whether a protection_policy can be applied to the group.  * Whether manual snapshots can be taken.  * Whether clones of the group can be created. </value>

        [DataMember(Name="is_protectable")]
        public bool? IsProtectable { get; set; }

        /// <summary>
        /// Unique identifier of the protection policy assigned to the volume group. This attribute is only applicable to primary and clone volume groups. 
        /// </summary>
        /// <value>Unique identifier of the protection policy assigned to the volume group. This attribute is only applicable to primary and clone volume groups. </value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Unique identifier of the optional performance policy assigned to this volume group. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the optional performance policy assigned to this volume group. Was added in version 4.0.0.0.</value>

        [DataMember(Name="qos_performance_policy_id")]
        public string QosPerformancePolicyId { get; set; }

        /// <summary>
        /// Unique identifier of the migration session assigned to the volume group when it is part of a migration activity. 
        /// </summary>
        /// <value>Unique identifier of the migration session assigned to the volume group when it is part of a migration activity. </value>

        [DataMember(Name="migration_session_id")]
        public string MigrationSessionId { get; set; }

        /// <summary>
        /// For a primary or a clone volume group, this property determines whether snapshot sets of the group will be write order consistent.   For a snapshot set, this property indicates whether the snapshot set is write-order consistent. 
        /// </summary>
        /// <value>For a primary or a clone volume group, this property determines whether snapshot sets of the group will be write order consistent.   For a snapshot set, this property indicates whether the snapshot set is write-order consistent. </value>

        [DataMember(Name="is_write_order_consistent")]
        public bool? IsWriteOrderConsistent { get; set; }

        /// <summary>
        /// Gets or Sets PlacementRule
        /// </summary>

        [DataMember(Name="placement_rule")]
        public VGPlacementRule? PlacementRule { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public VolumeTypeEnum? Type { get; set; }

        /// <summary>
        /// Indicates whether this volume group is a replication destination. A replication destination will be created by the system when a replication session is created. When there is an active replication session, all the user operations are restricted including modification, deletion, host operation, snapshot, clone, etc. After the replication session is deleted, the replication destination will remain as it is until the end user changes it to be a non-replication destination. After the change, it becomes a primary volume group. If the end user keeps it as a replication destination, when the replication session is recreated, the replication destination could potentially be reused in the new session to avoid a time-consuming full sync. This property is only valid for primary and clone volume groups. 
        /// </summary>
        /// <value>Indicates whether this volume group is a replication destination. A replication destination will be created by the system when a replication session is created. When there is an active replication session, all the user operations are restricted including modification, deletion, host operation, snapshot, clone, etc. After the replication session is deleted, the replication destination will remain as it is until the end user changes it to be a non-replication destination. After the change, it becomes a primary volume group. If the end user keeps it as a replication destination, when the replication session is recreated, the replication destination could potentially be reused in the new session to avoid a time-consuming full sync. This property is only valid for primary and clone volume groups. </value>

        [DataMember(Name="is_replication_destination")]
        public bool? IsReplicationDestination { get; set; }

        /// <summary>
        /// Unique identifier of the replication session assigned to the volume group if it has been configured as a metro volume group between two PowerStore clusters. The volume group can only be modified, refreshed, or restored when the metro_replication_session is in the paused state.  Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the replication session assigned to the volume group if it has been configured as a metro volume group between two PowerStore clusters. The volume group can only be modified, refreshed, or restored when the metro_replication_session is in the paused state.  Was added in version 4.0.0.0.</value>

        [DataMember(Name="metro_replication_session_id")]
        public string MetroReplicationSessionId { get; set; }

        /// <summary>
        /// This field is true when the volume group is visible from a host perspective. This will always be true UNLESS a metro session is associated with the volume group and that session has made this instance unavailable.  Was added in version 4.0.0.0.
        /// </summary>
        /// <value>This field is true when the volume group is visible from a host perspective. This will always be true UNLESS a metro session is associated with the volume group and that session has made this instance unavailable.  Was added in version 4.0.0.0.</value>

        [DataMember(Name="is_host_access_available")]
        public bool? IsHostAccessAvailable { get; set; }

        /// <summary>
        /// Gets or Sets ProtectionData
        /// </summary>

        [DataMember(Name="protection_data")]
        public ProtectionDataInstance ProtectionData { get; set; }

        /// <summary>
        /// Indicates whether the volume group is being imported.
        /// </summary>
        /// <value>Indicates whether the volume group is being imported.</value>

        [DataMember(Name="is_importing")]
        public bool? IsImporting { get; set; }

        /// <summary>
        /// A list of locations. The list of locations includes the move to the current appliance.   Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>A list of locations. The list of locations includes the move to the current appliance.   Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="location_history")]
        public List<LocationHistoryInstance> LocationHistory { get; set; }

        /// <summary>
        /// Localized message string corresponding to type
        /// </summary>
        /// <value>Localized message string corresponding to type</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of protection_policy_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of protection_policy_id attribute.</value>

        [DataMember(Name="protection_policy")]
        public PolicyInstance ProtectionPolicy { get; set; }

        /// <summary>
        /// This is the embeddable reference form of qos_performance_policy_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of qos_performance_policy_id attribute.</value>

        [DataMember(Name="qos_performance_policy")]
        public PolicyInstance QosPerformancePolicy { get; set; }

        /// <summary>
        /// This is the embeddable reference form of migration_session_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of migration_session_id attribute.</value>

        [DataMember(Name="migration_session")]
        public MigrationSessionInstance MigrationSession { get; set; }

        /// <summary>
        /// This is the inverse of the resource type remote_snapshot_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type remote_snapshot_session association.</value>

        [DataMember(Name="remote_snapshot_sessions")]
        public List<RemoteSnapshotSessionInstance> RemoteSnapshotSessions { get; set; }

        /// <summary>
        /// This is the inverse of the resource type remote_snapshot_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type remote_snapshot_session association.</value>

        [DataMember(Name="current_remote_snapshot_sessions")]
        public List<RemoteSnapshotSessionInstance> CurrentRemoteSnapshotSessions { get; set; }

        /// <summary>
        /// This is the inverse of the resource type remote_snapshot association.
        /// </summary>
        /// <value>This is the inverse of the resource type remote_snapshot association.</value>

        [DataMember(Name="remote_snapshots")]
        public List<RemoteSnapshotInstance> RemoteSnapshots { get; set; }

        /// <summary>
        /// List of the volumes that are associated with this volume_group.
        /// </summary>
        /// <value>List of the volumes that are associated with this volume_group.</value>

        [DataMember(Name="volumes")]
        public List<VolumeInstance> Volumes { get; set; }

        /// <summary>
        /// List of the replication_sessions that are associated with this volume_group.
        /// </summary>
        /// <value>List of the replication_sessions that are associated with this volume_group.</value>

        [DataMember(Name="replication_sessions")]
        public List<ReplicationSessionInstance> ReplicationSessions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeGroupInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  IsProtectable: ").Append(IsProtectable).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  QosPerformancePolicyId: ").Append(QosPerformancePolicyId).Append("\n");
            sb.Append("  MigrationSessionId: ").Append(MigrationSessionId).Append("\n");
            sb.Append("  IsWriteOrderConsistent: ").Append(IsWriteOrderConsistent).Append("\n");
            sb.Append("  PlacementRule: ").Append(PlacementRule).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsReplicationDestination: ").Append(IsReplicationDestination).Append("\n");
            sb.Append("  MetroReplicationSessionId: ").Append(MetroReplicationSessionId).Append("\n");
            sb.Append("  IsHostAccessAvailable: ").Append(IsHostAccessAvailable).Append("\n");
            sb.Append("  ProtectionData: ").Append(ProtectionData).Append("\n");
            sb.Append("  IsImporting: ").Append(IsImporting).Append("\n");
            sb.Append("  LocationHistory: ").Append(LocationHistory).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  ProtectionPolicy: ").Append(ProtectionPolicy).Append("\n");
            sb.Append("  QosPerformancePolicy: ").Append(QosPerformancePolicy).Append("\n");
            sb.Append("  MigrationSession: ").Append(MigrationSession).Append("\n");
            sb.Append("  RemoteSnapshotSessions: ").Append(RemoteSnapshotSessions).Append("\n");
            sb.Append("  CurrentRemoteSnapshotSessions: ").Append(CurrentRemoteSnapshotSessions).Append("\n");
            sb.Append("  RemoteSnapshots: ").Append(RemoteSnapshots).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("  ReplicationSessions: ").Append(ReplicationSessions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VolumeGroupInstance)obj);
        }

        /// <summary>
        /// Returns true if VolumeGroupInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of VolumeGroupInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeGroupInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CreationTimestamp == other.CreationTimestamp ||
                    CreationTimestamp != null &&
                    CreationTimestamp.Equals(other.CreationTimestamp)
                ) && 
                (
                    IsProtectable == other.IsProtectable ||
                    IsProtectable != null &&
                    IsProtectable.Equals(other.IsProtectable)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    QosPerformancePolicyId == other.QosPerformancePolicyId ||
                    QosPerformancePolicyId != null &&
                    QosPerformancePolicyId.Equals(other.QosPerformancePolicyId)
                ) && 
                (
                    MigrationSessionId == other.MigrationSessionId ||
                    MigrationSessionId != null &&
                    MigrationSessionId.Equals(other.MigrationSessionId)
                ) && 
                (
                    IsWriteOrderConsistent == other.IsWriteOrderConsistent ||
                    IsWriteOrderConsistent != null &&
                    IsWriteOrderConsistent.Equals(other.IsWriteOrderConsistent)
                ) && 
                (
                    PlacementRule == other.PlacementRule ||
                    PlacementRule != null &&
                    PlacementRule.Equals(other.PlacementRule)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    IsReplicationDestination == other.IsReplicationDestination ||
                    IsReplicationDestination != null &&
                    IsReplicationDestination.Equals(other.IsReplicationDestination)
                ) && 
                (
                    MetroReplicationSessionId == other.MetroReplicationSessionId ||
                    MetroReplicationSessionId != null &&
                    MetroReplicationSessionId.Equals(other.MetroReplicationSessionId)
                ) && 
                (
                    IsHostAccessAvailable == other.IsHostAccessAvailable ||
                    IsHostAccessAvailable != null &&
                    IsHostAccessAvailable.Equals(other.IsHostAccessAvailable)
                ) && 
                (
                    ProtectionData == other.ProtectionData ||
                    ProtectionData != null &&
                    ProtectionData.Equals(other.ProtectionData)
                ) && 
                (
                    IsImporting == other.IsImporting ||
                    IsImporting != null &&
                    IsImporting.Equals(other.IsImporting)
                ) && 
                (
                    LocationHistory == other.LocationHistory ||
                    LocationHistory != null &&
                    LocationHistory.SequenceEqual(other.LocationHistory)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    ProtectionPolicy == other.ProtectionPolicy ||
                    ProtectionPolicy != null &&
                    ProtectionPolicy.Equals(other.ProtectionPolicy)
                ) && 
                (
                    QosPerformancePolicy == other.QosPerformancePolicy ||
                    QosPerformancePolicy != null &&
                    QosPerformancePolicy.Equals(other.QosPerformancePolicy)
                ) && 
                (
                    MigrationSession == other.MigrationSession ||
                    MigrationSession != null &&
                    MigrationSession.Equals(other.MigrationSession)
                ) && 
                (
                    RemoteSnapshotSessions == other.RemoteSnapshotSessions ||
                    RemoteSnapshotSessions != null &&
                    RemoteSnapshotSessions.SequenceEqual(other.RemoteSnapshotSessions)
                ) && 
                (
                    CurrentRemoteSnapshotSessions == other.CurrentRemoteSnapshotSessions ||
                    CurrentRemoteSnapshotSessions != null &&
                    CurrentRemoteSnapshotSessions.SequenceEqual(other.CurrentRemoteSnapshotSessions)
                ) && 
                (
                    RemoteSnapshots == other.RemoteSnapshots ||
                    RemoteSnapshots != null &&
                    RemoteSnapshots.SequenceEqual(other.RemoteSnapshots)
                ) && 
                (
                    Volumes == other.Volumes ||
                    Volumes != null &&
                    Volumes.SequenceEqual(other.Volumes)
                ) && 
                (
                    ReplicationSessions == other.ReplicationSessions ||
                    ReplicationSessions != null &&
                    ReplicationSessions.SequenceEqual(other.ReplicationSessions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CreationTimestamp != null)
                    hashCode = hashCode * 59 + CreationTimestamp.GetHashCode();
                    if (IsProtectable != null)
                    hashCode = hashCode * 59 + IsProtectable.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (QosPerformancePolicyId != null)
                    hashCode = hashCode * 59 + QosPerformancePolicyId.GetHashCode();
                    if (MigrationSessionId != null)
                    hashCode = hashCode * 59 + MigrationSessionId.GetHashCode();
                    if (IsWriteOrderConsistent != null)
                    hashCode = hashCode * 59 + IsWriteOrderConsistent.GetHashCode();
                    if (PlacementRule != null)
                    hashCode = hashCode * 59 + PlacementRule.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (IsReplicationDestination != null)
                    hashCode = hashCode * 59 + IsReplicationDestination.GetHashCode();
                    if (MetroReplicationSessionId != null)
                    hashCode = hashCode * 59 + MetroReplicationSessionId.GetHashCode();
                    if (IsHostAccessAvailable != null)
                    hashCode = hashCode * 59 + IsHostAccessAvailable.GetHashCode();
                    if (ProtectionData != null)
                    hashCode = hashCode * 59 + ProtectionData.GetHashCode();
                    if (IsImporting != null)
                    hashCode = hashCode * 59 + IsImporting.GetHashCode();
                    if (LocationHistory != null)
                    hashCode = hashCode * 59 + LocationHistory.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (ProtectionPolicy != null)
                    hashCode = hashCode * 59 + ProtectionPolicy.GetHashCode();
                    if (QosPerformancePolicy != null)
                    hashCode = hashCode * 59 + QosPerformancePolicy.GetHashCode();
                    if (MigrationSession != null)
                    hashCode = hashCode * 59 + MigrationSession.GetHashCode();
                    if (RemoteSnapshotSessions != null)
                    hashCode = hashCode * 59 + RemoteSnapshotSessions.GetHashCode();
                    if (CurrentRemoteSnapshotSessions != null)
                    hashCode = hashCode * 59 + CurrentRemoteSnapshotSessions.GetHashCode();
                    if (RemoteSnapshots != null)
                    hashCode = hashCode * 59 + RemoteSnapshots.GetHashCode();
                    if (Volumes != null)
                    hashCode = hashCode * 59 + Volumes.GetHashCode();
                    if (ReplicationSessions != null)
                    hashCode = hashCode * 59 + ReplicationSessions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VolumeGroupInstance left, VolumeGroupInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VolumeGroupInstance left, VolumeGroupInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
