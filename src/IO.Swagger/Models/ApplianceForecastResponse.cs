/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Response for appliance capacity or performance forecast. Response will be just an array of one of the child of this definition.
    /// </summary>
    [DataContract]
    public partial class ApplianceForecastResponse : IEquatable<ApplianceForecastResponse>
    { 
        /// <summary>
        /// Date-time of the forecast data. Was deprecated in version 3.0.0.0.
        /// </summary>
        /// <value>Date-time of the forecast data. Was deprecated in version 3.0.0.0.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Estimate for the lower bound forecasted value on that particular time. Was deprecated in version 3.0.0.0.
        /// </summary>
        /// <value>Estimate for the lower bound forecasted value on that particular time. Was deprecated in version 3.0.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="low_value")]
        public long? LowValue { get; set; }

        /// <summary>
        /// Estimate for the mean forecasted value on that particular time. Was deprecated in version 3.0.0.0.
        /// </summary>
        /// <value>Estimate for the mean forecasted value on that particular time. Was deprecated in version 3.0.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="mean_value")]
        public long? MeanValue { get; set; }

        /// <summary>
        /// Estimate for the upper bound forecasted value on that particular time. Was deprecated in version 3.0.0.0.
        /// </summary>
        /// <value>Estimate for the upper bound forecasted value on that particular time. Was deprecated in version 3.0.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="high_value")]
        public long? HighValue { get; set; }

        /// <summary>
        /// Localized message string corresponding to metric_type. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to metric_type. Was added in version 3.0.0.0.</value>
        [Required]
        
        [DataMember(Name="metric_type")]
        public string MetricType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplianceForecastResponse {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  LowValue: ").Append(LowValue).Append("\n");
            sb.Append("  MeanValue: ").Append(MeanValue).Append("\n");
            sb.Append("  HighValue: ").Append(HighValue).Append("\n");
            sb.Append("  MetricType: ").Append(MetricType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApplianceForecastResponse)obj);
        }

        /// <summary>
        /// Returns true if ApplianceForecastResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ApplianceForecastResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplianceForecastResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    LowValue == other.LowValue ||
                    LowValue != null &&
                    LowValue.Equals(other.LowValue)
                ) && 
                (
                    MeanValue == other.MeanValue ||
                    MeanValue != null &&
                    MeanValue.Equals(other.MeanValue)
                ) && 
                (
                    HighValue == other.HighValue ||
                    HighValue != null &&
                    HighValue.Equals(other.HighValue)
                ) && 
                (
                    MetricType == other.MetricType ||
                    MetricType != null &&
                    MetricType.Equals(other.MetricType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (LowValue != null)
                    hashCode = hashCode * 59 + LowValue.GetHashCode();
                    if (MeanValue != null)
                    hashCode = hashCode * 59 + MeanValue.GetHashCode();
                    if (HighValue != null)
                    hashCode = hashCode * 59 + HighValue.GetHashCode();
                    if (MetricType != null)
                    hashCode = hashCode * 59 + MetricType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApplianceForecastResponse left, ApplianceForecastResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApplianceForecastResponse left, ApplianceForecastResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
