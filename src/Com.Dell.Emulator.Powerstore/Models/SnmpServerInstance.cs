/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// An SNMP server. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class SnmpServerInstance : IEquatable<SnmpServerInstance>
    { 
        /// <summary>
        /// Unique identifier of the SNMP server.
        /// </summary>
        /// <value>Unique identifier of the SNMP server.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// IPv4 address, IPv6 address, or FQDN of the SNMP server.
        /// </summary>
        /// <value>IPv4 address, IPv6 address, or FQDN of the SNMP server.</value>

        [DataMember(Name="ip_address")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Port number to use with the address of the SNMP server.
        /// </summary>
        /// <value>Port number to use with the address of the SNMP server.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="port")]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>

        [DataMember(Name="version")]
        public SNMPVersionEnum? Version { get; set; }

        /// <summary>
        /// Gets or Sets AlertSeverity
        /// </summary>

        [DataMember(Name="alert_severity")]
        public SNMPSeverityEnum? AlertSeverity { get; set; }

        /// <summary>
        /// Trap Community string. Usually describes the security level.
        /// </summary>
        /// <value>Trap Community string. Usually describes the security level.</value>

        [DataMember(Name="trap_community")]
        public string TrapCommunity { get; set; }

        /// <summary>
        /// User name, relevant only for SNMPv3.
        /// </summary>
        /// <value>User name, relevant only for SNMPv3.</value>

        [DataMember(Name="user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets AuthProtocol
        /// </summary>

        [DataMember(Name="auth_protocol")]
        public SNMPAuthProtocolEnum? AuthProtocol { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyProtocol
        /// </summary>

        [DataMember(Name="privacy_protocol")]
        public SNMPPrivacyProtocolEnum? PrivacyProtocol { get; set; }

        /// <summary>
        /// Localized message string corresponding to version Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to version Was added in version 2.0.0.0.</value>

        [DataMember(Name="version_l10n")]
        public string VersionL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to alert_severity Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to alert_severity Was added in version 2.0.0.0.</value>

        [DataMember(Name="alert_severity_l10n")]
        public string AlertSeverityL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to auth_protocol Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to auth_protocol Was added in version 2.0.0.0.</value>

        [DataMember(Name="auth_protocol_l10n")]
        public string AuthProtocolL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to privacy_protocol Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to privacy_protocol Was added in version 2.0.0.0.</value>

        [DataMember(Name="privacy_protocol_l10n")]
        public string PrivacyProtocolL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SnmpServerInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  AlertSeverity: ").Append(AlertSeverity).Append("\n");
            sb.Append("  TrapCommunity: ").Append(TrapCommunity).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  AuthProtocol: ").Append(AuthProtocol).Append("\n");
            sb.Append("  PrivacyProtocol: ").Append(PrivacyProtocol).Append("\n");
            sb.Append("  VersionL10n: ").Append(VersionL10n).Append("\n");
            sb.Append("  AlertSeverityL10n: ").Append(AlertSeverityL10n).Append("\n");
            sb.Append("  AuthProtocolL10n: ").Append(AuthProtocolL10n).Append("\n");
            sb.Append("  PrivacyProtocolL10n: ").Append(PrivacyProtocolL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SnmpServerInstance)obj);
        }

        /// <summary>
        /// Returns true if SnmpServerInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of SnmpServerInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SnmpServerInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IpAddress == other.IpAddress ||
                    IpAddress != null &&
                    IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    Port == other.Port ||
                    Port != null &&
                    Port.Equals(other.Port)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    AlertSeverity == other.AlertSeverity ||
                    AlertSeverity != null &&
                    AlertSeverity.Equals(other.AlertSeverity)
                ) && 
                (
                    TrapCommunity == other.TrapCommunity ||
                    TrapCommunity != null &&
                    TrapCommunity.Equals(other.TrapCommunity)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    AuthProtocol == other.AuthProtocol ||
                    AuthProtocol != null &&
                    AuthProtocol.Equals(other.AuthProtocol)
                ) && 
                (
                    PrivacyProtocol == other.PrivacyProtocol ||
                    PrivacyProtocol != null &&
                    PrivacyProtocol.Equals(other.PrivacyProtocol)
                ) && 
                (
                    VersionL10n == other.VersionL10n ||
                    VersionL10n != null &&
                    VersionL10n.Equals(other.VersionL10n)
                ) && 
                (
                    AlertSeverityL10n == other.AlertSeverityL10n ||
                    AlertSeverityL10n != null &&
                    AlertSeverityL10n.Equals(other.AlertSeverityL10n)
                ) && 
                (
                    AuthProtocolL10n == other.AuthProtocolL10n ||
                    AuthProtocolL10n != null &&
                    AuthProtocolL10n.Equals(other.AuthProtocolL10n)
                ) && 
                (
                    PrivacyProtocolL10n == other.PrivacyProtocolL10n ||
                    PrivacyProtocolL10n != null &&
                    PrivacyProtocolL10n.Equals(other.PrivacyProtocolL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IpAddress != null)
                    hashCode = hashCode * 59 + IpAddress.GetHashCode();
                    if (Port != null)
                    hashCode = hashCode * 59 + Port.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (AlertSeverity != null)
                    hashCode = hashCode * 59 + AlertSeverity.GetHashCode();
                    if (TrapCommunity != null)
                    hashCode = hashCode * 59 + TrapCommunity.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (AuthProtocol != null)
                    hashCode = hashCode * 59 + AuthProtocol.GetHashCode();
                    if (PrivacyProtocol != null)
                    hashCode = hashCode * 59 + PrivacyProtocol.GetHashCode();
                    if (VersionL10n != null)
                    hashCode = hashCode * 59 + VersionL10n.GetHashCode();
                    if (AlertSeverityL10n != null)
                    hashCode = hashCode * 59 + AlertSeverityL10n.GetHashCode();
                    if (AuthProtocolL10n != null)
                    hashCode = hashCode * 59 + AuthProtocolL10n.GetHashCode();
                    if (PrivacyProtocolL10n != null)
                    hashCode = hashCode * 59 + PrivacyProtocolL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SnmpServerInstance left, SnmpServerInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SnmpServerInstance left, SnmpServerInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
