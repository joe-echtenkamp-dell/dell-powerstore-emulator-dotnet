/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Details about a volume, including snapshots and clones of volumes. This resource type has queriable associations from appliance, policy, migration_session, host_volume_mapping, remote_snapshot_session, remote_snapshot, volume_group, datastore, replication_session
    /// </summary>
    [DataContract]
    public partial class VolumeInstance : IEquatable<VolumeInstance>
    { 
        /// <summary>
        /// Unique identifier of the volume instance.
        /// </summary>
        /// <value>Unique identifier of the volume instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the volume. This value must contain 128 or fewer printable Unicode characters.   This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the volume. This value must contain 128 or fewer printable Unicode characters.   This property supports case-insensitive filtering.</value>

        [MaxLength(128)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the volume. This value must contain 128 or fewer printable Unicode characters. 
        /// </summary>
        /// <value>Description of the volume. This value must contain 128 or fewer printable Unicode characters. </value>

        [MaxLength(128)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public VolumeTypeEnum? Type { get; set; }

        /// <summary>
        /// World wide name of the volume.
        /// </summary>
        /// <value>World wide name of the volume.</value>

        [DataMember(Name="wwn")]
        public string Wwn { get; set; }

        /// <summary>
        /// NVMe Namespace unique identifier in the NVME subsystem. Used for volumes attached to NVMEoF hosts. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>NVMe Namespace unique identifier in the NVME subsystem. Used for volumes attached to NVMEoF hosts. Was added in version 2.0.0.0.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="nsid")]
        public int? Nsid { get; set; }

        /// <summary>
        /// NVMe Namespace globally unique identifier. Used for volumes attached to NVMEoF hosts. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>NVMe Namespace globally unique identifier. Used for volumes attached to NVMEoF hosts. Was added in version 2.0.0.0.</value>

        [DataMember(Name="nguid")]
        public string Nguid { get; set; }

        /// <summary>
        /// Unique identifier of the appliance on which the volume is provisioned.
        /// </summary>
        /// <value>Unique identifier of the appliance on which the volume is provisioned.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public VolumeStateEnum? State { get; set; }

        /// <summary>
        ///  Size of the volume in bytes. Minimum volume size is 1MB. Maximum volume size is 256TB. Size must be a multiple of 8192.
        /// </summary>
        /// <value> Size of the volume in bytes. Minimum volume size is 1MB. Maximum volume size is 256TB. Size must be a multiple of 8192.</value>

        [Range(1048576, 281474976710656)]
        [DataMember(Name="size")]
        public long? Size { get; set; }

        /// <summary>
        /// Current amount of data (in bytes) host has written to a volume without dedupe, compression or sharing. This metric applies to primaries, snaps and clones. The value is null initially when a volume is created and is collected at 5 minute intervals.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Current amount of data (in bytes) host has written to a volume without dedupe, compression or sharing. This metric applies to primaries, snaps and clones. The value is null initially when a volume is created and is collected at 5 minute intervals.  Was added in version 3.0.0.0.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="logical_used")]
        public long? LogicalUsed { get; set; }

        /// <summary>
        /// Node affinity.  Node which offers optimized IO for volume, values are:
        /// </summary>
        /// <value>Node affinity.  Node which offers optimized IO for volume, values are:</value>

        [DataMember(Name="node_affinity")]
        public NodeAffinityEnum? NodeAffinity { get; set; }

        /// <summary>
        /// Time when the volume was created.
        /// </summary>
        /// <value>Time when the volume was created.</value>

        [DataMember(Name="creation_timestamp")]
        public DateTime? CreationTimestamp { get; set; }

        /// <summary>
        /// Unique identifier of the protection policy assigned to the volume. Only applicable to primary and clone volumes. 
        /// </summary>
        /// <value>Unique identifier of the protection policy assigned to the volume. Only applicable to primary and clone volumes. </value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Unique identifier of the performance policy assigned to the volume.
        /// </summary>
        /// <value>Unique identifier of the performance policy assigned to the volume.</value>

        [DataMember(Name="performance_policy_id")]
        public string PerformancePolicyId { get; set; }

        /// <summary>
        /// Unique identifier of the QoS performance policy assigned to the volume. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the QoS performance policy assigned to the volume. Was added in version 4.0.0.0.</value>

        [DataMember(Name="qos_performance_policy_id")]
        public string QosPerformancePolicyId { get; set; }

        /// <summary>
        /// Indicates whether this volume is a replication destination. This field is false on both ends when a volume is a metro volume. Areplication destination will be created by the system when a replication session is created. When there is an active replication session, all the user operations are restricted including modification, deletion, host operation, snapshot, clone, etc. After the replication session is deleted, the replication destination volume will remain as it is until the end user changes it to be a non-replication destination. After the change, it becomes a primary volume. If the end user keeps it as a replication destination, when the replication session is recreated, the replication destination volume could potentially be reused in the new session to avoid a time-consuming full sync. This property is only valid for primary and clone volumes. 
        /// </summary>
        /// <value>Indicates whether this volume is a replication destination. This field is false on both ends when a volume is a metro volume. Areplication destination will be created by the system when a replication session is created. When there is an active replication session, all the user operations are restricted including modification, deletion, host operation, snapshot, clone, etc. After the replication session is deleted, the replication destination volume will remain as it is until the end user changes it to be a non-replication destination. After the change, it becomes a primary volume. If the end user keeps it as a replication destination, when the replication session is recreated, the replication destination volume could potentially be reused in the new session to avoid a time-consuming full sync. This property is only valid for primary and clone volumes. </value>

        [DataMember(Name="is_replication_destination")]
        public bool? IsReplicationDestination { get; set; }

        /// <summary>
        /// Unique identifier of the migration session assigned to the volume if it is part of a migration activity. 
        /// </summary>
        /// <value>Unique identifier of the migration session assigned to the volume if it is part of a migration activity. </value>

        [DataMember(Name="migration_session_id")]
        public string MigrationSessionId { get; set; }

        /// <summary>
        /// Unique identifier of the replication session assigned to the volume if it has been configured as a metro volume between two PowerStore clusters. The volume can only be modified, refreshed, or restored when the metro_replication_session is in the paused state.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the replication session assigned to the volume if it has been configured as a metro volume between two PowerStore clusters. The volume can only be modified, refreshed, or restored when the metro_replication_session is in the paused state.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="metro_replication_session_id")]
        public string MetroReplicationSessionId { get; set; }

        /// <summary>
        /// Indicates whether the volume is available to host. This attribute is only applicable to primary volumes and clones.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Indicates whether the volume is available to host. This attribute is only applicable to primary volumes and clones.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_host_access_available")]
        public bool? IsHostAccessAvailable { get; set; }

        /// <summary>
        /// Gets or Sets ProtectionData
        /// </summary>

        [DataMember(Name="protection_data")]
        public ProtectionDataInstance ProtectionData { get; set; }

        /// <summary>
        /// Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="location_history")]
        public List<LocationHistoryInstance> LocationHistory { get; set; }

        /// <summary>
        ///  Was added in version 2.1.0.0.
        /// </summary>
        /// <value> Was added in version 2.1.0.0.</value>

        [DataMember(Name="app_type")]
        public AppTypeEnum? AppType { get; set; }

        /// <summary>
        /// An optional field used to describe application type usage for a volume. This field can only be set if app_type is set to Relational_Databases_Other, Big_Data_Analytics_Other, Business_Applications_Other, Healthcare_Other, Virtualization_Other or Other. If the app_type attribute is set to anything other than one of these values, the attribute will be cleared.  Was added in version 2.1.0.0.
        /// </summary>
        /// <value>An optional field used to describe application type usage for a volume. This field can only be set if app_type is set to Relational_Databases_Other, Big_Data_Analytics_Other, Business_Applications_Other, Healthcare_Other, Virtualization_Other or Other. If the app_type attribute is set to anything other than one of these values, the attribute will be cleared.  Was added in version 2.1.0.0.</value>

        [MaxLength(32)]
        [DataMember(Name="app_type_other")]
        public string AppTypeOther { get; set; }

        /// <summary>
        /// Localized message string corresponding to type
        /// </summary>
        /// <value>Localized message string corresponding to type</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to state
        /// </summary>
        /// <value>Localized message string corresponding to state</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to node_affinity
        /// </summary>
        /// <value>Localized message string corresponding to node_affinity</value>

        [DataMember(Name="node_affinity_l10n")]
        public string NodeAffinityL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to app_type Was added in version 2.1.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to app_type Was added in version 2.1.0.0.</value>

        [DataMember(Name="app_type_l10n")]
        public string AppTypeL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of appliance_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of appliance_id attribute.</value>

        [DataMember(Name="appliance")]
        public ApplianceInstance Appliance { get; set; }

        /// <summary>
        /// This is the embeddable reference form of protection_policy_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of protection_policy_id attribute.</value>

        [DataMember(Name="protection_policy")]
        public PolicyInstance ProtectionPolicy { get; set; }

        /// <summary>
        /// This is the embeddable reference form of qos_performance_policy_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of qos_performance_policy_id attribute.</value>

        [DataMember(Name="qos_performance_policy")]
        public PolicyInstance QosPerformancePolicy { get; set; }

        /// <summary>
        /// This is the embeddable reference form of migration_session_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of migration_session_id attribute.</value>

        [DataMember(Name="migration_session")]
        public MigrationSessionInstance MigrationSession { get; set; }

        /// <summary>
        /// This is the inverse of the resource type host_volume_mapping association.
        /// </summary>
        /// <value>This is the inverse of the resource type host_volume_mapping association.</value>

        [DataMember(Name="mapped_volumes")]
        public List<HostVolumeMappingInstance> MappedVolumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type remote_snapshot_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type remote_snapshot_session association.</value>

        [DataMember(Name="remote_snapshot_sessions")]
        public List<RemoteSnapshotSessionInstance> RemoteSnapshotSessions { get; set; }

        /// <summary>
        /// This is the inverse of the resource type remote_snapshot_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type remote_snapshot_session association.</value>

        [DataMember(Name="current_remote_snapshot_sessions")]
        public List<RemoteSnapshotSessionInstance> CurrentRemoteSnapshotSessions { get; set; }

        /// <summary>
        /// This is the inverse of the resource type remote_snapshot association.
        /// </summary>
        /// <value>This is the inverse of the resource type remote_snapshot association.</value>

        [DataMember(Name="remote_snapshots")]
        public List<RemoteSnapshotInstance> RemoteSnapshots { get; set; }

        /// <summary>
        /// List of the volume_groups that are associated with this volume.
        /// </summary>
        /// <value>List of the volume_groups that are associated with this volume.</value>

        [DataMember(Name="volume_groups")]
        public List<VolumeGroupInstance> VolumeGroups { get; set; }

        /// <summary>
        /// List of the datastores that are associated with this volume.
        /// </summary>
        /// <value>List of the datastores that are associated with this volume.</value>

        [DataMember(Name="datastores")]
        public List<DatastoreInstance> Datastores { get; set; }

        /// <summary>
        /// List of the replication_sessions that are associated with this volume.
        /// </summary>
        /// <value>List of the replication_sessions that are associated with this volume.</value>

        [DataMember(Name="replication_sessions")]
        public List<ReplicationSessionInstance> ReplicationSessions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Wwn: ").Append(Wwn).Append("\n");
            sb.Append("  Nsid: ").Append(Nsid).Append("\n");
            sb.Append("  Nguid: ").Append(Nguid).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  LogicalUsed: ").Append(LogicalUsed).Append("\n");
            sb.Append("  NodeAffinity: ").Append(NodeAffinity).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  PerformancePolicyId: ").Append(PerformancePolicyId).Append("\n");
            sb.Append("  QosPerformancePolicyId: ").Append(QosPerformancePolicyId).Append("\n");
            sb.Append("  IsReplicationDestination: ").Append(IsReplicationDestination).Append("\n");
            sb.Append("  MigrationSessionId: ").Append(MigrationSessionId).Append("\n");
            sb.Append("  MetroReplicationSessionId: ").Append(MetroReplicationSessionId).Append("\n");
            sb.Append("  IsHostAccessAvailable: ").Append(IsHostAccessAvailable).Append("\n");
            sb.Append("  ProtectionData: ").Append(ProtectionData).Append("\n");
            sb.Append("  LocationHistory: ").Append(LocationHistory).Append("\n");
            sb.Append("  AppType: ").Append(AppType).Append("\n");
            sb.Append("  AppTypeOther: ").Append(AppTypeOther).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  NodeAffinityL10n: ").Append(NodeAffinityL10n).Append("\n");
            sb.Append("  AppTypeL10n: ").Append(AppTypeL10n).Append("\n");
            sb.Append("  Appliance: ").Append(Appliance).Append("\n");
            sb.Append("  ProtectionPolicy: ").Append(ProtectionPolicy).Append("\n");
            sb.Append("  QosPerformancePolicy: ").Append(QosPerformancePolicy).Append("\n");
            sb.Append("  MigrationSession: ").Append(MigrationSession).Append("\n");
            sb.Append("  MappedVolumes: ").Append(MappedVolumes).Append("\n");
            sb.Append("  RemoteSnapshotSessions: ").Append(RemoteSnapshotSessions).Append("\n");
            sb.Append("  CurrentRemoteSnapshotSessions: ").Append(CurrentRemoteSnapshotSessions).Append("\n");
            sb.Append("  RemoteSnapshots: ").Append(RemoteSnapshots).Append("\n");
            sb.Append("  VolumeGroups: ").Append(VolumeGroups).Append("\n");
            sb.Append("  Datastores: ").Append(Datastores).Append("\n");
            sb.Append("  ReplicationSessions: ").Append(ReplicationSessions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VolumeInstance)obj);
        }

        /// <summary>
        /// Returns true if VolumeInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of VolumeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Wwn == other.Wwn ||
                    Wwn != null &&
                    Wwn.Equals(other.Wwn)
                ) && 
                (
                    Nsid == other.Nsid ||
                    Nsid != null &&
                    Nsid.Equals(other.Nsid)
                ) && 
                (
                    Nguid == other.Nguid ||
                    Nguid != null &&
                    Nguid.Equals(other.Nguid)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    LogicalUsed == other.LogicalUsed ||
                    LogicalUsed != null &&
                    LogicalUsed.Equals(other.LogicalUsed)
                ) && 
                (
                    NodeAffinity == other.NodeAffinity ||
                    NodeAffinity != null &&
                    NodeAffinity.Equals(other.NodeAffinity)
                ) && 
                (
                    CreationTimestamp == other.CreationTimestamp ||
                    CreationTimestamp != null &&
                    CreationTimestamp.Equals(other.CreationTimestamp)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    PerformancePolicyId == other.PerformancePolicyId ||
                    PerformancePolicyId != null &&
                    PerformancePolicyId.Equals(other.PerformancePolicyId)
                ) && 
                (
                    QosPerformancePolicyId == other.QosPerformancePolicyId ||
                    QosPerformancePolicyId != null &&
                    QosPerformancePolicyId.Equals(other.QosPerformancePolicyId)
                ) && 
                (
                    IsReplicationDestination == other.IsReplicationDestination ||
                    IsReplicationDestination != null &&
                    IsReplicationDestination.Equals(other.IsReplicationDestination)
                ) && 
                (
                    MigrationSessionId == other.MigrationSessionId ||
                    MigrationSessionId != null &&
                    MigrationSessionId.Equals(other.MigrationSessionId)
                ) && 
                (
                    MetroReplicationSessionId == other.MetroReplicationSessionId ||
                    MetroReplicationSessionId != null &&
                    MetroReplicationSessionId.Equals(other.MetroReplicationSessionId)
                ) && 
                (
                    IsHostAccessAvailable == other.IsHostAccessAvailable ||
                    IsHostAccessAvailable != null &&
                    IsHostAccessAvailable.Equals(other.IsHostAccessAvailable)
                ) && 
                (
                    ProtectionData == other.ProtectionData ||
                    ProtectionData != null &&
                    ProtectionData.Equals(other.ProtectionData)
                ) && 
                (
                    LocationHistory == other.LocationHistory ||
                    LocationHistory != null &&
                    LocationHistory.SequenceEqual(other.LocationHistory)
                ) && 
                (
                    AppType == other.AppType ||
                    AppType != null &&
                    AppType.Equals(other.AppType)
                ) && 
                (
                    AppTypeOther == other.AppTypeOther ||
                    AppTypeOther != null &&
                    AppTypeOther.Equals(other.AppTypeOther)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    NodeAffinityL10n == other.NodeAffinityL10n ||
                    NodeAffinityL10n != null &&
                    NodeAffinityL10n.Equals(other.NodeAffinityL10n)
                ) && 
                (
                    AppTypeL10n == other.AppTypeL10n ||
                    AppTypeL10n != null &&
                    AppTypeL10n.Equals(other.AppTypeL10n)
                ) && 
                (
                    Appliance == other.Appliance ||
                    Appliance != null &&
                    Appliance.Equals(other.Appliance)
                ) && 
                (
                    ProtectionPolicy == other.ProtectionPolicy ||
                    ProtectionPolicy != null &&
                    ProtectionPolicy.Equals(other.ProtectionPolicy)
                ) && 
                (
                    QosPerformancePolicy == other.QosPerformancePolicy ||
                    QosPerformancePolicy != null &&
                    QosPerformancePolicy.Equals(other.QosPerformancePolicy)
                ) && 
                (
                    MigrationSession == other.MigrationSession ||
                    MigrationSession != null &&
                    MigrationSession.Equals(other.MigrationSession)
                ) && 
                (
                    MappedVolumes == other.MappedVolumes ||
                    MappedVolumes != null &&
                    MappedVolumes.SequenceEqual(other.MappedVolumes)
                ) && 
                (
                    RemoteSnapshotSessions == other.RemoteSnapshotSessions ||
                    RemoteSnapshotSessions != null &&
                    RemoteSnapshotSessions.SequenceEqual(other.RemoteSnapshotSessions)
                ) && 
                (
                    CurrentRemoteSnapshotSessions == other.CurrentRemoteSnapshotSessions ||
                    CurrentRemoteSnapshotSessions != null &&
                    CurrentRemoteSnapshotSessions.SequenceEqual(other.CurrentRemoteSnapshotSessions)
                ) && 
                (
                    RemoteSnapshots == other.RemoteSnapshots ||
                    RemoteSnapshots != null &&
                    RemoteSnapshots.SequenceEqual(other.RemoteSnapshots)
                ) && 
                (
                    VolumeGroups == other.VolumeGroups ||
                    VolumeGroups != null &&
                    VolumeGroups.SequenceEqual(other.VolumeGroups)
                ) && 
                (
                    Datastores == other.Datastores ||
                    Datastores != null &&
                    Datastores.SequenceEqual(other.Datastores)
                ) && 
                (
                    ReplicationSessions == other.ReplicationSessions ||
                    ReplicationSessions != null &&
                    ReplicationSessions.SequenceEqual(other.ReplicationSessions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Wwn != null)
                    hashCode = hashCode * 59 + Wwn.GetHashCode();
                    if (Nsid != null)
                    hashCode = hashCode * 59 + Nsid.GetHashCode();
                    if (Nguid != null)
                    hashCode = hashCode * 59 + Nguid.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (LogicalUsed != null)
                    hashCode = hashCode * 59 + LogicalUsed.GetHashCode();
                    if (NodeAffinity != null)
                    hashCode = hashCode * 59 + NodeAffinity.GetHashCode();
                    if (CreationTimestamp != null)
                    hashCode = hashCode * 59 + CreationTimestamp.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (PerformancePolicyId != null)
                    hashCode = hashCode * 59 + PerformancePolicyId.GetHashCode();
                    if (QosPerformancePolicyId != null)
                    hashCode = hashCode * 59 + QosPerformancePolicyId.GetHashCode();
                    if (IsReplicationDestination != null)
                    hashCode = hashCode * 59 + IsReplicationDestination.GetHashCode();
                    if (MigrationSessionId != null)
                    hashCode = hashCode * 59 + MigrationSessionId.GetHashCode();
                    if (MetroReplicationSessionId != null)
                    hashCode = hashCode * 59 + MetroReplicationSessionId.GetHashCode();
                    if (IsHostAccessAvailable != null)
                    hashCode = hashCode * 59 + IsHostAccessAvailable.GetHashCode();
                    if (ProtectionData != null)
                    hashCode = hashCode * 59 + ProtectionData.GetHashCode();
                    if (LocationHistory != null)
                    hashCode = hashCode * 59 + LocationHistory.GetHashCode();
                    if (AppType != null)
                    hashCode = hashCode * 59 + AppType.GetHashCode();
                    if (AppTypeOther != null)
                    hashCode = hashCode * 59 + AppTypeOther.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (NodeAffinityL10n != null)
                    hashCode = hashCode * 59 + NodeAffinityL10n.GetHashCode();
                    if (AppTypeL10n != null)
                    hashCode = hashCode * 59 + AppTypeL10n.GetHashCode();
                    if (Appliance != null)
                    hashCode = hashCode * 59 + Appliance.GetHashCode();
                    if (ProtectionPolicy != null)
                    hashCode = hashCode * 59 + ProtectionPolicy.GetHashCode();
                    if (QosPerformancePolicy != null)
                    hashCode = hashCode * 59 + QosPerformancePolicy.GetHashCode();
                    if (MigrationSession != null)
                    hashCode = hashCode * 59 + MigrationSession.GetHashCode();
                    if (MappedVolumes != null)
                    hashCode = hashCode * 59 + MappedVolumes.GetHashCode();
                    if (RemoteSnapshotSessions != null)
                    hashCode = hashCode * 59 + RemoteSnapshotSessions.GetHashCode();
                    if (CurrentRemoteSnapshotSessions != null)
                    hashCode = hashCode * 59 + CurrentRemoteSnapshotSessions.GetHashCode();
                    if (RemoteSnapshots != null)
                    hashCode = hashCode * 59 + RemoteSnapshots.GetHashCode();
                    if (VolumeGroups != null)
                    hashCode = hashCode * 59 + VolumeGroups.GetHashCode();
                    if (Datastores != null)
                    hashCode = hashCode * 59 + Datastores.GetHashCode();
                    if (ReplicationSessions != null)
                    hashCode = hashCode * 59 + ReplicationSessions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VolumeInstance left, VolumeInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VolumeInstance left, VolumeInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
