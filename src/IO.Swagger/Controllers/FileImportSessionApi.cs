/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FileImportSessionApiController : ControllerBase
    { 
        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query of the File Import Session. Was added in version 3.0.0.0.</remarks>
        /// <response code="200">Success.</response>
        /// <response code="206">Partial content of file import session instance objects</response>
        [HttpGet]
        [Route("/api/rest/file_import_session")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<FileImportSessionInstance>), description: "Success.")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<FileImportSessionInstance>), description: "Partial content of file import session instance objects")]
        public virtual IActionResult FileImportSessionGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FileImportSessionInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<FileImportSessionInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<FileImportSessionInstance>>(exampleJson)
            : default(List<FileImportSessionInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Cancel
        /// </summary>
        /// <remarks>Cancel an ongoing file import session. The action can be performed at any state of the file import session except in the &#39;Completed&#39;, &#39;Cancelling&#39; and &#39;Cancelled&#39; states. Any other ongoing operation on the file import session is terminated immediately. If it happens during/after &#39;Cutting_Over&#39; state, clients are switched back to the source system (may be disruptive). The source system is cleaned up, the destination NAS server and all imported objects including filesystems are deleted. When cancel is complete the state of the file import session is changed to &#39;Completed&#39; which is a terminal state. Cancel can be forced if the source system is unresponsive.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the file import session name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/file_import_session/{id}/cancel")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionIdCancelPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult FileImportSessionIdCancelPost([FromRoute][Required]string id, [FromBody]FileImportSessionCancel body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Cancel
        /// </summary>
        /// <remarks>Commit a file import session to complete the import. The operation is valid only during &#39;Ready_For_Commit&#39;, when all filesystem data has been synchronized with the source. During commit, the data connection between the source and the destination import file interface is dropped, and the sync of write data to the source system is stopped.     The destination system becomes independent and the source system is cleaned up. When commit is complete the state of the file import session is changed to &#39;Completed&#39;.     Commit can be forced if the source system becomes unresponsive.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the file import session. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/file_import_session/{id}/commit")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionIdCommitPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult FileImportSessionIdCommitPost([FromRoute][Required]string id, [FromBody]FileImportSessionCommit body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Cutover
        /// </summary>
        /// <remarks>Cutover a file import session that is during &#39;Ready_For_Cutover&#39;. Cutover may cause a temporary data unavailability to the NAS clients. During cutover the production file interfaces are disabled on the source system and are enabled on the destination system. In case of SMB import, the switchover is disruptive for the clients and the Active Directory configuration is imported if needed. In case of NFS import, the switchover is transparent as file handles are preserved, NLM locks are reclaimed on the destination. The incremental background data copy operation begins after the cutover completes. The filesystem data is moved to the destination in the background. The destination system serves the clients; data requested by the client is synced immediately; write operations are synced back to the source system before acknowledging, so the source remains authoritative and a rollback is possible at any moment. I/O throughput is degraded at this stage. The service is interrupted if the source data becomes unavailable. When all files are synced, the status of the file import session is changedtransitions to &#39;Ready_For_Commit&#39;. If cutover operation fails, a rollback is attempted and clients are switched back to the source system (may be disruptive). If it succeeds, the stateoperation becomes &#39;Ready_For_Cutover&#39; again and the operationcutover can be retried. If it fails, the file import session cleans up the destination resources of the import and enters the &#39;Failed&#39; state.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the file import session name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/file_import_session/{id}/cutover")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionIdCutoverPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult FileImportSessionIdCutoverPost([FromRoute][Required]string id, [FromBody]FileImportSessionCutover body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>Delete an File import session. Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the File import session. name:{name} can be used instead of {id}.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpDelete]
        [Route("/api/rest/file_import_session/{id}")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionIdDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult FileImportSessionIdDelete([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Sync
        /// </summary>
        /// <remarks>Synchronize new NAS objects created on SDNAS due to file import session into Trident CP DB.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the file import session. name:{name} can be used instead of {id}.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/file_import_session/{id}/destination_objects_sync")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionIdDestinationObjectsSyncPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult FileImportSessionIdDestinationObjectsSyncPost([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks> Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the file import session. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/file_import_session/{id}")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(FileImportSessionInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult FileImportSessionIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FileImportSessionInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FileImportSessionInstance>(exampleJson)
            : default(FileImportSessionInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify
        /// </summary>
        /// <remarks>Modify the properties of the file import session. The new SMB administrator credentials are validated if the destination NAS Server and the destination import file interface have already been created. The new credentials become effective immediately.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the file import session. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPatch]
        [Route("/api/rest/file_import_session/{id}")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionIdPatch")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult FileImportSessionIdPatch([FromRoute][Required]string id, [FromBody]FileImportSessionModify body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Pause
        /// </summary>
        /// <remarks>Pause an ongoing file import session during &#39;Initial_Copy&#39; or &#39;Incremental_Copy&#39; operations. When this occurs, the background data transfer stops, but I/O to the source continues if the file import session during &#39;Incremental_Copy&#39;. A paused import session can be resumed or cancelled.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the file import session. name:{name} can be used instead of {id}.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/file_import_session/{id}/pause")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionIdPausePost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult FileImportSessionIdPausePost([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Report
        /// </summary>
        /// <remarks>Provides a detailed report on the file import session. Report can be used at any time or session state until the session is deleted.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the file import session. name:{name} can be used instead of {id}.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/file_import_session/{id}/report")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionIdReportPost")]
        [SwaggerResponse(statusCode: 204, type: typeof(FileImportSessionReportResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult FileImportSessionIdReportPost([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(FileImportSessionReportResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FileImportSessionReportResponse>(exampleJson)
            : default(FileImportSessionReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Resume
        /// </summary>
        /// <remarks>File import session can be resumed from Paused state during Initial_Copy and Incremental_Copy stages. To recover from Failed state during Initial_Provisioning, Initial_Copy, Importing_Config, and Incremental_Copy stages.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the file import session. name:{name} can be used instead of {id}.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/file_import_session/{id}/resume")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionIdResumePost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult FileImportSessionIdResumePost([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>Create a new file import session to import the source file/NAS server discovered via the source file import storage system. The source storage system must be added prior to creating a file import session. The basic configuration (NAS server name, filesystems, production interfaces) of the source file server must not change after the file import session is created.  Was added in version 3.0.0.0.</remarks>
        /// <param name="body"></param>
        /// <response code="201">Created</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/file_import_session")]
        [ValidateModelState]
        [SwaggerOperation("FileImportSessionPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(CreateResponse), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult FileImportSessionPost([FromBody]FileImportSessionCreate body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(CreateResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateResponse>(exampleJson)
            : default(CreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
