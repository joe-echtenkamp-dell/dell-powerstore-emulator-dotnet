/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LicenseApiController : ControllerBase
    { 
        /// <summary>
        /// License trial period extension
        /// </summary>
        /// <remarks>Extend license trial period for certain number of days. This runs only allowed once for a appliance, and if it fails, customer can have another try.  Was added in version 2.0.0.0.</remarks>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/license/extend_trial")]
        [ValidateModelState]
        [SwaggerOperation("LicenseExtendTrialPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult LicenseExtendTrialPost()
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query license information for the cluster. There is always one license instance. </remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of license instance objects</response>
        [HttpGet]
        [Route("/api/rest/license")]
        [ValidateModelState]
        [SwaggerOperation("LicenseGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LicenseInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<LicenseInstance>), description: "Partial content of license instance objects")]
        public virtual IActionResult LicenseGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<LicenseInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<LicenseInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<LicenseInstance>>(exampleJson)
            : default(List<LicenseInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query the specific license information for the cluster.</remarks>
        /// <param name="id">Unique identifier of the license information instance.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/license/{id}")]
        [ValidateModelState]
        [SwaggerOperation("LicenseIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(LicenseInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult LicenseIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LicenseInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<LicenseInstance>(exampleJson)
            : default(LicenseInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve License
        /// </summary>
        /// <remarks>Retrieve the license directly from the Dell Software Licensing Central. This runs automatically when the cluster is configured, and if it fails, once per day during the trial period. This allows a manual attempt, normally after attempting to correct the network connectivity issue preventing the automatic retrieval. </remarks>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/license/retrieve")]
        [ValidateModelState]
        [SwaggerOperation("LicenseRetrievePost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult LicenseRetrievePost()
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// License File Upload
        /// </summary>
        /// <remarks>Upload a software license to install the license on the cluster.</remarks>
        /// <param name="licenseFile">The file to upload containing the software license to install the license on the cluster. </param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/license/upload")]
        [ValidateModelState]
        [SwaggerOperation("LicenseUploadPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult LicenseUploadPost([FromForm]System.IO.Stream licenseFile)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }
    }
}
