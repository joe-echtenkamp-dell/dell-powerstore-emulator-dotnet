/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// An initiator currently connected to the cluster, but not associated with any host. 
    /// </summary>
    [DataContract]
    public partial class DiscoveredInitiatorInstance : IEquatable<DiscoveredInitiatorInstance>
    { 
        /// <summary>
        /// IQN - for iSCSi Initiators; WWN - for SCSI over FC initiators; NQN - for NVMe/NVMe-vVol initiators.
        /// </summary>
        /// <value>IQN - for iSCSi Initiators; WWN - for SCSI over FC initiators; NQN - for NVMe/NVMe-vVol initiators.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// List of discovered NVMe Initiators&#39; addresses. For NVMe/FC - nvme_wwns list; for NVMe/TCP - ip address list. It may be that same nqn (NVMe identifier) will be applied to multiple WWNs (FC port address) and/or multiple IP addresses for NVMe/TCP over Eth port.  Was added in version 2.0.0.0.
        /// </summary>
        /// <value>List of discovered NVMe Initiators&#39; addresses. For NVMe/FC - nvme_wwns list; for NVMe/TCP - ip address list. It may be that same nqn (NVMe identifier) will be applied to multiple WWNs (FC port address) and/or multiple IP addresses for NVMe/TCP over Eth port.  Was added in version 2.0.0.0.</value>

        [DataMember(Name="nvme_transport_addresses")]
        public List<string> NvmeTransportAddresses { get; set; }

        /// <summary>
        /// List of transport types for discovered NVMe initiators. For NVMe/FC, there will be only 1 item of type FC. For NVMe/TCP, there will be only 1 item of type TCP. If the same nqn (NVMe identifier) is applied to NVMe/FC and NVMe/TCP, the list will have both FC and TCP. If the protocol_type is not NVMe this value will be null.  Was added in version 2.1.0.0.
        /// </summary>
        /// <value>List of transport types for discovered NVMe initiators. For NVMe/FC, there will be only 1 item of type FC. For NVMe/TCP, there will be only 1 item of type TCP. If the same nqn (NVMe identifier) is applied to NVMe/FC and NVMe/TCP, the list will have both FC and TCP. If the protocol_type is not NVMe this value will be null.  Was added in version 2.1.0.0.</value>

        [DataMember(Name="nvme_transport_types")]
        public List<NvmeTransportTypeEnum> NvmeTransportTypes { get; set; }

        /// <summary>
        /// Gets or Sets ProtocolType
        /// </summary>

        [DataMember(Name="protocol_type")]
        public InitiatorProtocolTypeEnum? ProtocolType { get; set; }

        /// <summary>
        /// Localized message string corresponding to protocol_type Was deprecated in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to protocol_type Was deprecated in version 3.0.0.0.</value>

        [DataMember(Name="protocol_type_l10n")]
        public string ProtocolTypeL10n { get; set; }

        /// <summary>
        /// Localized message array corresponding to nvme_transport_types Was added in version 2.1.0.0.
        /// </summary>
        /// <value>Localized message array corresponding to nvme_transport_types Was added in version 2.1.0.0.</value>

        [DataMember(Name="nvme_transport_types_l10n")]
        public List<string> NvmeTransportTypesL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoveredInitiatorInstance {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NvmeTransportAddresses: ").Append(NvmeTransportAddresses).Append("\n");
            sb.Append("  NvmeTransportTypes: ").Append(NvmeTransportTypes).Append("\n");
            sb.Append("  ProtocolType: ").Append(ProtocolType).Append("\n");
            sb.Append("  ProtocolTypeL10n: ").Append(ProtocolTypeL10n).Append("\n");
            sb.Append("  NvmeTransportTypesL10n: ").Append(NvmeTransportTypesL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DiscoveredInitiatorInstance)obj);
        }

        /// <summary>
        /// Returns true if DiscoveredInitiatorInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of DiscoveredInitiatorInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoveredInitiatorInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NvmeTransportAddresses == other.NvmeTransportAddresses ||
                    NvmeTransportAddresses != null &&
                    NvmeTransportAddresses.SequenceEqual(other.NvmeTransportAddresses)
                ) && 
                (
                    NvmeTransportTypes == other.NvmeTransportTypes ||
                    NvmeTransportTypes != null &&
                    NvmeTransportTypes.SequenceEqual(other.NvmeTransportTypes)
                ) && 
                (
                    ProtocolType == other.ProtocolType ||
                    ProtocolType != null &&
                    ProtocolType.Equals(other.ProtocolType)
                ) && 
                (
                    ProtocolTypeL10n == other.ProtocolTypeL10n ||
                    ProtocolTypeL10n != null &&
                    ProtocolTypeL10n.Equals(other.ProtocolTypeL10n)
                ) && 
                (
                    NvmeTransportTypesL10n == other.NvmeTransportTypesL10n ||
                    NvmeTransportTypesL10n != null &&
                    NvmeTransportTypesL10n.SequenceEqual(other.NvmeTransportTypesL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NvmeTransportAddresses != null)
                    hashCode = hashCode * 59 + NvmeTransportAddresses.GetHashCode();
                    if (NvmeTransportTypes != null)
                    hashCode = hashCode * 59 + NvmeTransportTypes.GetHashCode();
                    if (ProtocolType != null)
                    hashCode = hashCode * 59 + ProtocolType.GetHashCode();
                    if (ProtocolTypeL10n != null)
                    hashCode = hashCode * 59 + ProtocolTypeL10n.GetHashCode();
                    if (NvmeTransportTypesL10n != null)
                    hashCode = hashCode * 59 + NvmeTransportTypesL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DiscoveredInitiatorInstance left, DiscoveredInitiatorInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DiscoveredInitiatorInstance left, DiscoveredInitiatorInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
