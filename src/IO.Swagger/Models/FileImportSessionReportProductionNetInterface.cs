/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a production net interface. These interfaces are used to access the file data I/O throughout the migration process. Migration moves these interfaces from the source to the destination Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileImportSessionReportProductionNetInterface : IEquatable<FileImportSessionReportProductionNetInterface>
    { 
        /// <summary>
        /// The name of the production network interface on the source NAS server
        /// </summary>
        /// <value>The name of the production network interface on the source NAS server</value>

        [DataMember(Name="source_net_device")]
        public string SourceNetDevice { get; set; }

        /// <summary>
        /// Virtual port or link aggregation on which the network interface is running.
        /// </summary>
        /// <value>Virtual port or link aggregation on which the network interface is running.</value>

        [DataMember(Name="destination_ip_port_id")]
        public string DestinationIpPortId { get; set; }

        /// <summary>
        /// Unique identifier of the file interface on the destination system. Was added in version 3.2.0.0. Was deprecated in version 3.5.0.0.
        /// </summary>
        /// <value>Unique identifier of the file interface on the destination system. Was added in version 3.2.0.0. Was deprecated in version 3.5.0.0.</value>

        [DataMember(Name="file_interface_id")]
        public string FileInterfaceId { get; set; }

        /// <summary>
        /// Unique identifier of the file interface on the destination system.
        /// </summary>
        /// <value>Unique identifier of the file interface on the destination system.</value>

        [DataMember(Name="destination_file_interface_id")]
        public string DestinationFileInterfaceId { get; set; }

        /// <summary>
        /// IP address of the network interface.
        /// </summary>
        /// <value>IP address of the network interface.</value>

        [DataMember(Name="ip_address")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Prefix length for the network interface.
        /// </summary>
        /// <value>Prefix length for the network interface.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="prefix_length")]
        public int? PrefixLength { get; set; }

        /// <summary>
        /// Gateway address for the network interface.
        /// </summary>
        /// <value>Gateway address for the network interface.</value>

        [DataMember(Name="gateway")]
        public string Gateway { get; set; }

        /// <summary>
        /// Virtual Local Area Network (VLAN) identifier for the interface. The interface uses the identifier to accept packets that have matching VLAN tags.
        /// </summary>
        /// <value>Virtual Local Area Network (VLAN) identifier for the interface. The interface uses the identifier to accept packets that have matching VLAN tags.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="vlan_id")]
        public int? VlanId { get; set; }

        /// <summary>
        /// Indicates whether the network interface is disabled.
        /// </summary>
        /// <value>Indicates whether the network interface is disabled.</value>

        [DataMember(Name="is_disabled")]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileImportSessionReportProductionNetInterface {\n");
            sb.Append("  SourceNetDevice: ").Append(SourceNetDevice).Append("\n");
            sb.Append("  DestinationIpPortId: ").Append(DestinationIpPortId).Append("\n");
            sb.Append("  FileInterfaceId: ").Append(FileInterfaceId).Append("\n");
            sb.Append("  DestinationFileInterfaceId: ").Append(DestinationFileInterfaceId).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  PrefixLength: ").Append(PrefixLength).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  VlanId: ").Append(VlanId).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileImportSessionReportProductionNetInterface)obj);
        }

        /// <summary>
        /// Returns true if FileImportSessionReportProductionNetInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of FileImportSessionReportProductionNetInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileImportSessionReportProductionNetInterface other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SourceNetDevice == other.SourceNetDevice ||
                    SourceNetDevice != null &&
                    SourceNetDevice.Equals(other.SourceNetDevice)
                ) && 
                (
                    DestinationIpPortId == other.DestinationIpPortId ||
                    DestinationIpPortId != null &&
                    DestinationIpPortId.Equals(other.DestinationIpPortId)
                ) && 
                (
                    FileInterfaceId == other.FileInterfaceId ||
                    FileInterfaceId != null &&
                    FileInterfaceId.Equals(other.FileInterfaceId)
                ) && 
                (
                    DestinationFileInterfaceId == other.DestinationFileInterfaceId ||
                    DestinationFileInterfaceId != null &&
                    DestinationFileInterfaceId.Equals(other.DestinationFileInterfaceId)
                ) && 
                (
                    IpAddress == other.IpAddress ||
                    IpAddress != null &&
                    IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    PrefixLength == other.PrefixLength ||
                    PrefixLength != null &&
                    PrefixLength.Equals(other.PrefixLength)
                ) && 
                (
                    Gateway == other.Gateway ||
                    Gateway != null &&
                    Gateway.Equals(other.Gateway)
                ) && 
                (
                    VlanId == other.VlanId ||
                    VlanId != null &&
                    VlanId.Equals(other.VlanId)
                ) && 
                (
                    IsDisabled == other.IsDisabled ||
                    IsDisabled != null &&
                    IsDisabled.Equals(other.IsDisabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SourceNetDevice != null)
                    hashCode = hashCode * 59 + SourceNetDevice.GetHashCode();
                    if (DestinationIpPortId != null)
                    hashCode = hashCode * 59 + DestinationIpPortId.GetHashCode();
                    if (FileInterfaceId != null)
                    hashCode = hashCode * 59 + FileInterfaceId.GetHashCode();
                    if (DestinationFileInterfaceId != null)
                    hashCode = hashCode * 59 + DestinationFileInterfaceId.GetHashCode();
                    if (IpAddress != null)
                    hashCode = hashCode * 59 + IpAddress.GetHashCode();
                    if (PrefixLength != null)
                    hashCode = hashCode * 59 + PrefixLength.GetHashCode();
                    if (Gateway != null)
                    hashCode = hashCode * 59 + Gateway.GetHashCode();
                    if (VlanId != null)
                    hashCode = hashCode * 59 + VlanId.GetHashCode();
                    if (IsDisabled != null)
                    hashCode = hashCode * 59 + IsDisabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileImportSessionReportProductionNetInterface left, FileImportSessionReportProductionNetInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileImportSessionReportProductionNetInterface left, FileImportSessionReportProductionNetInterface right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
