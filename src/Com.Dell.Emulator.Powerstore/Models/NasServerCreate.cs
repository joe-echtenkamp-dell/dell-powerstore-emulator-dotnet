/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NasServerCreate : IEquatable<NasServerCreate>
    { 
        /// <summary>
        /// Name of the NAS server.
        /// </summary>
        /// <value>Name of the NAS server.</value>
        [Required]
        
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the NAS server.
        /// </summary>
        /// <value>Description of the NAS server.</value>

        [StringLength(255, MinimumLength=0)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CurrentUnixDirectoryService
        /// </summary>

        [DataMember(Name="current_unix_directory_service")]
        public NASServerCurrentUnixDirectoryServiceEnum? CurrentUnixDirectoryService { get; set; }

        /// <summary>
        /// Default Unix user name used for granting access in case of Windows to Unix user mapping failure. When empty, access in such case is denied.
        /// </summary>
        /// <value>Default Unix user name used for granting access in case of Windows to Unix user mapping failure. When empty, access in such case is denied.</value>

        [StringLength(63, MinimumLength=0)]
        [DataMember(Name="default_unix_user")]
        public string DefaultUnixUser { get; set; }

        /// <summary>
        /// Default Windows user name used for granting access in case of Unix to Windows user mapping failure. When empty, access in such case is denied.
        /// </summary>
        /// <value>Default Windows user name used for granting access in case of Unix to Windows user mapping failure. When empty, access in such case is denied.</value>

        [StringLength(1023, MinimumLength=0)]
        [DataMember(Name="default_windows_user")]
        public string DefaultWindowsUser { get; set; }

        /// <summary>
        /// Enable the possibility to match a Windows account with an Unix account with different names.
        /// </summary>
        /// <value>Enable the possibility to match a Windows account with an Unix account with different names.</value>

        [DataMember(Name="is_username_translation_enabled")]
        public bool? IsUsernameTranslationEnabled { get; set; }

        /// <summary>
        /// A Windows user must have a corresponding matching Unix user (uid) in order to connect. This attribute enables you to automatically generates this Unix user (uid), if that Windows user does not have any in the configured Unix directory service (UDS). In a pure SMB or non multi-protocol environment, this should be set to true. 
        /// </summary>
        /// <value>A Windows user must have a corresponding matching Unix user (uid) in order to connect. This attribute enables you to automatically generates this Unix user (uid), if that Windows user does not have any in the configured Unix directory service (UDS). In a pure SMB or non multi-protocol environment, this should be set to true. </value>

        [DataMember(Name="is_auto_user_mapping_enabled")]
        public bool? IsAutoUserMappingEnabled { get; set; }

        /// <summary>
        /// Id of the protection policy applied to the nas server. It is mandatory for policy to have replication rule before associating to nas server. name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39; Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Id of the protection policy applied to the nas server. It is mandatory for policy to have replication rule before associating to nas server. name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39; Was added in version 3.0.0.0.</value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NasServerCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CurrentUnixDirectoryService: ").Append(CurrentUnixDirectoryService).Append("\n");
            sb.Append("  DefaultUnixUser: ").Append(DefaultUnixUser).Append("\n");
            sb.Append("  DefaultWindowsUser: ").Append(DefaultWindowsUser).Append("\n");
            sb.Append("  IsUsernameTranslationEnabled: ").Append(IsUsernameTranslationEnabled).Append("\n");
            sb.Append("  IsAutoUserMappingEnabled: ").Append(IsAutoUserMappingEnabled).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NasServerCreate)obj);
        }

        /// <summary>
        /// Returns true if NasServerCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of NasServerCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NasServerCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CurrentUnixDirectoryService == other.CurrentUnixDirectoryService ||
                    CurrentUnixDirectoryService != null &&
                    CurrentUnixDirectoryService.Equals(other.CurrentUnixDirectoryService)
                ) && 
                (
                    DefaultUnixUser == other.DefaultUnixUser ||
                    DefaultUnixUser != null &&
                    DefaultUnixUser.Equals(other.DefaultUnixUser)
                ) && 
                (
                    DefaultWindowsUser == other.DefaultWindowsUser ||
                    DefaultWindowsUser != null &&
                    DefaultWindowsUser.Equals(other.DefaultWindowsUser)
                ) && 
                (
                    IsUsernameTranslationEnabled == other.IsUsernameTranslationEnabled ||
                    IsUsernameTranslationEnabled != null &&
                    IsUsernameTranslationEnabled.Equals(other.IsUsernameTranslationEnabled)
                ) && 
                (
                    IsAutoUserMappingEnabled == other.IsAutoUserMappingEnabled ||
                    IsAutoUserMappingEnabled != null &&
                    IsAutoUserMappingEnabled.Equals(other.IsAutoUserMappingEnabled)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CurrentUnixDirectoryService != null)
                    hashCode = hashCode * 59 + CurrentUnixDirectoryService.GetHashCode();
                    if (DefaultUnixUser != null)
                    hashCode = hashCode * 59 + DefaultUnixUser.GetHashCode();
                    if (DefaultWindowsUser != null)
                    hashCode = hashCode * 59 + DefaultWindowsUser.GetHashCode();
                    if (IsUsernameTranslationEnabled != null)
                    hashCode = hashCode * 59 + IsUsernameTranslationEnabled.GetHashCode();
                    if (IsAutoUserMappingEnabled != null)
                    hashCode = hashCode * 59 + IsAutoUserMappingEnabled.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NasServerCreate left, NasServerCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NasServerCreate left, NasServerCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
