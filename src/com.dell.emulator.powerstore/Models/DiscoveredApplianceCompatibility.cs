/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// The compatibility information that contains a compatibility enum and a reason if incompatible. Was added in version 4.0.0.0.
    /// </summary>
    [DataContract]
    public partial class DiscoveredApplianceCompatibility : IEquatable<DiscoveredApplianceCompatibility>
    { 
        /// <summary>
        /// Gets or Sets Compatibility
        /// </summary>

        [DataMember(Name="compatibility")]
        public DiscoveredApplianceCompatibilityEnum? Compatibility { get; set; }

        /// <summary>
        /// Gets or Sets IncompatibleReasonL10n
        /// </summary>

        [DataMember(Name="incompatible_reason_l10n")]
        public string IncompatibleReasonL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to compatibility Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to compatibility Was added in version 4.0.0.0.</value>

        [DataMember(Name="compatibility_l10n")]
        public string CompatibilityL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoveredApplianceCompatibility {\n");
            sb.Append("  Compatibility: ").Append(Compatibility).Append("\n");
            sb.Append("  IncompatibleReasonL10n: ").Append(IncompatibleReasonL10n).Append("\n");
            sb.Append("  CompatibilityL10n: ").Append(CompatibilityL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DiscoveredApplianceCompatibility)obj);
        }

        /// <summary>
        /// Returns true if DiscoveredApplianceCompatibility instances are equal
        /// </summary>
        /// <param name="other">Instance of DiscoveredApplianceCompatibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoveredApplianceCompatibility other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Compatibility == other.Compatibility ||
                    Compatibility != null &&
                    Compatibility.Equals(other.Compatibility)
                ) && 
                (
                    IncompatibleReasonL10n == other.IncompatibleReasonL10n ||
                    IncompatibleReasonL10n != null &&
                    IncompatibleReasonL10n.Equals(other.IncompatibleReasonL10n)
                ) && 
                (
                    CompatibilityL10n == other.CompatibilityL10n ||
                    CompatibilityL10n != null &&
                    CompatibilityL10n.Equals(other.CompatibilityL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Compatibility != null)
                    hashCode = hashCode * 59 + Compatibility.GetHashCode();
                    if (IncompatibleReasonL10n != null)
                    hashCode = hashCode * 59 + IncompatibleReasonL10n.GetHashCode();
                    if (CompatibilityL10n != null)
                    hashCode = hashCode * 59 + CompatibilityL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DiscoveredApplianceCompatibility left, DiscoveredApplianceCompatibility right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DiscoveredApplianceCompatibility left, DiscoveredApplianceCompatibility right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
