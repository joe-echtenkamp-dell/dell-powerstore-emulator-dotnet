/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Additional hardware details that are specific to each hardware component upgrade. Was added in version 3.6.0.0.
    /// </summary>
    [DataContract]
    public partial class ValidUpgradeInstance : IEquatable<ValidUpgradeInstance>
    { 
        /// <summary>
        /// Gets or Sets ModelName
        /// </summary>

        [DataMember(Name="model_name")]
        public HardwareModelTypeEnum? ModelName { get; set; }

        /// <summary>
        /// DPE description.
        /// </summary>
        /// <value>DPE description.</value>

        [DataMember(Name="dpe")]
        public string Dpe { get; set; }

        /// <summary>
        /// CPU Cores description.
        /// </summary>
        /// <value>CPU Cores description.</value>

        [DataMember(Name="cpu_cores")]
        public string CpuCores { get; set; }

        /// <summary>
        /// Memory description.
        /// </summary>
        /// <value>Memory description.</value>

        [DataMember(Name="physical_memory")]
        public string PhysicalMemory { get; set; }

        /// <summary>
        /// Number of nvram drives required for upgrade.
        /// </summary>
        /// <value>Number of nvram drives required for upgrade.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="nvram_drives_required")]
        public int? NvramDrivesRequired { get; set; }

        /// <summary>
        /// Localized message string corresponding to model_name Was added in version 3.6.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to model_name Was added in version 3.6.0.0.</value>

        [DataMember(Name="model_name_l10n")]
        public string ModelNameL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidUpgradeInstance {\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  Dpe: ").Append(Dpe).Append("\n");
            sb.Append("  CpuCores: ").Append(CpuCores).Append("\n");
            sb.Append("  PhysicalMemory: ").Append(PhysicalMemory).Append("\n");
            sb.Append("  NvramDrivesRequired: ").Append(NvramDrivesRequired).Append("\n");
            sb.Append("  ModelNameL10n: ").Append(ModelNameL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ValidUpgradeInstance)obj);
        }

        /// <summary>
        /// Returns true if ValidUpgradeInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ValidUpgradeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidUpgradeInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ModelName == other.ModelName ||
                    ModelName != null &&
                    ModelName.Equals(other.ModelName)
                ) && 
                (
                    Dpe == other.Dpe ||
                    Dpe != null &&
                    Dpe.Equals(other.Dpe)
                ) && 
                (
                    CpuCores == other.CpuCores ||
                    CpuCores != null &&
                    CpuCores.Equals(other.CpuCores)
                ) && 
                (
                    PhysicalMemory == other.PhysicalMemory ||
                    PhysicalMemory != null &&
                    PhysicalMemory.Equals(other.PhysicalMemory)
                ) && 
                (
                    NvramDrivesRequired == other.NvramDrivesRequired ||
                    NvramDrivesRequired != null &&
                    NvramDrivesRequired.Equals(other.NvramDrivesRequired)
                ) && 
                (
                    ModelNameL10n == other.ModelNameL10n ||
                    ModelNameL10n != null &&
                    ModelNameL10n.Equals(other.ModelNameL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ModelName != null)
                    hashCode = hashCode * 59 + ModelName.GetHashCode();
                    if (Dpe != null)
                    hashCode = hashCode * 59 + Dpe.GetHashCode();
                    if (CpuCores != null)
                    hashCode = hashCode * 59 + CpuCores.GetHashCode();
                    if (PhysicalMemory != null)
                    hashCode = hashCode * 59 + PhysicalMemory.GetHashCode();
                    if (NvramDrivesRequired != null)
                    hashCode = hashCode * 59 + NvramDrivesRequired.GetHashCode();
                    if (ModelNameL10n != null)
                    hashCode = hashCode * 59 + ModelNameL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ValidUpgradeInstance left, ValidUpgradeInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ValidUpgradeInstance left, ValidUpgradeInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
