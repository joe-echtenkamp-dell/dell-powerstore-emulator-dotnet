/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
        /// <summary>
        /// Defines valid states of Offline Availability,    * Manual - Only specified files will be available offline.    * Documents - All files that users open will be available offline.    * Programs - Program will preferably run from the offline cache even when connected to the network. All files that users open will be available offline.    * None - Prevents clients from storing documents and programs in offline cache (default). 
        /// </summary>
        /// <value>Defines valid states of Offline Availability,    * Manual - Only specified files will be available offline.    * Documents - All files that users open will be available offline.    * Programs - Program will preferably run from the offline cache even when connected to the network. All files that users open will be available offline.    * None - Prevents clients from storing documents and programs in offline cache (default). </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SMBShareOfflineAvailabilityEnum
        {
            
            /// <summary>
            /// Enum ManualEnum for Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            ManualEnum = 1,
            
            /// <summary>
            /// Enum DocumentsEnum for Documents
            /// </summary>
            [EnumMember(Value = "Documents")]
            DocumentsEnum = 2,
            
            /// <summary>
            /// Enum ProgramsEnum for Programs
            /// </summary>
            [EnumMember(Value = "Programs")]
            ProgramsEnum = 3,
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 4
        }
}
