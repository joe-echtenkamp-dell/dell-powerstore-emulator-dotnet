/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Replication session element pair which maps the local storage element to the remote storage element. 
    /// </summary>
    [DataContract]
    public partial class ReplicationElementPair : IEquatable<ReplicationElementPair>
    { 
        /// <summary>
        /// Unique identifier of a local storage element. 
        /// </summary>
        /// <value>Unique identifier of a local storage element. </value>
        [Required]
        
        [DataMember(Name="local_storage_element_id")]
        public string LocalStorageElementId { get; set; }

        /// <summary>
        /// Unique identifier of a remote storage element. 
        /// </summary>
        /// <value>Unique identifier of a remote storage element. </value>
        [Required]
        
        [DataMember(Name="remote_storage_element_id")]
        public string RemoteStorageElementId { get; set; }

        /// <summary>
        /// Storage element type. 
        /// </summary>
        /// <value>Storage element type. </value>

        [DataMember(Name="storage_element_type")]
        public StorageElementTypeEnum? StorageElementType { get; set; }

        /// <summary>
        /// Unique identifier of the internal snap used for replicating data. 
        /// </summary>
        /// <value>Unique identifier of the internal snap used for replicating data. </value>

        [DataMember(Name="replication_shadow_id")]
        public string ReplicationShadowId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationElementPair {\n");
            sb.Append("  LocalStorageElementId: ").Append(LocalStorageElementId).Append("\n");
            sb.Append("  RemoteStorageElementId: ").Append(RemoteStorageElementId).Append("\n");
            sb.Append("  StorageElementType: ").Append(StorageElementType).Append("\n");
            sb.Append("  ReplicationShadowId: ").Append(ReplicationShadowId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReplicationElementPair)obj);
        }

        /// <summary>
        /// Returns true if ReplicationElementPair instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationElementPair to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationElementPair other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocalStorageElementId == other.LocalStorageElementId ||
                    LocalStorageElementId != null &&
                    LocalStorageElementId.Equals(other.LocalStorageElementId)
                ) && 
                (
                    RemoteStorageElementId == other.RemoteStorageElementId ||
                    RemoteStorageElementId != null &&
                    RemoteStorageElementId.Equals(other.RemoteStorageElementId)
                ) && 
                (
                    StorageElementType == other.StorageElementType ||
                    StorageElementType != null &&
                    StorageElementType.Equals(other.StorageElementType)
                ) && 
                (
                    ReplicationShadowId == other.ReplicationShadowId ||
                    ReplicationShadowId != null &&
                    ReplicationShadowId.Equals(other.ReplicationShadowId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LocalStorageElementId != null)
                    hashCode = hashCode * 59 + LocalStorageElementId.GetHashCode();
                    if (RemoteStorageElementId != null)
                    hashCode = hashCode * 59 + RemoteStorageElementId.GetHashCode();
                    if (StorageElementType != null)
                    hashCode = hashCode * 59 + StorageElementType.GetHashCode();
                    if (ReplicationShadowId != null)
                    hashCode = hashCode * 59 + ReplicationShadowId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReplicationElementPair left, ReplicationElementPair right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReplicationElementPair left, ReplicationElementPair right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
