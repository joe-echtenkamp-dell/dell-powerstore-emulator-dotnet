/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ImportUnitySnapshotScheduleInstance : IEquatable<ImportUnitySnapshotScheduleInstance>
    { 
        /// <summary>
        /// Unique identifier of the Unity snapshot schedule.
        /// </summary>
        /// <value>Unique identifier of the Unity snapshot schedule.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the Unity snapshot schedule.
        /// </summary>
        /// <value>Name of the Unity snapshot schedule.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>

        [DataMember(Name="rules")]
        public List<ImportUnitySnapshotScheduleRuleInstance> Rules { get; set; }

        /// <summary>
        /// Indicates whether the Unity snapshot schedule is the default snapshot schedule. 
        /// </summary>
        /// <value>Indicates whether the Unity snapshot schedule is the default snapshot schedule. </value>

        [DataMember(Name="is_default")]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Indicates whether the Unity snapshot schedule has been modified.
        /// </summary>
        /// <value>Indicates whether the Unity snapshot schedule has been modified.</value>

        [DataMember(Name="is_modified")]
        public bool? IsModified { get; set; }

        /// <summary>
        /// Version of the snapshot schedule.
        /// </summary>
        /// <value>Version of the snapshot schedule.</value>

        [DataMember(Name="version")]
        public UnityScheduleVersionEnum? Version { get; set; }

        /// <summary>
        /// Localized message string corresponding to version
        /// </summary>
        /// <value>Localized message string corresponding to version</value>

        [DataMember(Name="version_l10n")]
        public string VersionL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportUnitySnapshotScheduleInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsModified: ").Append(IsModified).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  VersionL10n: ").Append(VersionL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportUnitySnapshotScheduleInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportUnitySnapshotScheduleInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportUnitySnapshotScheduleInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportUnitySnapshotScheduleInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Rules == other.Rules ||
                    Rules != null &&
                    Rules.SequenceEqual(other.Rules)
                ) && 
                (
                    IsDefault == other.IsDefault ||
                    IsDefault != null &&
                    IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    IsModified == other.IsModified ||
                    IsModified != null &&
                    IsModified.Equals(other.IsModified)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    VersionL10n == other.VersionL10n ||
                    VersionL10n != null &&
                    VersionL10n.Equals(other.VersionL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Rules != null)
                    hashCode = hashCode * 59 + Rules.GetHashCode();
                    if (IsDefault != null)
                    hashCode = hashCode * 59 + IsDefault.GetHashCode();
                    if (IsModified != null)
                    hashCode = hashCode * 59 + IsModified.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (VersionL10n != null)
                    hashCode = hashCode * 59 + VersionL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportUnitySnapshotScheduleInstance left, ImportUnitySnapshotScheduleInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportUnitySnapshotScheduleInstance left, ImportUnitySnapshotScheduleInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
