/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Properties of a datacollection instance. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class DatacollectionInstance : IEquatable<DatacollectionInstance>
    { 
        /// <summary>
        /// Unique identifier for this instance.
        /// </summary>
        /// <value>Unique identifier for this instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public DatacollectionStatusEnum? Status { get; set; }

        /// <summary>
        /// If the data collection failed, the reason for the failure.
        /// </summary>
        /// <value>If the data collection failed, the reason for the failure.</value>

        [DataMember(Name="status_message")]
        public string StatusMessage { get; set; }

        /// <summary>
        /// The date and time at which the data collection started.
        /// </summary>
        /// <value>The date and time at which the data collection started.</value>

        [DataMember(Name="start_timestamp")]
        public DateTime? StartTimestamp { get; set; }

        /// <summary>
        /// The date and time at which the data collection completed or failed.
        /// </summary>
        /// <value>The date and time at which the data collection completed or failed.</value>

        [DataMember(Name="end_timestamp")]
        public DateTime? EndTimestamp { get; set; }

        /// <summary>
        /// The uncompressed size of the collection in bytes.
        /// </summary>
        /// <value>The uncompressed size of the collection in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="uncompressed_size")]
        public long? UncompressedSize { get; set; }

        /// <summary>
        /// The compressed size of the collection in bytes.
        /// </summary>
        /// <value>The compressed size of the collection in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="compressed_size")]
        public long? CompressedSize { get; set; }

        /// <summary>
        /// Brief note describing collection.
        /// </summary>
        /// <value>Brief note describing collection.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreatorType
        /// </summary>

        [DataMember(Name="creator_type")]
        public DatacollectionCreatorTypeEnum? CreatorType { get; set; }

        /// <summary>
        /// The last date and time that this collection was uploaded to your service provider.
        /// </summary>
        /// <value>The last date and time that this collection was uploaded to your service provider.</value>

        [DataMember(Name="uploaded")]
        public DateTime? Uploaded { get; set; }

        /// <summary>
        /// The last date and time that this collection was downloaded.
        /// </summary>
        /// <value>The last date and time that this collection was downloaded.</value>

        [DataMember(Name="downloaded")]
        public DateTime? Downloaded { get; set; }

        /// <summary>
        /// Profiles used to create this data collection.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Profiles used to create this data collection.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="profiles")]
        public List<DatacollectionProfileInstance> Profiles { get; set; }

        /// <summary>
        /// Appliances associated with this data collection.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Appliances associated with this data collection.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="appliances")]
        public List<DatacollectionApplianceInstance> Appliances { get; set; }

        /// <summary>
        /// The date and time from which to start collecting the logs.\&quot;
        /// </summary>
        /// <value>The date and time from which to start collecting the logs.\&quot;</value>

        [DataMember(Name="log_from_timestamp")]
        public DateTime? LogFromTimestamp { get; set; }

        /// <summary>
        /// The date and time to which the logs should be collected.\&quot;
        /// </summary>
        /// <value>The date and time to which the logs should be collected.\&quot;</value>

        [DataMember(Name="log_to_timestamp")]
        public DateTime? LogToTimestamp { get; set; }

        /// <summary>
        /// Localized message string corresponding to status Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to status Was added in version 3.0.0.0.</value>

        [DataMember(Name="status_l10n")]
        public string StatusL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to creator_type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to creator_type Was added in version 3.0.0.0.</value>

        [DataMember(Name="creator_type_l10n")]
        public string CreatorTypeL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatacollectionInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  EndTimestamp: ").Append(EndTimestamp).Append("\n");
            sb.Append("  UncompressedSize: ").Append(UncompressedSize).Append("\n");
            sb.Append("  CompressedSize: ").Append(CompressedSize).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatorType: ").Append(CreatorType).Append("\n");
            sb.Append("  Uploaded: ").Append(Uploaded).Append("\n");
            sb.Append("  Downloaded: ").Append(Downloaded).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  Appliances: ").Append(Appliances).Append("\n");
            sb.Append("  LogFromTimestamp: ").Append(LogFromTimestamp).Append("\n");
            sb.Append("  LogToTimestamp: ").Append(LogToTimestamp).Append("\n");
            sb.Append("  StatusL10n: ").Append(StatusL10n).Append("\n");
            sb.Append("  CreatorTypeL10n: ").Append(CreatorTypeL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DatacollectionInstance)obj);
        }

        /// <summary>
        /// Returns true if DatacollectionInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of DatacollectionInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatacollectionInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    StatusMessage == other.StatusMessage ||
                    StatusMessage != null &&
                    StatusMessage.Equals(other.StatusMessage)
                ) && 
                (
                    StartTimestamp == other.StartTimestamp ||
                    StartTimestamp != null &&
                    StartTimestamp.Equals(other.StartTimestamp)
                ) && 
                (
                    EndTimestamp == other.EndTimestamp ||
                    EndTimestamp != null &&
                    EndTimestamp.Equals(other.EndTimestamp)
                ) && 
                (
                    UncompressedSize == other.UncompressedSize ||
                    UncompressedSize != null &&
                    UncompressedSize.Equals(other.UncompressedSize)
                ) && 
                (
                    CompressedSize == other.CompressedSize ||
                    CompressedSize != null &&
                    CompressedSize.Equals(other.CompressedSize)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CreatorType == other.CreatorType ||
                    CreatorType != null &&
                    CreatorType.Equals(other.CreatorType)
                ) && 
                (
                    Uploaded == other.Uploaded ||
                    Uploaded != null &&
                    Uploaded.Equals(other.Uploaded)
                ) && 
                (
                    Downloaded == other.Downloaded ||
                    Downloaded != null &&
                    Downloaded.Equals(other.Downloaded)
                ) && 
                (
                    Profiles == other.Profiles ||
                    Profiles != null &&
                    Profiles.SequenceEqual(other.Profiles)
                ) && 
                (
                    Appliances == other.Appliances ||
                    Appliances != null &&
                    Appliances.SequenceEqual(other.Appliances)
                ) && 
                (
                    LogFromTimestamp == other.LogFromTimestamp ||
                    LogFromTimestamp != null &&
                    LogFromTimestamp.Equals(other.LogFromTimestamp)
                ) && 
                (
                    LogToTimestamp == other.LogToTimestamp ||
                    LogToTimestamp != null &&
                    LogToTimestamp.Equals(other.LogToTimestamp)
                ) && 
                (
                    StatusL10n == other.StatusL10n ||
                    StatusL10n != null &&
                    StatusL10n.Equals(other.StatusL10n)
                ) && 
                (
                    CreatorTypeL10n == other.CreatorTypeL10n ||
                    CreatorTypeL10n != null &&
                    CreatorTypeL10n.Equals(other.CreatorTypeL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (StatusMessage != null)
                    hashCode = hashCode * 59 + StatusMessage.GetHashCode();
                    if (StartTimestamp != null)
                    hashCode = hashCode * 59 + StartTimestamp.GetHashCode();
                    if (EndTimestamp != null)
                    hashCode = hashCode * 59 + EndTimestamp.GetHashCode();
                    if (UncompressedSize != null)
                    hashCode = hashCode * 59 + UncompressedSize.GetHashCode();
                    if (CompressedSize != null)
                    hashCode = hashCode * 59 + CompressedSize.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CreatorType != null)
                    hashCode = hashCode * 59 + CreatorType.GetHashCode();
                    if (Uploaded != null)
                    hashCode = hashCode * 59 + Uploaded.GetHashCode();
                    if (Downloaded != null)
                    hashCode = hashCode * 59 + Downloaded.GetHashCode();
                    if (Profiles != null)
                    hashCode = hashCode * 59 + Profiles.GetHashCode();
                    if (Appliances != null)
                    hashCode = hashCode * 59 + Appliances.GetHashCode();
                    if (LogFromTimestamp != null)
                    hashCode = hashCode * 59 + LogFromTimestamp.GetHashCode();
                    if (LogToTimestamp != null)
                    hashCode = hashCode * 59 + LogToTimestamp.GetHashCode();
                    if (StatusL10n != null)
                    hashCode = hashCode * 59 + StatusL10n.GetHashCode();
                    if (CreatorTypeL10n != null)
                    hashCode = hashCode * 59 + CreatorTypeL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DatacollectionInstance left, DatacollectionInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatacollectionInstance left, DatacollectionInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
