/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters for the network modify operation.
    /// </summary>
    [DataContract]
    public partial class NetworkModify : IEquatable<NetworkModify>
    { 
        /// <summary>
        /// VLAN identifier.
        /// </summary>
        /// <value>VLAN identifier.</value>

        [Range(0, 4094)]
        [DataMember(Name="vlan_id")]
        public int? VlanId { get; set; }

        /// <summary>
        /// Name of the network. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Name of the network. Was added in version 2.0.0.0.</value>

        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// * Network gateway in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. * Specify empty string to remove the gateway. 
        /// </summary>
        /// <value>* Network gateway in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. * Specify empty string to remove the gateway. </value>

        [DataMember(Name="gateway")]
        public string Gateway { get; set; }

        /// <summary>
        /// Network prefix length. (Used for both IPv4 and IPv6).
        /// </summary>
        /// <value>Network prefix length. (Used for both IPv4 and IPv6).</value>

        [Range(1, 127)]
        [DataMember(Name="prefix_length")]
        public int? PrefixLength { get; set; }

        /// <summary>
        /// * Cluster management IP address in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. * This can only be specified when reconfiguring these network types, which support cluster IP - * - Management - floating IP address for external cluster management. * - File_Mobility - floating IP address for file mobility network.  * Caution: Changing the cluster management IP address for Management network will lead to losing management sessions through this address. 
        /// </summary>
        /// <value>* Cluster management IP address in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. * This can only be specified when reconfiguring these network types, which support cluster IP - * - Management - floating IP address for external cluster management. * - File_Mobility - floating IP address for file mobility network.  * Caution: Changing the cluster management IP address for Management network will lead to losing management sessions through this address. </value>

        [DataMember(Name="cluster_mgmt_address")]
        public string ClusterMgmtAddress { get; set; }

        /// <summary>
        /// * New storage discovery IP address in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. * This can only be specified when reconfiguring the storage network. * Specify empty string to remove the storage discovery IP address. 
        /// </summary>
        /// <value>* New storage discovery IP address in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. * This can only be specified when reconfiguring the storage network. * Specify empty string to remove the storage discovery IP address. </value>

        [DataMember(Name="storage_discovery_address")]
        public string StorageDiscoveryAddress { get; set; }

        /// <summary>
        /// Gets or Sets VasaProviderCredentials
        /// </summary>

        [DataMember(Name="vasa_provider_credentials")]
        public NetworkModifyVasaProviderCredentials VasaProviderCredentials { get; set; }

        /// <summary>
        /// Gets or Sets EsxiCredentials
        /// </summary>

        [DataMember(Name="esxi_credentials")]
        public EsxiCredentials EsxiCredentials { get; set; }

        /// <summary>
        /// Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.
        /// </summary>
        /// <value>Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.</value>

        [Range(1280, 9000)]
        [DataMember(Name="mtu")]
        public int? Mtu { get; set; }

        /// <summary>
        /// IP addresses to add in IPv4 or IPv6 format.
        /// </summary>
        /// <value>IP addresses to add in IPv4 or IPv6 format.</value>

        [DataMember(Name="add_addresses")]
        public List<string> AddAddresses { get; set; }

        /// <summary>
        /// IP addresses to remove in IPv4 or IPv6 format.
        /// </summary>
        /// <value>IP addresses to remove in IPv4 or IPv6 format.</value>

        [DataMember(Name="remove_addresses")]
        public List<string> RemoveAddresses { get; set; }

        /// <summary>
        /// * Purposes to enable in the network. * This can only be specified when reconfiguring the network.  Was added in version 2.1.0.0.
        /// </summary>
        /// <value>* Purposes to enable in the network. * This can only be specified when reconfiguring the network.  Was added in version 2.1.0.0.</value>

        [DataMember(Name="add_purposes")]
        public List<NetworkPurposeEnum> AddPurposes { get; set; }

        /// <summary>
        /// * Purposes to disable in the network. * This can only be specified when reconfiguring the network. * Removal of ISCSI, NVMe/TCP purpose will lead to I/O disruption on external ISCSI, NVMe/TCP hosts consuming volumes via this network. It is recommended to disconnect any external hosts that may be affected (initiators should log out).  Was added in version 2.1.0.0.
        /// </summary>
        /// <value>* Purposes to disable in the network. * This can only be specified when reconfiguring the network. * Removal of ISCSI, NVMe/TCP purpose will lead to I/O disruption on external ISCSI, NVMe/TCP hosts consuming volumes via this network. It is recommended to disconnect any external hosts that may be affected (initiators should log out).  Was added in version 2.1.0.0.</value>

        [DataMember(Name="remove_purposes")]
        public List<NetworkPurposeEnum> RemovePurposes { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="nvme_discovery_mode")]
        public NVMeDiscoveryModeEnum? NvmeDiscoveryMode { get; set; }

        /// <summary>
        /// IP address of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>IP address of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="nvme_cdc_address")]
        public string NvmeCdcAddress { get; set; }

        /// <summary>
        /// TCP port of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC. The valid values: 8009 or from 49152 to 49999 or 50100 to 65535.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>TCP port of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC. The valid values: 8009 or from 49152 to 49999 or 50100 to 65535.  Was added in version 3.0.0.0.</value>

        [Range(8009, 65535)]
        [DataMember(Name="nvme_cdc_port")]
        public int? NvmeCdcPort { get; set; }

        /// <summary>
        /// Indicates whether to suppress network validation errors. The option is intended to suppress false errors caused by network environment constraints.  Normally the command will fail with an error when: - Some of system network ports are in degraded state or have cabling issues, - System top-of-rack switches have configuration issues leading to network unreachability, - Network IP addresses have duplicates in the network environment, or network gateway is unreachable.  When force is true, the command will proceed instead.  Caution: Only use this option when you are certain that your requested settings are correct, and that you understand why they are failing at this time, and that you want to apply the settings anyway. Improper network settings can make the system unreachable for data and management. 
        /// </summary>
        /// <value>Indicates whether to suppress network validation errors. The option is intended to suppress false errors caused by network environment constraints.  Normally the command will fail with an error when: - Some of system network ports are in degraded state or have cabling issues, - System top-of-rack switches have configuration issues leading to network unreachability, - Network IP addresses have duplicates in the network environment, or network gateway is unreachable.  When force is true, the command will proceed instead.  Caution: Only use this option when you are certain that your requested settings are correct, and that you understand why they are failing at this time, and that you want to apply the settings anyway. Improper network settings can make the system unreachable for data and management. </value>

        [DataMember(Name="force")]
        public bool? Force { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkModify {\n");
            sb.Append("  VlanId: ").Append(VlanId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  PrefixLength: ").Append(PrefixLength).Append("\n");
            sb.Append("  ClusterMgmtAddress: ").Append(ClusterMgmtAddress).Append("\n");
            sb.Append("  StorageDiscoveryAddress: ").Append(StorageDiscoveryAddress).Append("\n");
            sb.Append("  VasaProviderCredentials: ").Append(VasaProviderCredentials).Append("\n");
            sb.Append("  EsxiCredentials: ").Append(EsxiCredentials).Append("\n");
            sb.Append("  Mtu: ").Append(Mtu).Append("\n");
            sb.Append("  AddAddresses: ").Append(AddAddresses).Append("\n");
            sb.Append("  RemoveAddresses: ").Append(RemoveAddresses).Append("\n");
            sb.Append("  AddPurposes: ").Append(AddPurposes).Append("\n");
            sb.Append("  RemovePurposes: ").Append(RemovePurposes).Append("\n");
            sb.Append("  NvmeDiscoveryMode: ").Append(NvmeDiscoveryMode).Append("\n");
            sb.Append("  NvmeCdcAddress: ").Append(NvmeCdcAddress).Append("\n");
            sb.Append("  NvmeCdcPort: ").Append(NvmeCdcPort).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NetworkModify)obj);
        }

        /// <summary>
        /// Returns true if NetworkModify instances are equal
        /// </summary>
        /// <param name="other">Instance of NetworkModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VlanId == other.VlanId ||
                    VlanId != null &&
                    VlanId.Equals(other.VlanId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Gateway == other.Gateway ||
                    Gateway != null &&
                    Gateway.Equals(other.Gateway)
                ) && 
                (
                    PrefixLength == other.PrefixLength ||
                    PrefixLength != null &&
                    PrefixLength.Equals(other.PrefixLength)
                ) && 
                (
                    ClusterMgmtAddress == other.ClusterMgmtAddress ||
                    ClusterMgmtAddress != null &&
                    ClusterMgmtAddress.Equals(other.ClusterMgmtAddress)
                ) && 
                (
                    StorageDiscoveryAddress == other.StorageDiscoveryAddress ||
                    StorageDiscoveryAddress != null &&
                    StorageDiscoveryAddress.Equals(other.StorageDiscoveryAddress)
                ) && 
                (
                    VasaProviderCredentials == other.VasaProviderCredentials ||
                    VasaProviderCredentials != null &&
                    VasaProviderCredentials.Equals(other.VasaProviderCredentials)
                ) && 
                (
                    EsxiCredentials == other.EsxiCredentials ||
                    EsxiCredentials != null &&
                    EsxiCredentials.Equals(other.EsxiCredentials)
                ) && 
                (
                    Mtu == other.Mtu ||
                    Mtu != null &&
                    Mtu.Equals(other.Mtu)
                ) && 
                (
                    AddAddresses == other.AddAddresses ||
                    AddAddresses != null &&
                    AddAddresses.SequenceEqual(other.AddAddresses)
                ) && 
                (
                    RemoveAddresses == other.RemoveAddresses ||
                    RemoveAddresses != null &&
                    RemoveAddresses.SequenceEqual(other.RemoveAddresses)
                ) && 
                (
                    AddPurposes == other.AddPurposes ||
                    AddPurposes != null &&
                    AddPurposes.SequenceEqual(other.AddPurposes)
                ) && 
                (
                    RemovePurposes == other.RemovePurposes ||
                    RemovePurposes != null &&
                    RemovePurposes.SequenceEqual(other.RemovePurposes)
                ) && 
                (
                    NvmeDiscoveryMode == other.NvmeDiscoveryMode ||
                    NvmeDiscoveryMode != null &&
                    NvmeDiscoveryMode.Equals(other.NvmeDiscoveryMode)
                ) && 
                (
                    NvmeCdcAddress == other.NvmeCdcAddress ||
                    NvmeCdcAddress != null &&
                    NvmeCdcAddress.Equals(other.NvmeCdcAddress)
                ) && 
                (
                    NvmeCdcPort == other.NvmeCdcPort ||
                    NvmeCdcPort != null &&
                    NvmeCdcPort.Equals(other.NvmeCdcPort)
                ) && 
                (
                    Force == other.Force ||
                    Force != null &&
                    Force.Equals(other.Force)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VlanId != null)
                    hashCode = hashCode * 59 + VlanId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Gateway != null)
                    hashCode = hashCode * 59 + Gateway.GetHashCode();
                    if (PrefixLength != null)
                    hashCode = hashCode * 59 + PrefixLength.GetHashCode();
                    if (ClusterMgmtAddress != null)
                    hashCode = hashCode * 59 + ClusterMgmtAddress.GetHashCode();
                    if (StorageDiscoveryAddress != null)
                    hashCode = hashCode * 59 + StorageDiscoveryAddress.GetHashCode();
                    if (VasaProviderCredentials != null)
                    hashCode = hashCode * 59 + VasaProviderCredentials.GetHashCode();
                    if (EsxiCredentials != null)
                    hashCode = hashCode * 59 + EsxiCredentials.GetHashCode();
                    if (Mtu != null)
                    hashCode = hashCode * 59 + Mtu.GetHashCode();
                    if (AddAddresses != null)
                    hashCode = hashCode * 59 + AddAddresses.GetHashCode();
                    if (RemoveAddresses != null)
                    hashCode = hashCode * 59 + RemoveAddresses.GetHashCode();
                    if (AddPurposes != null)
                    hashCode = hashCode * 59 + AddPurposes.GetHashCode();
                    if (RemovePurposes != null)
                    hashCode = hashCode * 59 + RemovePurposes.GetHashCode();
                    if (NvmeDiscoveryMode != null)
                    hashCode = hashCode * 59 + NvmeDiscoveryMode.GetHashCode();
                    if (NvmeCdcAddress != null)
                    hashCode = hashCode * 59 + NvmeCdcAddress.GetHashCode();
                    if (NvmeCdcPort != null)
                    hashCode = hashCode * 59 + NvmeCdcPort.GetHashCode();
                    if (Force != null)
                    hashCode = hashCode * 59 + Force.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NetworkModify left, NetworkModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NetworkModify left, NetworkModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
