/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    ///  Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class StorageContainerDestinationCreate : IEquatable<StorageContainerDestinationCreate>
    { 
        /// <summary>
        /// The unique id of the local storage container. name:{name} can be used instead of {id}. For example: &#39;storage_container_id&#39;:&#39;name:storage_container_name&#39;
        /// </summary>
        /// <value>The unique id of the local storage container. name:{name} can be used instead of {id}. For example: &#39;storage_container_id&#39;:&#39;name:storage_container_name&#39;</value>
        [Required]
        
        [DataMember(Name="storage_container_id")]
        public string StorageContainerId { get; set; }

        /// <summary>
        /// The unique id of the remote system. name:{name} can be used instead of {id}. For example: &#39;remote_system_id&#39;:&#39;name:remote_system_name&#39;
        /// </summary>
        /// <value>The unique id of the remote system. name:{name} can be used instead of {id}. For example: &#39;remote_system_id&#39;:&#39;name:remote_system_name&#39;</value>
        [Required]
        
        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// The unique id of the destination storage container on the remote system.
        /// </summary>
        /// <value>The unique id of the destination storage container on the remote system.</value>
        [Required]
        
        [DataMember(Name="remote_storage_container_id")]
        public string RemoteStorageContainerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageContainerDestinationCreate {\n");
            sb.Append("  StorageContainerId: ").Append(StorageContainerId).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  RemoteStorageContainerId: ").Append(RemoteStorageContainerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StorageContainerDestinationCreate)obj);
        }

        /// <summary>
        /// Returns true if StorageContainerDestinationCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of StorageContainerDestinationCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageContainerDestinationCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StorageContainerId == other.StorageContainerId ||
                    StorageContainerId != null &&
                    StorageContainerId.Equals(other.StorageContainerId)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    RemoteStorageContainerId == other.RemoteStorageContainerId ||
                    RemoteStorageContainerId != null &&
                    RemoteStorageContainerId.Equals(other.RemoteStorageContainerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StorageContainerId != null)
                    hashCode = hashCode * 59 + StorageContainerId.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (RemoteStorageContainerId != null)
                    hashCode = hashCode * 59 + RemoteStorageContainerId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StorageContainerDestinationCreate left, StorageContainerDestinationCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StorageContainerDestinationCreate left, StorageContainerDestinationCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
