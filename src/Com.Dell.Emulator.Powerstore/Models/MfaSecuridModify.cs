/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Arguments to an mfa-securid modify operation. Was added in version 3.5.0.0.
    /// </summary>
    [DataContract]
    public partial class MfaSecuridModify : IEquatable<MfaSecuridModify>
    { 
        /// <summary>
        /// Unique name (at system level) for this MFA service.
        /// </summary>
        /// <value>Unique name (at system level) for this MFA service.</value>

        [MaxLength(128)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// List of URLs to access the SecurID service. In this release, only one URL is allowed. 
        /// </summary>
        /// <value>List of URLs to access the SecurID service. In this release, only one URL is allowed. </value>

        [DataMember(Name="server_urls")]
        public List<string> ServerUrls { get; set; }

        /// <summary>
        /// Unique identifier of this system as a client of SecurID, assigned by SecurID service.
        /// </summary>
        /// <value>Unique identifier of this system as a client of SecurID, assigned by SecurID service.</value>

        [MaxLength(256)]
        [DataMember(Name="client_id")]
        public string ClientId { get; set; }

        /// <summary>
        /// Key associated with the Authentication Manager, assigned by SecurID service.
        /// </summary>
        /// <value>Key associated with the Authentication Manager, assigned by SecurID service.</value>

        [MaxLength(128)]
        [DataMember(Name="access_key")]
        public string AccessKey { get; set; }

        /// <summary>
        /// Timeout in milliseconds for connection to the service.
        /// </summary>
        /// <value>Timeout in milliseconds for connection to the service.</value>

        [Range(1, 30000)]
        [DataMember(Name="connection_timeout")]
        public int? ConnectionTimeout { get; set; }

        /// <summary>
        /// Timeout in milliseconds for reads from the service.
        /// </summary>
        /// <value>Timeout in milliseconds for reads from the service.</value>

        [Range(1, 30000)]
        [DataMember(Name="read_timeout")]
        public int? ReadTimeout { get; set; }

        /// <summary>
        /// Whether or not this MFA service is enabled. While not enabled, accounts and services using this MFA service will not use MFA. 
        /// </summary>
        /// <value>Whether or not this MFA service is enabled. While not enabled, accounts and services using this MFA service will not use MFA. </value>

        [DataMember(Name="is_enabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MfaSecuridModify {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ServerUrls: ").Append(ServerUrls).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  ConnectionTimeout: ").Append(ConnectionTimeout).Append("\n");
            sb.Append("  ReadTimeout: ").Append(ReadTimeout).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MfaSecuridModify)obj);
        }

        /// <summary>
        /// Returns true if MfaSecuridModify instances are equal
        /// </summary>
        /// <param name="other">Instance of MfaSecuridModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MfaSecuridModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ServerUrls == other.ServerUrls ||
                    ServerUrls != null &&
                    ServerUrls.SequenceEqual(other.ServerUrls)
                ) && 
                (
                    ClientId == other.ClientId ||
                    ClientId != null &&
                    ClientId.Equals(other.ClientId)
                ) && 
                (
                    AccessKey == other.AccessKey ||
                    AccessKey != null &&
                    AccessKey.Equals(other.AccessKey)
                ) && 
                (
                    ConnectionTimeout == other.ConnectionTimeout ||
                    ConnectionTimeout != null &&
                    ConnectionTimeout.Equals(other.ConnectionTimeout)
                ) && 
                (
                    ReadTimeout == other.ReadTimeout ||
                    ReadTimeout != null &&
                    ReadTimeout.Equals(other.ReadTimeout)
                ) && 
                (
                    IsEnabled == other.IsEnabled ||
                    IsEnabled != null &&
                    IsEnabled.Equals(other.IsEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ServerUrls != null)
                    hashCode = hashCode * 59 + ServerUrls.GetHashCode();
                    if (ClientId != null)
                    hashCode = hashCode * 59 + ClientId.GetHashCode();
                    if (AccessKey != null)
                    hashCode = hashCode * 59 + AccessKey.GetHashCode();
                    if (ConnectionTimeout != null)
                    hashCode = hashCode * 59 + ConnectionTimeout.GetHashCode();
                    if (ReadTimeout != null)
                    hashCode = hashCode * 59 + ReadTimeout.GetHashCode();
                    if (IsEnabled != null)
                    hashCode = hashCode * 59 + IsEnabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MfaSecuridModify left, MfaSecuridModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MfaSecuridModify left, MfaSecuridModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
