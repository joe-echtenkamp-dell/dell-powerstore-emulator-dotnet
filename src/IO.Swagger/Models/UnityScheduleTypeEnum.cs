/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
        /// <summary>
        /// Snapshot schedule types. Values are:  * N_Hours_At_MM - Create a snapshot every {interval} hours, at {minutes} past the hour. Supported parameters: interval (required), minutes (optional, default 0).  * Day_At_HHMM - Specify a list of {hour[,...]} when to create a snapshot each day at {minutes} past the hour. Supported parameters: hours (at least one required), minutes (optional).  * N_Days_At_HHMM - Create a snapshot every {interval} days at the time {hours}:{minutes}. Supported Parameters: interval (required), hours (optional, exactly one), minutes (optional).  * SelDays_At_HHMM - Create a snapshot on the selected {daysOfWeek}, at the time {hours}:{minutes}. Supported parameters: daysOfWeek (at least one required), hours (optional, default 0), minutes (optional, default 0)  * Nth_Day_Of_Month_AT_HHMM - Create a snapshot on the selected {daysOfMonth}, at the time {hours}:{minutes}. Supported parameters: daysOfMonth (at least one required), hours (optional, default 0), minutes (optional, default 0).  * Unsupported - Unsupported.  * Unknown - Schedule type is unknown to PowerStore. 
        /// </summary>
        /// <value>Snapshot schedule types. Values are:  * N_Hours_At_MM - Create a snapshot every {interval} hours, at {minutes} past the hour. Supported parameters: interval (required), minutes (optional, default 0).  * Day_At_HHMM - Specify a list of {hour[,...]} when to create a snapshot each day at {minutes} past the hour. Supported parameters: hours (at least one required), minutes (optional).  * N_Days_At_HHMM - Create a snapshot every {interval} days at the time {hours}:{minutes}. Supported Parameters: interval (required), hours (optional, exactly one), minutes (optional).  * SelDays_At_HHMM - Create a snapshot on the selected {daysOfWeek}, at the time {hours}:{minutes}. Supported parameters: daysOfWeek (at least one required), hours (optional, default 0), minutes (optional, default 0)  * Nth_Day_Of_Month_AT_HHMM - Create a snapshot on the selected {daysOfMonth}, at the time {hours}:{minutes}. Supported parameters: daysOfMonth (at least one required), hours (optional, default 0), minutes (optional, default 0).  * Unsupported - Unsupported.  * Unknown - Schedule type is unknown to PowerStore. </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum UnityScheduleTypeEnum
        {
            
            /// <summary>
            /// Enum NHoursAtMMEnum for N_Hours_At_MM
            /// </summary>
            [EnumMember(Value = "N_Hours_At_MM")]
            NHoursAtMMEnum = 1,
            
            /// <summary>
            /// Enum DayAtHHMMEnum for Day_At_HHMM
            /// </summary>
            [EnumMember(Value = "Day_At_HHMM")]
            DayAtHHMMEnum = 2,
            
            /// <summary>
            /// Enum NDaysAtHHMMEnum for N_Days_At_HHMM
            /// </summary>
            [EnumMember(Value = "N_Days_At_HHMM")]
            NDaysAtHHMMEnum = 3,
            
            /// <summary>
            /// Enum SelDaysAtHHMMEnum for SelDays_At_HHMM
            /// </summary>
            [EnumMember(Value = "SelDays_At_HHMM")]
            SelDaysAtHHMMEnum = 4,
            
            /// <summary>
            /// Enum NthDayOfMonthATHHMMEnum for Nth_Day_Of_Month_AT_HHMM
            /// </summary>
            [EnumMember(Value = "Nth_Day_Of_Month_AT_HHMM")]
            NthDayOfMonthATHHMMEnum = 5,
            
            /// <summary>
            /// Enum UnsupportedEnum for Unsupported
            /// </summary>
            [EnumMember(Value = "Unsupported")]
            UnsupportedEnum = 6,
            
            /// <summary>
            /// Enum UnknownEnum for Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            UnknownEnum = 7
        }
}
