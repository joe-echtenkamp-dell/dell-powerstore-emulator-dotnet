/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Network configuration setting during cluster creation. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ClusterCreateNetworks : IEquatable<ClusterCreateNetworks>
    { 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        
        [DataMember(Name="type")]
        public NetworkTypeEnum? Type { get; set; }

        /// <summary>
        /// VLAN identifier. 
        /// </summary>
        /// <value>VLAN identifier. </value>

        [Range(0, 4094)]
        [DataMember(Name="vlan_id")]
        public int? VlanId { get; set; }

        /// <summary>
        /// Network prefix length, used for both IPv4 and IPv6. 
        /// </summary>
        /// <value>Network prefix length, used for both IPv4 and IPv6. </value>
        [Required]
        
        [Range(0, 128)]
        [DataMember(Name="prefix_length")]
        public int? PrefixLength { get; set; }

        /// <summary>
        /// Network gateway in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. 
        /// </summary>
        /// <value>Network gateway in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. </value>

        [DataMember(Name="gateway")]
        public string Gateway { get; set; }

        /// <summary>
        /// New cluster management IP address in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. This can only be specified only when configuring the management type network. 
        /// </summary>
        /// <value>New cluster management IP address in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. This can only be specified only when configuring the management type network. </value>

        [DataMember(Name="cluster_mgmt_address")]
        public string ClusterMgmtAddress { get; set; }

        /// <summary>
        /// New storage discovery IP address in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. This can only be specified only when configuring the storage type network. 
        /// </summary>
        /// <value>New storage discovery IP address in IPv4 or IPv6 format, corresponding to the network&#39;s IP version. This can only be specified only when configuring the storage type network. </value>

        [DataMember(Name="storage_discovery_address")]
        public string StorageDiscoveryAddress { get; set; }

        /// <summary>
        /// IP addresses in IPv4 or IPv6 format. 
        /// </summary>
        /// <value>IP addresses in IPv4 or IPv6 format. </value>
        [Required]
        
        [DataMember(Name="addresses")]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// Purposes of the network. Only applicable to storage networks. Omitting the property is equivalent to providing all applicable purposes, which are: ISCSI, NVMe/TCP. If provided, must include iSCSI to enable the internal host storage access. Was added in version 2.1.0.0.
        /// </summary>
        /// <value>Purposes of the network. Only applicable to storage networks. Omitting the property is equivalent to providing all applicable purposes, which are: ISCSI, NVMe/TCP. If provided, must include iSCSI to enable the internal host storage access. Was added in version 2.1.0.0.</value>

        [DataMember(Name="purposes")]
        public List<NetworkPurposeEnum> Purposes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClusterCreateNetworks {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VlanId: ").Append(VlanId).Append("\n");
            sb.Append("  PrefixLength: ").Append(PrefixLength).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  ClusterMgmtAddress: ").Append(ClusterMgmtAddress).Append("\n");
            sb.Append("  StorageDiscoveryAddress: ").Append(StorageDiscoveryAddress).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Purposes: ").Append(Purposes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClusterCreateNetworks)obj);
        }

        /// <summary>
        /// Returns true if ClusterCreateNetworks instances are equal
        /// </summary>
        /// <param name="other">Instance of ClusterCreateNetworks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClusterCreateNetworks other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    VlanId == other.VlanId ||
                    VlanId != null &&
                    VlanId.Equals(other.VlanId)
                ) && 
                (
                    PrefixLength == other.PrefixLength ||
                    PrefixLength != null &&
                    PrefixLength.Equals(other.PrefixLength)
                ) && 
                (
                    Gateway == other.Gateway ||
                    Gateway != null &&
                    Gateway.Equals(other.Gateway)
                ) && 
                (
                    ClusterMgmtAddress == other.ClusterMgmtAddress ||
                    ClusterMgmtAddress != null &&
                    ClusterMgmtAddress.Equals(other.ClusterMgmtAddress)
                ) && 
                (
                    StorageDiscoveryAddress == other.StorageDiscoveryAddress ||
                    StorageDiscoveryAddress != null &&
                    StorageDiscoveryAddress.Equals(other.StorageDiscoveryAddress)
                ) && 
                (
                    Addresses == other.Addresses ||
                    Addresses != null &&
                    Addresses.SequenceEqual(other.Addresses)
                ) && 
                (
                    Purposes == other.Purposes ||
                    Purposes != null &&
                    Purposes.SequenceEqual(other.Purposes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (VlanId != null)
                    hashCode = hashCode * 59 + VlanId.GetHashCode();
                    if (PrefixLength != null)
                    hashCode = hashCode * 59 + PrefixLength.GetHashCode();
                    if (Gateway != null)
                    hashCode = hashCode * 59 + Gateway.GetHashCode();
                    if (ClusterMgmtAddress != null)
                    hashCode = hashCode * 59 + ClusterMgmtAddress.GetHashCode();
                    if (StorageDiscoveryAddress != null)
                    hashCode = hashCode * 59 + StorageDiscoveryAddress.GetHashCode();
                    if (Addresses != null)
                    hashCode = hashCode * 59 + Addresses.GetHashCode();
                    if (Purposes != null)
                    hashCode = hashCode * 59 + Purposes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClusterCreateNetworks left, ClusterCreateNetworks right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClusterCreateNetworks left, ClusterCreateNetworks right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
