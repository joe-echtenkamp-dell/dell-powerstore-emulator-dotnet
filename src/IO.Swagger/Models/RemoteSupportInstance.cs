/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Remote support properties. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class RemoteSupportInstance : IEquatable<RemoteSupportInstance>
    { 
        /// <summary>
        /// The id of the remote_support instance. Always \\\&quot;0\\\&quot;.
        /// </summary>
        /// <value>The id of the remote_support instance. Always \\\&quot;0\\\&quot;.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public RemoteSupportTypeEnum? Type { get; set; }

        /// <summary>
        /// Indicates whether support for CloudIQ is enabled.
        /// </summary>
        /// <value>Indicates whether support for CloudIQ is enabled.</value>

        [DataMember(Name="is_cloudiq_enabled")]
        public bool? IsCloudiqEnabled { get; set; }

        /// <summary>
        /// Indicates whether user has accepted remote support license agreement before enabling the Support Assist on the system for the first time.
        /// </summary>
        /// <value>Indicates whether user has accepted remote support license agreement before enabling the Support Assist on the system for the first time.</value>

        [DataMember(Name="is_support_assist_license_accepted")]
        public bool? IsSupportAssistLicenseAccepted { get; set; }

        /// <summary>
        /// Contains full license text
        /// </summary>
        /// <value>Contains full license text</value>

        [DataMember(Name="support_assist_license_agreement_text")]
        public string SupportAssistLicenseAgreementText { get; set; }

        /// <summary>
        /// Indicates whether support for Remote Service Credentials is enabled.
        /// </summary>
        /// <value>Indicates whether support for Remote Service Credentials is enabled.</value>

        [DataMember(Name="is_rsc_enabled")]
        public bool? IsRscEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ConnectivityStatus
        /// </summary>

        [DataMember(Name="connectivity_status")]
        public RemoteSupportApplianceConnectivityStatusEnum? ConnectivityStatus { get; set; }

        /// <summary>
        /// Last time that this configuration was updated.
        /// </summary>
        /// <value>Last time that this configuration was updated.</value>

        [DataMember(Name="last_update")]
        public DateTime? LastUpdate { get; set; }

        /// <summary>
        /// Remote support servers. Specifying this replaces the old server list  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Remote support servers. Specifying this replaces the old server list  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="remote_support_servers")]
        public List<RemoteSupportServerInstance> RemoteSupportServers { get; set; }

        /// <summary>
        /// Proxy server IP address (IPv4).
        /// </summary>
        /// <value>Proxy server IP address (IPv4).</value>

        [DataMember(Name="proxy_address")]
        public string ProxyAddress { get; set; }

        /// <summary>
        /// Proxy server port number.
        /// </summary>
        /// <value>Proxy server port number.</value>

        [Range(0, 65635)]
        [DataMember(Name="proxy_port")]
        public int? ProxyPort { get; set; }

        /// <summary>
        /// User name for proxy server access.
        /// </summary>
        /// <value>User name for proxy server access.</value>

        [DataMember(Name="proxy_username")]
        public string ProxyUsername { get; set; }

        /// <summary>
        /// Client already configured ICW. Was deprecated in version 3.0.0.0.
        /// </summary>
        /// <value>Client already configured ICW. Was deprecated in version 3.0.0.0.</value>

        [DataMember(Name="is_icw_configured")]
        public bool? IsIcwConfigured { get; set; }

        /// <summary>
        /// Policy Manager server IP address (IPv4). Was deprecated in version 2.0.0.0.
        /// </summary>
        /// <value>Policy Manager server IP address (IPv4). Was deprecated in version 2.0.0.0.</value>

        [DataMember(Name="policy_manager_address")]
        public string PolicyManagerAddress { get; set; }

        /// <summary>
        /// Policy Manager port number. Was deprecated in version 2.0.0.0.
        /// </summary>
        /// <value>Policy Manager port number. Was deprecated in version 2.0.0.0.</value>

        [Range(0, 65635)]
        [DataMember(Name="policy_manager_port")]
        public int? PolicyManagerPort { get; set; }

        /// <summary>
        /// Whether automatic software downloads are enabled. When enabled, new software packages that are valid for this PowerStore system will be automatically downloaded through the remote support connection, and an alert will be raised. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Whether automatic software downloads are enabled. When enabled, new software packages that are valid for this PowerStore system will be automatically downloaded through the remote support connection, and an alert will be raised. Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_software_autodownload_enabled")]
        public bool? IsSoftwareAutodownloadEnabled { get; set; }

        /// <summary>
        ///  Was added in version 4.0.0.0.
        /// </summary>
        /// <value> Was added in version 4.0.0.0.</value>

        [DataMember(Name="classification_choice")]
        public SoftwarePackageClassificationChoiceEnum? ClassificationChoice { get; set; }

        /// <summary>
        /// Localized message string corresponding to type Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to type Was added in version 2.0.0.0.</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to connectivity_status Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to connectivity_status Was added in version 2.0.0.0.</value>

        [DataMember(Name="connectivity_status_l10n")]
        public string ConnectivityStatusL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to classification_choice Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to classification_choice Was added in version 4.0.0.0.</value>

        [DataMember(Name="classification_choice_l10n")]
        public string ClassificationChoiceL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSupportInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsCloudiqEnabled: ").Append(IsCloudiqEnabled).Append("\n");
            sb.Append("  IsSupportAssistLicenseAccepted: ").Append(IsSupportAssistLicenseAccepted).Append("\n");
            sb.Append("  SupportAssistLicenseAgreementText: ").Append(SupportAssistLicenseAgreementText).Append("\n");
            sb.Append("  IsRscEnabled: ").Append(IsRscEnabled).Append("\n");
            sb.Append("  ConnectivityStatus: ").Append(ConnectivityStatus).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  RemoteSupportServers: ").Append(RemoteSupportServers).Append("\n");
            sb.Append("  ProxyAddress: ").Append(ProxyAddress).Append("\n");
            sb.Append("  ProxyPort: ").Append(ProxyPort).Append("\n");
            sb.Append("  ProxyUsername: ").Append(ProxyUsername).Append("\n");
            sb.Append("  IsIcwConfigured: ").Append(IsIcwConfigured).Append("\n");
            sb.Append("  PolicyManagerAddress: ").Append(PolicyManagerAddress).Append("\n");
            sb.Append("  PolicyManagerPort: ").Append(PolicyManagerPort).Append("\n");
            sb.Append("  IsSoftwareAutodownloadEnabled: ").Append(IsSoftwareAutodownloadEnabled).Append("\n");
            sb.Append("  ClassificationChoice: ").Append(ClassificationChoice).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  ConnectivityStatusL10n: ").Append(ConnectivityStatusL10n).Append("\n");
            sb.Append("  ClassificationChoiceL10n: ").Append(ClassificationChoiceL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteSupportInstance)obj);
        }

        /// <summary>
        /// Returns true if RemoteSupportInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteSupportInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSupportInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    IsCloudiqEnabled == other.IsCloudiqEnabled ||
                    IsCloudiqEnabled != null &&
                    IsCloudiqEnabled.Equals(other.IsCloudiqEnabled)
                ) && 
                (
                    IsSupportAssistLicenseAccepted == other.IsSupportAssistLicenseAccepted ||
                    IsSupportAssistLicenseAccepted != null &&
                    IsSupportAssistLicenseAccepted.Equals(other.IsSupportAssistLicenseAccepted)
                ) && 
                (
                    SupportAssistLicenseAgreementText == other.SupportAssistLicenseAgreementText ||
                    SupportAssistLicenseAgreementText != null &&
                    SupportAssistLicenseAgreementText.Equals(other.SupportAssistLicenseAgreementText)
                ) && 
                (
                    IsRscEnabled == other.IsRscEnabled ||
                    IsRscEnabled != null &&
                    IsRscEnabled.Equals(other.IsRscEnabled)
                ) && 
                (
                    ConnectivityStatus == other.ConnectivityStatus ||
                    ConnectivityStatus != null &&
                    ConnectivityStatus.Equals(other.ConnectivityStatus)
                ) && 
                (
                    LastUpdate == other.LastUpdate ||
                    LastUpdate != null &&
                    LastUpdate.Equals(other.LastUpdate)
                ) && 
                (
                    RemoteSupportServers == other.RemoteSupportServers ||
                    RemoteSupportServers != null &&
                    RemoteSupportServers.SequenceEqual(other.RemoteSupportServers)
                ) && 
                (
                    ProxyAddress == other.ProxyAddress ||
                    ProxyAddress != null &&
                    ProxyAddress.Equals(other.ProxyAddress)
                ) && 
                (
                    ProxyPort == other.ProxyPort ||
                    ProxyPort != null &&
                    ProxyPort.Equals(other.ProxyPort)
                ) && 
                (
                    ProxyUsername == other.ProxyUsername ||
                    ProxyUsername != null &&
                    ProxyUsername.Equals(other.ProxyUsername)
                ) && 
                (
                    IsIcwConfigured == other.IsIcwConfigured ||
                    IsIcwConfigured != null &&
                    IsIcwConfigured.Equals(other.IsIcwConfigured)
                ) && 
                (
                    PolicyManagerAddress == other.PolicyManagerAddress ||
                    PolicyManagerAddress != null &&
                    PolicyManagerAddress.Equals(other.PolicyManagerAddress)
                ) && 
                (
                    PolicyManagerPort == other.PolicyManagerPort ||
                    PolicyManagerPort != null &&
                    PolicyManagerPort.Equals(other.PolicyManagerPort)
                ) && 
                (
                    IsSoftwareAutodownloadEnabled == other.IsSoftwareAutodownloadEnabled ||
                    IsSoftwareAutodownloadEnabled != null &&
                    IsSoftwareAutodownloadEnabled.Equals(other.IsSoftwareAutodownloadEnabled)
                ) && 
                (
                    ClassificationChoice == other.ClassificationChoice ||
                    ClassificationChoice != null &&
                    ClassificationChoice.Equals(other.ClassificationChoice)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    ConnectivityStatusL10n == other.ConnectivityStatusL10n ||
                    ConnectivityStatusL10n != null &&
                    ConnectivityStatusL10n.Equals(other.ConnectivityStatusL10n)
                ) && 
                (
                    ClassificationChoiceL10n == other.ClassificationChoiceL10n ||
                    ClassificationChoiceL10n != null &&
                    ClassificationChoiceL10n.Equals(other.ClassificationChoiceL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (IsCloudiqEnabled != null)
                    hashCode = hashCode * 59 + IsCloudiqEnabled.GetHashCode();
                    if (IsSupportAssistLicenseAccepted != null)
                    hashCode = hashCode * 59 + IsSupportAssistLicenseAccepted.GetHashCode();
                    if (SupportAssistLicenseAgreementText != null)
                    hashCode = hashCode * 59 + SupportAssistLicenseAgreementText.GetHashCode();
                    if (IsRscEnabled != null)
                    hashCode = hashCode * 59 + IsRscEnabled.GetHashCode();
                    if (ConnectivityStatus != null)
                    hashCode = hashCode * 59 + ConnectivityStatus.GetHashCode();
                    if (LastUpdate != null)
                    hashCode = hashCode * 59 + LastUpdate.GetHashCode();
                    if (RemoteSupportServers != null)
                    hashCode = hashCode * 59 + RemoteSupportServers.GetHashCode();
                    if (ProxyAddress != null)
                    hashCode = hashCode * 59 + ProxyAddress.GetHashCode();
                    if (ProxyPort != null)
                    hashCode = hashCode * 59 + ProxyPort.GetHashCode();
                    if (ProxyUsername != null)
                    hashCode = hashCode * 59 + ProxyUsername.GetHashCode();
                    if (IsIcwConfigured != null)
                    hashCode = hashCode * 59 + IsIcwConfigured.GetHashCode();
                    if (PolicyManagerAddress != null)
                    hashCode = hashCode * 59 + PolicyManagerAddress.GetHashCode();
                    if (PolicyManagerPort != null)
                    hashCode = hashCode * 59 + PolicyManagerPort.GetHashCode();
                    if (IsSoftwareAutodownloadEnabled != null)
                    hashCode = hashCode * 59 + IsSoftwareAutodownloadEnabled.GetHashCode();
                    if (ClassificationChoice != null)
                    hashCode = hashCode * 59 + ClassificationChoice.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (ConnectivityStatusL10n != null)
                    hashCode = hashCode * 59 + ConnectivityStatusL10n.GetHashCode();
                    if (ClassificationChoiceL10n != null)
                    hashCode = hashCode * 59 + ClassificationChoiceL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteSupportInstance left, RemoteSupportInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteSupportInstance left, RemoteSupportInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
