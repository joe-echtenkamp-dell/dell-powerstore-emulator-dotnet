/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// PS Group volume instance details. This resource type has queriable association from import_psgroup
    /// </summary>
    [DataContract]
    public partial class ImportPsgroupVolumeInstance : IEquatable<ImportPsgroupVolumeInstance>
    { 
        /// <summary>
        /// Unique identifier of the volume.
        /// </summary>
        /// <value>Unique identifier of the volume.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Indicates whether the volume is online.
        /// </summary>
        /// <value>Indicates whether the volume is online.</value>

        [DataMember(Name="is_online")]
        public bool? IsOnline { get; set; }

        /// <summary>
        /// Unique identifier of the PS Group with which the volume is associated.
        /// </summary>
        /// <value>Unique identifier of the PS Group with which the volume is associated.</value>

        [DataMember(Name="import_psgroup_id")]
        public string ImportPsgroupId { get; set; }

        /// <summary>
        /// Name of the volume.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the volume.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Size of the volume, in bytes.
        /// </summary>
        /// <value>Size of the volume, in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="size")]
        public long? Size { get; set; }

        /// <summary>
        /// Gets or Sets BlockSize
        /// </summary>

        [DataMember(Name="block_size")]
        public VolumeBlockSizeEnum? BlockSize { get; set; }

        /// <summary>
        /// Unique WWN of the volume.
        /// </summary>
        /// <value>Unique WWN of the volume.</value>

        [DataMember(Name="wwn")]
        public string Wwn { get; set; }

        /// <summary>
        /// Indicates whether the volume is read-only.
        /// </summary>
        /// <value>Indicates whether the volume is read-only.</value>

        [DataMember(Name="is_read_only")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets MigrationState
        /// </summary>

        [DataMember(Name="migration_state")]
        public ImportStatusEnum? MigrationState { get; set; }

        /// <summary>
        /// Volume import criteria. If the value is not Ready, the volume is not importable.  
        /// </summary>
        /// <value>Volume import criteria. If the value is not Ready, the volume is not importable.  </value>

        [DataMember(Name="importable_criteria")]
        public VolumeImportableCriteriaEnum? ImportableCriteria { get; set; }

        /// <summary>
        /// Unique identifiers of the host volumes associated with the volume.
        /// </summary>
        /// <value>Unique identifiers of the host volumes associated with the volume.</value>

        [DataMember(Name="host_volume_ids")]
        public List<string> HostVolumeIds { get; set; }

        /// <summary>
        /// Localized message string corresponding to block_size
        /// </summary>
        /// <value>Localized message string corresponding to block_size</value>

        [DataMember(Name="block_size_l10n")]
        public string BlockSizeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to migration_state
        /// </summary>
        /// <value>Localized message string corresponding to migration_state</value>

        [DataMember(Name="migration_state_l10n")]
        public string MigrationStateL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to importable_criteria
        /// </summary>
        /// <value>Localized message string corresponding to importable_criteria</value>

        [DataMember(Name="importable_criteria_l10n")]
        public string ImportableCriteriaL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of import_psgroup_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of import_psgroup_id attribute.</value>

        [DataMember(Name="import_psgroup")]
        public ImportPsgroupInstance ImportPsgroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportPsgroupVolumeInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsOnline: ").Append(IsOnline).Append("\n");
            sb.Append("  ImportPsgroupId: ").Append(ImportPsgroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  BlockSize: ").Append(BlockSize).Append("\n");
            sb.Append("  Wwn: ").Append(Wwn).Append("\n");
            sb.Append("  IsReadOnly: ").Append(IsReadOnly).Append("\n");
            sb.Append("  MigrationState: ").Append(MigrationState).Append("\n");
            sb.Append("  ImportableCriteria: ").Append(ImportableCriteria).Append("\n");
            sb.Append("  HostVolumeIds: ").Append(HostVolumeIds).Append("\n");
            sb.Append("  BlockSizeL10n: ").Append(BlockSizeL10n).Append("\n");
            sb.Append("  MigrationStateL10n: ").Append(MigrationStateL10n).Append("\n");
            sb.Append("  ImportableCriteriaL10n: ").Append(ImportableCriteriaL10n).Append("\n");
            sb.Append("  ImportPsgroup: ").Append(ImportPsgroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportPsgroupVolumeInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportPsgroupVolumeInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportPsgroupVolumeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportPsgroupVolumeInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsOnline == other.IsOnline ||
                    IsOnline != null &&
                    IsOnline.Equals(other.IsOnline)
                ) && 
                (
                    ImportPsgroupId == other.ImportPsgroupId ||
                    ImportPsgroupId != null &&
                    ImportPsgroupId.Equals(other.ImportPsgroupId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    BlockSize == other.BlockSize ||
                    BlockSize != null &&
                    BlockSize.Equals(other.BlockSize)
                ) && 
                (
                    Wwn == other.Wwn ||
                    Wwn != null &&
                    Wwn.Equals(other.Wwn)
                ) && 
                (
                    IsReadOnly == other.IsReadOnly ||
                    IsReadOnly != null &&
                    IsReadOnly.Equals(other.IsReadOnly)
                ) && 
                (
                    MigrationState == other.MigrationState ||
                    MigrationState != null &&
                    MigrationState.Equals(other.MigrationState)
                ) && 
                (
                    ImportableCriteria == other.ImportableCriteria ||
                    ImportableCriteria != null &&
                    ImportableCriteria.Equals(other.ImportableCriteria)
                ) && 
                (
                    HostVolumeIds == other.HostVolumeIds ||
                    HostVolumeIds != null &&
                    HostVolumeIds.SequenceEqual(other.HostVolumeIds)
                ) && 
                (
                    BlockSizeL10n == other.BlockSizeL10n ||
                    BlockSizeL10n != null &&
                    BlockSizeL10n.Equals(other.BlockSizeL10n)
                ) && 
                (
                    MigrationStateL10n == other.MigrationStateL10n ||
                    MigrationStateL10n != null &&
                    MigrationStateL10n.Equals(other.MigrationStateL10n)
                ) && 
                (
                    ImportableCriteriaL10n == other.ImportableCriteriaL10n ||
                    ImportableCriteriaL10n != null &&
                    ImportableCriteriaL10n.Equals(other.ImportableCriteriaL10n)
                ) && 
                (
                    ImportPsgroup == other.ImportPsgroup ||
                    ImportPsgroup != null &&
                    ImportPsgroup.Equals(other.ImportPsgroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IsOnline != null)
                    hashCode = hashCode * 59 + IsOnline.GetHashCode();
                    if (ImportPsgroupId != null)
                    hashCode = hashCode * 59 + ImportPsgroupId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (BlockSize != null)
                    hashCode = hashCode * 59 + BlockSize.GetHashCode();
                    if (Wwn != null)
                    hashCode = hashCode * 59 + Wwn.GetHashCode();
                    if (IsReadOnly != null)
                    hashCode = hashCode * 59 + IsReadOnly.GetHashCode();
                    if (MigrationState != null)
                    hashCode = hashCode * 59 + MigrationState.GetHashCode();
                    if (ImportableCriteria != null)
                    hashCode = hashCode * 59 + ImportableCriteria.GetHashCode();
                    if (HostVolumeIds != null)
                    hashCode = hashCode * 59 + HostVolumeIds.GetHashCode();
                    if (BlockSizeL10n != null)
                    hashCode = hashCode * 59 + BlockSizeL10n.GetHashCode();
                    if (MigrationStateL10n != null)
                    hashCode = hashCode * 59 + MigrationStateL10n.GetHashCode();
                    if (ImportableCriteriaL10n != null)
                    hashCode = hashCode * 59 + ImportableCriteriaL10n.GetHashCode();
                    if (ImportPsgroup != null)
                    hashCode = hashCode * 59 + ImportPsgroup.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportPsgroupVolumeInstance left, ImportPsgroupVolumeInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportPsgroupVolumeInstance left, ImportPsgroupVolumeInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
