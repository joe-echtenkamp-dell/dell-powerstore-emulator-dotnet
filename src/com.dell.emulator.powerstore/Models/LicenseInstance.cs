/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Software license information for the cluster. Values was added in 3.5.0.0: license_type.
    /// </summary>
    [DataContract]
    public partial class LicenseInstance : IEquatable<LicenseInstance>
    { 
        /// <summary>
        /// Unique ididentifier of the cluster license.
        /// </summary>
        /// <value>Unique ididentifier of the cluster license.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Whether or not the cluster currently has a valid license.
        /// </summary>
        /// <value>Whether or not the cluster currently has a valid license.</value>

        [DataMember(Name="is_licensed")]
        public bool? IsLicensed { get; set; }

        /// <summary>
        /// If not currently licensed, the date the trial period expires. If the trial period expires, new provisioning operations will not be allowed. 
        /// </summary>
        /// <value>If not currently licensed, the date the trial period expires. If the trial period expires, new provisioning operations will not be allowed. </value>

        [DataMember(Name="trial_expiration_timestamp")]
        public DateTime? TrialExpirationTimestamp { get; set; }

        /// <summary>
        /// The content of the license activation file to send to the Dell Software Licensing Central to retrieve the software license for the cluster. 
        /// </summary>
        /// <value>The content of the license activation file to send to the Dell Software Licensing Central to retrieve the software license for the cluster. </value>

        [DataMember(Name="activation_file_content")]
        public string ActivationFileContent { get; set; }

        /// <summary>
        ///  Was added in version 3.5.0.0.
        /// </summary>
        /// <value> Was added in version 3.5.0.0.</value>

        [DataMember(Name="license_type")]
        public LicenseTypeEnum? LicenseType { get; set; }

        /// <summary>
        /// Localized message string corresponding to license_type Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to license_type Was added in version 3.5.0.0.</value>

        [DataMember(Name="license_type_l10n")]
        public string LicenseTypeL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsLicensed: ").Append(IsLicensed).Append("\n");
            sb.Append("  TrialExpirationTimestamp: ").Append(TrialExpirationTimestamp).Append("\n");
            sb.Append("  ActivationFileContent: ").Append(ActivationFileContent).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  LicenseTypeL10n: ").Append(LicenseTypeL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LicenseInstance)obj);
        }

        /// <summary>
        /// Returns true if LicenseInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of LicenseInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsLicensed == other.IsLicensed ||
                    IsLicensed != null &&
                    IsLicensed.Equals(other.IsLicensed)
                ) && 
                (
                    TrialExpirationTimestamp == other.TrialExpirationTimestamp ||
                    TrialExpirationTimestamp != null &&
                    TrialExpirationTimestamp.Equals(other.TrialExpirationTimestamp)
                ) && 
                (
                    ActivationFileContent == other.ActivationFileContent ||
                    ActivationFileContent != null &&
                    ActivationFileContent.Equals(other.ActivationFileContent)
                ) && 
                (
                    LicenseType == other.LicenseType ||
                    LicenseType != null &&
                    LicenseType.Equals(other.LicenseType)
                ) && 
                (
                    LicenseTypeL10n == other.LicenseTypeL10n ||
                    LicenseTypeL10n != null &&
                    LicenseTypeL10n.Equals(other.LicenseTypeL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IsLicensed != null)
                    hashCode = hashCode * 59 + IsLicensed.GetHashCode();
                    if (TrialExpirationTimestamp != null)
                    hashCode = hashCode * 59 + TrialExpirationTimestamp.GetHashCode();
                    if (ActivationFileContent != null)
                    hashCode = hashCode * 59 + ActivationFileContent.GetHashCode();
                    if (LicenseType != null)
                    hashCode = hashCode * 59 + LicenseType.GetHashCode();
                    if (LicenseTypeL10n != null)
                    hashCode = hashCode * 59 + LicenseTypeL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LicenseInstance left, LicenseInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LicenseInstance left, LicenseInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
