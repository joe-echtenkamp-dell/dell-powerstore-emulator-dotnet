/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Protection data associated with a resource.  Filtering on the fields of this embedded resource is not supported.
    /// </summary>
    [DataContract]
    public partial class ProtectionDataInstance : IEquatable<ProtectionDataInstance>
    { 
        /// <summary>
        /// Unique identifier of the snapshot rule that created the snapshot.
        /// </summary>
        /// <value>Unique identifier of the snapshot rule that created the snapshot.</value>

        [DataMember(Name="created_by_rule_id")]
        public string CreatedByRuleId { get; set; }

        /// <summary>
        /// The name of the rule that created the snapshot. This value will not change if the name of the rule changes after creating the snapshot. 
        /// </summary>
        /// <value>The name of the rule that created the snapshot. This value will not change if the name of the rule changes after creating the snapshot. </value>

        [DataMember(Name="created_by_rule_name")]
        public string CreatedByRuleName { get; set; }

        /// <summary>
        /// StorageCreatorTypeEnum
        /// </summary>
        /// <value>StorageCreatorTypeEnum</value>

        [DataMember(Name="creator_type")]
        public StorageCreatorTypeEnum? CreatorType { get; set; }

        /// <summary>
        /// Date when the snapshot can be automatically purged.
        /// </summary>
        /// <value>Date when the snapshot can be automatically purged.</value>

        [DataMember(Name="expiration_timestamp")]
        public DateTime? ExpirationTimestamp { get; set; }

        /// <summary>
        /// The time at which the resource was sourced from the resource identified by source_id. 
        /// </summary>
        /// <value>The time at which the resource was sourced from the resource identified by source_id. </value>

        [DataMember(Name="source_timestamp")]
        public DateTime? SourceTimestamp { get; set; }

        /// <summary>
        /// Family identifier of the resource. This is the identifier of the primary object at the root of the family tree. For a primary resource this will be the same as the unique identifier of the object. For snapshots and clone resources it will be set to the source object&#39;s family identifier. 
        /// </summary>
        /// <value>Family identifier of the resource. This is the identifier of the primary object at the root of the family tree. For a primary resource this will be the same as the unique identifier of the object. For snapshots and clone resources it will be set to the source object&#39;s family identifier. </value>

        [DataMember(Name="family_id")]
        public string FamilyId { get; set; }

        /// <summary>
        /// Unique identifier of the resource from which the content has been sourced. Data is sourced from another resource when a snapshot or clone is created, or when a refresh or restore occurs. 
        /// </summary>
        /// <value>Unique identifier of the resource from which the content has been sourced. Data is sourced from another resource when a snapshot or clone is created, or when a refresh or restore occurs. </value>

        [DataMember(Name="source_id")]
        public string SourceId { get; set; }

        /// <summary>
        /// Unique identifier of the resource from which a snapshot or clone resource is created. The parent_id is set when a resource is created and will only change if its parent resource is deleted. When a resource is deleted, its children get reparented to the parent of the deleted resource. If the deleted parent is of type Primary, the parent_id of the child resources will be set to null. 
        /// </summary>
        /// <value>Unique identifier of the resource from which a snapshot or clone resource is created. The parent_id is set when a resource is created and will only change if its parent resource is deleted. When a resource is deleted, its children get reparented to the parent of the deleted resource. If the deleted parent is of type Primary, the parent_id of the child resources will be set to null. </value>

        [DataMember(Name="parent_id")]
        public string ParentId { get; set; }

        /// <summary>
        /// Used for tracking replicated copies of a snapshot set.
        /// </summary>
        /// <value>Used for tracking replicated copies of a snapshot set.</value>

        [DataMember(Name="copy_signature")]
        public string CopySignature { get; set; }

        /// <summary>
        /// A boolean flag that indicates whether the snapshot is application consistent. Only App Sync can create application consistent snapshots. 
        /// </summary>
        /// <value>A boolean flag that indicates whether the snapshot is application consistent. Only App Sync can create application consistent snapshots. </value>

        [DataMember(Name="is_app_consistent")]
        public bool? IsAppConsistent { get; set; }

        /// <summary>
        /// A boolean flag indicating whether the snapshot is a secure snapshot. Secure snapshots cannot be deleted until expiration. Expiration timestamp can only be extended. This attribute is only applicable to block volume and volume group snapshots.  Was added in version 3.5.0.0.
        /// </summary>
        /// <value>A boolean flag indicating whether the snapshot is a secure snapshot. Secure snapshots cannot be deleted until expiration. Expiration timestamp can only be extended. This attribute is only applicable to block volume and volume group snapshots.  Was added in version 3.5.0.0.</value>

        [DataMember(Name="is_secure")]
        public bool? IsSecure { get; set; }

        /// <summary>
        /// Localized message string corresponding to creator_type
        /// </summary>
        /// <value>Localized message string corresponding to creator_type</value>

        [DataMember(Name="creator_type_l10n")]
        public string CreatorTypeL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProtectionDataInstance {\n");
            sb.Append("  CreatedByRuleId: ").Append(CreatedByRuleId).Append("\n");
            sb.Append("  CreatedByRuleName: ").Append(CreatedByRuleName).Append("\n");
            sb.Append("  CreatorType: ").Append(CreatorType).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  SourceTimestamp: ").Append(SourceTimestamp).Append("\n");
            sb.Append("  FamilyId: ").Append(FamilyId).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  CopySignature: ").Append(CopySignature).Append("\n");
            sb.Append("  IsAppConsistent: ").Append(IsAppConsistent).Append("\n");
            sb.Append("  IsSecure: ").Append(IsSecure).Append("\n");
            sb.Append("  CreatorTypeL10n: ").Append(CreatorTypeL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProtectionDataInstance)obj);
        }

        /// <summary>
        /// Returns true if ProtectionDataInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ProtectionDataInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProtectionDataInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreatedByRuleId == other.CreatedByRuleId ||
                    CreatedByRuleId != null &&
                    CreatedByRuleId.Equals(other.CreatedByRuleId)
                ) && 
                (
                    CreatedByRuleName == other.CreatedByRuleName ||
                    CreatedByRuleName != null &&
                    CreatedByRuleName.Equals(other.CreatedByRuleName)
                ) && 
                (
                    CreatorType == other.CreatorType ||
                    CreatorType != null &&
                    CreatorType.Equals(other.CreatorType)
                ) && 
                (
                    ExpirationTimestamp == other.ExpirationTimestamp ||
                    ExpirationTimestamp != null &&
                    ExpirationTimestamp.Equals(other.ExpirationTimestamp)
                ) && 
                (
                    SourceTimestamp == other.SourceTimestamp ||
                    SourceTimestamp != null &&
                    SourceTimestamp.Equals(other.SourceTimestamp)
                ) && 
                (
                    FamilyId == other.FamilyId ||
                    FamilyId != null &&
                    FamilyId.Equals(other.FamilyId)
                ) && 
                (
                    SourceId == other.SourceId ||
                    SourceId != null &&
                    SourceId.Equals(other.SourceId)
                ) && 
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    CopySignature == other.CopySignature ||
                    CopySignature != null &&
                    CopySignature.Equals(other.CopySignature)
                ) && 
                (
                    IsAppConsistent == other.IsAppConsistent ||
                    IsAppConsistent != null &&
                    IsAppConsistent.Equals(other.IsAppConsistent)
                ) && 
                (
                    IsSecure == other.IsSecure ||
                    IsSecure != null &&
                    IsSecure.Equals(other.IsSecure)
                ) && 
                (
                    CreatorTypeL10n == other.CreatorTypeL10n ||
                    CreatorTypeL10n != null &&
                    CreatorTypeL10n.Equals(other.CreatorTypeL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreatedByRuleId != null)
                    hashCode = hashCode * 59 + CreatedByRuleId.GetHashCode();
                    if (CreatedByRuleName != null)
                    hashCode = hashCode * 59 + CreatedByRuleName.GetHashCode();
                    if (CreatorType != null)
                    hashCode = hashCode * 59 + CreatorType.GetHashCode();
                    if (ExpirationTimestamp != null)
                    hashCode = hashCode * 59 + ExpirationTimestamp.GetHashCode();
                    if (SourceTimestamp != null)
                    hashCode = hashCode * 59 + SourceTimestamp.GetHashCode();
                    if (FamilyId != null)
                    hashCode = hashCode * 59 + FamilyId.GetHashCode();
                    if (SourceId != null)
                    hashCode = hashCode * 59 + SourceId.GetHashCode();
                    if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (CopySignature != null)
                    hashCode = hashCode * 59 + CopySignature.GetHashCode();
                    if (IsAppConsistent != null)
                    hashCode = hashCode * 59 + IsAppConsistent.GetHashCode();
                    if (IsSecure != null)
                    hashCode = hashCode * 59 + IsSecure.GetHashCode();
                    if (CreatorTypeL10n != null)
                    hashCode = hashCode * 59 + CreatorTypeL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProtectionDataInstance left, ProtectionDataInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProtectionDataInstance left, ProtectionDataInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
