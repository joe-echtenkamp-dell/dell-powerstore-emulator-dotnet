/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A migration session. This resource type has queriable associations from virtual_volume, volume, volume_group, replication_session
    /// </summary>
    [DataContract]
    public partial class MigrationSessionInstance : IEquatable<MigrationSessionInstance>
    { 
        /// <summary>
        /// Unique identifier of the migration session instance.
        /// </summary>
        /// <value>Unique identifier of the migration session instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// User-specified friendly name of the migration session instance.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>User-specified friendly name of the migration session instance.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>

        [DataMember(Name="resource_type")]
        public MigrationResourceTypeEnum? ResourceType { get; set; }

        /// <summary>
        /// Unique identifier of the source appliance instance.
        /// </summary>
        /// <value>Unique identifier of the source appliance instance.</value>

        [DataMember(Name="source_appliance_id")]
        public string SourceApplianceId { get; set; }

        /// <summary>
        /// Family identifier designating the storage resource or resources being migrated. For volume or virtual_volume migrations, the family is moved together because they share data among the primary object, snapshots, and clones. For volume_group migration, the family of each volume in the group is moved because it is a grouping of volumes. 
        /// </summary>
        /// <value>Family identifier designating the storage resource or resources being migrated. For volume or virtual_volume migrations, the family is moved together because they share data among the primary object, snapshots, and clones. For volume_group migration, the family of each volume in the group is moved because it is a grouping of volumes. </value>

        [DataMember(Name="family_id")]
        public string FamilyId { get; set; }

        /// <summary>
        /// Unique identifier of the destination appliance instance.
        /// </summary>
        /// <value>Unique identifier of the destination appliance instance.</value>

        [DataMember(Name="destination_appliance_id")]
        public string DestinationApplianceId { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public MigrationSessionStateEnum? State { get; set; }

        /// <summary>
        /// Time when the migration session was created.
        /// </summary>
        /// <value>Time when the migration session was created.</value>

        [DataMember(Name="created_timestamp")]
        public DateTime? CreatedTimestamp { get; set; }

        /// <summary>
        /// Time of the last successful sync operation.
        /// </summary>
        /// <value>Time of the last successful sync operation.</value>

        [DataMember(Name="last_sync_timestamp")]
        public DateTime? LastSyncTimestamp { get; set; }

        /// <summary>
        /// Transfer rate of the current sync operation in bytes/sec.
        /// </summary>
        /// <value>Transfer rate of the current sync operation in bytes/sec.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="current_transfer_rate")]
        public long? CurrentTransferRate { get; set; }

        /// <summary>
        /// Progress percentage of the current sync operation.
        /// </summary>
        /// <value>Progress percentage of the current sync operation.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="progress_percentage")]
        public int? ProgressPercentage { get; set; }

        /// <summary>
        /// Estimated completion time of the current sync operation.
        /// </summary>
        /// <value>Estimated completion time of the current sync operation.</value>

        [DataMember(Name="estimated_completion_timestamp")]
        public DateTime? EstimatedCompletionTimestamp { get; set; }

        /// <summary>
        /// Localized message string corresponding to resource_type
        /// </summary>
        /// <value>Localized message string corresponding to resource_type</value>

        [DataMember(Name="resource_type_l10n")]
        public string ResourceTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to state
        /// </summary>
        /// <value>Localized message string corresponding to state</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type virtual_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type virtual_volume association.</value>

        [DataMember(Name="virtual_volumes")]
        public List<VirtualVolumeInstance> VirtualVolumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type volume association.</value>

        [DataMember(Name="volumes")]
        public List<VolumeInstance> Volumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type volume_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type volume_group association.</value>

        [DataMember(Name="volume_groups")]
        public List<VolumeGroupInstance> VolumeGroups { get; set; }

        /// <summary>
        /// This is the inverse of the resource type replication_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type replication_session association.</value>

        [DataMember(Name="replication_sessions")]
        public List<ReplicationSessionInstance> ReplicationSessions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MigrationSessionInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  SourceApplianceId: ").Append(SourceApplianceId).Append("\n");
            sb.Append("  FamilyId: ").Append(FamilyId).Append("\n");
            sb.Append("  DestinationApplianceId: ").Append(DestinationApplianceId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CreatedTimestamp: ").Append(CreatedTimestamp).Append("\n");
            sb.Append("  LastSyncTimestamp: ").Append(LastSyncTimestamp).Append("\n");
            sb.Append("  CurrentTransferRate: ").Append(CurrentTransferRate).Append("\n");
            sb.Append("  ProgressPercentage: ").Append(ProgressPercentage).Append("\n");
            sb.Append("  EstimatedCompletionTimestamp: ").Append(EstimatedCompletionTimestamp).Append("\n");
            sb.Append("  ResourceTypeL10n: ").Append(ResourceTypeL10n).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("  VirtualVolumes: ").Append(VirtualVolumes).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("  VolumeGroups: ").Append(VolumeGroups).Append("\n");
            sb.Append("  ReplicationSessions: ").Append(ReplicationSessions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MigrationSessionInstance)obj);
        }

        /// <summary>
        /// Returns true if MigrationSessionInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of MigrationSessionInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MigrationSessionInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    SourceApplianceId == other.SourceApplianceId ||
                    SourceApplianceId != null &&
                    SourceApplianceId.Equals(other.SourceApplianceId)
                ) && 
                (
                    FamilyId == other.FamilyId ||
                    FamilyId != null &&
                    FamilyId.Equals(other.FamilyId)
                ) && 
                (
                    DestinationApplianceId == other.DestinationApplianceId ||
                    DestinationApplianceId != null &&
                    DestinationApplianceId.Equals(other.DestinationApplianceId)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    CreatedTimestamp == other.CreatedTimestamp ||
                    CreatedTimestamp != null &&
                    CreatedTimestamp.Equals(other.CreatedTimestamp)
                ) && 
                (
                    LastSyncTimestamp == other.LastSyncTimestamp ||
                    LastSyncTimestamp != null &&
                    LastSyncTimestamp.Equals(other.LastSyncTimestamp)
                ) && 
                (
                    CurrentTransferRate == other.CurrentTransferRate ||
                    CurrentTransferRate != null &&
                    CurrentTransferRate.Equals(other.CurrentTransferRate)
                ) && 
                (
                    ProgressPercentage == other.ProgressPercentage ||
                    ProgressPercentage != null &&
                    ProgressPercentage.Equals(other.ProgressPercentage)
                ) && 
                (
                    EstimatedCompletionTimestamp == other.EstimatedCompletionTimestamp ||
                    EstimatedCompletionTimestamp != null &&
                    EstimatedCompletionTimestamp.Equals(other.EstimatedCompletionTimestamp)
                ) && 
                (
                    ResourceTypeL10n == other.ResourceTypeL10n ||
                    ResourceTypeL10n != null &&
                    ResourceTypeL10n.Equals(other.ResourceTypeL10n)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                ) && 
                (
                    VirtualVolumes == other.VirtualVolumes ||
                    VirtualVolumes != null &&
                    VirtualVolumes.SequenceEqual(other.VirtualVolumes)
                ) && 
                (
                    Volumes == other.Volumes ||
                    Volumes != null &&
                    Volumes.SequenceEqual(other.Volumes)
                ) && 
                (
                    VolumeGroups == other.VolumeGroups ||
                    VolumeGroups != null &&
                    VolumeGroups.SequenceEqual(other.VolumeGroups)
                ) && 
                (
                    ReplicationSessions == other.ReplicationSessions ||
                    ReplicationSessions != null &&
                    ReplicationSessions.SequenceEqual(other.ReplicationSessions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (SourceApplianceId != null)
                    hashCode = hashCode * 59 + SourceApplianceId.GetHashCode();
                    if (FamilyId != null)
                    hashCode = hashCode * 59 + FamilyId.GetHashCode();
                    if (DestinationApplianceId != null)
                    hashCode = hashCode * 59 + DestinationApplianceId.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (CreatedTimestamp != null)
                    hashCode = hashCode * 59 + CreatedTimestamp.GetHashCode();
                    if (LastSyncTimestamp != null)
                    hashCode = hashCode * 59 + LastSyncTimestamp.GetHashCode();
                    if (CurrentTransferRate != null)
                    hashCode = hashCode * 59 + CurrentTransferRate.GetHashCode();
                    if (ProgressPercentage != null)
                    hashCode = hashCode * 59 + ProgressPercentage.GetHashCode();
                    if (EstimatedCompletionTimestamp != null)
                    hashCode = hashCode * 59 + EstimatedCompletionTimestamp.GetHashCode();
                    if (ResourceTypeL10n != null)
                    hashCode = hashCode * 59 + ResourceTypeL10n.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                    if (VirtualVolumes != null)
                    hashCode = hashCode * 59 + VirtualVolumes.GetHashCode();
                    if (Volumes != null)
                    hashCode = hashCode * 59 + Volumes.GetHashCode();
                    if (VolumeGroups != null)
                    hashCode = hashCode * 59 + VolumeGroups.GetHashCode();
                    if (ReplicationSessions != null)
                    hashCode = hashCode * 59 + ReplicationSessions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MigrationSessionInstance left, MigrationSessionInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MigrationSessionInstance left, MigrationSessionInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
