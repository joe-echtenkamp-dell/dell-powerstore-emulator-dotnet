/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
        /// <summary>
        /// The NVMe-oF specification defines a Discovery mechanism that a host can use to determine the NVMe subsystems that expose namespaces available to the hose. A CDC is a Centralized Discovery Controller. A discovery controller reports discovery information from registered Direct Discovery controllers (DDC) and Hosts. CDC is one of the StFS services, located on the Fabric to which the NVMe Clients (NVMe Subsystems/DDCs and Hosts) are registered. A DDC is a Direct Discovery Controller, located on the Subsystem Port - Storage Interface. A Host may use CDC (if detected) or DDC (if CDC is not detected) to determine the IO NVMe subsystem ports. This only applicable to networks that have NVMe_TCP among their purposes. * Auto_Discovery_CDC - Automatically discover the IP Address of the Centralized Discovery Controller (CDC) using mDNS/DNS-SD. If a CDC is found, the NVMe/TCP Interface will be registered with it. * Manual_CDC - the CDC IP address is manually set. If a CDC IP address is set, the NVMe/TCP Interface will be registered with it. * Advertise_DDC - Direct Discovery Controller IP address is advertised using mDNS/DNS-SD and can be discovered by external hosts. * Auto_Discovery_Disabled - mDNS/DNS-SD is disabled, no attempt will be made to discover CDC, no attempt will be made to register with CDC if one exists, nor will DDC IP address be advertised.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>The NVMe-oF specification defines a Discovery mechanism that a host can use to determine the NVMe subsystems that expose namespaces available to the hose. A CDC is a Centralized Discovery Controller. A discovery controller reports discovery information from registered Direct Discovery controllers (DDC) and Hosts. CDC is one of the StFS services, located on the Fabric to which the NVMe Clients (NVMe Subsystems/DDCs and Hosts) are registered. A DDC is a Direct Discovery Controller, located on the Subsystem Port - Storage Interface. A Host may use CDC (if detected) or DDC (if CDC is not detected) to determine the IO NVMe subsystem ports. This only applicable to networks that have NVMe_TCP among their purposes. * Auto_Discovery_CDC - Automatically discover the IP Address of the Centralized Discovery Controller (CDC) using mDNS/DNS-SD. If a CDC is found, the NVMe/TCP Interface will be registered with it. * Manual_CDC - the CDC IP address is manually set. If a CDC IP address is set, the NVMe/TCP Interface will be registered with it. * Advertise_DDC - Direct Discovery Controller IP address is advertised using mDNS/DNS-SD and can be discovered by external hosts. * Auto_Discovery_Disabled - mDNS/DNS-SD is disabled, no attempt will be made to discover CDC, no attempt will be made to register with CDC if one exists, nor will DDC IP address be advertised.  Was added in version 3.0.0.0.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NVMeDiscoveryModeEnum
        {
            
            /// <summary>
            /// Enum AutoDiscoveryCDCEnum for Auto_Discovery_CDC
            /// </summary>
            [EnumMember(Value = "Auto_Discovery_CDC")]
            AutoDiscoveryCDCEnum = 1,
            
            /// <summary>
            /// Enum ManualCDCEnum for Manual_CDC
            /// </summary>
            [EnumMember(Value = "Manual_CDC")]
            ManualCDCEnum = 2,
            
            /// <summary>
            /// Enum AdvertiseDDCEnum for Advertise_DDC
            /// </summary>
            [EnumMember(Value = "Advertise_DDC")]
            AdvertiseDDCEnum = 3,
            
            /// <summary>
            /// Enum AutoDiscoveryDisabledEnum for Auto_Discovery_Disabled
            /// </summary>
            [EnumMember(Value = "Auto_Discovery_Disabled")]
            AutoDiscoveryDisabledEnum = 4
        }
}
