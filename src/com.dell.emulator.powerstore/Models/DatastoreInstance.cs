/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Properties of a datastore. Was added in version 3.0.0.0. This resource type has queriable associations from vcenter, storage_container, nfs_export, virtual_machine, volume, vsphere_host
    /// </summary>
    [DataContract]
    public partial class DatastoreInstance : IEquatable<DatastoreInstance>
    { 
        /// <summary>
        /// Unique identifier of the datastore instance.
        /// </summary>
        /// <value>Unique identifier of the datastore instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// UUID instance of the datastore in vCenter.
        /// </summary>
        /// <value>UUID instance of the datastore in vCenter.</value>

        [DataMember(Name="instance_uuid")]
        public string InstanceUuid { get; set; }

        /// <summary>
        /// User-assigned name of the datastore in vCenter.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>User-assigned name of the datastore in vCenter.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public DatastoreTypeEnum? Type { get; set; }

        /// <summary>
        /// Unique identifier of the datastore in vCenter.
        /// </summary>
        /// <value>Unique identifier of the datastore in vCenter.</value>

        [DataMember(Name="vsphere_object_id")]
        public string VsphereObjectId { get; set; }

        /// <summary>
        /// Unique identifier of a vCenter instance.
        /// </summary>
        /// <value>Unique identifier of a vCenter instance.</value>

        [DataMember(Name="vcenter_id")]
        public string VcenterId { get; set; }

        /// <summary>
        /// Unique identifier of a backing storage_container instance (for vVol type only).
        /// </summary>
        /// <value>Unique identifier of a backing storage_container instance (for vVol type only).</value>

        [DataMember(Name="storage_container_id")]
        public string StorageContainerId { get; set; }

        /// <summary>
        /// Unique identifier of a backing nfs_export instance (for NFS type only).
        /// </summary>
        /// <value>Unique identifier of a backing nfs_export instance (for NFS type only).</value>

        [DataMember(Name="nfs_export_id")]
        public string NfsExportId { get; set; }

        /// <summary>
        /// Localized message string corresponding to type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to type Was added in version 3.0.0.0.</value>

        [DataMember(Name="type_l10n")]
        public string TypeL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of vcenter_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of vcenter_id attribute.</value>

        [DataMember(Name="vcenter")]
        public VcenterInstance Vcenter { get; set; }

        /// <summary>
        /// This is the embeddable reference form of storage_container_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of storage_container_id attribute.</value>

        [DataMember(Name="storage_container")]
        public StorageContainerInstance StorageContainer { get; set; }

        /// <summary>
        /// This is the embeddable reference form of nfs_export_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of nfs_export_id attribute.</value>

        [DataMember(Name="nfs_export")]
        public NfsExportInstance NfsExport { get; set; }

        /// <summary>
        /// List of the virtual_machines that are associated with this datastore.
        /// </summary>
        /// <value>List of the virtual_machines that are associated with this datastore.</value>

        [DataMember(Name="virtual_machines")]
        public List<VirtualMachineInstance> VirtualMachines { get; set; }

        /// <summary>
        /// List of the volumes that are associated with this datastore.
        /// </summary>
        /// <value>List of the volumes that are associated with this datastore.</value>

        [DataMember(Name="volumes")]
        public List<VolumeInstance> Volumes { get; set; }

        /// <summary>
        /// List of the vsphere_hosts that are associated with this datastore.
        /// </summary>
        /// <value>List of the vsphere_hosts that are associated with this datastore.</value>

        [DataMember(Name="vsphere_hosts")]
        public List<VsphereHostInstance> VsphereHosts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatastoreInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstanceUuid: ").Append(InstanceUuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VsphereObjectId: ").Append(VsphereObjectId).Append("\n");
            sb.Append("  VcenterId: ").Append(VcenterId).Append("\n");
            sb.Append("  StorageContainerId: ").Append(StorageContainerId).Append("\n");
            sb.Append("  NfsExportId: ").Append(NfsExportId).Append("\n");
            sb.Append("  TypeL10n: ").Append(TypeL10n).Append("\n");
            sb.Append("  Vcenter: ").Append(Vcenter).Append("\n");
            sb.Append("  StorageContainer: ").Append(StorageContainer).Append("\n");
            sb.Append("  NfsExport: ").Append(NfsExport).Append("\n");
            sb.Append("  VirtualMachines: ").Append(VirtualMachines).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("  VsphereHosts: ").Append(VsphereHosts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DatastoreInstance)obj);
        }

        /// <summary>
        /// Returns true if DatastoreInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of DatastoreInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatastoreInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    InstanceUuid == other.InstanceUuid ||
                    InstanceUuid != null &&
                    InstanceUuid.Equals(other.InstanceUuid)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    VsphereObjectId == other.VsphereObjectId ||
                    VsphereObjectId != null &&
                    VsphereObjectId.Equals(other.VsphereObjectId)
                ) && 
                (
                    VcenterId == other.VcenterId ||
                    VcenterId != null &&
                    VcenterId.Equals(other.VcenterId)
                ) && 
                (
                    StorageContainerId == other.StorageContainerId ||
                    StorageContainerId != null &&
                    StorageContainerId.Equals(other.StorageContainerId)
                ) && 
                (
                    NfsExportId == other.NfsExportId ||
                    NfsExportId != null &&
                    NfsExportId.Equals(other.NfsExportId)
                ) && 
                (
                    TypeL10n == other.TypeL10n ||
                    TypeL10n != null &&
                    TypeL10n.Equals(other.TypeL10n)
                ) && 
                (
                    Vcenter == other.Vcenter ||
                    Vcenter != null &&
                    Vcenter.Equals(other.Vcenter)
                ) && 
                (
                    StorageContainer == other.StorageContainer ||
                    StorageContainer != null &&
                    StorageContainer.Equals(other.StorageContainer)
                ) && 
                (
                    NfsExport == other.NfsExport ||
                    NfsExport != null &&
                    NfsExport.Equals(other.NfsExport)
                ) && 
                (
                    VirtualMachines == other.VirtualMachines ||
                    VirtualMachines != null &&
                    VirtualMachines.SequenceEqual(other.VirtualMachines)
                ) && 
                (
                    Volumes == other.Volumes ||
                    Volumes != null &&
                    Volumes.SequenceEqual(other.Volumes)
                ) && 
                (
                    VsphereHosts == other.VsphereHosts ||
                    VsphereHosts != null &&
                    VsphereHosts.SequenceEqual(other.VsphereHosts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (InstanceUuid != null)
                    hashCode = hashCode * 59 + InstanceUuid.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (VsphereObjectId != null)
                    hashCode = hashCode * 59 + VsphereObjectId.GetHashCode();
                    if (VcenterId != null)
                    hashCode = hashCode * 59 + VcenterId.GetHashCode();
                    if (StorageContainerId != null)
                    hashCode = hashCode * 59 + StorageContainerId.GetHashCode();
                    if (NfsExportId != null)
                    hashCode = hashCode * 59 + NfsExportId.GetHashCode();
                    if (TypeL10n != null)
                    hashCode = hashCode * 59 + TypeL10n.GetHashCode();
                    if (Vcenter != null)
                    hashCode = hashCode * 59 + Vcenter.GetHashCode();
                    if (StorageContainer != null)
                    hashCode = hashCode * 59 + StorageContainer.GetHashCode();
                    if (NfsExport != null)
                    hashCode = hashCode * 59 + NfsExport.GetHashCode();
                    if (VirtualMachines != null)
                    hashCode = hashCode * 59 + VirtualMachines.GetHashCode();
                    if (Volumes != null)
                    hashCode = hashCode * 59 + Volumes.GetHashCode();
                    if (VsphereHosts != null)
                    hashCode = hashCode * 59 + VsphereHosts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DatastoreInstance left, DatastoreInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatastoreInstance left, DatastoreInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
