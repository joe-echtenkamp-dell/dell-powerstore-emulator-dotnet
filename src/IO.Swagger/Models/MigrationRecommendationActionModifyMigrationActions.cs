/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MigrationRecommendationActionModifyMigrationActions : IEquatable<MigrationRecommendationActionModifyMigrationActions>
    { 
        /// <summary>
        /// Resource ID of migration action to be modified.
        /// </summary>
        /// <value>Resource ID of migration action to be modified.</value>
        [Required]
        
        [DataMember(Name="resource_id")]
        public string ResourceId { get; set; }

        /// <summary>
        /// New dst appliance ID for this migration action.
        /// </summary>
        /// <value>New dst appliance ID for this migration action.</value>
        [Required]
        
        [DataMember(Name="dst_appliance_id")]
        public string DstApplianceId { get; set; }

        /// <summary>
        /// New value of the active flag for this migration action. Deactivating an action keeps it in the recommendation, and it can be set active again, until the sessions are created. Inactive actions are skipped when the sessions are created and cannot be set to active after that point.
        /// </summary>
        /// <value>New value of the active flag for this migration action. Deactivating an action keeps it in the recommendation, and it can be set active again, until the sessions are created. Inactive actions are skipped when the sessions are created and cannot be set to active after that point.</value>
        [Required]
        
        [DataMember(Name="active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MigrationRecommendationActionModifyMigrationActions {\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  DstApplianceId: ").Append(DstApplianceId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MigrationRecommendationActionModifyMigrationActions)obj);
        }

        /// <summary>
        /// Returns true if MigrationRecommendationActionModifyMigrationActions instances are equal
        /// </summary>
        /// <param name="other">Instance of MigrationRecommendationActionModifyMigrationActions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MigrationRecommendationActionModifyMigrationActions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ResourceId == other.ResourceId ||
                    ResourceId != null &&
                    ResourceId.Equals(other.ResourceId)
                ) && 
                (
                    DstApplianceId == other.DstApplianceId ||
                    DstApplianceId != null &&
                    DstApplianceId.Equals(other.DstApplianceId)
                ) && 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ResourceId != null)
                    hashCode = hashCode * 59 + ResourceId.GetHashCode();
                    if (DstApplianceId != null)
                    hashCode = hashCode * 59 + DstApplianceId.GetHashCode();
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MigrationRecommendationActionModifyMigrationActions left, MigrationRecommendationActionModifyMigrationActions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MigrationRecommendationActionModifyMigrationActions left, MigrationRecommendationActionModifyMigrationActions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
