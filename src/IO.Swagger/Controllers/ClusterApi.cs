/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ClusterApiController : ControllerBase
    { 
        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query the details about the cluster.  This resource type collection query does not support filtering, sorting or pagination.</remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of cluster instance objects</response>
        [HttpGet]
        [Route("/api/rest/cluster")]
        [ValidateModelState]
        [SwaggerOperation("ClusterGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ClusterInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<ClusterInstance>), description: "Partial content of cluster instance objects")]
        public virtual IActionResult ClusterGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ClusterInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<ClusterInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ClusterInstance>>(exampleJson)
            : default(List<ClusterInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Discover FC Targets
        /// </summary>
        /// <remarks>Discover non-PowerStore FC targets accessible from the dual mode FC ports of any appliance.  Was added in version 3.5.0.0.</remarks>
        /// <param name="id">Unique identifier of the cluster.  Was added in version 3.5.0.0.</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Invalid Request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/cluster/{id}/discover_fc_targets")]
        [ValidateModelState]
        [SwaggerOperation("ClusterIdDiscoverFcTargetsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClusterDiscoverFcTargetsResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult ClusterIdDiscoverFcTargetsPost([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClusterDiscoverFcTargetsResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ClusterDiscoverFcTargetsResponse>(exampleJson)
            : default(ClusterDiscoverFcTargetsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Forecast capacity usage for the cluster.</remarks>
        /// <param name="id">Unique id of the cluster.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/cluster/{id}/forecast")]
        [ValidateModelState]
        [SwaggerOperation("ClusterIdForecastPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ClusterForecastResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult ClusterIdForecastPost([FromRoute][Required]string id, [FromBody]ClusterForecast body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ClusterForecastResponse>));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ClusterForecastResponse>>(exampleJson)
            : default(List<ClusterForecastResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query details about the cluster.</remarks>
        /// <param name="id">Unique identifier of the cluster.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/cluster/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ClusterIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClusterInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult ClusterIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClusterInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ClusterInstance>(exampleJson)
            : default(ClusterInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify
        /// </summary>
        /// <remarks>Update properties of the cluster.</remarks>
        /// <param name="id">Unique identifier of the cluster.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPatch]
        [Route("/api/rest/cluster/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ClusterIdPatch")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult ClusterIdPatch([FromRoute][Required]string id, [FromBody]ClusterModify body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns information about when the cluster is forecast to reach 100% capacity usage.</remarks>
        /// <param name="id">Unique id of the cluster</param>
        /// <param name="body"></param>
        /// <response code="200">Successful operation.</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/cluster/{id}/time_to_full")]
        [ValidateModelState]
        [SwaggerOperation("ClusterIdTimeToFullPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClusterTimeToFullResponse), description: "Successful operation.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult ClusterIdTimeToFullPost([FromRoute][Required]string id, [FromBody]ClusterTimeToFull body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClusterTimeToFullResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ClusterTimeToFullResponse>(exampleJson)
            : default(ClusterTimeToFullResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>Create a Power Store or Power Store X Cluster of one or more appliances.  * You can create a cluster of up to 4 appliances.  * Except where explicitly noted, all parameters in **vcenters** object are mandatory when creating a PowerStoreX cluster.  * When creating a multi-appliance cluster, the most capable appliance is chosen as the Primary appliance based on the appliance configuration type.  * All of the appliances must have the 4-Port Card installed to be added into a multi-appliance cluster.  * When creating a multi-appliance cluster, best effort is made to successfully create the cluster. The create operation:     * Fails, if the Primary appliance is not configured successfully.     * Succeeds, if one or more secondary appliances fail to configure.       * Any secondary appliance that is configured successfully will be added to the cluster.       * An alert is generated for any failed secondary appliance. Look for these alerts in the PowerStore Manager. Resolve issues on failed appliances before  adding the appliances to the cluster.  * When creating a cluster asynchronously, wait for ~10 minutes until Job Service is initialized before querying the status of the running job.  Was added in version 2.0.0.0.</remarks>
        /// <param name="body"></param>
        /// <response code="201">Created Was added in version 2.0.0.0.</response>
        /// <response code="400">Invalid Request Was added in version 2.0.0.0.</response>
        /// <response code="422">Operation Failed Was added in version 2.0.0.0.</response>
        [HttpPost]
        [Route("/api/rest/cluster")]
        [ValidateModelState]
        [SwaggerOperation("ClusterPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(CreateResponse), description: "Created Was added in version 2.0.0.0.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ClusterCreateErrorResponse), description: "Invalid Request Was added in version 2.0.0.0.")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed Was added in version 2.0.0.0.")]
        public virtual IActionResult ClusterPost([FromBody]ClusterCreate body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(CreateResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ClusterCreateErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateResponse>(exampleJson)
            : default(CreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Validate Create
        /// </summary>
        /// <remarks>Validate the create cluster configuration for a PowerStore or PowerStore X Cluster of one or more appliances. Success is returned when all the validations have been run. The response shows whether any of the validations detected any issues.  Was added in version 2.0.0.0.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/cluster/validate_create")]
        [ValidateModelState]
        [SwaggerOperation("ClusterValidateCreatePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClusterValidateCreateResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult ClusterValidateCreatePost([FromBody]ClusterValidateCreate body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClusterValidateCreateResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ClusterValidateCreateResponse>(exampleJson)
            : default(ClusterValidateCreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
