/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// vCenter configuration setting during cluster creation. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ClusterCreateVcenters : IEquatable<ClusterCreateVcenters>
    { 
        /// <summary>
        /// IP address of vCenter in IPv4 or IPv6 or hostname format. 
        /// </summary>
        /// <value>IP address of vCenter in IPv4 or IPv6 or hostname format. </value>
        [Required]
        
        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// User name to login to vCenter. 
        /// </summary>
        /// <value>User name to login to vCenter. </value>
        [Required]
        
        [DataMember(Name="username")]
        public string Username { get; set; }

        /// <summary>
        /// Password to login to vCenter. 
        /// </summary>
        /// <value>Password to login to vCenter. </value>
        [Required]
        
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// Whether or not the connection will be secured with the vCenter SSL certificate. 
        /// </summary>
        /// <value>Whether or not the connection will be secured with the vCenter SSL certificate. </value>
        [Required]
        
        [DataMember(Name="is_verify_server_cert")]
        public bool? IsVerifyServerCert { get; set; }

        /// <summary>
        /// VMWare ID of the datacenter. This should be specified when creating PowerStoreX cluster to join an existing datacenter. data_center_name may not also be specified with this.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>VMWare ID of the datacenter. This should be specified when creating PowerStoreX cluster to join an existing datacenter. data_center_name may not also be specified with this.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="data_center_id")]
        public string DataCenterId { get; set; }

        /// <summary>
        /// Name of the data center. This should be specified when creating PowerStoreX cluster in order to create and join a new datacenter in vCenter. data_center_id may not also be specified with this. When data_center_create is false, then an existing datacenter will be used if the name matches, otherwise a new one will be created. 
        /// </summary>
        /// <value>Name of the data center. This should be specified when creating PowerStoreX cluster in order to create and join a new datacenter in vCenter. data_center_id may not also be specified with this. When data_center_create is false, then an existing datacenter will be used if the name matches, otherwise a new one will be created. </value>

        [DataMember(Name="data_center_name")]
        public string DataCenterName { get; set; }

        /// <summary>
        /// Along with data_center_name, indicates an intent to either create or use existing data center by name.  Was added in version 3.0.0.0. Was deprecated in version 3.0.0.0.
        /// </summary>
        /// <value>Along with data_center_name, indicates an intent to either create or use existing data center by name.  Was added in version 3.0.0.0. Was deprecated in version 3.0.0.0.</value>

        [DataMember(Name="data_center_create")]
        public bool? DataCenterCreate { get; set; }

        /// <summary>
        /// ESXi cluster name. The default name is \&quot;Cluster-\&quot; followed by the PowerStore cluster name. This should be specified when creating PowerStore X cluster. 
        /// </summary>
        /// <value>ESXi cluster name. The default name is \&quot;Cluster-\&quot; followed by the PowerStore cluster name. This should be specified when creating PowerStore X cluster. </value>

        [DataMember(Name="esx_cluster_name")]
        public string EsxClusterName { get; set; }

        /// <summary>
        /// Gets or Sets VasaProviderCredentials
        /// </summary>
        [Required]
        
        [DataMember(Name="vasa_provider_credentials")]
        public ClusterCreateVasaProviderCredentials VasaProviderCredentials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClusterCreateVcenters {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  IsVerifyServerCert: ").Append(IsVerifyServerCert).Append("\n");
            sb.Append("  DataCenterId: ").Append(DataCenterId).Append("\n");
            sb.Append("  DataCenterName: ").Append(DataCenterName).Append("\n");
            sb.Append("  DataCenterCreate: ").Append(DataCenterCreate).Append("\n");
            sb.Append("  EsxClusterName: ").Append(EsxClusterName).Append("\n");
            sb.Append("  VasaProviderCredentials: ").Append(VasaProviderCredentials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClusterCreateVcenters)obj);
        }

        /// <summary>
        /// Returns true if ClusterCreateVcenters instances are equal
        /// </summary>
        /// <param name="other">Instance of ClusterCreateVcenters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClusterCreateVcenters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    IsVerifyServerCert == other.IsVerifyServerCert ||
                    IsVerifyServerCert != null &&
                    IsVerifyServerCert.Equals(other.IsVerifyServerCert)
                ) && 
                (
                    DataCenterId == other.DataCenterId ||
                    DataCenterId != null &&
                    DataCenterId.Equals(other.DataCenterId)
                ) && 
                (
                    DataCenterName == other.DataCenterName ||
                    DataCenterName != null &&
                    DataCenterName.Equals(other.DataCenterName)
                ) && 
                (
                    DataCenterCreate == other.DataCenterCreate ||
                    DataCenterCreate != null &&
                    DataCenterCreate.Equals(other.DataCenterCreate)
                ) && 
                (
                    EsxClusterName == other.EsxClusterName ||
                    EsxClusterName != null &&
                    EsxClusterName.Equals(other.EsxClusterName)
                ) && 
                (
                    VasaProviderCredentials == other.VasaProviderCredentials ||
                    VasaProviderCredentials != null &&
                    VasaProviderCredentials.Equals(other.VasaProviderCredentials)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (IsVerifyServerCert != null)
                    hashCode = hashCode * 59 + IsVerifyServerCert.GetHashCode();
                    if (DataCenterId != null)
                    hashCode = hashCode * 59 + DataCenterId.GetHashCode();
                    if (DataCenterName != null)
                    hashCode = hashCode * 59 + DataCenterName.GetHashCode();
                    if (DataCenterCreate != null)
                    hashCode = hashCode * 59 + DataCenterCreate.GetHashCode();
                    if (EsxClusterName != null)
                    hashCode = hashCode * 59 + EsxClusterName.GetHashCode();
                    if (VasaProviderCredentials != null)
                    hashCode = hashCode * 59 + VasaProviderCredentials.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClusterCreateVcenters left, ClusterCreateVcenters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClusterCreateVcenters left, ClusterCreateVcenters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
