/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Modify volume group request.
    /// </summary>
    [DataContract]
    public partial class VolumeGroupModify : IEquatable<VolumeGroupModify>
    { 
        /// <summary>
        /// New name for the volume group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is reserved, uniqueness check is case-insensitive, so the same name in two different cases is not considered unique. 
        /// </summary>
        /// <value>New name for the volume group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is reserved, uniqueness check is case-insensitive, so the same name in two different cases is not considered unique. </value>

        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// New description for the volume group. The description should not have any unprintable characters.  If an empty string is specified, the description will be cleared. 
        /// </summary>
        /// <value>New description for the volume group. The description should not have any unprintable characters.  If an empty string is specified, the description will be cleared. </value>

        [MaxLength(256)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// A boolean flag to indicate whether snapshot sets of the volume group will be write-order consistent.   This parameter is only valid when modifying a primary or a clone volume group. 
        /// </summary>
        /// <value>A boolean flag to indicate whether snapshot sets of the volume group will be write-order consistent.   This parameter is only valid when modifying a primary or a clone volume group. </value>

        [DataMember(Name="is_write_order_consistent")]
        public bool? IsWriteOrderConsistent { get; set; }

        /// <summary>
        /// Unique identifier of the protection policy to assign to a primary or clone volume group.  If an empty string or null is specified, protection policy will be removed from the volume group.  name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;
        /// </summary>
        /// <value>Unique identifier of the protection policy to assign to a primary or clone volume group.  If an empty string or null is specified, protection policy will be removed from the volume group.  name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;</value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Unique identifier of the QoS performance policy to assign to a volume group. If an empty string or null is specified, the QoS performance policy will be removed from the volume group.  name:{name} can be used instead of {id}. For example: &#39;qos_performance_policy_id&#39;:&#39;name:policy_name&#39; Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the QoS performance policy to assign to a volume group. If an empty string or null is specified, the QoS performance policy will be removed from the volume group.  name:{name} can be used instead of {id}. For example: &#39;qos_performance_policy_id&#39;:&#39;name:policy_name&#39; Was added in version 4.0.0.0.</value>

        [DataMember(Name="qos_performance_policy_id")]
        public string QosPerformancePolicyId { get; set; }

        /// <summary>
        /// Time after which the snapshot set can be auto-purged. This parameter is only valid for a snapshot set. Time must be specified in Zulu time zone. Expiration time cannot be prior to current time.  Use a maximum timestamp value to set an expiration to never expire.  If an empty string or null is specified, expiration_timestamp will be cleared for the snapshot set.  Valid format is yyyy-MM-dd&#39;T&#39;HH:mm:ssZ or yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ.  Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Time after which the snapshot set can be auto-purged. This parameter is only valid for a snapshot set. Time must be specified in Zulu time zone. Expiration time cannot be prior to current time.  Use a maximum timestamp value to set an expiration to never expire.  If an empty string or null is specified, expiration_timestamp will be cleared for the snapshot set.  Valid format is yyyy-MM-dd&#39;T&#39;HH:mm:ssZ or yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ.  Was added in version 2.0.0.0.</value>

        [DataMember(Name="expiration_timestamp")]
        public DateTime? ExpirationTimestamp { get; set; }

        /// <summary>
        /// This parameter only applies to snapshots. If true, mark the snapshot as a secure snapshot. An expiration timestamp must also exist or be specified. A secure snapshot can not be unlocked by setting this flag to false.  Was added in version 3.5.0.0.
        /// </summary>
        /// <value>This parameter only applies to snapshots. If true, mark the snapshot as a secure snapshot. An expiration timestamp must also exist or be specified. A secure snapshot can not be unlocked by setting this flag to false.  Was added in version 3.5.0.0.</value>

        [DataMember(Name="is_secure")]
        public bool? IsSecure { get; set; }

        /// <summary>
        /// New value for is_replication_destination property. is_replication_destination property of all the volumes in the volume group will be modified to the specified value.   Modification of is_replication will not be transactional in nature. If the command only succeeds in modifying the is_replication_destination property of a subset of volumes, is_replication_destination property for the volume group will be set to true.   Modification of this property is idempotent.   This parameter is only valid when modifying a primary or a clone volume group, only when the volume group is no longer the destination of a replication session, and may only be set to false. 
        /// </summary>
        /// <value>New value for is_replication_destination property. is_replication_destination property of all the volumes in the volume group will be modified to the specified value.   Modification of is_replication will not be transactional in nature. If the command only succeeds in modifying the is_replication_destination property of a subset of volumes, is_replication_destination property for the volume group will be set to true.   Modification of this property is idempotent.   This parameter is only valid when modifying a primary or a clone volume group, only when the volume group is no longer the destination of a replication session, and may only be set to false. </value>

        [DataMember(Name="is_replication_destination")]
        public bool? IsReplicationDestination { get; set; }

        /// <summary>
        /// Normally a replication destination volume group cannot be modified since it is controlled by replication. However, there can be cases where replication has failed or is no longer active and the replication destination volume group needs to be cleaned up.  With the force option, the user will be allowed to remove the protection policy from the replication destination volume group provided that the replication session has never been synchronized.  This parameter defaults to false, if not specified. 
        /// </summary>
        /// <value>Normally a replication destination volume group cannot be modified since it is controlled by replication. However, there can be cases where replication has failed or is no longer active and the replication destination volume group needs to be cleaned up.  With the force option, the user will be allowed to remove the protection policy from the replication destination volume group provided that the replication session has never been synchronized.  This parameter defaults to false, if not specified. </value>

        [DataMember(Name="force")]
        public bool? Force { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeGroupModify {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsWriteOrderConsistent: ").Append(IsWriteOrderConsistent).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  QosPerformancePolicyId: ").Append(QosPerformancePolicyId).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  IsSecure: ").Append(IsSecure).Append("\n");
            sb.Append("  IsReplicationDestination: ").Append(IsReplicationDestination).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VolumeGroupModify)obj);
        }

        /// <summary>
        /// Returns true if VolumeGroupModify instances are equal
        /// </summary>
        /// <param name="other">Instance of VolumeGroupModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeGroupModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    IsWriteOrderConsistent == other.IsWriteOrderConsistent ||
                    IsWriteOrderConsistent != null &&
                    IsWriteOrderConsistent.Equals(other.IsWriteOrderConsistent)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    QosPerformancePolicyId == other.QosPerformancePolicyId ||
                    QosPerformancePolicyId != null &&
                    QosPerformancePolicyId.Equals(other.QosPerformancePolicyId)
                ) && 
                (
                    ExpirationTimestamp == other.ExpirationTimestamp ||
                    ExpirationTimestamp != null &&
                    ExpirationTimestamp.Equals(other.ExpirationTimestamp)
                ) && 
                (
                    IsSecure == other.IsSecure ||
                    IsSecure != null &&
                    IsSecure.Equals(other.IsSecure)
                ) && 
                (
                    IsReplicationDestination == other.IsReplicationDestination ||
                    IsReplicationDestination != null &&
                    IsReplicationDestination.Equals(other.IsReplicationDestination)
                ) && 
                (
                    Force == other.Force ||
                    Force != null &&
                    Force.Equals(other.Force)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsWriteOrderConsistent != null)
                    hashCode = hashCode * 59 + IsWriteOrderConsistent.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (QosPerformancePolicyId != null)
                    hashCode = hashCode * 59 + QosPerformancePolicyId.GetHashCode();
                    if (ExpirationTimestamp != null)
                    hashCode = hashCode * 59 + ExpirationTimestamp.GetHashCode();
                    if (IsSecure != null)
                    hashCode = hashCode * 59 + IsSecure.GetHashCode();
                    if (IsReplicationDestination != null)
                    hashCode = hashCode * 59 + IsReplicationDestination.GetHashCode();
                    if (Force != null)
                    hashCode = hashCode * 59 + Force.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VolumeGroupModify left, VolumeGroupModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VolumeGroupModify left, VolumeGroupModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
