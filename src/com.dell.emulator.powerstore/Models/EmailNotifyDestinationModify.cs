/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EmailNotifyDestinationModify : IEquatable<EmailNotifyDestinationModify>
    { 
        /// <summary>
        /// Email address to receive notifications.
        /// </summary>
        /// <value>Email address to receive notifications.</value>

        [DataMember(Name="email_address")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Whether to send notifications for critical alerts.
        /// </summary>
        /// <value>Whether to send notifications for critical alerts.</value>

        [DataMember(Name="notify_critical")]
        public bool? NotifyCritical { get; set; }

        /// <summary>
        /// Whether to send notifications for major alerts.
        /// </summary>
        /// <value>Whether to send notifications for major alerts.</value>

        [DataMember(Name="notify_major")]
        public bool? NotifyMajor { get; set; }

        /// <summary>
        /// Whether to send notifications for minor alerts.
        /// </summary>
        /// <value>Whether to send notifications for minor alerts.</value>

        [DataMember(Name="notify_minor")]
        public bool? NotifyMinor { get; set; }

        /// <summary>
        /// Whether to send notifications for informational alerts.
        /// </summary>
        /// <value>Whether to send notifications for informational alerts.</value>

        [DataMember(Name="notify_info")]
        public bool? NotifyInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailNotifyDestinationModify {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  NotifyCritical: ").Append(NotifyCritical).Append("\n");
            sb.Append("  NotifyMajor: ").Append(NotifyMajor).Append("\n");
            sb.Append("  NotifyMinor: ").Append(NotifyMinor).Append("\n");
            sb.Append("  NotifyInfo: ").Append(NotifyInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmailNotifyDestinationModify)obj);
        }

        /// <summary>
        /// Returns true if EmailNotifyDestinationModify instances are equal
        /// </summary>
        /// <param name="other">Instance of EmailNotifyDestinationModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailNotifyDestinationModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EmailAddress == other.EmailAddress ||
                    EmailAddress != null &&
                    EmailAddress.Equals(other.EmailAddress)
                ) && 
                (
                    NotifyCritical == other.NotifyCritical ||
                    NotifyCritical != null &&
                    NotifyCritical.Equals(other.NotifyCritical)
                ) && 
                (
                    NotifyMajor == other.NotifyMajor ||
                    NotifyMajor != null &&
                    NotifyMajor.Equals(other.NotifyMajor)
                ) && 
                (
                    NotifyMinor == other.NotifyMinor ||
                    NotifyMinor != null &&
                    NotifyMinor.Equals(other.NotifyMinor)
                ) && 
                (
                    NotifyInfo == other.NotifyInfo ||
                    NotifyInfo != null &&
                    NotifyInfo.Equals(other.NotifyInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EmailAddress != null)
                    hashCode = hashCode * 59 + EmailAddress.GetHashCode();
                    if (NotifyCritical != null)
                    hashCode = hashCode * 59 + NotifyCritical.GetHashCode();
                    if (NotifyMajor != null)
                    hashCode = hashCode * 59 + NotifyMajor.GetHashCode();
                    if (NotifyMinor != null)
                    hashCode = hashCode * 59 + NotifyMinor.GetHashCode();
                    if (NotifyInfo != null)
                    hashCode = hashCode * 59 + NotifyInfo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmailNotifyDestinationModify left, EmailNotifyDestinationModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmailNotifyDestinationModify left, EmailNotifyDestinationModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
