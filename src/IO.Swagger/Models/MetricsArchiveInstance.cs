/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a metrics archive instance. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class MetricsArchiveInstance : IEquatable<MetricsArchiveInstance>
    { 
        /// <summary>
        /// Unique identifier for this instance.
        /// </summary>
        /// <value>Unique identifier for this instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Archive filename.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Archive filename.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The date and time from which the archive data begins.
        /// </summary>
        /// <value>The date and time from which the archive data begins.</value>

        [DataMember(Name="archive_from_timestamp")]
        public DateTime? ArchiveFromTimestamp { get; set; }

        /// <summary>
        /// The date and time up to which the archive data covers.
        /// </summary>
        /// <value>The date and time up to which the archive data covers.</value>

        [DataMember(Name="archive_to_timestamp")]
        public DateTime? ArchiveToTimestamp { get; set; }

        /// <summary>
        /// The size of the archive in bytes.
        /// </summary>
        /// <value>The size of the archive in bytes.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="size")]
        public long? Size { get; set; }

        /// <summary>
        /// The last date and time that this archive was downloaded.
        /// </summary>
        /// <value>The last date and time that this archive was downloaded.</value>

        [DataMember(Name="downloaded_timestamp")]
        public DateTime? DownloadedTimestamp { get; set; }

        /// <summary>
        /// The URI to use for downloading the archive.
        /// </summary>
        /// <value>The URI to use for downloading the archive.</value>

        [DataMember(Name="download_uri")]
        public string DownloadUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetricsArchiveInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ArchiveFromTimestamp: ").Append(ArchiveFromTimestamp).Append("\n");
            sb.Append("  ArchiveToTimestamp: ").Append(ArchiveToTimestamp).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  DownloadedTimestamp: ").Append(DownloadedTimestamp).Append("\n");
            sb.Append("  DownloadUri: ").Append(DownloadUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MetricsArchiveInstance)obj);
        }

        /// <summary>
        /// Returns true if MetricsArchiveInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of MetricsArchiveInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricsArchiveInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ArchiveFromTimestamp == other.ArchiveFromTimestamp ||
                    ArchiveFromTimestamp != null &&
                    ArchiveFromTimestamp.Equals(other.ArchiveFromTimestamp)
                ) && 
                (
                    ArchiveToTimestamp == other.ArchiveToTimestamp ||
                    ArchiveToTimestamp != null &&
                    ArchiveToTimestamp.Equals(other.ArchiveToTimestamp)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    DownloadedTimestamp == other.DownloadedTimestamp ||
                    DownloadedTimestamp != null &&
                    DownloadedTimestamp.Equals(other.DownloadedTimestamp)
                ) && 
                (
                    DownloadUri == other.DownloadUri ||
                    DownloadUri != null &&
                    DownloadUri.Equals(other.DownloadUri)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ArchiveFromTimestamp != null)
                    hashCode = hashCode * 59 + ArchiveFromTimestamp.GetHashCode();
                    if (ArchiveToTimestamp != null)
                    hashCode = hashCode * 59 + ArchiveToTimestamp.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (DownloadedTimestamp != null)
                    hashCode = hashCode * 59 + DownloadedTimestamp.GetHashCode();
                    if (DownloadUri != null)
                    hashCode = hashCode * 59 + DownloadUri.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MetricsArchiveInstance left, MetricsArchiveInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MetricsArchiveInstance left, MetricsArchiveInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
