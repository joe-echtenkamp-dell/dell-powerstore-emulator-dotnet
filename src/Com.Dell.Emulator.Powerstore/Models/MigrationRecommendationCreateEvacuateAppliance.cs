/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Evacuate appliance by specifying optional space_to_free
    /// </summary>
    [DataContract]
    public partial class MigrationRecommendationCreateEvacuateAppliance : IEquatable<MigrationRecommendationCreateEvacuateAppliance>
    { 
        /// <summary>
        /// ID of appliance on which available space is desired.
        /// </summary>
        /// <value>ID of appliance on which available space is desired.</value>
        [Required]
        
        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Optional desired amount of used storage (in bytes) to move to other appliances. If space_to_free is not specified, space to be freed is estimated by the system such that migrating objects equivalent to that much amount of storage space would clear Major severity capacity alarm on the appliance. If there is no Major severity capacity alarm on an appliance and space_to_free is not specified, error will be returned. To free up desired amount of space from an appliance, specify the amount of space greater than zero to be freed. 
        /// </summary>
        /// <value>Optional desired amount of used storage (in bytes) to move to other appliances. If space_to_free is not specified, space to be freed is estimated by the system such that migrating objects equivalent to that much amount of storage space would clear Major severity capacity alarm on the appliance. If there is no Major severity capacity alarm on an appliance and space_to_free is not specified, error will be returned. To free up desired amount of space from an appliance, specify the amount of space greater than zero to be freed. </value>

        [DataMember(Name="space_to_free")]
        public long? SpaceToFree { get; set; }

        /// <summary>
        /// Optional IDs of appliances to which used storage can be migrated for this request. If no target appliances are specified, the evacuated objects can be placed on any appliance in the cluster. 
        /// </summary>
        /// <value>Optional IDs of appliances to which used storage can be migrated for this request. If no target appliances are specified, the evacuated objects can be placed on any appliance in the cluster. </value>

        [DataMember(Name="target_appliance_ids")]
        public List<string> TargetApplianceIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MigrationRecommendationCreateEvacuateAppliance {\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  SpaceToFree: ").Append(SpaceToFree).Append("\n");
            sb.Append("  TargetApplianceIds: ").Append(TargetApplianceIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MigrationRecommendationCreateEvacuateAppliance)obj);
        }

        /// <summary>
        /// Returns true if MigrationRecommendationCreateEvacuateAppliance instances are equal
        /// </summary>
        /// <param name="other">Instance of MigrationRecommendationCreateEvacuateAppliance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MigrationRecommendationCreateEvacuateAppliance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    SpaceToFree == other.SpaceToFree ||
                    SpaceToFree != null &&
                    SpaceToFree.Equals(other.SpaceToFree)
                ) && 
                (
                    TargetApplianceIds == other.TargetApplianceIds ||
                    TargetApplianceIds != null &&
                    TargetApplianceIds.SequenceEqual(other.TargetApplianceIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (SpaceToFree != null)
                    hashCode = hashCode * 59 + SpaceToFree.GetHashCode();
                    if (TargetApplianceIds != null)
                    hashCode = hashCode * 59 + TargetApplianceIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MigrationRecommendationCreateEvacuateAppliance left, MigrationRecommendationCreateEvacuateAppliance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MigrationRecommendationCreateEvacuateAppliance left, MigrationRecommendationCreateEvacuateAppliance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
