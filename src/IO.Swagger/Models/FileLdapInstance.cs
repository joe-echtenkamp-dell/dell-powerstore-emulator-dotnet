/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// This resource type has queriable association from nas_server
    /// </summary>
    [DataContract]
    public partial class FileLdapInstance : IEquatable<FileLdapInstance>
    { 
        /// <summary>
        /// Unique identifier of the LDAP service object.
        /// </summary>
        /// <value>Unique identifier of the LDAP service object.</value>

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the associated NAS Server instance that uses this LDAP object. Only one LDAP object per NAS Server is supported. 
        /// </summary>
        /// <value>Unique identifier of the associated NAS Server instance that uses this LDAP object. Only one LDAP object per NAS Server is supported. </value>

        [DataMember(Name="nas_server_id")]
        public string NasServerId { get; set; }

        /// <summary>
        /// Name of the LDAP base DN.  Base Distinguished Name (BDN) of the root of the LDAP directory tree. The appliance uses the DN to bind to the LDAP service and locate in the LDAP directory tree to begin a search for information.   The base DN can be expressed as a fully-qualified domain name or in X.509 format by using the attribute dc&#x3D;. For example, if the fully-qualified domain name is mycompany.com, the base DN is expressed as dc&#x3D;mycompany,dc&#x3D;com.
        /// </summary>
        /// <value>Name of the LDAP base DN.  Base Distinguished Name (BDN) of the root of the LDAP directory tree. The appliance uses the DN to bind to the LDAP service and locate in the LDAP directory tree to begin a search for information.   The base DN can be expressed as a fully-qualified domain name or in X.509 format by using the attribute dc&#x3D;. For example, if the fully-qualified domain name is mycompany.com, the base DN is expressed as dc&#x3D;mycompany,dc&#x3D;com.</value>

        [DataMember(Name="base_DN")]
        public string BaseDN { get; set; }

        /// <summary>
        /// For an iPlanet LDAP server, specifies the DN of the entry with the configuration profile.
        /// </summary>
        /// <value>For an iPlanet LDAP server, specifies the DN of the entry with the configuration profile.</value>

        [DataMember(Name="profile_DN")]
        public string ProfileDN { get; set; }

        /// <summary>
        /// The list of LDAP server IP addresses. The addresses may be IPv4 or IPv6.
        /// </summary>
        /// <value>The list of LDAP server IP addresses. The addresses may be IPv4 or IPv6.</value>

        [DataMember(Name="addresses")]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// The TCP/IP port used by the NAS Server to connect to the LDAP servers. The default port number for LDAP is 389 and LDAPS is 636.
        /// </summary>
        /// <value>The TCP/IP port used by the NAS Server to connect to the LDAP servers. The default port number for LDAP is 389 and LDAPS is 636.</value>

        [Range(0, 65535)]
        [DataMember(Name="port_number")]
        public int? PortNumber { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationType
        /// </summary>

        [DataMember(Name="authentication_type")]
        public FileLDAPAuthenticationTypeEnum? AuthenticationType { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>

        [DataMember(Name="protocol")]
        public FileLDAPProtocolEnum? Protocol { get; set; }

        /// <summary>
        /// Indicates whether a Certification Authority certificate is used to verify the LDAP server certificate for secure SSL connections. Values are:  * true - verifies LDAP server&#39;s certificate.  * false - doesn&#39;t verify LDAP server&#39;s certificate. 
        /// </summary>
        /// <value>Indicates whether a Certification Authority certificate is used to verify the LDAP server certificate for secure SSL connections. Values are:  * true - verifies LDAP server&#39;s certificate.  * false - doesn&#39;t verify LDAP server&#39;s certificate. </value>

        [DataMember(Name="is_verify_server_certificate")]
        public bool? IsVerifyServerCertificate { get; set; }

        /// <summary>
        /// Bind Distinguished Name (DN) to be used when binding.
        /// </summary>
        /// <value>Bind Distinguished Name (DN) to be used when binding.</value>

        [DataMember(Name="bind_DN")]
        public string BindDN { get; set; }

        /// <summary>
        /// Indicates whether SMB authentication is used to authenticate to the LDAP server. Values are:     * true - Indicates that the SMB settings are used for Kerberos authentication.     * false - Indicates that Kerberos uses its own settings. 
        /// </summary>
        /// <value>Indicates whether SMB authentication is used to authenticate to the LDAP server. Values are:     * true - Indicates that the SMB settings are used for Kerberos authentication.     * false - Indicates that Kerberos uses its own settings. </value>

        [DataMember(Name="is_smb_account_used")]
        public bool? IsSmbAccountUsed { get; set; }

        /// <summary>
        /// Specifies the principal name for Kerberos authentication.
        /// </summary>
        /// <value>Specifies the principal name for Kerberos authentication.</value>

        [DataMember(Name="principal")]
        public string Principal { get; set; }

        /// <summary>
        /// Specifies the realm name for Kerberos authentication.
        /// </summary>
        /// <value>Specifies the realm name for Kerberos authentication.</value>

        [DataMember(Name="realm")]
        public string Realm { get; set; }

        /// <summary>
        /// Gets or Sets SchemaType
        /// </summary>

        [DataMember(Name="schema_type")]
        public FileLDAPSchemaTypeEnum? SchemaType { get; set; }

        /// <summary>
        /// Indicates whether an LDAP configuration file has been uploaded.
        /// </summary>
        /// <value>Indicates whether an LDAP configuration file has been uploaded.</value>

        [DataMember(Name="is_config_file_uploaded")]
        public bool? IsConfigFileUploaded { get; set; }

        /// <summary>
        /// Indicates whether an LDAP certificate file has been uploaded.
        /// </summary>
        /// <value>Indicates whether an LDAP certificate file has been uploaded.</value>

        [DataMember(Name="is_certificate_uploaded")]
        public bool? IsCertificateUploaded { get; set; }

        /// <summary>
        /// In order to modify any properties of this resource when the associated NAS server is a replication destination, the is_destination_override_enabled flag must be set to true. When true these properties may be modified: addresses Values are:   true - Enable locally set properties. Source property changes will propagate to the source_parameters of the resource.   false - Reset the properties to the ones from the source. Source property changes will propagate directly to this resource.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>In order to modify any properties of this resource when the associated NAS server is a replication destination, the is_destination_override_enabled flag must be set to true. When true these properties may be modified: addresses Values are:   true - Enable locally set properties. Source property changes will propagate to the source_parameters of the resource.   false - Reset the properties to the ones from the source. Source property changes will propagate directly to this resource.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_destination_override_enabled")]
        public bool? IsDestinationOverrideEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SourceParameters
        /// </summary>

        [DataMember(Name="source_parameters")]
        public FileLdapInstanceSourceParameters SourceParameters { get; set; }

        /// <summary>
        /// Localized message string corresponding to authentication_type
        /// </summary>
        /// <value>Localized message string corresponding to authentication_type</value>

        [DataMember(Name="authentication_type_l10n")]
        public string AuthenticationTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to protocol
        /// </summary>
        /// <value>Localized message string corresponding to protocol</value>

        [DataMember(Name="protocol_l10n")]
        public string ProtocolL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to schema_type
        /// </summary>
        /// <value>Localized message string corresponding to schema_type</value>

        [DataMember(Name="schema_type_l10n")]
        public string SchemaTypeL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of nas_server_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of nas_server_id attribute.</value>

        [DataMember(Name="nas_server")]
        public NasServerInstance NasServer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileLdapInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NasServerId: ").Append(NasServerId).Append("\n");
            sb.Append("  BaseDN: ").Append(BaseDN).Append("\n");
            sb.Append("  ProfileDN: ").Append(ProfileDN).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  PortNumber: ").Append(PortNumber).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  IsVerifyServerCertificate: ").Append(IsVerifyServerCertificate).Append("\n");
            sb.Append("  BindDN: ").Append(BindDN).Append("\n");
            sb.Append("  IsSmbAccountUsed: ").Append(IsSmbAccountUsed).Append("\n");
            sb.Append("  Principal: ").Append(Principal).Append("\n");
            sb.Append("  Realm: ").Append(Realm).Append("\n");
            sb.Append("  SchemaType: ").Append(SchemaType).Append("\n");
            sb.Append("  IsConfigFileUploaded: ").Append(IsConfigFileUploaded).Append("\n");
            sb.Append("  IsCertificateUploaded: ").Append(IsCertificateUploaded).Append("\n");
            sb.Append("  IsDestinationOverrideEnabled: ").Append(IsDestinationOverrideEnabled).Append("\n");
            sb.Append("  SourceParameters: ").Append(SourceParameters).Append("\n");
            sb.Append("  AuthenticationTypeL10n: ").Append(AuthenticationTypeL10n).Append("\n");
            sb.Append("  ProtocolL10n: ").Append(ProtocolL10n).Append("\n");
            sb.Append("  SchemaTypeL10n: ").Append(SchemaTypeL10n).Append("\n");
            sb.Append("  NasServer: ").Append(NasServer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileLdapInstance)obj);
        }

        /// <summary>
        /// Returns true if FileLdapInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of FileLdapInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileLdapInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    NasServerId == other.NasServerId ||
                    NasServerId != null &&
                    NasServerId.Equals(other.NasServerId)
                ) && 
                (
                    BaseDN == other.BaseDN ||
                    BaseDN != null &&
                    BaseDN.Equals(other.BaseDN)
                ) && 
                (
                    ProfileDN == other.ProfileDN ||
                    ProfileDN != null &&
                    ProfileDN.Equals(other.ProfileDN)
                ) && 
                (
                    Addresses == other.Addresses ||
                    Addresses != null &&
                    Addresses.SequenceEqual(other.Addresses)
                ) && 
                (
                    PortNumber == other.PortNumber ||
                    PortNumber != null &&
                    PortNumber.Equals(other.PortNumber)
                ) && 
                (
                    AuthenticationType == other.AuthenticationType ||
                    AuthenticationType != null &&
                    AuthenticationType.Equals(other.AuthenticationType)
                ) && 
                (
                    Protocol == other.Protocol ||
                    Protocol != null &&
                    Protocol.Equals(other.Protocol)
                ) && 
                (
                    IsVerifyServerCertificate == other.IsVerifyServerCertificate ||
                    IsVerifyServerCertificate != null &&
                    IsVerifyServerCertificate.Equals(other.IsVerifyServerCertificate)
                ) && 
                (
                    BindDN == other.BindDN ||
                    BindDN != null &&
                    BindDN.Equals(other.BindDN)
                ) && 
                (
                    IsSmbAccountUsed == other.IsSmbAccountUsed ||
                    IsSmbAccountUsed != null &&
                    IsSmbAccountUsed.Equals(other.IsSmbAccountUsed)
                ) && 
                (
                    Principal == other.Principal ||
                    Principal != null &&
                    Principal.Equals(other.Principal)
                ) && 
                (
                    Realm == other.Realm ||
                    Realm != null &&
                    Realm.Equals(other.Realm)
                ) && 
                (
                    SchemaType == other.SchemaType ||
                    SchemaType != null &&
                    SchemaType.Equals(other.SchemaType)
                ) && 
                (
                    IsConfigFileUploaded == other.IsConfigFileUploaded ||
                    IsConfigFileUploaded != null &&
                    IsConfigFileUploaded.Equals(other.IsConfigFileUploaded)
                ) && 
                (
                    IsCertificateUploaded == other.IsCertificateUploaded ||
                    IsCertificateUploaded != null &&
                    IsCertificateUploaded.Equals(other.IsCertificateUploaded)
                ) && 
                (
                    IsDestinationOverrideEnabled == other.IsDestinationOverrideEnabled ||
                    IsDestinationOverrideEnabled != null &&
                    IsDestinationOverrideEnabled.Equals(other.IsDestinationOverrideEnabled)
                ) && 
                (
                    SourceParameters == other.SourceParameters ||
                    SourceParameters != null &&
                    SourceParameters.Equals(other.SourceParameters)
                ) && 
                (
                    AuthenticationTypeL10n == other.AuthenticationTypeL10n ||
                    AuthenticationTypeL10n != null &&
                    AuthenticationTypeL10n.Equals(other.AuthenticationTypeL10n)
                ) && 
                (
                    ProtocolL10n == other.ProtocolL10n ||
                    ProtocolL10n != null &&
                    ProtocolL10n.Equals(other.ProtocolL10n)
                ) && 
                (
                    SchemaTypeL10n == other.SchemaTypeL10n ||
                    SchemaTypeL10n != null &&
                    SchemaTypeL10n.Equals(other.SchemaTypeL10n)
                ) && 
                (
                    NasServer == other.NasServer ||
                    NasServer != null &&
                    NasServer.Equals(other.NasServer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (NasServerId != null)
                    hashCode = hashCode * 59 + NasServerId.GetHashCode();
                    if (BaseDN != null)
                    hashCode = hashCode * 59 + BaseDN.GetHashCode();
                    if (ProfileDN != null)
                    hashCode = hashCode * 59 + ProfileDN.GetHashCode();
                    if (Addresses != null)
                    hashCode = hashCode * 59 + Addresses.GetHashCode();
                    if (PortNumber != null)
                    hashCode = hashCode * 59 + PortNumber.GetHashCode();
                    if (AuthenticationType != null)
                    hashCode = hashCode * 59 + AuthenticationType.GetHashCode();
                    if (Protocol != null)
                    hashCode = hashCode * 59 + Protocol.GetHashCode();
                    if (IsVerifyServerCertificate != null)
                    hashCode = hashCode * 59 + IsVerifyServerCertificate.GetHashCode();
                    if (BindDN != null)
                    hashCode = hashCode * 59 + BindDN.GetHashCode();
                    if (IsSmbAccountUsed != null)
                    hashCode = hashCode * 59 + IsSmbAccountUsed.GetHashCode();
                    if (Principal != null)
                    hashCode = hashCode * 59 + Principal.GetHashCode();
                    if (Realm != null)
                    hashCode = hashCode * 59 + Realm.GetHashCode();
                    if (SchemaType != null)
                    hashCode = hashCode * 59 + SchemaType.GetHashCode();
                    if (IsConfigFileUploaded != null)
                    hashCode = hashCode * 59 + IsConfigFileUploaded.GetHashCode();
                    if (IsCertificateUploaded != null)
                    hashCode = hashCode * 59 + IsCertificateUploaded.GetHashCode();
                    if (IsDestinationOverrideEnabled != null)
                    hashCode = hashCode * 59 + IsDestinationOverrideEnabled.GetHashCode();
                    if (SourceParameters != null)
                    hashCode = hashCode * 59 + SourceParameters.GetHashCode();
                    if (AuthenticationTypeL10n != null)
                    hashCode = hashCode * 59 + AuthenticationTypeL10n.GetHashCode();
                    if (ProtocolL10n != null)
                    hashCode = hashCode * 59 + ProtocolL10n.GetHashCode();
                    if (SchemaTypeL10n != null)
                    hashCode = hashCode * 59 + SchemaTypeL10n.GetHashCode();
                    if (NasServer != null)
                    hashCode = hashCode * 59 + NasServer.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileLdapInstance left, FileLdapInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileLdapInstance left, FileLdapInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
