/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// This resource type has queriable associations from import_vnx_volume, import_vnx_consistency_group
    /// </summary>
    [DataContract]
    public partial class ImportVnxArrayInstance : IEquatable<ImportVnxArrayInstance>
    { 
        /// <summary>
        /// Unique identifier of the VNX storage system.
        /// </summary>
        /// <value>Unique identifier of the VNX storage system.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the VNX storage system.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the VNX storage system.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Serial number of the VNX storage system.
        /// </summary>
        /// <value>Serial number of the VNX storage system.</value>

        [DataMember(Name="serial_number")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Management address for communicating with the VNX storage system. This is usually the address of Storage Processor A (SPA). The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). 
        /// </summary>
        /// <value>Management address for communicating with the VNX storage system. This is usually the address of Storage Processor A (SPA). The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). </value>

        [DataMember(Name="management_address")]
        public string ManagementAddress { get; set; }

        /// <summary>
        /// Alternate management address for communicating with the VNX storage system. This is usually the address of Storage Processor B (SPB). The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). 
        /// </summary>
        /// <value>Alternate management address for communicating with the VNX storage system. This is usually the address of Storage Processor B (SPB). The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). </value>

        [DataMember(Name="alternate_management_address")]
        public string AlternateManagementAddress { get; set; }

        /// <summary>
        /// User account name used to communicate with the VNX storage system.
        /// </summary>
        /// <value>User account name used to communicate with the VNX storage system.</value>

        [DataMember(Name="user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// Model name of the VNX storage system.
        /// </summary>
        /// <value>Model name of the VNX storage system.</value>

        [DataMember(Name="model")]
        public string Model { get; set; }

        /// <summary>
        /// Indicates whether the VNX storage system is faulted.
        /// </summary>
        /// <value>Indicates whether the VNX storage system is faulted.</value>

        [DataMember(Name="is_faulted")]
        public bool? IsFaulted { get; set; }

        /// <summary>
        /// Timestamp at which the VNX storage system details were last updated. These details include information about the VNX storage system and its importable volumes and consistency groups. The timestamp is updated when the VNX storage system is created and when the importable storage resources are discovered using the discover action. 
        /// </summary>
        /// <value>Timestamp at which the VNX storage system details were last updated. These details include information about the VNX storage system and its importable volumes and consistency groups. The timestamp is updated when the VNX storage system is created and when the importable storage resources are discovered using the discover action. </value>

        [DataMember(Name="last_updated_timestamp")]
        public DateTime? LastUpdatedTimestamp { get; set; }

        /// <summary>
        /// The software version of the block operating environment of the VNX storage system. 
        /// </summary>
        /// <value>The software version of the block operating environment of the VNX storage system. </value>

        [DataMember(Name="software_version")]
        public string SoftwareVersion { get; set; }

        /// <summary>
        ///  Was added in version 1.0.2.
        /// </summary>
        /// <value> Was added in version 1.0.2.</value>

        [DataMember(Name="supported_import_type")]
        public SupportedImportTypeEnum? SupportedImportType { get; set; }

        /// <summary>
        /// Localized message string corresponding to supported_import_type Was added in version 1.0.2.
        /// </summary>
        /// <value>Localized message string corresponding to supported_import_type Was added in version 1.0.2.</value>

        [DataMember(Name="supported_import_type_l10n")]
        public string SupportedImportTypeL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_vnx_volume association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_vnx_volume association.</value>

        [DataMember(Name="import_vnx_volumes")]
        public List<ImportVnxVolumeInstance> ImportVnxVolumes { get; set; }

        /// <summary>
        /// This is the inverse of the resource type import_vnx_consistency_group association.
        /// </summary>
        /// <value>This is the inverse of the resource type import_vnx_consistency_group association.</value>

        [DataMember(Name="import_vnx_consistency_groups")]
        public List<ImportVnxConsistencyGroupInstance> ImportVnxConsistencyGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportVnxArrayInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  ManagementAddress: ").Append(ManagementAddress).Append("\n");
            sb.Append("  AlternateManagementAddress: ").Append(AlternateManagementAddress).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  IsFaulted: ").Append(IsFaulted).Append("\n");
            sb.Append("  LastUpdatedTimestamp: ").Append(LastUpdatedTimestamp).Append("\n");
            sb.Append("  SoftwareVersion: ").Append(SoftwareVersion).Append("\n");
            sb.Append("  SupportedImportType: ").Append(SupportedImportType).Append("\n");
            sb.Append("  SupportedImportTypeL10n: ").Append(SupportedImportTypeL10n).Append("\n");
            sb.Append("  ImportVnxVolumes: ").Append(ImportVnxVolumes).Append("\n");
            sb.Append("  ImportVnxConsistencyGroups: ").Append(ImportVnxConsistencyGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportVnxArrayInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportVnxArrayInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportVnxArrayInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportVnxArrayInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    ManagementAddress == other.ManagementAddress ||
                    ManagementAddress != null &&
                    ManagementAddress.Equals(other.ManagementAddress)
                ) && 
                (
                    AlternateManagementAddress == other.AlternateManagementAddress ||
                    AlternateManagementAddress != null &&
                    AlternateManagementAddress.Equals(other.AlternateManagementAddress)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    IsFaulted == other.IsFaulted ||
                    IsFaulted != null &&
                    IsFaulted.Equals(other.IsFaulted)
                ) && 
                (
                    LastUpdatedTimestamp == other.LastUpdatedTimestamp ||
                    LastUpdatedTimestamp != null &&
                    LastUpdatedTimestamp.Equals(other.LastUpdatedTimestamp)
                ) && 
                (
                    SoftwareVersion == other.SoftwareVersion ||
                    SoftwareVersion != null &&
                    SoftwareVersion.Equals(other.SoftwareVersion)
                ) && 
                (
                    SupportedImportType == other.SupportedImportType ||
                    SupportedImportType != null &&
                    SupportedImportType.Equals(other.SupportedImportType)
                ) && 
                (
                    SupportedImportTypeL10n == other.SupportedImportTypeL10n ||
                    SupportedImportTypeL10n != null &&
                    SupportedImportTypeL10n.Equals(other.SupportedImportTypeL10n)
                ) && 
                (
                    ImportVnxVolumes == other.ImportVnxVolumes ||
                    ImportVnxVolumes != null &&
                    ImportVnxVolumes.SequenceEqual(other.ImportVnxVolumes)
                ) && 
                (
                    ImportVnxConsistencyGroups == other.ImportVnxConsistencyGroups ||
                    ImportVnxConsistencyGroups != null &&
                    ImportVnxConsistencyGroups.SequenceEqual(other.ImportVnxConsistencyGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (ManagementAddress != null)
                    hashCode = hashCode * 59 + ManagementAddress.GetHashCode();
                    if (AlternateManagementAddress != null)
                    hashCode = hashCode * 59 + AlternateManagementAddress.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (IsFaulted != null)
                    hashCode = hashCode * 59 + IsFaulted.GetHashCode();
                    if (LastUpdatedTimestamp != null)
                    hashCode = hashCode * 59 + LastUpdatedTimestamp.GetHashCode();
                    if (SoftwareVersion != null)
                    hashCode = hashCode * 59 + SoftwareVersion.GetHashCode();
                    if (SupportedImportType != null)
                    hashCode = hashCode * 59 + SupportedImportType.GetHashCode();
                    if (SupportedImportTypeL10n != null)
                    hashCode = hashCode * 59 + SupportedImportTypeL10n.GetHashCode();
                    if (ImportVnxVolumes != null)
                    hashCode = hashCode * 59 + ImportVnxVolumes.GetHashCode();
                    if (ImportVnxConsistencyGroups != null)
                    hashCode = hashCode * 59 + ImportVnxConsistencyGroups.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportVnxArrayInstance left, ImportVnxArrayInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportVnxArrayInstance left, ImportVnxArrayInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
