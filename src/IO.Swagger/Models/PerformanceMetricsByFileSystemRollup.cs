/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Summary of file system level performance metric data for the period beginning with timestamp, including the average and maximum values for that period. 
    /// </summary>
    [DataContract]
    public partial class PerformanceMetricsByFileSystemRollup : MetricsGenerateResponse, IEquatable<PerformanceMetricsByFileSystemRollup>
    { 
        /// <summary>
        /// Unique identifier of the appliance. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the appliance. Was added in version 3.0.0.0.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Unique identifier of the file system.
        /// </summary>
        /// <value>Unique identifier of the file system.</value>

        [DataMember(Name="file_system_id")]
        public string FileSystemId { get; set; }

        /// <summary>
        /// Time at the beginning of sample period.
        /// </summary>
        /// <value>Time at the beginning of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Number of consecutive sampling periods during which there were no changes in the metrics values.If the value is omitted from the response, it is 1 (no additional repeats). 
        /// </summary>
        /// <value>Number of consecutive sampling periods during which there were no changes in the metrics values.If the value is omitted from the response, it is 1 (no additional repeats). </value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Average read operations per second.
        /// </summary>
        /// <value>Average read operations per second.</value>

        [DataMember(Name="avg_read_iops")]
        public float? AvgReadIops { get; set; }

        /// <summary>
        /// Average write operations per second.
        /// </summary>
        /// <value>Average write operations per second.</value>

        [DataMember(Name="avg_write_iops")]
        public float? AvgWriteIops { get; set; }

        /// <summary>
        /// Average block writes per second. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Average block writes per second. Was added in version 4.0.0.0.</value>

        [DataMember(Name="avg_block_write_iops")]
        public float? AvgBlockWriteIops { get; set; }

        /// <summary>
        /// Average mirror writes per second. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Average mirror writes per second. Was added in version 4.0.0.0.</value>

        [DataMember(Name="avg_mirror_write_iops")]
        public float? AvgMirrorWriteIops { get; set; }

        /// <summary>
        /// Average read and write operations per second.
        /// </summary>
        /// <value>Average read and write operations per second.</value>

        [DataMember(Name="avg_total_iops")]
        public float? AvgTotalIops { get; set; }

        /// <summary>
        /// Maximum read operations per second.
        /// </summary>
        /// <value>Maximum read operations per second.</value>

        [DataMember(Name="max_read_iops")]
        public float? MaxReadIops { get; set; }

        /// <summary>
        /// Maximum write operations per second.
        /// </summary>
        /// <value>Maximum write operations per second.</value>

        [DataMember(Name="max_write_iops")]
        public float? MaxWriteIops { get; set; }

        /// <summary>
        /// Maximum block writes per second. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Maximum block writes per second. Was added in version 4.0.0.0.</value>

        [DataMember(Name="max_block_write_iops")]
        public float? MaxBlockWriteIops { get; set; }

        /// <summary>
        /// Maximum mirror write operations per second. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Maximum mirror write operations per second. Was added in version 4.0.0.0.</value>

        [DataMember(Name="max_mirror_write_iops")]
        public float? MaxMirrorWriteIops { get; set; }

        /// <summary>
        /// Maximum read and write operations per second.
        /// </summary>
        /// <value>Maximum read and write operations per second.</value>

        [DataMember(Name="max_iops")]
        public float? MaxIops { get; set; }

        /// <summary>
        /// Average read rate in bytes per second.
        /// </summary>
        /// <value>Average read rate in bytes per second.</value>

        [DataMember(Name="avg_read_bandwidth")]
        public float? AvgReadBandwidth { get; set; }

        /// <summary>
        /// Average write rate in bytes per second.
        /// </summary>
        /// <value>Average write rate in bytes per second.</value>

        [DataMember(Name="avg_write_bandwidth")]
        public float? AvgWriteBandwidth { get; set; }

        /// <summary>
        /// Weighted average block write bandwidth in bytes per second. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Weighted average block write bandwidth in bytes per second. Was added in version 4.0.0.0.</value>

        [DataMember(Name="avg_block_write_bandwidth")]
        public float? AvgBlockWriteBandwidth { get; set; }

        /// <summary>
        /// Weighted average mirror write rate in byte per second. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Weighted average mirror write rate in byte per second. Was added in version 4.0.0.0.</value>

        [DataMember(Name="avg_mirror_write_bandwidth")]
        public float? AvgMirrorWriteBandwidth { get; set; }

        /// <summary>
        /// Average data transfer rate in bytes per second.
        /// </summary>
        /// <value>Average data transfer rate in bytes per second.</value>

        [DataMember(Name="avg_total_bandwidth")]
        public float? AvgTotalBandwidth { get; set; }

        /// <summary>
        /// Maximum read rate in bytes per second.
        /// </summary>
        /// <value>Maximum read rate in bytes per second.</value>

        [DataMember(Name="max_read_bandwidth")]
        public float? MaxReadBandwidth { get; set; }

        /// <summary>
        /// Maximum write rate in bytes per second.
        /// </summary>
        /// <value>Maximum write rate in bytes per second.</value>

        [DataMember(Name="max_write_bandwidth")]
        public float? MaxWriteBandwidth { get; set; }

        /// <summary>
        /// Maximum block write bandwidth in bytes per second. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Maximum block write bandwidth in bytes per second. Was added in version 4.0.0.0.</value>

        [DataMember(Name="max_block_write_bandwidth")]
        public float? MaxBlockWriteBandwidth { get; set; }

        /// <summary>
        /// Maximum mirror write rate in byte per second. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Maximum mirror write rate in byte per second. Was added in version 4.0.0.0.</value>

        [DataMember(Name="max_mirror_write_bandwidth")]
        public float? MaxMirrorWriteBandwidth { get; set; }

        /// <summary>
        /// Maximum data transfer rate in bytes per second.
        /// </summary>
        /// <value>Maximum data transfer rate in bytes per second.</value>

        [DataMember(Name="max_total_bandwidth")]
        public float? MaxTotalBandwidth { get; set; }

        /// <summary>
        /// Maximum of average read latency in microseconds.
        /// </summary>
        /// <value>Maximum of average read latency in microseconds.</value>

        [DataMember(Name="avg_read_latency")]
        public float? AvgReadLatency { get; set; }

        /// <summary>
        /// Maximum of average write latency in microseconds.
        /// </summary>
        /// <value>Maximum of average write latency in microseconds.</value>

        [DataMember(Name="avg_write_latency")]
        public float? AvgWriteLatency { get; set; }

        /// <summary>
        /// Weighted average block write latency in microseconds. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Weighted average block write latency in microseconds. Was added in version 4.0.0.0.</value>

        [DataMember(Name="avg_block_write_latency")]
        public float? AvgBlockWriteLatency { get; set; }

        /// <summary>
        /// Weighted average additional latency incurred on the source in order to do the remote mirror writes in microseconds. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Weighted average additional latency incurred on the source in order to do the remote mirror writes in microseconds. Was added in version 4.0.0.0.</value>

        [DataMember(Name="avg_mirror_overhead_latency")]
        public float? AvgMirrorOverheadLatency { get; set; }

        /// <summary>
        /// Maximum of average read and write latency in microseconds.
        /// </summary>
        /// <value>Maximum of average read and write latency in microseconds.</value>

        [DataMember(Name="avg_latency")]
        public float? AvgLatency { get; set; }

        /// <summary>
        /// Maximum of average read latency in microseconds.
        /// </summary>
        /// <value>Maximum of average read latency in microseconds.</value>

        [DataMember(Name="max_avg_read_latency")]
        public float? MaxAvgReadLatency { get; set; }

        /// <summary>
        /// Maximum of average write latency in microseconds.
        /// </summary>
        /// <value>Maximum of average write latency in microseconds.</value>

        [DataMember(Name="max_avg_write_latency")]
        public float? MaxAvgWriteLatency { get; set; }

        /// <summary>
        /// Maximum of average block write latency in microseconds. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Maximum of average block write latency in microseconds. Was added in version 4.0.0.0.</value>

        [DataMember(Name="max_avg_block_write_latency")]
        public float? MaxAvgBlockWriteLatency { get; set; }

        /// <summary>
        /// Maximum of average additional latency incurred on the source in order to do the remote mirror writes in microseconds. Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Maximum of average additional latency incurred on the source in order to do the remote mirror writes in microseconds. Was added in version 4.0.0.0.</value>

        [DataMember(Name="max_avg_mirror_overhead_latency")]
        public float? MaxAvgMirrorOverheadLatency { get; set; }

        /// <summary>
        /// Maximum of average read and write latency in microseconds.
        /// </summary>
        /// <value>Maximum of average read and write latency in microseconds.</value>

        [DataMember(Name="max_avg_latency")]
        public float? MaxAvgLatency { get; set; }

        /// <summary>
        /// Average read size in bytes.
        /// </summary>
        /// <value>Average read size in bytes.</value>

        [DataMember(Name="avg_read_size")]
        public float? AvgReadSize { get; set; }

        /// <summary>
        /// Average write size in bytes.
        /// </summary>
        /// <value>Average write size in bytes.</value>

        [DataMember(Name="avg_write_size")]
        public float? AvgWriteSize { get; set; }

        /// <summary>
        /// Average read and write size in bytes.
        /// </summary>
        /// <value>Average read and write size in bytes.</value>

        [DataMember(Name="avg_size")]
        public float? AvgSize { get; set; }

        /// <summary>
        /// Maximum of average read size in bytes.
        /// </summary>
        /// <value>Maximum of average read size in bytes.</value>

        [DataMember(Name="max_avg_read_size")]
        public float? MaxAvgReadSize { get; set; }

        /// <summary>
        /// Maximum of average write size in bytes.
        /// </summary>
        /// <value>Maximum of average write size in bytes.</value>

        [DataMember(Name="max_avg_write_size")]
        public float? MaxAvgWriteSize { get; set; }

        /// <summary>
        /// Maximum of average read and write size in bytes.
        /// </summary>
        /// <value>Maximum of average read and write size in bytes.</value>

        [DataMember(Name="max_avg_size")]
        public float? MaxAvgSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceMetricsByFileSystemRollup {\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  FileSystemId: ").Append(FileSystemId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("  AvgReadIops: ").Append(AvgReadIops).Append("\n");
            sb.Append("  AvgWriteIops: ").Append(AvgWriteIops).Append("\n");
            sb.Append("  AvgBlockWriteIops: ").Append(AvgBlockWriteIops).Append("\n");
            sb.Append("  AvgMirrorWriteIops: ").Append(AvgMirrorWriteIops).Append("\n");
            sb.Append("  AvgTotalIops: ").Append(AvgTotalIops).Append("\n");
            sb.Append("  MaxReadIops: ").Append(MaxReadIops).Append("\n");
            sb.Append("  MaxWriteIops: ").Append(MaxWriteIops).Append("\n");
            sb.Append("  MaxBlockWriteIops: ").Append(MaxBlockWriteIops).Append("\n");
            sb.Append("  MaxMirrorWriteIops: ").Append(MaxMirrorWriteIops).Append("\n");
            sb.Append("  MaxIops: ").Append(MaxIops).Append("\n");
            sb.Append("  AvgReadBandwidth: ").Append(AvgReadBandwidth).Append("\n");
            sb.Append("  AvgWriteBandwidth: ").Append(AvgWriteBandwidth).Append("\n");
            sb.Append("  AvgBlockWriteBandwidth: ").Append(AvgBlockWriteBandwidth).Append("\n");
            sb.Append("  AvgMirrorWriteBandwidth: ").Append(AvgMirrorWriteBandwidth).Append("\n");
            sb.Append("  AvgTotalBandwidth: ").Append(AvgTotalBandwidth).Append("\n");
            sb.Append("  MaxReadBandwidth: ").Append(MaxReadBandwidth).Append("\n");
            sb.Append("  MaxWriteBandwidth: ").Append(MaxWriteBandwidth).Append("\n");
            sb.Append("  MaxBlockWriteBandwidth: ").Append(MaxBlockWriteBandwidth).Append("\n");
            sb.Append("  MaxMirrorWriteBandwidth: ").Append(MaxMirrorWriteBandwidth).Append("\n");
            sb.Append("  MaxTotalBandwidth: ").Append(MaxTotalBandwidth).Append("\n");
            sb.Append("  AvgReadLatency: ").Append(AvgReadLatency).Append("\n");
            sb.Append("  AvgWriteLatency: ").Append(AvgWriteLatency).Append("\n");
            sb.Append("  AvgBlockWriteLatency: ").Append(AvgBlockWriteLatency).Append("\n");
            sb.Append("  AvgMirrorOverheadLatency: ").Append(AvgMirrorOverheadLatency).Append("\n");
            sb.Append("  AvgLatency: ").Append(AvgLatency).Append("\n");
            sb.Append("  MaxAvgReadLatency: ").Append(MaxAvgReadLatency).Append("\n");
            sb.Append("  MaxAvgWriteLatency: ").Append(MaxAvgWriteLatency).Append("\n");
            sb.Append("  MaxAvgBlockWriteLatency: ").Append(MaxAvgBlockWriteLatency).Append("\n");
            sb.Append("  MaxAvgMirrorOverheadLatency: ").Append(MaxAvgMirrorOverheadLatency).Append("\n");
            sb.Append("  MaxAvgLatency: ").Append(MaxAvgLatency).Append("\n");
            sb.Append("  AvgReadSize: ").Append(AvgReadSize).Append("\n");
            sb.Append("  AvgWriteSize: ").Append(AvgWriteSize).Append("\n");
            sb.Append("  AvgSize: ").Append(AvgSize).Append("\n");
            sb.Append("  MaxAvgReadSize: ").Append(MaxAvgReadSize).Append("\n");
            sb.Append("  MaxAvgWriteSize: ").Append(MaxAvgWriteSize).Append("\n");
            sb.Append("  MaxAvgSize: ").Append(MaxAvgSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PerformanceMetricsByFileSystemRollup)obj);
        }

        /// <summary>
        /// Returns true if PerformanceMetricsByFileSystemRollup instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceMetricsByFileSystemRollup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceMetricsByFileSystemRollup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    FileSystemId == other.FileSystemId ||
                    FileSystemId != null &&
                    FileSystemId.Equals(other.FileSystemId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                ) && 
                (
                    AvgReadIops == other.AvgReadIops ||
                    AvgReadIops != null &&
                    AvgReadIops.Equals(other.AvgReadIops)
                ) && 
                (
                    AvgWriteIops == other.AvgWriteIops ||
                    AvgWriteIops != null &&
                    AvgWriteIops.Equals(other.AvgWriteIops)
                ) && 
                (
                    AvgBlockWriteIops == other.AvgBlockWriteIops ||
                    AvgBlockWriteIops != null &&
                    AvgBlockWriteIops.Equals(other.AvgBlockWriteIops)
                ) && 
                (
                    AvgMirrorWriteIops == other.AvgMirrorWriteIops ||
                    AvgMirrorWriteIops != null &&
                    AvgMirrorWriteIops.Equals(other.AvgMirrorWriteIops)
                ) && 
                (
                    AvgTotalIops == other.AvgTotalIops ||
                    AvgTotalIops != null &&
                    AvgTotalIops.Equals(other.AvgTotalIops)
                ) && 
                (
                    MaxReadIops == other.MaxReadIops ||
                    MaxReadIops != null &&
                    MaxReadIops.Equals(other.MaxReadIops)
                ) && 
                (
                    MaxWriteIops == other.MaxWriteIops ||
                    MaxWriteIops != null &&
                    MaxWriteIops.Equals(other.MaxWriteIops)
                ) && 
                (
                    MaxBlockWriteIops == other.MaxBlockWriteIops ||
                    MaxBlockWriteIops != null &&
                    MaxBlockWriteIops.Equals(other.MaxBlockWriteIops)
                ) && 
                (
                    MaxMirrorWriteIops == other.MaxMirrorWriteIops ||
                    MaxMirrorWriteIops != null &&
                    MaxMirrorWriteIops.Equals(other.MaxMirrorWriteIops)
                ) && 
                (
                    MaxIops == other.MaxIops ||
                    MaxIops != null &&
                    MaxIops.Equals(other.MaxIops)
                ) && 
                (
                    AvgReadBandwidth == other.AvgReadBandwidth ||
                    AvgReadBandwidth != null &&
                    AvgReadBandwidth.Equals(other.AvgReadBandwidth)
                ) && 
                (
                    AvgWriteBandwidth == other.AvgWriteBandwidth ||
                    AvgWriteBandwidth != null &&
                    AvgWriteBandwidth.Equals(other.AvgWriteBandwidth)
                ) && 
                (
                    AvgBlockWriteBandwidth == other.AvgBlockWriteBandwidth ||
                    AvgBlockWriteBandwidth != null &&
                    AvgBlockWriteBandwidth.Equals(other.AvgBlockWriteBandwidth)
                ) && 
                (
                    AvgMirrorWriteBandwidth == other.AvgMirrorWriteBandwidth ||
                    AvgMirrorWriteBandwidth != null &&
                    AvgMirrorWriteBandwidth.Equals(other.AvgMirrorWriteBandwidth)
                ) && 
                (
                    AvgTotalBandwidth == other.AvgTotalBandwidth ||
                    AvgTotalBandwidth != null &&
                    AvgTotalBandwidth.Equals(other.AvgTotalBandwidth)
                ) && 
                (
                    MaxReadBandwidth == other.MaxReadBandwidth ||
                    MaxReadBandwidth != null &&
                    MaxReadBandwidth.Equals(other.MaxReadBandwidth)
                ) && 
                (
                    MaxWriteBandwidth == other.MaxWriteBandwidth ||
                    MaxWriteBandwidth != null &&
                    MaxWriteBandwidth.Equals(other.MaxWriteBandwidth)
                ) && 
                (
                    MaxBlockWriteBandwidth == other.MaxBlockWriteBandwidth ||
                    MaxBlockWriteBandwidth != null &&
                    MaxBlockWriteBandwidth.Equals(other.MaxBlockWriteBandwidth)
                ) && 
                (
                    MaxMirrorWriteBandwidth == other.MaxMirrorWriteBandwidth ||
                    MaxMirrorWriteBandwidth != null &&
                    MaxMirrorWriteBandwidth.Equals(other.MaxMirrorWriteBandwidth)
                ) && 
                (
                    MaxTotalBandwidth == other.MaxTotalBandwidth ||
                    MaxTotalBandwidth != null &&
                    MaxTotalBandwidth.Equals(other.MaxTotalBandwidth)
                ) && 
                (
                    AvgReadLatency == other.AvgReadLatency ||
                    AvgReadLatency != null &&
                    AvgReadLatency.Equals(other.AvgReadLatency)
                ) && 
                (
                    AvgWriteLatency == other.AvgWriteLatency ||
                    AvgWriteLatency != null &&
                    AvgWriteLatency.Equals(other.AvgWriteLatency)
                ) && 
                (
                    AvgBlockWriteLatency == other.AvgBlockWriteLatency ||
                    AvgBlockWriteLatency != null &&
                    AvgBlockWriteLatency.Equals(other.AvgBlockWriteLatency)
                ) && 
                (
                    AvgMirrorOverheadLatency == other.AvgMirrorOverheadLatency ||
                    AvgMirrorOverheadLatency != null &&
                    AvgMirrorOverheadLatency.Equals(other.AvgMirrorOverheadLatency)
                ) && 
                (
                    AvgLatency == other.AvgLatency ||
                    AvgLatency != null &&
                    AvgLatency.Equals(other.AvgLatency)
                ) && 
                (
                    MaxAvgReadLatency == other.MaxAvgReadLatency ||
                    MaxAvgReadLatency != null &&
                    MaxAvgReadLatency.Equals(other.MaxAvgReadLatency)
                ) && 
                (
                    MaxAvgWriteLatency == other.MaxAvgWriteLatency ||
                    MaxAvgWriteLatency != null &&
                    MaxAvgWriteLatency.Equals(other.MaxAvgWriteLatency)
                ) && 
                (
                    MaxAvgBlockWriteLatency == other.MaxAvgBlockWriteLatency ||
                    MaxAvgBlockWriteLatency != null &&
                    MaxAvgBlockWriteLatency.Equals(other.MaxAvgBlockWriteLatency)
                ) && 
                (
                    MaxAvgMirrorOverheadLatency == other.MaxAvgMirrorOverheadLatency ||
                    MaxAvgMirrorOverheadLatency != null &&
                    MaxAvgMirrorOverheadLatency.Equals(other.MaxAvgMirrorOverheadLatency)
                ) && 
                (
                    MaxAvgLatency == other.MaxAvgLatency ||
                    MaxAvgLatency != null &&
                    MaxAvgLatency.Equals(other.MaxAvgLatency)
                ) && 
                (
                    AvgReadSize == other.AvgReadSize ||
                    AvgReadSize != null &&
                    AvgReadSize.Equals(other.AvgReadSize)
                ) && 
                (
                    AvgWriteSize == other.AvgWriteSize ||
                    AvgWriteSize != null &&
                    AvgWriteSize.Equals(other.AvgWriteSize)
                ) && 
                (
                    AvgSize == other.AvgSize ||
                    AvgSize != null &&
                    AvgSize.Equals(other.AvgSize)
                ) && 
                (
                    MaxAvgReadSize == other.MaxAvgReadSize ||
                    MaxAvgReadSize != null &&
                    MaxAvgReadSize.Equals(other.MaxAvgReadSize)
                ) && 
                (
                    MaxAvgWriteSize == other.MaxAvgWriteSize ||
                    MaxAvgWriteSize != null &&
                    MaxAvgWriteSize.Equals(other.MaxAvgWriteSize)
                ) && 
                (
                    MaxAvgSize == other.MaxAvgSize ||
                    MaxAvgSize != null &&
                    MaxAvgSize.Equals(other.MaxAvgSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (FileSystemId != null)
                    hashCode = hashCode * 59 + FileSystemId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                    if (AvgReadIops != null)
                    hashCode = hashCode * 59 + AvgReadIops.GetHashCode();
                    if (AvgWriteIops != null)
                    hashCode = hashCode * 59 + AvgWriteIops.GetHashCode();
                    if (AvgBlockWriteIops != null)
                    hashCode = hashCode * 59 + AvgBlockWriteIops.GetHashCode();
                    if (AvgMirrorWriteIops != null)
                    hashCode = hashCode * 59 + AvgMirrorWriteIops.GetHashCode();
                    if (AvgTotalIops != null)
                    hashCode = hashCode * 59 + AvgTotalIops.GetHashCode();
                    if (MaxReadIops != null)
                    hashCode = hashCode * 59 + MaxReadIops.GetHashCode();
                    if (MaxWriteIops != null)
                    hashCode = hashCode * 59 + MaxWriteIops.GetHashCode();
                    if (MaxBlockWriteIops != null)
                    hashCode = hashCode * 59 + MaxBlockWriteIops.GetHashCode();
                    if (MaxMirrorWriteIops != null)
                    hashCode = hashCode * 59 + MaxMirrorWriteIops.GetHashCode();
                    if (MaxIops != null)
                    hashCode = hashCode * 59 + MaxIops.GetHashCode();
                    if (AvgReadBandwidth != null)
                    hashCode = hashCode * 59 + AvgReadBandwidth.GetHashCode();
                    if (AvgWriteBandwidth != null)
                    hashCode = hashCode * 59 + AvgWriteBandwidth.GetHashCode();
                    if (AvgBlockWriteBandwidth != null)
                    hashCode = hashCode * 59 + AvgBlockWriteBandwidth.GetHashCode();
                    if (AvgMirrorWriteBandwidth != null)
                    hashCode = hashCode * 59 + AvgMirrorWriteBandwidth.GetHashCode();
                    if (AvgTotalBandwidth != null)
                    hashCode = hashCode * 59 + AvgTotalBandwidth.GetHashCode();
                    if (MaxReadBandwidth != null)
                    hashCode = hashCode * 59 + MaxReadBandwidth.GetHashCode();
                    if (MaxWriteBandwidth != null)
                    hashCode = hashCode * 59 + MaxWriteBandwidth.GetHashCode();
                    if (MaxBlockWriteBandwidth != null)
                    hashCode = hashCode * 59 + MaxBlockWriteBandwidth.GetHashCode();
                    if (MaxMirrorWriteBandwidth != null)
                    hashCode = hashCode * 59 + MaxMirrorWriteBandwidth.GetHashCode();
                    if (MaxTotalBandwidth != null)
                    hashCode = hashCode * 59 + MaxTotalBandwidth.GetHashCode();
                    if (AvgReadLatency != null)
                    hashCode = hashCode * 59 + AvgReadLatency.GetHashCode();
                    if (AvgWriteLatency != null)
                    hashCode = hashCode * 59 + AvgWriteLatency.GetHashCode();
                    if (AvgBlockWriteLatency != null)
                    hashCode = hashCode * 59 + AvgBlockWriteLatency.GetHashCode();
                    if (AvgMirrorOverheadLatency != null)
                    hashCode = hashCode * 59 + AvgMirrorOverheadLatency.GetHashCode();
                    if (AvgLatency != null)
                    hashCode = hashCode * 59 + AvgLatency.GetHashCode();
                    if (MaxAvgReadLatency != null)
                    hashCode = hashCode * 59 + MaxAvgReadLatency.GetHashCode();
                    if (MaxAvgWriteLatency != null)
                    hashCode = hashCode * 59 + MaxAvgWriteLatency.GetHashCode();
                    if (MaxAvgBlockWriteLatency != null)
                    hashCode = hashCode * 59 + MaxAvgBlockWriteLatency.GetHashCode();
                    if (MaxAvgMirrorOverheadLatency != null)
                    hashCode = hashCode * 59 + MaxAvgMirrorOverheadLatency.GetHashCode();
                    if (MaxAvgLatency != null)
                    hashCode = hashCode * 59 + MaxAvgLatency.GetHashCode();
                    if (AvgReadSize != null)
                    hashCode = hashCode * 59 + AvgReadSize.GetHashCode();
                    if (AvgWriteSize != null)
                    hashCode = hashCode * 59 + AvgWriteSize.GetHashCode();
                    if (AvgSize != null)
                    hashCode = hashCode * 59 + AvgSize.GetHashCode();
                    if (MaxAvgReadSize != null)
                    hashCode = hashCode * 59 + MaxAvgReadSize.GetHashCode();
                    if (MaxAvgWriteSize != null)
                    hashCode = hashCode * 59 + MaxAvgWriteSize.GetHashCode();
                    if (MaxAvgSize != null)
                    hashCode = hashCode * 59 + MaxAvgSize.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PerformanceMetricsByFileSystemRollup left, PerformanceMetricsByFileSystemRollup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PerformanceMetricsByFileSystemRollup left, PerformanceMetricsByFileSystemRollup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
