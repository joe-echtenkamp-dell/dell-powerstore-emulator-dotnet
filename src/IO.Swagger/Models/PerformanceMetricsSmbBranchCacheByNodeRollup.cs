/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Performance metrics  nfs level performance metric data for the period beginning with timestamp, including the average and maximum values for that period. 
    /// </summary>
    [DataContract]
    public partial class PerformanceMetricsSmbBranchCacheByNodeRollup : MetricsGenerateResponse, IEquatable<PerformanceMetricsSmbBranchCacheByNodeRollup>
    { 
        /// <summary>
        /// Unique identifier of the node.
        /// </summary>
        /// <value>Unique identifier of the node.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// Unique identifier of the appliance. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the appliance. Was added in version 3.0.0.0.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// End of sample period.
        /// </summary>
        /// <value>End of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Number of consecutive sampling periods during which there were no changes in the metrics values. If the value is omitted from the response, it is 1 (no additional repeats). 
        /// </summary>
        /// <value>Number of consecutive sampling periods during which there were no changes in the metrics values. If the value is omitted from the response, it is 1 (no additional repeats). </value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Max hash size.
        /// </summary>
        /// <value>Max hash size.</value>

        [DataMember(Name="hash_max_size")]
        public float? HashMaxSize { get; set; }

        /// <summary>
        /// Max hash size.
        /// </summary>
        /// <value>Max hash size.</value>

        [DataMember(Name="hash_min_size")]
        public float? HashMinSize { get; set; }

        /// <summary>
        /// Average hash size.
        /// </summary>
        /// <value>Average hash size.</value>

        [DataMember(Name="hash_avg_size")]
        public float? HashAvgSize { get; set; }

        /// <summary>
        /// Average max hash size.
        /// </summary>
        /// <value>Average max hash size.</value>

        [DataMember(Name="hash_max_avg_size")]
        public float? HashMaxAvgSize { get; set; }

        /// <summary>
        /// Max hash latency.
        /// </summary>
        /// <value>Max hash latency.</value>

        [DataMember(Name="hash_max_latency")]
        public float? HashMaxLatency { get; set; }

        /// <summary>
        /// Min hash latency.
        /// </summary>
        /// <value>Min hash latency.</value>

        [DataMember(Name="hash_min_latency")]
        public float? HashMinLatency { get; set; }

        /// <summary>
        /// Average hash latency.
        /// </summary>
        /// <value>Average hash latency.</value>

        [DataMember(Name="hash_avg_latency")]
        public float? HashAvgLatency { get; set; }

        /// <summary>
        /// Average max hash latency.
        /// </summary>
        /// <value>Average max hash latency.</value>

        [DataMember(Name="hash_max_avg_latency")]
        public float? HashMaxAvgLatency { get; set; }

        /// <summary>
        /// Total tasks.
        /// </summary>
        /// <value>Total tasks.</value>

        [DataMember(Name="total_tasks")]
        public float? TotalTasks { get; set; }

        /// <summary>
        /// Total rejected task.
        /// </summary>
        /// <value>Total rejected task.</value>

        [DataMember(Name="total_rejected_tasks")]
        public float? TotalRejectedTasks { get; set; }

        /// <summary>
        /// Max used threads
        /// </summary>
        /// <value>Max used threads</value>

        [DataMember(Name="max_used_threads")]
        public float? MaxUsedThreads { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceMetricsSmbBranchCacheByNodeRollup {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("  HashMaxSize: ").Append(HashMaxSize).Append("\n");
            sb.Append("  HashMinSize: ").Append(HashMinSize).Append("\n");
            sb.Append("  HashAvgSize: ").Append(HashAvgSize).Append("\n");
            sb.Append("  HashMaxAvgSize: ").Append(HashMaxAvgSize).Append("\n");
            sb.Append("  HashMaxLatency: ").Append(HashMaxLatency).Append("\n");
            sb.Append("  HashMinLatency: ").Append(HashMinLatency).Append("\n");
            sb.Append("  HashAvgLatency: ").Append(HashAvgLatency).Append("\n");
            sb.Append("  HashMaxAvgLatency: ").Append(HashMaxAvgLatency).Append("\n");
            sb.Append("  TotalTasks: ").Append(TotalTasks).Append("\n");
            sb.Append("  TotalRejectedTasks: ").Append(TotalRejectedTasks).Append("\n");
            sb.Append("  MaxUsedThreads: ").Append(MaxUsedThreads).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PerformanceMetricsSmbBranchCacheByNodeRollup)obj);
        }

        /// <summary>
        /// Returns true if PerformanceMetricsSmbBranchCacheByNodeRollup instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceMetricsSmbBranchCacheByNodeRollup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceMetricsSmbBranchCacheByNodeRollup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                ) && 
                (
                    HashMaxSize == other.HashMaxSize ||
                    HashMaxSize != null &&
                    HashMaxSize.Equals(other.HashMaxSize)
                ) && 
                (
                    HashMinSize == other.HashMinSize ||
                    HashMinSize != null &&
                    HashMinSize.Equals(other.HashMinSize)
                ) && 
                (
                    HashAvgSize == other.HashAvgSize ||
                    HashAvgSize != null &&
                    HashAvgSize.Equals(other.HashAvgSize)
                ) && 
                (
                    HashMaxAvgSize == other.HashMaxAvgSize ||
                    HashMaxAvgSize != null &&
                    HashMaxAvgSize.Equals(other.HashMaxAvgSize)
                ) && 
                (
                    HashMaxLatency == other.HashMaxLatency ||
                    HashMaxLatency != null &&
                    HashMaxLatency.Equals(other.HashMaxLatency)
                ) && 
                (
                    HashMinLatency == other.HashMinLatency ||
                    HashMinLatency != null &&
                    HashMinLatency.Equals(other.HashMinLatency)
                ) && 
                (
                    HashAvgLatency == other.HashAvgLatency ||
                    HashAvgLatency != null &&
                    HashAvgLatency.Equals(other.HashAvgLatency)
                ) && 
                (
                    HashMaxAvgLatency == other.HashMaxAvgLatency ||
                    HashMaxAvgLatency != null &&
                    HashMaxAvgLatency.Equals(other.HashMaxAvgLatency)
                ) && 
                (
                    TotalTasks == other.TotalTasks ||
                    TotalTasks != null &&
                    TotalTasks.Equals(other.TotalTasks)
                ) && 
                (
                    TotalRejectedTasks == other.TotalRejectedTasks ||
                    TotalRejectedTasks != null &&
                    TotalRejectedTasks.Equals(other.TotalRejectedTasks)
                ) && 
                (
                    MaxUsedThreads == other.MaxUsedThreads ||
                    MaxUsedThreads != null &&
                    MaxUsedThreads.Equals(other.MaxUsedThreads)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                    if (HashMaxSize != null)
                    hashCode = hashCode * 59 + HashMaxSize.GetHashCode();
                    if (HashMinSize != null)
                    hashCode = hashCode * 59 + HashMinSize.GetHashCode();
                    if (HashAvgSize != null)
                    hashCode = hashCode * 59 + HashAvgSize.GetHashCode();
                    if (HashMaxAvgSize != null)
                    hashCode = hashCode * 59 + HashMaxAvgSize.GetHashCode();
                    if (HashMaxLatency != null)
                    hashCode = hashCode * 59 + HashMaxLatency.GetHashCode();
                    if (HashMinLatency != null)
                    hashCode = hashCode * 59 + HashMinLatency.GetHashCode();
                    if (HashAvgLatency != null)
                    hashCode = hashCode * 59 + HashAvgLatency.GetHashCode();
                    if (HashMaxAvgLatency != null)
                    hashCode = hashCode * 59 + HashMaxAvgLatency.GetHashCode();
                    if (TotalTasks != null)
                    hashCode = hashCode * 59 + TotalTasks.GetHashCode();
                    if (TotalRejectedTasks != null)
                    hashCode = hashCode * 59 + TotalRejectedTasks.GetHashCode();
                    if (MaxUsedThreads != null)
                    hashCode = hashCode * 59 + MaxUsedThreads.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PerformanceMetricsSmbBranchCacheByNodeRollup left, PerformanceMetricsSmbBranchCacheByNodeRollup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PerformanceMetricsSmbBranchCacheByNodeRollup left, PerformanceMetricsSmbBranchCacheByNodeRollup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
