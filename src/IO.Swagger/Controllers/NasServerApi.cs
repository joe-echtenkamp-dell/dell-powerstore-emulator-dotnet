/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NasServerApiController : ControllerBase
    { 
        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query all NAS servers.</remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of nas server instance objects</response>
        [HttpGet]
        [Route("/api/rest/nas_server")]
        [ValidateModelState]
        [SwaggerOperation("NasServerGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NasServerInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<NasServerInstance>), description: "Partial content of nas server instance objects")]
        public virtual IActionResult NasServerGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NasServerInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<NasServerInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<NasServerInstance>>(exampleJson)
            : default(List<NasServerInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Clone the NAS Server
        /// </summary>
        /// <remarks>Clone creates a new NAS server by using the existing NAS server specified by id as a template. The new NAS server will have all the configurations except for file interfaces. The SMB and NFS server names, when configured, must be changed to avoid server names conflict with the original NAS server. Once cloned, the new NAS server configuration has to be completed using the individual configuration resources. The new NAS server does not have any ongoing relationship with the cloned NAS server specified, while the new filesystems are clones of and part of the family of each original filesystem.  Use of the is_dr_test option means that the networking for the new clone must be isolated from the network of the original nas_server, because the clone will have duplicate IP addresses with the original.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">NAS Server instance id. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server/{id}/clone")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdClonePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdClonePost([FromRoute][Required]string id, [FromBody]NasServerClone body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateResponse>(exampleJson)
            : default(CreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>Delete a NAS server.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpDelete]
        [Route("/api/rest/nas_server/{id}")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdDelete([FromRoute][Required]string id, [FromBody]NasServerDelete body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Download File
        /// </summary>
        /// <remarks>Download a NAS server group file containing the template or the actual (if already uploaded) group details.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpGet]
        [Route("/api/rest/nas_server/{id}/download/group")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdDownloadGroupGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NasServerGroupFile), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdDownloadGroupGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NasServerGroupFile));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NasServerGroupFile>(exampleJson)
            : default(NasServerGroupFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Download File
        /// </summary>
        /// <remarks>Download a NAS server homedir file containing the template or the actual (if already uploaded) homedir configuration settings.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpGet]
        [Route("/api/rest/nas_server/{id}/download/homedir")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdDownloadHomedirGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NasServerHomedirFile), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdDownloadHomedirGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NasServerHomedirFile));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NasServerHomedirFile>(exampleJson)
            : default(NasServerHomedirFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Download File
        /// </summary>
        /// <remarks>Download an NAS server host file containing template/actual(if already uploaded) host details.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpGet]
        [Route("/api/rest/nas_server/{id}/download/hosts")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdDownloadHostsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NasServerHostsFile), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdDownloadHostsGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NasServerHostsFile));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NasServerHostsFile>(exampleJson)
            : default(NasServerHostsFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Download File
        /// </summary>
        /// <remarks>Download an NAS server netgroup file containing the template or the actual (if already uploaded) netgroup details.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpGet]
        [Route("/api/rest/nas_server/{id}/download/netgroup")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdDownloadNetgroupGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NasServerNetgroupFile), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdDownloadNetgroupGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NasServerNetgroupFile));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NasServerNetgroupFile>(exampleJson)
            : default(NasServerNetgroupFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Download File
        /// </summary>
        /// <remarks>Download a NAS server nsswitch file containing the template or the actual (if already uploaded) nsswitch configuration settings.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpGet]
        [Route("/api/rest/nas_server/{id}/download/nsswitch")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdDownloadNsswitchGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NasServerNsswitchFile), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdDownloadNsswitchGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NasServerNsswitchFile));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NasServerNsswitchFile>(exampleJson)
            : default(NasServerNsswitchFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Download File
        /// </summary>
        /// <remarks>Download an NAS server ntxmap file containing the template or the actual (if already uploaded) ntxmap configuration settings.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpGet]
        [Route("/api/rest/nas_server/{id}/download/ntxmap")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdDownloadNtxmapGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NasServerNtxmapFile), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdDownloadNtxmapGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NasServerNtxmapFile));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NasServerNtxmapFile>(exampleJson)
            : default(NasServerNtxmapFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Download File
        /// </summary>
        /// <remarks>Download a NAS server passwd file containing template or the actual (if already uploaded) passwd details.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpGet]
        [Route("/api/rest/nas_server/{id}/download/passwd")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdDownloadPasswdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NasServerPasswdFile), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdDownloadPasswdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NasServerPasswdFile));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NasServerPasswdFile>(exampleJson)
            : default(NasServerPasswdFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Download User Mapping Report
        /// </summary>
        /// <remarks>Download the report generated by the update_user_mappings action. </remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpGet]
        [Route("/api/rest/nas_server/{id}/download/user_mapping_report")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdDownloadUserMappingReportGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NasServerUserMappingReportFile), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdDownloadUserMappingReportGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NasServerUserMappingReportFile));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NasServerUserMappingReportFile>(exampleJson)
            : default(NasServerUserMappingReportFile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query a specific NAS server.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/nas_server/{id}")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NasServerInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult NasServerIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NasServerInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NasServerInstance>(exampleJson)
            : default(NasServerInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify
        /// </summary>
        /// <remarks>Modify the settings of a NAS server.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPatch]
        [Route("/api/rest/nas_server/{id}")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdPatch")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdPatch([FromRoute][Required]string id, [FromBody]NasServerModify body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Ping an IP address
        /// </summary>
        /// <remarks>Ping destination from NAS server.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server/{id}/ping")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdPingPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdPingPost([FromRoute][Required]string id, [FromBody]NasServerPing body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Update User Mappings
        /// </summary>
        /// <remarks>Fix the user mappings for all file systems associated with the NAS server. This process updates file ownership on the NAS server&#39;s file systems to reflect changes to users&#39; SIDs. A new UID/GID will be obtained from a Unix Directory Service for the user name of the object owner. A user mapping report is also generated. This operation can take a significant amount of time, depending of the size of the file systems.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server/{id}/update_user_mappings")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdUpdateUserMappingsPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdUpdateUserMappingsPost([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>Upload NAS server group file.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <param name="body">Upload NAS server group file.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server/{id}/upload/group")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdUploadGroupPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdUploadGroupPost([FromRoute][Required]string id, [FromForm]System.IO.Stream body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>Upload the NAS server homedir file.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <param name="body">Upload the NAS server homedir file.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server/{id}/upload/homedir")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdUploadHomedirPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdUploadHomedirPost([FromRoute][Required]string id, [FromForm]System.IO.Stream body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>Upload NAS server host file.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <param name="body">Upload NAS server host file.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server/{id}/upload/hosts")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdUploadHostsPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdUploadHostsPost([FromRoute][Required]string id, [FromForm]System.IO.Stream body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>Upload the NAS server netgroup file.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <param name="body">Upload the NAS server netgroup file.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server/{id}/upload/netgroup")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdUploadNetgroupPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdUploadNetgroupPost([FromRoute][Required]string id, [FromForm]System.IO.Stream body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>Upload the NAS server nsswitch file.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <param name="body">Upload the NAS server nsswitch file.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server/{id}/upload/nsswitch")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdUploadNsswitchPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdUploadNsswitchPost([FromRoute][Required]string id, [FromForm]System.IO.Stream body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Upload File
        /// </summary>
        
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <param name="body">Upload the NAS server ntxmap file.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server/{id}/upload/ntxmap")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdUploadNtxmapPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdUploadNtxmapPost([FromRoute][Required]string id, [FromForm]System.IO.Stream body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>Upload NAS server passwd file.</remarks>
        /// <param name="id">Unique identifier of the NAS server. name:{name} can be used instead of {id}.</param>
        /// <param name="body">Upload NAS server passwd file.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server/{id}/upload/passwd")]
        [ValidateModelState]
        [SwaggerOperation("NasServerIdUploadPasswdPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerIdUploadPasswdPost([FromRoute][Required]string id, [FromForm]System.IO.Stream body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>Create a NAS server.</remarks>
        /// <param name="body"></param>
        /// <response code="201">Created</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/nas_server")]
        [ValidateModelState]
        [SwaggerOperation("NasServerPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(CreateResponse), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult NasServerPost([FromBody]NasServerCreate body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(CreateResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateResponse>(exampleJson)
            : default(CreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
