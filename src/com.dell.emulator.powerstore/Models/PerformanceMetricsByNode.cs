/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Performance metrics for the node collected at twenty second interval.
    /// </summary>
    [DataContract]
    public partial class PerformanceMetricsByNode : MetricsGenerateResponse, IEquatable<PerformanceMetricsByNode>
    { 
        /// <summary>
        /// Unique identifier representing a specific node.
        /// </summary>
        /// <value>Unique identifier representing a specific node.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// Reference to the associated appliance on which these metrics were recorded.
        /// </summary>
        /// <value>Reference to the associated appliance on which these metrics were recorded.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// End of sample period.
        /// </summary>
        /// <value>End of sample period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Average read and write latency in microseconds.
        /// </summary>
        /// <value>Average read and write latency in microseconds.</value>

        [DataMember(Name="avg_latency")]
        public float? AvgLatency { get; set; }

        /// <summary>
        /// Average read latency in microseconds.
        /// </summary>
        /// <value>Average read latency in microseconds.</value>

        [DataMember(Name="avg_read_latency")]
        public float? AvgReadLatency { get; set; }

        /// <summary>
        /// Average write latency in microseconds.
        /// </summary>
        /// <value>Average write latency in microseconds.</value>

        [DataMember(Name="avg_write_latency")]
        public float? AvgWriteLatency { get; set; }

        /// <summary>
        /// Average mirror write latency in microseconds.  This applies to metro volumes in the active-active state. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Average mirror write latency in microseconds.  This applies to metro volumes in the active-active state. Was added in version 3.0.0.0.</value>

        [DataMember(Name="avg_mirror_write_latency")]
        public float? AvgMirrorWriteLatency { get; set; }

        /// <summary>
        /// Average additional latency incurred on the source in order to do the remote mirror writes in microseconds. This applies to metro volumes in the active-active state. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Average additional latency incurred on the source in order to do the remote mirror writes in microseconds. This applies to metro volumes in the active-active state. Was added in version 3.0.0.0.</value>

        [DataMember(Name="avg_mirror_overhead_latency")]
        public float? AvgMirrorOverheadLatency { get; set; }

        /// <summary>
        /// Average read size in bytes.
        /// </summary>
        /// <value>Average read size in bytes.</value>

        [DataMember(Name="avg_read_size")]
        public float? AvgReadSize { get; set; }

        /// <summary>
        /// Average write size in bytes.
        /// </summary>
        /// <value>Average write size in bytes.</value>

        [DataMember(Name="avg_write_size")]
        public float? AvgWriteSize { get; set; }

        /// <summary>
        /// The percentage of CPU Utilization on the cores dedicated to servicing storage I/O requests.
        /// </summary>
        /// <value>The percentage of CPU Utilization on the cores dedicated to servicing storage I/O requests.</value>

        [DataMember(Name="io_workload_cpu_utilization")]
        public float? IoWorkloadCpuUtilization { get; set; }

        /// <summary>
        /// Average size of read and write operations in bytes.
        /// </summary>
        /// <value>Average size of read and write operations in bytes.</value>

        [DataMember(Name="avg_io_size")]
        public float? AvgIoSize { get; set; }

        /// <summary>
        /// Total number of read operations by the node.
        /// </summary>
        /// <value>Total number of read operations by the node.</value>

        [DataMember(Name="read_iops")]
        public float? ReadIops { get; set; }

        /// <summary>
        /// Total write operations per second.
        /// </summary>
        /// <value>Total write operations per second.</value>

        [DataMember(Name="write_iops")]
        public float? WriteIops { get; set; }

        /// <summary>
        /// Total mirror write operations per second.  This applies to metro volumes in the active-active state. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Total mirror write operations per second.  This applies to metro volumes in the active-active state. Was added in version 3.0.0.0.</value>

        [DataMember(Name="mirror_write_iops")]
        public float? MirrorWriteIops { get; set; }

        /// <summary>
        /// Total read and write operations per second.
        /// </summary>
        /// <value>Total read and write operations per second.</value>

        [DataMember(Name="total_iops")]
        public float? TotalIops { get; set; }

        /// <summary>
        /// Read rate in bytes per second.
        /// </summary>
        /// <value>Read rate in bytes per second.</value>

        [DataMember(Name="read_bandwidth")]
        public float? ReadBandwidth { get; set; }

        /// <summary>
        /// Write rate in byte/sec.
        /// </summary>
        /// <value>Write rate in byte/sec.</value>

        [DataMember(Name="write_bandwidth")]
        public float? WriteBandwidth { get; set; }

        /// <summary>
        /// Metro write rate in bytes per second.  This applies to metro volumes in the active-active state. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Metro write rate in bytes per second.  This applies to metro volumes in the active-active state. Was added in version 3.0.0.0.</value>

        [DataMember(Name="mirror_write_bandwidth")]
        public float? MirrorWriteBandwidth { get; set; }

        /// <summary>
        /// Total data transfer rate in bytes per second.
        /// </summary>
        /// <value>Total data transfer rate in bytes per second.</value>

        [DataMember(Name="total_bandwidth")]
        public float? TotalBandwidth { get; set; }

        /// <summary>
        /// Unaligned read input/output per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Unaligned read input/output per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="unaligned_read_iops")]
        public float? UnalignedReadIops { get; set; }

        /// <summary>
        /// Unaligned write input/output per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Unaligned write input/output per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="unaligned_write_iops")]
        public float? UnalignedWriteIops { get; set; }

        /// <summary>
        /// Unaligned total input/output per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Unaligned total input/output per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="unaligned_iops")]
        public float? UnalignedIops { get; set; }

        /// <summary>
        /// Unaligned read rate in bytes per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Unaligned read rate in bytes per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="unaligned_read_bandwidth")]
        public float? UnalignedReadBandwidth { get; set; }

        /// <summary>
        /// Unaligned write rate in bytes per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Unaligned write rate in bytes per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="unaligned_write_bandwidth")]
        public float? UnalignedWriteBandwidth { get; set; }

        /// <summary>
        /// Unaligned read/write rate in bytes per second. Was deprecated in version 2.1.0.0.
        /// </summary>
        /// <value>Unaligned read/write rate in bytes per second. Was deprecated in version 2.1.0.0.</value>

        [DataMember(Name="unaligned_bandwidth")]
        public float? UnalignedBandwidth { get; set; }

        /// <summary>
        /// The number of logins to the target from initiators.
        /// </summary>
        /// <value>The number of logins to the target from initiators.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="current_logins")]
        public long? CurrentLogins { get; set; }

        /// <summary>
        /// Number of times the metrics are repeated.
        /// </summary>
        /// <value>Number of times the metrics are repeated.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceMetricsByNode {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AvgLatency: ").Append(AvgLatency).Append("\n");
            sb.Append("  AvgReadLatency: ").Append(AvgReadLatency).Append("\n");
            sb.Append("  AvgWriteLatency: ").Append(AvgWriteLatency).Append("\n");
            sb.Append("  AvgMirrorWriteLatency: ").Append(AvgMirrorWriteLatency).Append("\n");
            sb.Append("  AvgMirrorOverheadLatency: ").Append(AvgMirrorOverheadLatency).Append("\n");
            sb.Append("  AvgReadSize: ").Append(AvgReadSize).Append("\n");
            sb.Append("  AvgWriteSize: ").Append(AvgWriteSize).Append("\n");
            sb.Append("  IoWorkloadCpuUtilization: ").Append(IoWorkloadCpuUtilization).Append("\n");
            sb.Append("  AvgIoSize: ").Append(AvgIoSize).Append("\n");
            sb.Append("  ReadIops: ").Append(ReadIops).Append("\n");
            sb.Append("  WriteIops: ").Append(WriteIops).Append("\n");
            sb.Append("  MirrorWriteIops: ").Append(MirrorWriteIops).Append("\n");
            sb.Append("  TotalIops: ").Append(TotalIops).Append("\n");
            sb.Append("  ReadBandwidth: ").Append(ReadBandwidth).Append("\n");
            sb.Append("  WriteBandwidth: ").Append(WriteBandwidth).Append("\n");
            sb.Append("  MirrorWriteBandwidth: ").Append(MirrorWriteBandwidth).Append("\n");
            sb.Append("  TotalBandwidth: ").Append(TotalBandwidth).Append("\n");
            sb.Append("  UnalignedReadIops: ").Append(UnalignedReadIops).Append("\n");
            sb.Append("  UnalignedWriteIops: ").Append(UnalignedWriteIops).Append("\n");
            sb.Append("  UnalignedIops: ").Append(UnalignedIops).Append("\n");
            sb.Append("  UnalignedReadBandwidth: ").Append(UnalignedReadBandwidth).Append("\n");
            sb.Append("  UnalignedWriteBandwidth: ").Append(UnalignedWriteBandwidth).Append("\n");
            sb.Append("  UnalignedBandwidth: ").Append(UnalignedBandwidth).Append("\n");
            sb.Append("  CurrentLogins: ").Append(CurrentLogins).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PerformanceMetricsByNode)obj);
        }

        /// <summary>
        /// Returns true if PerformanceMetricsByNode instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceMetricsByNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceMetricsByNode other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    AvgLatency == other.AvgLatency ||
                    AvgLatency != null &&
                    AvgLatency.Equals(other.AvgLatency)
                ) && 
                (
                    AvgReadLatency == other.AvgReadLatency ||
                    AvgReadLatency != null &&
                    AvgReadLatency.Equals(other.AvgReadLatency)
                ) && 
                (
                    AvgWriteLatency == other.AvgWriteLatency ||
                    AvgWriteLatency != null &&
                    AvgWriteLatency.Equals(other.AvgWriteLatency)
                ) && 
                (
                    AvgMirrorWriteLatency == other.AvgMirrorWriteLatency ||
                    AvgMirrorWriteLatency != null &&
                    AvgMirrorWriteLatency.Equals(other.AvgMirrorWriteLatency)
                ) && 
                (
                    AvgMirrorOverheadLatency == other.AvgMirrorOverheadLatency ||
                    AvgMirrorOverheadLatency != null &&
                    AvgMirrorOverheadLatency.Equals(other.AvgMirrorOverheadLatency)
                ) && 
                (
                    AvgReadSize == other.AvgReadSize ||
                    AvgReadSize != null &&
                    AvgReadSize.Equals(other.AvgReadSize)
                ) && 
                (
                    AvgWriteSize == other.AvgWriteSize ||
                    AvgWriteSize != null &&
                    AvgWriteSize.Equals(other.AvgWriteSize)
                ) && 
                (
                    IoWorkloadCpuUtilization == other.IoWorkloadCpuUtilization ||
                    IoWorkloadCpuUtilization != null &&
                    IoWorkloadCpuUtilization.Equals(other.IoWorkloadCpuUtilization)
                ) && 
                (
                    AvgIoSize == other.AvgIoSize ||
                    AvgIoSize != null &&
                    AvgIoSize.Equals(other.AvgIoSize)
                ) && 
                (
                    ReadIops == other.ReadIops ||
                    ReadIops != null &&
                    ReadIops.Equals(other.ReadIops)
                ) && 
                (
                    WriteIops == other.WriteIops ||
                    WriteIops != null &&
                    WriteIops.Equals(other.WriteIops)
                ) && 
                (
                    MirrorWriteIops == other.MirrorWriteIops ||
                    MirrorWriteIops != null &&
                    MirrorWriteIops.Equals(other.MirrorWriteIops)
                ) && 
                (
                    TotalIops == other.TotalIops ||
                    TotalIops != null &&
                    TotalIops.Equals(other.TotalIops)
                ) && 
                (
                    ReadBandwidth == other.ReadBandwidth ||
                    ReadBandwidth != null &&
                    ReadBandwidth.Equals(other.ReadBandwidth)
                ) && 
                (
                    WriteBandwidth == other.WriteBandwidth ||
                    WriteBandwidth != null &&
                    WriteBandwidth.Equals(other.WriteBandwidth)
                ) && 
                (
                    MirrorWriteBandwidth == other.MirrorWriteBandwidth ||
                    MirrorWriteBandwidth != null &&
                    MirrorWriteBandwidth.Equals(other.MirrorWriteBandwidth)
                ) && 
                (
                    TotalBandwidth == other.TotalBandwidth ||
                    TotalBandwidth != null &&
                    TotalBandwidth.Equals(other.TotalBandwidth)
                ) && 
                (
                    UnalignedReadIops == other.UnalignedReadIops ||
                    UnalignedReadIops != null &&
                    UnalignedReadIops.Equals(other.UnalignedReadIops)
                ) && 
                (
                    UnalignedWriteIops == other.UnalignedWriteIops ||
                    UnalignedWriteIops != null &&
                    UnalignedWriteIops.Equals(other.UnalignedWriteIops)
                ) && 
                (
                    UnalignedIops == other.UnalignedIops ||
                    UnalignedIops != null &&
                    UnalignedIops.Equals(other.UnalignedIops)
                ) && 
                (
                    UnalignedReadBandwidth == other.UnalignedReadBandwidth ||
                    UnalignedReadBandwidth != null &&
                    UnalignedReadBandwidth.Equals(other.UnalignedReadBandwidth)
                ) && 
                (
                    UnalignedWriteBandwidth == other.UnalignedWriteBandwidth ||
                    UnalignedWriteBandwidth != null &&
                    UnalignedWriteBandwidth.Equals(other.UnalignedWriteBandwidth)
                ) && 
                (
                    UnalignedBandwidth == other.UnalignedBandwidth ||
                    UnalignedBandwidth != null &&
                    UnalignedBandwidth.Equals(other.UnalignedBandwidth)
                ) && 
                (
                    CurrentLogins == other.CurrentLogins ||
                    CurrentLogins != null &&
                    CurrentLogins.Equals(other.CurrentLogins)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (AvgLatency != null)
                    hashCode = hashCode * 59 + AvgLatency.GetHashCode();
                    if (AvgReadLatency != null)
                    hashCode = hashCode * 59 + AvgReadLatency.GetHashCode();
                    if (AvgWriteLatency != null)
                    hashCode = hashCode * 59 + AvgWriteLatency.GetHashCode();
                    if (AvgMirrorWriteLatency != null)
                    hashCode = hashCode * 59 + AvgMirrorWriteLatency.GetHashCode();
                    if (AvgMirrorOverheadLatency != null)
                    hashCode = hashCode * 59 + AvgMirrorOverheadLatency.GetHashCode();
                    if (AvgReadSize != null)
                    hashCode = hashCode * 59 + AvgReadSize.GetHashCode();
                    if (AvgWriteSize != null)
                    hashCode = hashCode * 59 + AvgWriteSize.GetHashCode();
                    if (IoWorkloadCpuUtilization != null)
                    hashCode = hashCode * 59 + IoWorkloadCpuUtilization.GetHashCode();
                    if (AvgIoSize != null)
                    hashCode = hashCode * 59 + AvgIoSize.GetHashCode();
                    if (ReadIops != null)
                    hashCode = hashCode * 59 + ReadIops.GetHashCode();
                    if (WriteIops != null)
                    hashCode = hashCode * 59 + WriteIops.GetHashCode();
                    if (MirrorWriteIops != null)
                    hashCode = hashCode * 59 + MirrorWriteIops.GetHashCode();
                    if (TotalIops != null)
                    hashCode = hashCode * 59 + TotalIops.GetHashCode();
                    if (ReadBandwidth != null)
                    hashCode = hashCode * 59 + ReadBandwidth.GetHashCode();
                    if (WriteBandwidth != null)
                    hashCode = hashCode * 59 + WriteBandwidth.GetHashCode();
                    if (MirrorWriteBandwidth != null)
                    hashCode = hashCode * 59 + MirrorWriteBandwidth.GetHashCode();
                    if (TotalBandwidth != null)
                    hashCode = hashCode * 59 + TotalBandwidth.GetHashCode();
                    if (UnalignedReadIops != null)
                    hashCode = hashCode * 59 + UnalignedReadIops.GetHashCode();
                    if (UnalignedWriteIops != null)
                    hashCode = hashCode * 59 + UnalignedWriteIops.GetHashCode();
                    if (UnalignedIops != null)
                    hashCode = hashCode * 59 + UnalignedIops.GetHashCode();
                    if (UnalignedReadBandwidth != null)
                    hashCode = hashCode * 59 + UnalignedReadBandwidth.GetHashCode();
                    if (UnalignedWriteBandwidth != null)
                    hashCode = hashCode * 59 + UnalignedWriteBandwidth.GetHashCode();
                    if (UnalignedBandwidth != null)
                    hashCode = hashCode * 59 + UnalignedBandwidth.GetHashCode();
                    if (CurrentLogins != null)
                    hashCode = hashCode * 59 + CurrentLogins.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PerformanceMetricsByNode left, PerformanceMetricsByNode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PerformanceMetricsByNode left, PerformanceMetricsByNode right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
