/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
        /// <summary>
        /// The state of the file import session, the expected states are: * Scheduled - The import is scheduled to run at a later time. The import remains in this state until the scheduled time arrives. * Queued - All imports are run in a First In First Out (FIFO) order. Sessions are queued when more sessions have been created the are supported for simultaneous import. * In_Progress - The file import session is in progress, performing an operation after Initialized. * Completed - Indicates that all operations through commit have been completed successfully. * Cancelling -  A cancel is in progress. Clients are switched back to the source system (if it happens after cutover). The source system is cleaned up, the destination NAS server and all imported objects including filesystems are deleted. * Cancelled - The import was cancelled. * Pausing - The data copy is transitioning to Paused. * Paused - The data copy between the source and destination NAS server is paused. * Failed - Indicates that there was an error during import. The appropriate error message is available in the error attribute.    An alert with recommended actions to recover from the failure is raised when the file import session fail.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>The state of the file import session, the expected states are: * Scheduled - The import is scheduled to run at a later time. The import remains in this state until the scheduled time arrives. * Queued - All imports are run in a First In First Out (FIFO) order. Sessions are queued when more sessions have been created the are supported for simultaneous import. * In_Progress - The file import session is in progress, performing an operation after Initialized. * Completed - Indicates that all operations through commit have been completed successfully. * Cancelling -  A cancel is in progress. Clients are switched back to the source system (if it happens after cutover). The source system is cleaned up, the destination NAS server and all imported objects including filesystems are deleted. * Cancelled - The import was cancelled. * Pausing - The data copy is transitioning to Paused. * Paused - The data copy between the source and destination NAS server is paused. * Failed - Indicates that there was an error during import. The appropriate error message is available in the error attribute.    An alert with recommended actions to recover from the failure is raised when the file import session fail.  Was added in version 3.0.0.0.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FileImportSessionStateEnum
        {
            
            /// <summary>
            /// Enum ScheduledEnum for Scheduled
            /// </summary>
            [EnumMember(Value = "Scheduled")]
            ScheduledEnum = 1,
            
            /// <summary>
            /// Enum QueuedEnum for Queued
            /// </summary>
            [EnumMember(Value = "Queued")]
            QueuedEnum = 2,
            
            /// <summary>
            /// Enum InProgressEnum for In_Progress
            /// </summary>
            [EnumMember(Value = "In_Progress")]
            InProgressEnum = 3,
            
            /// <summary>
            /// Enum CompletedEnum for Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            CompletedEnum = 4,
            
            /// <summary>
            /// Enum CancellingEnum for Cancelling
            /// </summary>
            [EnumMember(Value = "Cancelling")]
            CancellingEnum = 5,
            
            /// <summary>
            /// Enum CancelledEnum for Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            CancelledEnum = 6,
            
            /// <summary>
            /// Enum PausingEnum for Pausing
            /// </summary>
            [EnumMember(Value = "Pausing")]
            PausingEnum = 7,
            
            /// <summary>
            /// Enum PausedEnum for Paused
            /// </summary>
            [EnumMember(Value = "Paused")]
            PausedEnum = 8,
            
            /// <summary>
            /// Enum FailedEnum for Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            FailedEnum = 9
        }
}
