/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a storage object available while in the recycle bin. Was added in version 3.5.0.0.
    /// </summary>
    [DataContract]
    public partial class RecycleBinInstance : IEquatable<RecycleBinInstance>
    { 
        /// <summary>
        /// Unique identifier for the recycle bin instance.
        /// </summary>
        /// <value>Unique identifier for the recycle bin instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The name of the object.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>The name of the object.  This property supports case-insensitive filtering.</value>

        [MaxLength(128)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>

        [DataMember(Name="resource_type")]
        public RecycleBinResourceTypeEnum? ResourceType { get; set; }

        /// <summary>
        /// Provisioned size of the object in bytes. Volume groups will show total provisioned space for all volumes in the volume group. 
        /// </summary>
        /// <value>Provisioned size of the object in bytes. Volume groups will show total provisioned space for all volumes in the volume group. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="logical_provisioned")]
        public long? LogicalProvisioned { get; set; }

        /// <summary>
        /// Logical space used by the object in bytes. Volume groups will show the total logical space used for all volumes in the volume group. 
        /// </summary>
        /// <value>Logical space used by the object in bytes. Volume groups will show the total logical space used for all volumes in the volume group. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="logical_used")]
        public long? LogicalUsed { get; set; }

        /// <summary>
        /// The appliance where this resource is located.
        /// </summary>
        /// <value>The appliance where this resource is located.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Time when the object was moved to the recycle bin.
        /// </summary>
        /// <value>Time when the object was moved to the recycle bin.</value>

        [DataMember(Name="deletion_timestamp")]
        public DateTime? DeletionTimestamp { get; set; }

        /// <summary>
        /// Time when the object will be auto-purged. Expired object are deleted by the aging service that runs periodically in the background. 
        /// </summary>
        /// <value>Time when the object will be auto-purged. Expired object are deleted by the aging service that runs periodically in the background. </value>

        [DataMember(Name="expiration_timestamp")]
        public DateTime? ExpirationTimestamp { get; set; }

        /// <summary>
        /// Localized message string corresponding to resource_type Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to resource_type Was added in version 3.5.0.0.</value>

        [DataMember(Name="resource_type_l10n")]
        public string ResourceTypeL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecycleBinInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  LogicalProvisioned: ").Append(LogicalProvisioned).Append("\n");
            sb.Append("  LogicalUsed: ").Append(LogicalUsed).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  DeletionTimestamp: ").Append(DeletionTimestamp).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  ResourceTypeL10n: ").Append(ResourceTypeL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RecycleBinInstance)obj);
        }

        /// <summary>
        /// Returns true if RecycleBinInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of RecycleBinInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecycleBinInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    LogicalProvisioned == other.LogicalProvisioned ||
                    LogicalProvisioned != null &&
                    LogicalProvisioned.Equals(other.LogicalProvisioned)
                ) && 
                (
                    LogicalUsed == other.LogicalUsed ||
                    LogicalUsed != null &&
                    LogicalUsed.Equals(other.LogicalUsed)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    DeletionTimestamp == other.DeletionTimestamp ||
                    DeletionTimestamp != null &&
                    DeletionTimestamp.Equals(other.DeletionTimestamp)
                ) && 
                (
                    ExpirationTimestamp == other.ExpirationTimestamp ||
                    ExpirationTimestamp != null &&
                    ExpirationTimestamp.Equals(other.ExpirationTimestamp)
                ) && 
                (
                    ResourceTypeL10n == other.ResourceTypeL10n ||
                    ResourceTypeL10n != null &&
                    ResourceTypeL10n.Equals(other.ResourceTypeL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (LogicalProvisioned != null)
                    hashCode = hashCode * 59 + LogicalProvisioned.GetHashCode();
                    if (LogicalUsed != null)
                    hashCode = hashCode * 59 + LogicalUsed.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (DeletionTimestamp != null)
                    hashCode = hashCode * 59 + DeletionTimestamp.GetHashCode();
                    if (ExpirationTimestamp != null)
                    hashCode = hashCode * 59 + ExpirationTimestamp.GetHashCode();
                    if (ResourceTypeL10n != null)
                    hashCode = hashCode * 59 + ResourceTypeL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RecycleBinInstance left, RecycleBinInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RecycleBinInstance left, RecycleBinInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
