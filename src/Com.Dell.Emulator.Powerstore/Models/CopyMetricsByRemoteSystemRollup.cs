/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Cluster wide copy metrics for the remote system. Was added in version 3.5.0.0.
    /// </summary>
    [DataContract]
    public partial class CopyMetricsByRemoteSystemRollup : MetricsGenerateResponse, IEquatable<CopyMetricsByRemoteSystemRollup>
    { 
        /// <summary>
        /// End of sampling period.
        /// </summary>
        /// <value>End of sampling period.</value>

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Number of consecutive sampling periods during which there were no changes in the metrics values. If the value is omitted from the response, it is 1 (no additional repeats). 
        /// </summary>
        /// <value>Number of consecutive sampling periods during which there were no changes in the metrics values. If the value is omitted from the response, it is 1 (no additional repeats). </value>

        [Range(0, 2147483647)]
        [DataMember(Name="repeat_count")]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Gets or Sets SessionType
        /// </summary>

        [DataMember(Name="session_type")]
        public CopySessionTypeEnum SessionType { get; set; }

        /// <summary>
        /// Unique identifier of the remote system.
        /// </summary>
        /// <value>Unique identifier of the remote system.</value>

        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Number of bytes transferred during this sampling period.
        /// </summary>
        /// <value>Number of bytes transferred during this sampling period.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="data_transferred")]
        public long? DataTransferred { get; set; }

        /// <summary>
        /// Number of bytes remaining to be copied at the end of this sampling period.
        /// </summary>
        /// <value>Number of bytes remaining to be copied at the end of this sampling period.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="data_remaining")]
        public long? DataRemaining { get; set; }

        /// <summary>
        /// The time (in milliseconds) spent in copy activity during this sampling period. 
        /// </summary>
        /// <value>The time (in milliseconds) spent in copy activity during this sampling period. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="transfer_time")]
        public long? TransferTime { get; set; }

        /// <summary>
        /// Data transfer rate (in bytes/second) computed using data_transferred and transfer_time. 
        /// </summary>
        /// <value>Data transfer rate (in bytes/second) computed using data_transferred and transfer_time. </value>

        [DataMember(Name="transfer_rate")]
        public float? TransferRate { get; set; }

        /// <summary>
        /// Time (in milliseconds) spent doing reads during this sampling period. 
        /// </summary>
        /// <value>Time (in milliseconds) spent doing reads during this sampling period. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="read_time")]
        public long? ReadTime { get; set; }

        /// <summary>
        /// Time (in milliseconds) spent doing writes during this sampling period. 
        /// </summary>
        /// <value>Time (in milliseconds) spent doing writes during this sampling period. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="write_time")]
        public long? WriteTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CopyMetricsByRemoteSystemRollup {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  DataTransferred: ").Append(DataTransferred).Append("\n");
            sb.Append("  DataRemaining: ").Append(DataRemaining).Append("\n");
            sb.Append("  TransferTime: ").Append(TransferTime).Append("\n");
            sb.Append("  TransferRate: ").Append(TransferRate).Append("\n");
            sb.Append("  ReadTime: ").Append(ReadTime).Append("\n");
            sb.Append("  WriteTime: ").Append(WriteTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CopyMetricsByRemoteSystemRollup)obj);
        }

        /// <summary>
        /// Returns true if CopyMetricsByRemoteSystemRollup instances are equal
        /// </summary>
        /// <param name="other">Instance of CopyMetricsByRemoteSystemRollup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CopyMetricsByRemoteSystemRollup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    RepeatCount == other.RepeatCount ||
                    RepeatCount != null &&
                    RepeatCount.Equals(other.RepeatCount)
                ) && 
                (
                    SessionType == other.SessionType ||
                    SessionType != null &&
                    SessionType.Equals(other.SessionType)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    DataTransferred == other.DataTransferred ||
                    DataTransferred != null &&
                    DataTransferred.Equals(other.DataTransferred)
                ) && 
                (
                    DataRemaining == other.DataRemaining ||
                    DataRemaining != null &&
                    DataRemaining.Equals(other.DataRemaining)
                ) && 
                (
                    TransferTime == other.TransferTime ||
                    TransferTime != null &&
                    TransferTime.Equals(other.TransferTime)
                ) && 
                (
                    TransferRate == other.TransferRate ||
                    TransferRate != null &&
                    TransferRate.Equals(other.TransferRate)
                ) && 
                (
                    ReadTime == other.ReadTime ||
                    ReadTime != null &&
                    ReadTime.Equals(other.ReadTime)
                ) && 
                (
                    WriteTime == other.WriteTime ||
                    WriteTime != null &&
                    WriteTime.Equals(other.WriteTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (RepeatCount != null)
                    hashCode = hashCode * 59 + RepeatCount.GetHashCode();
                    if (SessionType != null)
                    hashCode = hashCode * 59 + SessionType.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (DataTransferred != null)
                    hashCode = hashCode * 59 + DataTransferred.GetHashCode();
                    if (DataRemaining != null)
                    hashCode = hashCode * 59 + DataRemaining.GetHashCode();
                    if (TransferTime != null)
                    hashCode = hashCode * 59 + TransferTime.GetHashCode();
                    if (TransferRate != null)
                    hashCode = hashCode * 59 + TransferRate.GetHashCode();
                    if (ReadTime != null)
                    hashCode = hashCode * 59 + ReadTime.GetHashCode();
                    if (WriteTime != null)
                    hashCode = hashCode * 59 + WriteTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CopyMetricsByRemoteSystemRollup left, CopyMetricsByRemoteSystemRollup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CopyMetricsByRemoteSystemRollup left, CopyMetricsByRemoteSystemRollup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
