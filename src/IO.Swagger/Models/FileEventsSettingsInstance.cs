/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A category, along with a boolean setting for each kind of file protocol event that determines whether to notify the file event service in that category (timeframe). Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileEventsSettingsInstance : IEquatable<FileEventsSettingsInstance>
    { 
        /// <summary>
        /// Gets or Sets EventsCategory
        /// </summary>

        [DataMember(Name="events_category")]
        public FileEventsCategoryEnum? EventsCategory { get; set; }

        /// <summary>
        /// Sends a notification when a file is opened for a change other than read or write access. Protocols: SMB, NFS(v4). 
        /// </summary>
        /// <value>Sends a notification when a file is opened for a change other than read or write access. Protocols: SMB, NFS(v4). </value>

        [DataMember(Name="open_file_no_access")]
        public bool? OpenFileNoAccess { get; set; }

        /// <summary>
        /// Sends a notification when a file is opened for read access. Protocols: SMB, NFS(v4). 
        /// </summary>
        /// <value>Sends a notification when a file is opened for read access. Protocols: SMB, NFS(v4). </value>

        [DataMember(Name="open_file_read")]
        public bool? OpenFileRead { get; set; }

        /// <summary>
        /// Sends a notification when a file is opened for write access. Protocols: SMB, NFS(v4). 
        /// </summary>
        /// <value>Sends a notification when a file is opened for write access. Protocols: SMB, NFS(v4). </value>

        [DataMember(Name="open_file_write")]
        public bool? OpenFileWrite { get; set; }

        /// <summary>
        /// Sends a notification when a file is created. Protocols: SMB, NFS(v3/v4). 
        /// </summary>
        /// <value>Sends a notification when a file is created. Protocols: SMB, NFS(v3/v4). </value>

        [DataMember(Name="create_file")]
        public bool? CreateFile { get; set; }

        /// <summary>
        /// Sends a notification when a directory is created. Protocols: SMB, NFS(v3/v4). 
        /// </summary>
        /// <value>Sends a notification when a directory is created. Protocols: SMB, NFS(v3/v4). </value>

        [DataMember(Name="create_dir")]
        public bool? CreateDir { get; set; }

        /// <summary>
        /// Sends a notification when a file is deleted. Protocols: SMB, NFS(v3/v4). 
        /// </summary>
        /// <value>Sends a notification when a file is deleted. Protocols: SMB, NFS(v3/v4). </value>

        [DataMember(Name="delete_file")]
        public bool? DeleteFile { get; set; }

        /// <summary>
        /// Sends a notification when a directory is deleted. Protocols: SMB, NFS(v3/v4). 
        /// </summary>
        /// <value>Sends a notification when a directory is deleted. Protocols: SMB, NFS(v3/v4). </value>

        [DataMember(Name="delete_dir")]
        public bool? DeleteDir { get; set; }

        /// <summary>
        /// Sends a notification when a file was modified before closing. Protocols: SMB, NFS(v4). 
        /// </summary>
        /// <value>Sends a notification when a file was modified before closing. Protocols: SMB, NFS(v4). </value>

        [DataMember(Name="close_modified")]
        public bool? CloseModified { get; set; }

        /// <summary>
        /// Sends a notification when a file was not modified before closing. Protocols: SMB, NFS(v4). 
        /// </summary>
        /// <value>Sends a notification when a file was not modified before closing. Protocols: SMB, NFS(v4). </value>

        [DataMember(Name="close_unmodified")]
        public bool? CloseUnmodified { get; set; }

        /// <summary>
        /// Sends a notification when a file is renamed. Protocols: SMB, NFS(v3/v4). 
        /// </summary>
        /// <value>Sends a notification when a file is renamed. Protocols: SMB, NFS(v3/v4). </value>

        [DataMember(Name="rename_file")]
        public bool? RenameFile { get; set; }

        /// <summary>
        /// Sends a notification when a directory is renamed. Protocols: SMB, NFS(v3/v4). 
        /// </summary>
        /// <value>Sends a notification when a directory is renamed. Protocols: SMB, NFS(v3/v4). </value>

        [DataMember(Name="rename_dir")]
        public bool? RenameDir { get; set; }

        /// <summary>
        /// Sends a notification when the security descriptor (ACL) on a files is modified. Protocols: SMB. 
        /// </summary>
        /// <value>Sends a notification when the security descriptor (ACL) on a files is modified. Protocols: SMB. </value>

        [DataMember(Name="set_acl_file")]
        public bool? SetAclFile { get; set; }

        /// <summary>
        /// Sends a notification when the secuirty descriptor (ACL) on a directory is modified. Protocols: SMB. 
        /// </summary>
        /// <value>Sends a notification when the secuirty descriptor (ACL) on a directory is modified. Protocols: SMB. </value>

        [DataMember(Name="set_acl_dir")]
        public bool? SetAclDir { get; set; }

        /// <summary>
        /// Sends a notification when a directory is opened. Protocols: SMB. 
        /// </summary>
        /// <value>Sends a notification when a directory is opened. Protocols: SMB. </value>

        [DataMember(Name="open_dir")]
        public bool? OpenDir { get; set; }

        /// <summary>
        /// Sends a notification when a directory is closed. Protocols: SMB. 
        /// </summary>
        /// <value>Sends a notification when a directory is closed. Protocols: SMB. </value>

        [DataMember(Name="close_dir")]
        public bool? CloseDir { get; set; }

        /// <summary>
        /// Sends a notification when a file read is received over NFS. Protocols: NFS(v3/v4). 
        /// </summary>
        /// <value>Sends a notification when a file read is received over NFS. Protocols: NFS(v3/v4). </value>

        [DataMember(Name="file_read")]
        public bool? FileRead { get; set; }

        /// <summary>
        /// Sends a notification when a file write is received over NFS. Protocols: NFS(v3/v4). 
        /// </summary>
        /// <value>Sends a notification when a file write is received over NFS. Protocols: NFS(v3/v4). </value>

        [DataMember(Name="file_write")]
        public bool? FileWrite { get; set; }

        /// <summary>
        /// Sends a notification when a file security modification is received over NFS. Protocols: NFS(v3/v4). 
        /// </summary>
        /// <value>Sends a notification when a file security modification is received over NFS. Protocols: NFS(v3/v4). </value>

        [DataMember(Name="set_sec_file")]
        public bool? SetSecFile { get; set; }

        /// <summary>
        /// Sends a notification when a directory security modification is received over NFS. Protocols: NFS(v3/v4). 
        /// </summary>
        /// <value>Sends a notification when a directory security modification is received over NFS. Protocols: NFS(v3/v4). </value>

        [DataMember(Name="set_sec_dir")]
        public bool? SetSecDir { get; set; }

        /// <summary>
        /// Sends a notification when a offline file is opened for read access. Protocols: SMB, NFS(v4). 
        /// </summary>
        /// <value>Sends a notification when a offline file is opened for read access. Protocols: SMB, NFS(v4). </value>

        [DataMember(Name="open_file_read_offline")]
        public bool? OpenFileReadOffline { get; set; }

        /// <summary>
        /// Sends a notification when a offline file in opened for write access. Protocols: SMB, NFS(v4). 
        /// </summary>
        /// <value>Sends a notification when a offline file in opened for write access. Protocols: SMB, NFS(v4). </value>

        [DataMember(Name="open_file_write_offline")]
        public bool? OpenFileWriteOffline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileEventsSettingsInstance {\n");
            sb.Append("  EventsCategory: ").Append(EventsCategory).Append("\n");
            sb.Append("  OpenFileNoAccess: ").Append(OpenFileNoAccess).Append("\n");
            sb.Append("  OpenFileRead: ").Append(OpenFileRead).Append("\n");
            sb.Append("  OpenFileWrite: ").Append(OpenFileWrite).Append("\n");
            sb.Append("  CreateFile: ").Append(CreateFile).Append("\n");
            sb.Append("  CreateDir: ").Append(CreateDir).Append("\n");
            sb.Append("  DeleteFile: ").Append(DeleteFile).Append("\n");
            sb.Append("  DeleteDir: ").Append(DeleteDir).Append("\n");
            sb.Append("  CloseModified: ").Append(CloseModified).Append("\n");
            sb.Append("  CloseUnmodified: ").Append(CloseUnmodified).Append("\n");
            sb.Append("  RenameFile: ").Append(RenameFile).Append("\n");
            sb.Append("  RenameDir: ").Append(RenameDir).Append("\n");
            sb.Append("  SetAclFile: ").Append(SetAclFile).Append("\n");
            sb.Append("  SetAclDir: ").Append(SetAclDir).Append("\n");
            sb.Append("  OpenDir: ").Append(OpenDir).Append("\n");
            sb.Append("  CloseDir: ").Append(CloseDir).Append("\n");
            sb.Append("  FileRead: ").Append(FileRead).Append("\n");
            sb.Append("  FileWrite: ").Append(FileWrite).Append("\n");
            sb.Append("  SetSecFile: ").Append(SetSecFile).Append("\n");
            sb.Append("  SetSecDir: ").Append(SetSecDir).Append("\n");
            sb.Append("  OpenFileReadOffline: ").Append(OpenFileReadOffline).Append("\n");
            sb.Append("  OpenFileWriteOffline: ").Append(OpenFileWriteOffline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileEventsSettingsInstance)obj);
        }

        /// <summary>
        /// Returns true if FileEventsSettingsInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of FileEventsSettingsInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileEventsSettingsInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EventsCategory == other.EventsCategory ||
                    EventsCategory != null &&
                    EventsCategory.Equals(other.EventsCategory)
                ) && 
                (
                    OpenFileNoAccess == other.OpenFileNoAccess ||
                    OpenFileNoAccess != null &&
                    OpenFileNoAccess.Equals(other.OpenFileNoAccess)
                ) && 
                (
                    OpenFileRead == other.OpenFileRead ||
                    OpenFileRead != null &&
                    OpenFileRead.Equals(other.OpenFileRead)
                ) && 
                (
                    OpenFileWrite == other.OpenFileWrite ||
                    OpenFileWrite != null &&
                    OpenFileWrite.Equals(other.OpenFileWrite)
                ) && 
                (
                    CreateFile == other.CreateFile ||
                    CreateFile != null &&
                    CreateFile.Equals(other.CreateFile)
                ) && 
                (
                    CreateDir == other.CreateDir ||
                    CreateDir != null &&
                    CreateDir.Equals(other.CreateDir)
                ) && 
                (
                    DeleteFile == other.DeleteFile ||
                    DeleteFile != null &&
                    DeleteFile.Equals(other.DeleteFile)
                ) && 
                (
                    DeleteDir == other.DeleteDir ||
                    DeleteDir != null &&
                    DeleteDir.Equals(other.DeleteDir)
                ) && 
                (
                    CloseModified == other.CloseModified ||
                    CloseModified != null &&
                    CloseModified.Equals(other.CloseModified)
                ) && 
                (
                    CloseUnmodified == other.CloseUnmodified ||
                    CloseUnmodified != null &&
                    CloseUnmodified.Equals(other.CloseUnmodified)
                ) && 
                (
                    RenameFile == other.RenameFile ||
                    RenameFile != null &&
                    RenameFile.Equals(other.RenameFile)
                ) && 
                (
                    RenameDir == other.RenameDir ||
                    RenameDir != null &&
                    RenameDir.Equals(other.RenameDir)
                ) && 
                (
                    SetAclFile == other.SetAclFile ||
                    SetAclFile != null &&
                    SetAclFile.Equals(other.SetAclFile)
                ) && 
                (
                    SetAclDir == other.SetAclDir ||
                    SetAclDir != null &&
                    SetAclDir.Equals(other.SetAclDir)
                ) && 
                (
                    OpenDir == other.OpenDir ||
                    OpenDir != null &&
                    OpenDir.Equals(other.OpenDir)
                ) && 
                (
                    CloseDir == other.CloseDir ||
                    CloseDir != null &&
                    CloseDir.Equals(other.CloseDir)
                ) && 
                (
                    FileRead == other.FileRead ||
                    FileRead != null &&
                    FileRead.Equals(other.FileRead)
                ) && 
                (
                    FileWrite == other.FileWrite ||
                    FileWrite != null &&
                    FileWrite.Equals(other.FileWrite)
                ) && 
                (
                    SetSecFile == other.SetSecFile ||
                    SetSecFile != null &&
                    SetSecFile.Equals(other.SetSecFile)
                ) && 
                (
                    SetSecDir == other.SetSecDir ||
                    SetSecDir != null &&
                    SetSecDir.Equals(other.SetSecDir)
                ) && 
                (
                    OpenFileReadOffline == other.OpenFileReadOffline ||
                    OpenFileReadOffline != null &&
                    OpenFileReadOffline.Equals(other.OpenFileReadOffline)
                ) && 
                (
                    OpenFileWriteOffline == other.OpenFileWriteOffline ||
                    OpenFileWriteOffline != null &&
                    OpenFileWriteOffline.Equals(other.OpenFileWriteOffline)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EventsCategory != null)
                    hashCode = hashCode * 59 + EventsCategory.GetHashCode();
                    if (OpenFileNoAccess != null)
                    hashCode = hashCode * 59 + OpenFileNoAccess.GetHashCode();
                    if (OpenFileRead != null)
                    hashCode = hashCode * 59 + OpenFileRead.GetHashCode();
                    if (OpenFileWrite != null)
                    hashCode = hashCode * 59 + OpenFileWrite.GetHashCode();
                    if (CreateFile != null)
                    hashCode = hashCode * 59 + CreateFile.GetHashCode();
                    if (CreateDir != null)
                    hashCode = hashCode * 59 + CreateDir.GetHashCode();
                    if (DeleteFile != null)
                    hashCode = hashCode * 59 + DeleteFile.GetHashCode();
                    if (DeleteDir != null)
                    hashCode = hashCode * 59 + DeleteDir.GetHashCode();
                    if (CloseModified != null)
                    hashCode = hashCode * 59 + CloseModified.GetHashCode();
                    if (CloseUnmodified != null)
                    hashCode = hashCode * 59 + CloseUnmodified.GetHashCode();
                    if (RenameFile != null)
                    hashCode = hashCode * 59 + RenameFile.GetHashCode();
                    if (RenameDir != null)
                    hashCode = hashCode * 59 + RenameDir.GetHashCode();
                    if (SetAclFile != null)
                    hashCode = hashCode * 59 + SetAclFile.GetHashCode();
                    if (SetAclDir != null)
                    hashCode = hashCode * 59 + SetAclDir.GetHashCode();
                    if (OpenDir != null)
                    hashCode = hashCode * 59 + OpenDir.GetHashCode();
                    if (CloseDir != null)
                    hashCode = hashCode * 59 + CloseDir.GetHashCode();
                    if (FileRead != null)
                    hashCode = hashCode * 59 + FileRead.GetHashCode();
                    if (FileWrite != null)
                    hashCode = hashCode * 59 + FileWrite.GetHashCode();
                    if (SetSecFile != null)
                    hashCode = hashCode * 59 + SetSecFile.GetHashCode();
                    if (SetSecDir != null)
                    hashCode = hashCode * 59 + SetSecDir.GetHashCode();
                    if (OpenFileReadOffline != null)
                    hashCode = hashCode * 59 + OpenFileReadOffline.GetHashCode();
                    if (OpenFileWriteOffline != null)
                    hashCode = hashCode * 59 + OpenFileWriteOffline.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileEventsSettingsInstance left, FileEventsSettingsInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileEventsSettingsInstance left, FileEventsSettingsInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
