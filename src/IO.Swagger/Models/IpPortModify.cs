/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class IpPortModify : IEquatable<IpPortModify>
    { 
        /// <summary>
        /// Usages to add to the current usages of an IP port. The current usages of an IP port can be extended with external replication, iSCSI or NVMe_TCP if those usages are in the port&#39;s list of available usages. The same settings will be applied to the partner IP port. If both add_current usages and remove_current usages specified in the request, removal will be done firstly, then addition. 
        /// </summary>
        /// <value>Usages to add to the current usages of an IP port. The current usages of an IP port can be extended with external replication, iSCSI or NVMe_TCP if those usages are in the port&#39;s list of available usages. The same settings will be applied to the partner IP port. If both add_current usages and remove_current usages specified in the request, removal will be done firstly, then addition. </value>

        [DataMember(Name="add_current_usages")]
        public List<IpPortUsageEnum> AddCurrentUsages { get; set; }

        /// <summary>
        /// Usages to remove from the current usages of an IP port. Only External replication, iSCSI or NVMe_TCP usages can be removed. The same settings will be applied to the partner IP port. If both add_current usages and remove_current usages specified in the request, removal will be done firstly, then addition.  Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Usages to remove from the current usages of an IP port. Only External replication, iSCSI or NVMe_TCP usages can be removed. The same settings will be applied to the partner IP port. If both add_current usages and remove_current usages specified in the request, removal will be done firstly, then addition.  Was added in version 4.0.0.0.</value>

        [DataMember(Name="remove_current_usages")]
        public List<IpPortUsageEnum> RemoveCurrentUsages { get; set; }

        /// <summary>
        /// Unique identifier of the network in which IP port usages will be changed name:{name} can be used instead of {id}. For example: &#39;network_id&#39;:&#39;name:network_name&#39; Was added in version 2.0.0.0. Was deprecated in version 4.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the network in which IP port usages will be changed name:{name} can be used instead of {id}. For example: &#39;network_id&#39;:&#39;name:network_name&#39; Was added in version 2.0.0.0. Was deprecated in version 4.0.0.0.</value>

        [DataMember(Name="network_id")]
        public string NetworkId { get; set; }

        /// <summary>
        /// List of unique identifiers of the networks in which IP port usages will be changed Was added in version 4.0.0.0.
        /// </summary>
        /// <value>List of unique identifiers of the networks in which IP port usages will be changed Was added in version 4.0.0.0.</value>

        [DataMember(Name="network_ids")]
        public List<string> NetworkIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IpPortModify {\n");
            sb.Append("  AddCurrentUsages: ").Append(AddCurrentUsages).Append("\n");
            sb.Append("  RemoveCurrentUsages: ").Append(RemoveCurrentUsages).Append("\n");
            sb.Append("  NetworkId: ").Append(NetworkId).Append("\n");
            sb.Append("  NetworkIds: ").Append(NetworkIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IpPortModify)obj);
        }

        /// <summary>
        /// Returns true if IpPortModify instances are equal
        /// </summary>
        /// <param name="other">Instance of IpPortModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IpPortModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AddCurrentUsages == other.AddCurrentUsages ||
                    AddCurrentUsages != null &&
                    AddCurrentUsages.SequenceEqual(other.AddCurrentUsages)
                ) && 
                (
                    RemoveCurrentUsages == other.RemoveCurrentUsages ||
                    RemoveCurrentUsages != null &&
                    RemoveCurrentUsages.SequenceEqual(other.RemoveCurrentUsages)
                ) && 
                (
                    NetworkId == other.NetworkId ||
                    NetworkId != null &&
                    NetworkId.Equals(other.NetworkId)
                ) && 
                (
                    NetworkIds == other.NetworkIds ||
                    NetworkIds != null &&
                    NetworkIds.SequenceEqual(other.NetworkIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AddCurrentUsages != null)
                    hashCode = hashCode * 59 + AddCurrentUsages.GetHashCode();
                    if (RemoveCurrentUsages != null)
                    hashCode = hashCode * 59 + RemoveCurrentUsages.GetHashCode();
                    if (NetworkId != null)
                    hashCode = hashCode * 59 + NetworkId.GetHashCode();
                    if (NetworkIds != null)
                    hashCode = hashCode * 59 + NetworkIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IpPortModify left, IpPortModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IpPortModify left, IpPortModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
