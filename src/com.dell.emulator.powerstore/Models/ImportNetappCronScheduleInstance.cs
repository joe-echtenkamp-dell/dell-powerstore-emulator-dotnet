/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// An instance of a cron schedule. Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ImportNetappCronScheduleInstance : IEquatable<ImportNetappCronScheduleInstance>
    { 
        /// <summary>
        /// The hours of the day the schedule runs. This is empty for all.
        /// </summary>
        /// <value>The hours of the day the schedule runs. This is empty for all.</value>

        [DataMember(Name="hours")]
        public List<int?> Hours { get; set; }

        /// <summary>
        /// The minutes the schedule runs.
        /// </summary>
        /// <value>The minutes the schedule runs.</value>

        [DataMember(Name="minutes")]
        public List<int?> Minutes { get; set; }

        /// <summary>
        /// The weekdays the schedule runs. This is empty for all.
        /// </summary>
        /// <value>The weekdays the schedule runs. This is empty for all.</value>

        [DataMember(Name="weekdays")]
        public List<int?> Weekdays { get; set; }

        /// <summary>
        /// The months of the year the schedule runs. This is empty for all.
        /// </summary>
        /// <value>The months of the year the schedule runs. This is empty for all.</value>

        [DataMember(Name="months")]
        public List<int?> Months { get; set; }

        /// <summary>
        /// The days of the month the schedule runs. This is empty for all.
        /// </summary>
        /// <value>The days of the month the schedule runs. This is empty for all.</value>

        [DataMember(Name="days")]
        public List<int?> Days { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportNetappCronScheduleInstance {\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("  Weekdays: ").Append(Weekdays).Append("\n");
            sb.Append("  Months: ").Append(Months).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportNetappCronScheduleInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportNetappCronScheduleInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportNetappCronScheduleInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportNetappCronScheduleInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Hours == other.Hours ||
                    Hours != null &&
                    Hours.SequenceEqual(other.Hours)
                ) && 
                (
                    Minutes == other.Minutes ||
                    Minutes != null &&
                    Minutes.SequenceEqual(other.Minutes)
                ) && 
                (
                    Weekdays == other.Weekdays ||
                    Weekdays != null &&
                    Weekdays.SequenceEqual(other.Weekdays)
                ) && 
                (
                    Months == other.Months ||
                    Months != null &&
                    Months.SequenceEqual(other.Months)
                ) && 
                (
                    Days == other.Days ||
                    Days != null &&
                    Days.SequenceEqual(other.Days)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Hours != null)
                    hashCode = hashCode * 59 + Hours.GetHashCode();
                    if (Minutes != null)
                    hashCode = hashCode * 59 + Minutes.GetHashCode();
                    if (Weekdays != null)
                    hashCode = hashCode * 59 + Weekdays.GetHashCode();
                    if (Months != null)
                    hashCode = hashCode * 59 + Months.GetHashCode();
                    if (Days != null)
                    hashCode = hashCode * 59 + Days.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportNetappCronScheduleInstance left, ImportNetappCronScheduleInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportNetappCronScheduleInstance left, ImportNetappCronScheduleInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
