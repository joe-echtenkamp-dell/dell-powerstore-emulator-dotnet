/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Com.Dell.Emulator.Powerstore.Attributes;

using Microsoft.AspNetCore.Authorization;
using Com.Dell.Emulator.Powerstore.Models;

namespace Com.Dell.Emulator.Powerstore.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VolumeApiController : ControllerBase
    { 
        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query volumes that are provisioned on the appliance.</remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of volume instance objects</response>
        [HttpGet]
        [Route("/api/rest/volume")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<VolumeInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<VolumeInstance>), description: "Partial content of volume instance objects")]
        public virtual IActionResult VolumeGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<VolumeInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<VolumeInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<VolumeInstance>>(exampleJson)
            : default(List<VolumeInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Attach
        /// </summary>
        /// <remarks>Attach a volume to a host or host group.</remarks>
        /// <param name="id">Unique identifier of volume to attach. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume/{id}/attach")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdAttachPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeIdAttachPost([FromRoute][Required]string id, [FromBody]VolumeAttach body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Clone
        /// </summary>
        /// <remarks>Create a clone of a volume or snapshot.</remarks>
        /// <param name="id">Unique identifier of the volume or snapshot to clone. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume/{id}/clone")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdClonePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeCloneResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeIdClonePost([FromRoute][Required]string id, [FromBody]VolumeClone body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeCloneResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeCloneResponse>(exampleJson)
            : default(VolumeCloneResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Configure Metro
        /// </summary>
        /// <remarks>Configure a metro volume so it exists in two PowerStore clusters.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of volume to configure. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume/{id}/configure_metro")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdConfigureMetroPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeConfigureMetroResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeIdConfigureMetroPost([FromRoute][Required]string id, [FromBody]VolumeConfigureMetro body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeConfigureMetroResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeConfigureMetroResponse>(exampleJson)
            : default(VolumeConfigureMetroResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>Delete a volume.   For a metro volume, first end the metro configuration and then delete the local volume.  * A volume which is attached to a host or host group or is a member of a volume group cannot be deleted.  * A volume which has protection policies attached to it cannot be deleted.  * A volume which has snapshots that are part of a snapset cannot be deleted.  * Clones of a deleted production volume or a clone are not deleted.  * Snapshots of the volume are deleted along with the volume being deleted. </remarks>
        /// <param name="id">Unique identifier of the volume to delete. name:{name} can be used instead of {id}.</param>
        /// <param name="body">Delete a volume. Was added in version 3.5.0.0.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpDelete]
        [Route("/api/rest/volume/{id}")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeIdDelete([FromRoute][Required]string id, [FromBody]VolumeDelete body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Detach
        /// </summary>
        /// <remarks>Detach a volume from a host or host group.</remarks>
        /// <param name="id">Unique identifier of volume to detach. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume/{id}/detach")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdDetachPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeIdDetachPost([FromRoute][Required]string id, [FromBody]VolumeDetach body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// End Metro Configuration
        /// </summary>
        /// <remarks>End a metro configuration from a volume and keep both copies. The local copy will retain its SCSI Identity while the remote volume will get a new SCSI Identity.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of volume for which to end the metro configuration. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume/{id}/end_metro")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdEndMetroPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeIdEndMetroPost([FromRoute][Required]string id, [FromBody]VolumeEndMetro body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query a specific volume instance.</remarks>
        /// <param name="id">Unique identifier of the volume to query. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/volume/{id}")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult VolumeIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeInstance>(exampleJson)
            : default(VolumeInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify
        /// </summary>
        /// <remarks>Modify the parameters of a volume.  For metro volumes, name and performance_policy can only be modified from the preferred side when the metro replication session is paused.  Volume size of metro volumes can only be modified if the metro replication session is fractured or paused. The QoS performance policy is not replicated for metro volumes. </remarks>
        /// <param name="id">Unique identifier of the volume to modify. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPatch]
        [Route("/api/rest/volume/{id}")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdPatch")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeIdPatch([FromRoute][Required]string id, [FromBody]VolumeModify body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Refresh
        /// </summary>
        /// <remarks>Refresh the contents of the target volume from another volume in the same family. This operation can be run on a metro volume only if the metro replication session is fractured or paused. By default, a backup snapshot of the target volume is created before the target volume is refreshed. To skip creating a backup snapshot, set the __create_backup_snap__ property to false in the refresh request. A profile for the backup snapshot is automatically generated if a custom profile is not specified. An automatically generated profile only contains a system generated unique name for the backup snapshot. When a volume is refreshed, its __source_time__ is set to the __source_time__ of the volume from which it was refreshed. </remarks>
        /// <param name="id">Unique identifier of the volume to refresh. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume/{id}/refresh")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdRefreshPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeRefreshResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeIdRefreshPost([FromRoute][Required]string id, [FromBody]VolumeRefresh body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeRefreshResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeRefreshResponse>(exampleJson)
            : default(VolumeRefreshResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Restore
        /// </summary>
        /// <remarks>Restore a primary volume or clone from a snapshot. A primary or clone volume can only be restored from one of its immediate snapshots. This operation can be run on a metro volume only if the metro replication session is fractured or paused. By default, a backup snapshot of the target volume is created before the target volume is restored. To skip creating a backup snapshot, set the __create_backup_snap__ property to false in the restore request. A profile for the backup snapshot is automatically generated if a custom profile is not specified. An automatically generated profile only contains a system generated unique name for the backup snapshot. When a volume is restored, its __source_time__ is set to the __source_time__ of the volume from which it was restored. </remarks>
        /// <param name="id">Unique identifier of the volume to restore. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume/{id}/restore")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdRestorePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeRestoreResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeIdRestorePost([FromRoute][Required]string id, [FromBody]VolumeRestore body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeRestoreResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeRestoreResponse>(exampleJson)
            : default(VolumeRestoreResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Snapshot
        /// </summary>
        /// <remarks>Create a snapshot of a volume or a clone. A snapshot is a point-in-time copy of a volume or clone. </remarks>
        /// <param name="id">Unique identifier of the volume or clone that is the source of the snapshot. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume/{id}/snapshot")]
        [ValidateModelState]
        [SwaggerOperation("VolumeIdSnapshotPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeSnapshotResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeIdSnapshotPost([FromRoute][Required]string id, [FromBody]VolumeSnapshot body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeSnapshotResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeSnapshotResponse>(exampleJson)
            : default(VolumeSnapshotResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>Create a volume on the appliance.</remarks>
        /// <param name="body"></param>
        /// <response code="201">Created</response>
        /// <response code="400">Invalid request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume")]
        [ValidateModelState]
        [SwaggerOperation("VolumePost")]
        [SwaggerResponse(statusCode: 201, type: typeof(CreateResponse), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumePost([FromBody]VolumeCreate body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(CreateResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateResponse>(exampleJson)
            : default(CreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
