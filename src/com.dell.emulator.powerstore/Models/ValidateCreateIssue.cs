/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{
    /// <summary>
    /// An issue found during validation accompanied by the suggested resolution. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ValidateCreateIssue : IEquatable<ValidateCreateIssue>
    {
        /// <summary>
        /// Gets or Sets Reason
        /// </summary>

        [DataMember(Name = "reason")]
        public ErrorMessage Reason { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>

        [DataMember(Name = "resolution")]
        public ErrorMessage Resolution { get; set; }

        /// <summary>
        /// The appliance on which the issue was detected.
        /// </summary>
        /// <value>The appliance on which the issue was detected.</value>

        [DataMember(Name = "appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// The appliance on which the issue was detected. Was added in version 2.0.0.0. Was deprecated in version 3.0.0.0.
        /// </summary>
        /// <value>The appliance on which the issue was detected. Was added in version 2.0.0.0. Was deprecated in version 3.0.0.0.</value>

        [DataMember(Name = "applianceId")]
        public string ApplianceIdDeprecated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateCreateIssue {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  ApplianceIdDeprecated: ").Append(ApplianceIdDeprecated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ValidateCreateIssue)obj);
        }

        /// <summary>
        /// Returns true if ValidateCreateIssue instances are equal
        /// </summary>
        /// <param name="other">Instance of ValidateCreateIssue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateCreateIssue other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) &&
                (
                    Resolution == other.Resolution ||
                    Resolution != null &&
                    Resolution.Equals(other.Resolution)
                ) &&
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) &&
                (
                    ApplianceIdDeprecated == other.ApplianceIdDeprecated ||
                    ApplianceIdDeprecated != null &&
                    ApplianceIdDeprecated.Equals(other.ApplianceIdDeprecated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                if (Resolution != null)
                    hashCode = hashCode * 59 + Resolution.GetHashCode();
                if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                if (ApplianceIdDeprecated != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ValidateCreateIssue left, ValidateCreateIssue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ValidateCreateIssue left, ValidateCreateIssue right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
