/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Parameters for modifying an LDAP account. Was added in version 1.0.3.
    /// </summary>
    [DataContract]
    public partial class LdapAccountModify : IEquatable<LdapAccountModify>
    { 
        /// <summary>
        /// Unique identifier of the new role to which the LDAP account will be mapped. The current login session cannot change its own role. name:{name} can be used instead of {id}. For example: &#39;role_id&#39;:&#39;name:role_name&#39;
        /// </summary>
        /// <value>Unique identifier of the new role to which the LDAP account will be mapped. The current login session cannot change its own role. name:{name} can be used instead of {id}. For example: &#39;role_id&#39;:&#39;name:role_name&#39;</value>

        [DataMember(Name="role_id")]
        public string RoleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LdapAccountModify {\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LdapAccountModify)obj);
        }

        /// <summary>
        /// Returns true if LdapAccountModify instances are equal
        /// </summary>
        /// <param name="other">Instance of LdapAccountModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LdapAccountModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LdapAccountModify left, LdapAccountModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LdapAccountModify left, LdapAccountModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
