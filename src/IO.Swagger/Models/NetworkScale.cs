/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters for the network scale operation.
    /// </summary>
    [DataContract]
    public partial class NetworkScale : IEquatable<NetworkScale>
    { 
        /// <summary>
        /// Unique identifiers of available IP ports to be used in the network. 
        /// </summary>
        /// <value>Unique identifiers of available IP ports to be used in the network. </value>

        [DataMember(Name="add_port_ids")]
        public List<string> AddPortIds { get; set; }

        /// <summary>
        /// Unique identifiers of IP ports to remove from use in the network. 
        /// </summary>
        /// <value>Unique identifiers of IP ports to remove from use in the network. </value>

        [DataMember(Name="remove_port_ids")]
        public List<string> RemovePortIds { get; set; }

        /// <summary>
        /// Used to specify the list of purposes to be enabled on the port during scaling. A subset of network purposes must be passed. If not specified, all purposes valid for the network will be enabled on the port.  Cannot be used with \&quot;remove_port_ids\&quot; field, if \&quot;remove_port_ids\&quot; specified - whole network will be unscaled from specified ports.  Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Used to specify the list of purposes to be enabled on the port during scaling. A subset of network purposes must be passed. If not specified, all purposes valid for the network will be enabled on the port.  Cannot be used with \&quot;remove_port_ids\&quot; field, if \&quot;remove_port_ids\&quot; specified - whole network will be unscaled from specified ports.  Was added in version 4.0.0.0.</value>

        [DataMember(Name="add_purposes_subset")]
        public List<NetworkPurposeEnum> AddPurposesSubset { get; set; }

        /// <summary>
        /// * Indicates whether to suppress network validation errors. * The option is intended to suppress false errors caused by network environment constraints.  Normally the command will fail with an error when: * system network ports on top of which IP ports are configured are in degraded state or have cabling issues, * or network IP addresses applied as a result of network scaling have duplicates in the network environment.  When force is true, the command will proceed instead.  Caution: Only use this option when you are certain, that your requested settings are correct and you understand why they are failing at this time, and you want to apply the settings anyway. Improper network settings can make the system unreachable for data. 
        /// </summary>
        /// <value>* Indicates whether to suppress network validation errors. * The option is intended to suppress false errors caused by network environment constraints.  Normally the command will fail with an error when: * system network ports on top of which IP ports are configured are in degraded state or have cabling issues, * or network IP addresses applied as a result of network scaling have duplicates in the network environment.  When force is true, the command will proceed instead.  Caution: Only use this option when you are certain, that your requested settings are correct and you understand why they are failing at this time, and you want to apply the settings anyway. Improper network settings can make the system unreachable for data. </value>

        [DataMember(Name="force")]
        public bool? Force { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkScale {\n");
            sb.Append("  AddPortIds: ").Append(AddPortIds).Append("\n");
            sb.Append("  RemovePortIds: ").Append(RemovePortIds).Append("\n");
            sb.Append("  AddPurposesSubset: ").Append(AddPurposesSubset).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NetworkScale)obj);
        }

        /// <summary>
        /// Returns true if NetworkScale instances are equal
        /// </summary>
        /// <param name="other">Instance of NetworkScale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkScale other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AddPortIds == other.AddPortIds ||
                    AddPortIds != null &&
                    AddPortIds.SequenceEqual(other.AddPortIds)
                ) && 
                (
                    RemovePortIds == other.RemovePortIds ||
                    RemovePortIds != null &&
                    RemovePortIds.SequenceEqual(other.RemovePortIds)
                ) && 
                (
                    AddPurposesSubset == other.AddPurposesSubset ||
                    AddPurposesSubset != null &&
                    AddPurposesSubset.SequenceEqual(other.AddPurposesSubset)
                ) && 
                (
                    Force == other.Force ||
                    Force != null &&
                    Force.Equals(other.Force)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AddPortIds != null)
                    hashCode = hashCode * 59 + AddPortIds.GetHashCode();
                    if (RemovePortIds != null)
                    hashCode = hashCode * 59 + RemovePortIds.GetHashCode();
                    if (AddPurposesSubset != null)
                    hashCode = hashCode * 59 + AddPurposesSubset.GetHashCode();
                    if (Force != null)
                    hashCode = hashCode * 59 + Force.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NetworkScale left, NetworkScale right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NetworkScale left, NetworkScale right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
