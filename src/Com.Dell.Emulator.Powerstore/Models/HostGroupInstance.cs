/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Properties of a host group. This resource type has queriable associations from host, host_volume_mapping, host_virtual_volume_mapping
    /// </summary>
    [DataContract]
    public partial class HostGroupInstance : IEquatable<HostGroupInstance>
    { 
        /// <summary>
        /// The host group unique identifier.
        /// </summary>
        /// <value>The host group unique identifier.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The host group name.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>The host group name.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// A description for the host group.
        /// </summary>
        /// <value>A description for the host group.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="host_connectivity")]
        public HostConnectivityEnum? HostConnectivity { get; set; }

        /// <summary>
        /// Localized message string corresponding to host_connectivity Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to host_connectivity Was added in version 3.0.0.0.</value>

        [DataMember(Name="host_connectivity_l10n")]
        public string HostConnectivityL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type host association.
        /// </summary>
        /// <value>This is the inverse of the resource type host association.</value>

        [DataMember(Name="hosts")]
        public List<HostInstance> Hosts { get; set; }

        /// <summary>
        /// This is the inverse of the resource type host_volume_mapping association.
        /// </summary>
        /// <value>This is the inverse of the resource type host_volume_mapping association.</value>

        [DataMember(Name="mapped_host_groups")]
        public List<HostVolumeMappingInstance> MappedHostGroups { get; set; }

        /// <summary>
        /// This is the inverse of the resource type host_virtual_volume_mapping association.
        /// </summary>
        /// <value>This is the inverse of the resource type host_virtual_volume_mapping association.</value>

        [DataMember(Name="host_virtual_volume_mappings")]
        public List<HostVirtualVolumeMappingInstance> HostVirtualVolumeMappings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostGroupInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HostConnectivity: ").Append(HostConnectivity).Append("\n");
            sb.Append("  HostConnectivityL10n: ").Append(HostConnectivityL10n).Append("\n");
            sb.Append("  Hosts: ").Append(Hosts).Append("\n");
            sb.Append("  MappedHostGroups: ").Append(MappedHostGroups).Append("\n");
            sb.Append("  HostVirtualVolumeMappings: ").Append(HostVirtualVolumeMappings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HostGroupInstance)obj);
        }

        /// <summary>
        /// Returns true if HostGroupInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of HostGroupInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostGroupInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HostConnectivity == other.HostConnectivity ||
                    HostConnectivity != null &&
                    HostConnectivity.Equals(other.HostConnectivity)
                ) && 
                (
                    HostConnectivityL10n == other.HostConnectivityL10n ||
                    HostConnectivityL10n != null &&
                    HostConnectivityL10n.Equals(other.HostConnectivityL10n)
                ) && 
                (
                    Hosts == other.Hosts ||
                    Hosts != null &&
                    Hosts.SequenceEqual(other.Hosts)
                ) && 
                (
                    MappedHostGroups == other.MappedHostGroups ||
                    MappedHostGroups != null &&
                    MappedHostGroups.SequenceEqual(other.MappedHostGroups)
                ) && 
                (
                    HostVirtualVolumeMappings == other.HostVirtualVolumeMappings ||
                    HostVirtualVolumeMappings != null &&
                    HostVirtualVolumeMappings.SequenceEqual(other.HostVirtualVolumeMappings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (HostConnectivity != null)
                    hashCode = hashCode * 59 + HostConnectivity.GetHashCode();
                    if (HostConnectivityL10n != null)
                    hashCode = hashCode * 59 + HostConnectivityL10n.GetHashCode();
                    if (Hosts != null)
                    hashCode = hashCode * 59 + Hosts.GetHashCode();
                    if (MappedHostGroups != null)
                    hashCode = hashCode * 59 + MappedHostGroups.GetHashCode();
                    if (HostVirtualVolumeMappings != null)
                    hashCode = hashCode * 59 + HostVirtualVolumeMappings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HostGroupInstance left, HostGroupInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HostGroupInstance left, HostGroupInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
