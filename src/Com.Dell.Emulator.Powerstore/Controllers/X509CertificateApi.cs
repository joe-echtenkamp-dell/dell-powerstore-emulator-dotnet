/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Com.Dell.Emulator.Powerstore.Attributes;

using Microsoft.AspNetCore.Authorization;
using Com.Dell.Emulator.Powerstore.Models;

namespace Com.Dell.Emulator.Powerstore.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class X509CertificateApiController : ControllerBase
    { 
        /// <summary>
        /// Generate CSR
        /// </summary>
        /// <remarks>Generate a new certificate signing request. A new X509 Certificate instance will be created to hold the private key and passphrase, whose is_current and is_valid attributes will both be false. Only Management_HTTP, Syslog_HTTP and VASA_HTTP are supported service types. For Management_HTTP serivce, scope must to be provided with value External; any other value will be rejected. Was added in version 2.0.0.0.</remarks>
        /// <param name="body">Request body.</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/x509_certificate/csr")]
        [ValidateModelState]
        [SwaggerOperation("X509CertificateCsrPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(X509CertificateCsrResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult X509CertificateCsrPost([FromBody]X509CertificateCsr body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(X509CertificateCsrResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<X509CertificateCsrResponse>(exampleJson)
            : default(X509CertificateCsrResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Exchange Certificates
        /// </summary>
        /// <remarks>Exchange certificates between two clusters. Add CA certificates to the trust store of each cluster and assign roles to the client certificates. After this process, certificate-based authentication can be used for communication between clusters. This exchange REST API can only be triggered with service Replication_HTTP.</remarks>
        /// <param name="body">Request body.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/x509_certificate/exchange")]
        [ValidateModelState]
        [SwaggerOperation("X509CertificateExchangePost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult X509CertificateExchangePost([FromBody]X509CertificateExchange body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query to list X509 Certificates instances.  This resource type collection query does not support filtering, sorting or pagination.</remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of x 509 certificate instance objects</response>
        [HttpGet]
        [Route("/api/rest/x509_certificate")]
        [ValidateModelState]
        [SwaggerOperation("X509CertificateGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<X509CertificateInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<X509CertificateInstance>), description: "Partial content of x 509 certificate instance objects")]
        public virtual IActionResult X509CertificateGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<X509CertificateInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<X509CertificateInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<X509CertificateInstance>>(exampleJson)
            : default(List<X509CertificateInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query a specific X509 Certificate instance.</remarks>
        /// <param name="id">Unique identifier of the X509 Certificate.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/x509_certificate/{id}")]
        [ValidateModelState]
        [SwaggerOperation("X509CertificateIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(X509CertificateInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult X509CertificateIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(X509CertificateInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<X509CertificateInstance>(exampleJson)
            : default(X509CertificateInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify
        /// </summary>
        /// <remarks>Update/modify a X509 Certificate instance by unique identifier. This request may only be used when certificate usage type is server or client certificate. Please note that for Management_HTTP service, is_current must be set to true to avoid losing the management connection to the server. Setting the is_current flag to true on the new certificate will delete any existing current certificate. Was added in version 2.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the X509 Certificate.</param>
        /// <param name="body">Request body.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPatch]
        [Route("/api/rest/x509_certificate/{id}")]
        [ValidateModelState]
        [SwaggerOperation("X509CertificateIdPatch")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult X509CertificateIdPatch([FromRoute][Required]string id, [FromBody]X509CertificateModify body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>Add/import a new X509 Certificate. When certificate usage type in the request is server or client, private key and passphrase are required. Private key presented in the request should be encrypted in PKCS8 format. For the current release following services are supported - Import_HTTP, LDAP_HTTP, Syslog_HTTP, SecurID_HTTP, Remote_Backup_HTTP for which the certificate can be imported. CA certificates of type CA_Client_Validation and CA_Server_Validation are supported for all service types. If the imported client/server certificate with is_current flag is set to true and corresponding CA Client Validation or CA Server Validation certificate&#39;s is_current flag is not set or updated to true , will cause a loss in connection to the client/server. There can be multiple CA certs for a given service with is_current flag set to true. But for client/server certificates, setting the is_current flag to true on the new certificate will delete the existing current certificate. Was added in version 2.0.0.0.</remarks>
        /// <param name="body">Request body.</param>
        /// <response code="201">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/x509_certificate")]
        [ValidateModelState]
        [SwaggerOperation("X509CertificatePost")]
        [SwaggerResponse(statusCode: 201, type: typeof(CreateResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult X509CertificatePost([FromBody]X509CertificateCreate body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(CreateResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateResponse>(exampleJson)
            : default(CreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reset certificates by service
        /// </summary>
        /// <remarks>Reset x509 certificates for one service to the initial state for the system. This is used to recover system from an invalid certificates or private key for services like VASA provider (VASA_HTTP) when VASA Provider certificates are invalid. This can restore the VASA Provider certificate to a new self-signed certificate, so that VASA Provider can be re-registered with vCenter. This is valid only for the VASA_HTTP service and requires either the Administrator, Security Administrator, or VASA administrator role. Was added in version 2.0.0.0.</remarks>
        /// <param name="body">Request body.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/x509_certificate/reset_certificates")]
        [ValidateModelState]
        [SwaggerOperation("X509CertificateResetCertificatesPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult X509CertificateResetCertificatesPost([FromBody]X509CertificateResetCertificates body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }
    }
}
