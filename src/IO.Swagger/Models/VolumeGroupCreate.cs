/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Create volume group request.
    /// </summary>
    [DataContract]
    public partial class VolumeGroupCreate : IEquatable<VolumeGroupCreate>
    { 
        /// <summary>
        /// Unique name for the volume group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is reserved, uniqueness check is case-insensitive, so the same name in two different cases is not considered unique. 
        /// </summary>
        /// <value>Unique name for the volume group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is reserved, uniqueness check is case-insensitive, so the same name in two different cases is not considered unique. </value>
        [Required]
        
        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description for the volume group. The description should not be more than 256  characters long and should not have any unprintable characters.   If description is not specified, the description for the volume group will not be set. 
        /// </summary>
        /// <value>Description for the volume group. The description should not be more than 256  characters long and should not have any unprintable characters.   If description is not specified, the description for the volume group will not be set. </value>

        [MaxLength(256)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// A list of identifiers of existing volumes that should be added to the volume group.    All the volumes must be on the same Cyclone appliance and should not be part of another volume group.   If a list of volumes is not specified or if the specified list is empty, an  empty volume group of type Volume will be created. 
        /// </summary>
        /// <value>A list of identifiers of existing volumes that should be added to the volume group.    All the volumes must be on the same Cyclone appliance and should not be part of another volume group.   If a list of volumes is not specified or if the specified list is empty, an  empty volume group of type Volume will be created. </value>

        [DataMember(Name="volume_ids")]
        public List<string> VolumeIds { get; set; }

        /// <summary>
        /// A boolean flag to indicate whether snapshot sets of the volume group will be write-order consistent.   This parameter defaults to true, if not specified. 
        /// </summary>
        /// <value>A boolean flag to indicate whether snapshot sets of the volume group will be write-order consistent.   This parameter defaults to true, if not specified. </value>

        [DataMember(Name="is_write_order_consistent")]
        public bool? IsWriteOrderConsistent { get; set; }

        /// <summary>
        /// Unique identifier of an optional protection policy to assign to the volume group.  name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;
        /// </summary>
        /// <value>Unique identifier of an optional protection policy to assign to the volume group.  name:{name} can be used instead of {id}. For example: &#39;protection_policy_id&#39;:&#39;name:policy_name&#39;</value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Unique identifier of an optional QoS performance policy to assign to the volume group. name:{name} can be used instead of {id}. For example: &#39;qos_performance_policy_id&#39;:&#39;name:policy_name&#39; Was added in version 4.0.0.0.
        /// </summary>
        /// <value>Unique identifier of an optional QoS performance policy to assign to the volume group. name:{name} can be used instead of {id}. For example: &#39;qos_performance_policy_id&#39;:&#39;name:policy_name&#39; Was added in version 4.0.0.0.</value>

        [DataMember(Name="qos_performance_policy_id")]
        public string QosPerformancePolicyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeGroupCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  VolumeIds: ").Append(VolumeIds).Append("\n");
            sb.Append("  IsWriteOrderConsistent: ").Append(IsWriteOrderConsistent).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  QosPerformancePolicyId: ").Append(QosPerformancePolicyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VolumeGroupCreate)obj);
        }

        /// <summary>
        /// Returns true if VolumeGroupCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of VolumeGroupCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeGroupCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    VolumeIds == other.VolumeIds ||
                    VolumeIds != null &&
                    VolumeIds.SequenceEqual(other.VolumeIds)
                ) && 
                (
                    IsWriteOrderConsistent == other.IsWriteOrderConsistent ||
                    IsWriteOrderConsistent != null &&
                    IsWriteOrderConsistent.Equals(other.IsWriteOrderConsistent)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    QosPerformancePolicyId == other.QosPerformancePolicyId ||
                    QosPerformancePolicyId != null &&
                    QosPerformancePolicyId.Equals(other.QosPerformancePolicyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (VolumeIds != null)
                    hashCode = hashCode * 59 + VolumeIds.GetHashCode();
                    if (IsWriteOrderConsistent != null)
                    hashCode = hashCode * 59 + IsWriteOrderConsistent.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (QosPerformancePolicyId != null)
                    hashCode = hashCode * 59 + QosPerformancePolicyId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VolumeGroupCreate left, VolumeGroupCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VolumeGroupCreate left, VolumeGroupCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
