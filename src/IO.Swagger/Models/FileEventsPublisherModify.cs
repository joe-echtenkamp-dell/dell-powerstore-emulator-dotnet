/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    ///  Was added in version 3.0.0.0.
    /// </summary>
    [DataContract]
    public partial class FileEventsPublisherModify : IEquatable<FileEventsPublisherModify>
    { 
        /// <summary>
        /// Unique name of the file events publisher.
        /// </summary>
        /// <value>Unique name of the file events publisher.</value>

        [StringLength(80, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Whether or not the event publisher will publish events.
        /// </summary>
        /// <value>Whether or not the event publisher will publish events.</value>

        [DataMember(Name="is_enabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Time interval to scan each CEPA server (in seconds) for online/offline status. 
        /// </summary>
        /// <value>Time interval to scan each CEPA server (in seconds) for online/offline status. </value>

        [Range(1, 120)]
        [DataMember(Name="heartbeat")]
        public int? Heartbeat { get; set; }

        /// <summary>
        /// Timeout in milliseconds while attempting to send event to a CEPA server to determine that is offline. 
        /// </summary>
        /// <value>Timeout in milliseconds while attempting to send event to a CEPA server to determine that is offline. </value>

        [Range(50, 5000)]
        [DataMember(Name="connection_timeout")]
        public int? ConnectionTimeout { get; set; }

        /// <summary>
        /// Gets or Sets PostEventPolicy
        /// </summary>

        [DataMember(Name="post_event_policy")]
        public PostEventPolicyEnum? PostEventPolicy { get; set; }

        /// <summary>
        /// Behavior when no configured file events servers respond. Values are: false - allow I/O to the file system to continue. true - deny I/O to the filesystem when an event cannot be published to any server. 
        /// </summary>
        /// <value>Behavior when no configured file events servers respond. Values are: false - allow I/O to the file system to continue. true - deny I/O to the filesystem when an event cannot be published to any server. </value>

        [DataMember(Name="deny_access_when_all_servers_offline")]
        public bool? DenyAccessWhenAllServersOffline { get; set; }

        /// <summary>
        /// Name of a Windows user allowing Events Publishing to connect to CEPA servers. To ensure that a secure connection (via Microsoft RPC protocol) is used disable HTTP by setting http_port to 0. 
        /// </summary>
        /// <value>Name of a Windows user allowing Events Publishing to connect to CEPA servers. To ensure that a secure connection (via Microsoft RPC protocol) is used disable HTTP by setting http_port to 0. </value>

        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="username")]
        public string Username { get; set; }

        /// <summary>
        /// Password of the windows user.
        /// </summary>
        /// <value>Password of the windows user.</value>

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// TCP port number used but the service to connect to the CEPA server(s) with HTTP. Default port number is 12228. Set this value to 0 to disable HTTP. When enabled, connection via HTTP is attempted first. If HTTP connection is disabled, or the connection fails, then connection through MSRPC is attempted if all CEPP server(s) are defined by FQDN. The SMB account of the NAS server in the AD Domain is used to make the connection via MSRPC. Note that HTTP connections should only be used on secure networks, as it is neither SSL nor authenticated. 
        /// </summary>
        /// <value>TCP port number used but the service to connect to the CEPA server(s) with HTTP. Default port number is 12228. Set this value to 0 to disable HTTP. When enabled, connection via HTTP is attempted first. If HTTP connection is disabled, or the connection fails, then connection through MSRPC is attempted if all CEPP server(s) are defined by FQDN. The SMB account of the NAS server in the AD Domain is used to make the connection via MSRPC. Note that HTTP connections should only be used on secure networks, as it is neither SSL nor authenticated. </value>

        [Range(0, 65535)]
        [DataMember(Name="http_port")]
        public int? HttpPort { get; set; }

        /// <summary>
        /// The list of file events pool identifiers included in this file events publisher. Maximum of 3 file events pools can be associated to a file events publisher. 
        /// </summary>
        /// <value>The list of file events pool identifiers included in this file events publisher. Maximum of 3 file events pools can be associated to a file events publisher. </value>

        [DataMember(Name="file_events_pool_ids")]
        public List<string> FileEventsPoolIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileEventsPublisherModify {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  Heartbeat: ").Append(Heartbeat).Append("\n");
            sb.Append("  ConnectionTimeout: ").Append(ConnectionTimeout).Append("\n");
            sb.Append("  PostEventPolicy: ").Append(PostEventPolicy).Append("\n");
            sb.Append("  DenyAccessWhenAllServersOffline: ").Append(DenyAccessWhenAllServersOffline).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  HttpPort: ").Append(HttpPort).Append("\n");
            sb.Append("  FileEventsPoolIds: ").Append(FileEventsPoolIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileEventsPublisherModify)obj);
        }

        /// <summary>
        /// Returns true if FileEventsPublisherModify instances are equal
        /// </summary>
        /// <param name="other">Instance of FileEventsPublisherModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileEventsPublisherModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    IsEnabled == other.IsEnabled ||
                    IsEnabled != null &&
                    IsEnabled.Equals(other.IsEnabled)
                ) && 
                (
                    Heartbeat == other.Heartbeat ||
                    Heartbeat != null &&
                    Heartbeat.Equals(other.Heartbeat)
                ) && 
                (
                    ConnectionTimeout == other.ConnectionTimeout ||
                    ConnectionTimeout != null &&
                    ConnectionTimeout.Equals(other.ConnectionTimeout)
                ) && 
                (
                    PostEventPolicy == other.PostEventPolicy ||
                    PostEventPolicy != null &&
                    PostEventPolicy.Equals(other.PostEventPolicy)
                ) && 
                (
                    DenyAccessWhenAllServersOffline == other.DenyAccessWhenAllServersOffline ||
                    DenyAccessWhenAllServersOffline != null &&
                    DenyAccessWhenAllServersOffline.Equals(other.DenyAccessWhenAllServersOffline)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    HttpPort == other.HttpPort ||
                    HttpPort != null &&
                    HttpPort.Equals(other.HttpPort)
                ) && 
                (
                    FileEventsPoolIds == other.FileEventsPoolIds ||
                    FileEventsPoolIds != null &&
                    FileEventsPoolIds.SequenceEqual(other.FileEventsPoolIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IsEnabled != null)
                    hashCode = hashCode * 59 + IsEnabled.GetHashCode();
                    if (Heartbeat != null)
                    hashCode = hashCode * 59 + Heartbeat.GetHashCode();
                    if (ConnectionTimeout != null)
                    hashCode = hashCode * 59 + ConnectionTimeout.GetHashCode();
                    if (PostEventPolicy != null)
                    hashCode = hashCode * 59 + PostEventPolicy.GetHashCode();
                    if (DenyAccessWhenAllServersOffline != null)
                    hashCode = hashCode * 59 + DenyAccessWhenAllServersOffline.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (HttpPort != null)
                    hashCode = hashCode * 59 + HttpPort.GetHashCode();
                    if (FileEventsPoolIds != null)
                    hashCode = hashCode * 59 + FileEventsPoolIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileEventsPublisherModify left, FileEventsPublisherModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileEventsPublisherModify left, FileEventsPublisherModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
