/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of the file FTP instance. This resource type has queriable association from nas_server
    /// </summary>
    [DataContract]
    public partial class FileFtpInstance : IEquatable<FileFtpInstance>
    { 
        /// <summary>
        /// Unique identifier of the FTP server.
        /// </summary>
        /// <value>Unique identifier of the FTP server.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier of the NAS server that is configured with the FTP server.
        /// </summary>
        /// <value>Unique identifier of the NAS server that is configured with the FTP server.</value>

        [DataMember(Name="nas_server_id")]
        public string NasServerId { get; set; }

        /// <summary>
        /// Indicates whether the FTP server is enabled on the NAS server. Values are: - true - FTP server is enabled on the specified NAS server. - false - FTP server is disabled on the specified NAS server. 
        /// </summary>
        /// <value>Indicates whether the FTP server is enabled on the NAS server. Values are: - true - FTP server is enabled on the specified NAS server. - false - FTP server is disabled on the specified NAS server. </value>

        [DataMember(Name="is_ftp_enabled")]
        public bool? IsFtpEnabled { get; set; }

        /// <summary>
        /// Indicates whether the SFTP server is enabled on the NAS server. Values are: - true - SFTP server is enabled on the specified NAS server. - false - SFTP server is disabled on the specified NAS server. 
        /// </summary>
        /// <value>Indicates whether the SFTP server is enabled on the NAS server. Values are: - true - SFTP server is enabled on the specified NAS server. - false - SFTP server is disabled on the specified NAS server. </value>

        [DataMember(Name="is_sftp_enabled")]
        public bool? IsSftpEnabled { get; set; }

        /// <summary>
        /// Indicates whether FTP and SFTP clients can be authenticated using an SMB user name. These user names are defined in a Windows domain controller, and their formats are user@domain or domain\\\\user. Values are: - true - SMB user names are accepted for authentication. - false - SMB user names are not accepted for authentication. 
        /// </summary>
        /// <value>Indicates whether FTP and SFTP clients can be authenticated using an SMB user name. These user names are defined in a Windows domain controller, and their formats are user@domain or domain\\\\user. Values are: - true - SMB user names are accepted for authentication. - false - SMB user names are not accepted for authentication. </value>

        [DataMember(Name="is_smb_authentication_enabled")]
        public bool? IsSmbAuthenticationEnabled { get; set; }

        /// <summary>
        /// Indicates whether FTP and SFTP clients can be authenticated using a Unix user name. Unix user names are defined in LDAP, NIS servers or in local passwd file. Values are: - true - Unix user names are accepted for authentication. - false - Unix user names are not accepted for authentication. 
        /// </summary>
        /// <value>Indicates whether FTP and SFTP clients can be authenticated using a Unix user name. Unix user names are defined in LDAP, NIS servers or in local passwd file. Values are: - true - Unix user names are accepted for authentication. - false - Unix user names are not accepted for authentication. </value>

        [DataMember(Name="is_unix_authentication_enabled")]
        public bool? IsUnixAuthenticationEnabled { get; set; }

        /// <summary>
        /// Indicates whether FTP clients can be authenticated anonymously. Values are: - true - Anonymous user name is accepted. - false - Anonymous user name is not accepted. 
        /// </summary>
        /// <value>Indicates whether FTP clients can be authenticated anonymously. Values are: - true - Anonymous user name is accepted. - false - Anonymous user name is not accepted. </value>

        [DataMember(Name="is_anonymous_authentication_enabled")]
        public bool? IsAnonymousAuthenticationEnabled { get; set; }

        /// <summary>
        /// Indicates whether an FTP or SFTP user access is limited to his home directory. Values are: - true - An FTP or SFTP user can access his or her own home directory only. - false - FTP and SFTP users can access any NAS server directory, according to NAS server permissions. 
        /// </summary>
        /// <value>Indicates whether an FTP or SFTP user access is limited to his home directory. Values are: - true - An FTP or SFTP user can access his or her own home directory only. - false - FTP and SFTP users can access any NAS server directory, according to NAS server permissions. </value>

        [DataMember(Name="is_homedir_limit_enabled")]
        public bool? IsHomedirLimitEnabled { get; set; }

        /// <summary>
        /// (Applies when the value of is_homedir_limit_enabled is false.) Default directory of FTP and SFTP clients that have a home directory which is not defined or accessible.
        /// </summary>
        /// <value>(Applies when the value of is_homedir_limit_enabled is false.) Default directory of FTP and SFTP clients that have a home directory which is not defined or accessible.</value>

        [StringLength(511, MinimumLength=0)]
        [DataMember(Name="default_homedir")]
        public string DefaultHomedir { get; set; }

        /// <summary>
        /// Welcome message displayed on the console of FTP and SFTP clients before their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.
        /// </summary>
        /// <value>Welcome message displayed on the console of FTP and SFTP clients before their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.</value>

        [StringLength(511, MinimumLength=0)]
        [DataMember(Name="welcome_message")]
        public string WelcomeMessage { get; set; }

        /// <summary>
        /// Message of the day displayed on the console of FTP clients after their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.
        /// </summary>
        /// <value>Message of the day displayed on the console of FTP clients after their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.</value>

        [StringLength(511, MinimumLength=0)]
        [DataMember(Name="message_of_the_day")]
        public string MessageOfTheDay { get; set; }

        /// <summary>
        /// Indicates whether the activity of FTP and SFTP clients is tracked in audit files. Values are: - true - FTP/SFTP activity is tracked. - false - FTP/SFTP activity is not tracked. 
        /// </summary>
        /// <value>Indicates whether the activity of FTP and SFTP clients is tracked in audit files. Values are: - true - FTP/SFTP activity is tracked. - false - FTP/SFTP activity is not tracked. </value>

        [DataMember(Name="is_audit_enabled")]
        public bool? IsAuditEnabled { get; set; }

        /// <summary>
        /// (Applies when the value of is_audit_enabled is true.) Directory of FTP/SFTP audit files. Logs are saved in &#39;/&#39; directory (default) or in a mounted file system (Absolute path of the File system directory which should already exist).
        /// </summary>
        /// <value>(Applies when the value of is_audit_enabled is true.) Directory of FTP/SFTP audit files. Logs are saved in &#39;/&#39; directory (default) or in a mounted file system (Absolute path of the File system directory which should already exist).</value>

        [StringLength(511, MinimumLength=0)]
        [DataMember(Name="audit_dir")]
        public string AuditDir { get; set; }

        /// <summary>
        /// (Applies when the value of is_audit_enabled is true.) Maximum size of all (current plus archived) FTP/SFTP audit files, in bytes. There is a maximum of 5 audit files, 1 current audit file (ftp.log) and 4 archived audit files. The maximum value for this setting is 5GB (each file of 1GB) if the audit directory belongs to a user file system of the NAS server. If the audit directory is &#39;/&#39;, the maximum value is 5MB (each file of 1MB). The minimum value is 40kB (each file of 8KB) on any file system. 
        /// </summary>
        /// <value>(Applies when the value of is_audit_enabled is true.) Maximum size of all (current plus archived) FTP/SFTP audit files, in bytes. There is a maximum of 5 audit files, 1 current audit file (ftp.log) and 4 archived audit files. The maximum value for this setting is 5GB (each file of 1GB) if the audit directory belongs to a user file system of the NAS server. If the audit directory is &#39;/&#39;, the maximum value is 5MB (each file of 1MB). The minimum value is 40kB (each file of 8KB) on any file system. </value>

        [Range(40960, -9223372036854775616)]
        [DataMember(Name="audit_max_size")]
        public long? AuditMaxSize { get; set; }

        /// <summary>
        /// Allowed or denied hosts, depending on the value of the is_allowed_hosts attribute. A host is defined using its IP address. Subnets using CIDR notation are also supported. - If allowed hosts exist, only those hosts and no others can connect to the NAS server through FTP or SFTP. - If denied hosts exist, they always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to NAS server access through FTP or SFTP based on the host IP address. - The addresses may be IPv4 or IPv6. 
        /// </summary>
        /// <value>Allowed or denied hosts, depending on the value of the is_allowed_hosts attribute. A host is defined using its IP address. Subnets using CIDR notation are also supported. - If allowed hosts exist, only those hosts and no others can connect to the NAS server through FTP or SFTP. - If denied hosts exist, they always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to NAS server access through FTP or SFTP based on the host IP address. - The addresses may be IPv4 or IPv6. </value>

        [DataMember(Name="hosts")]
        public List<string> Hosts { get; set; }

        /// <summary>
        /// Allowed or denied users, depending on the value of the is_allowed_users attribute. - If allowed users exist, only those users and no others can connect to the NAS server through FTP or SFTP. - If denied users exist, they have always access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user name. 
        /// </summary>
        /// <value>Allowed or denied users, depending on the value of the is_allowed_users attribute. - If allowed users exist, only those users and no others can connect to the NAS server through FTP or SFTP. - If denied users exist, they have always access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user name. </value>

        [DataMember(Name="users")]
        public List<string> Users { get; set; }

        /// <summary>
        /// Allowed or denied user groups, depending on the value of the is_allowed_groups attribute. - If allowed groups exist, only users who are members of these groups and no others can connect to the NAS server through FTP or SFTP. - If denied groups exist, all users who are members of those groups always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user group. 
        /// </summary>
        /// <value>Allowed or denied user groups, depending on the value of the is_allowed_groups attribute. - If allowed groups exist, only users who are members of these groups and no others can connect to the NAS server through FTP or SFTP. - If denied groups exist, all users who are members of those groups always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user group. </value>

        [DataMember(Name="groups")]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Indicates whether the hosts attribute contains allowed or denied hosts. Values are: - true - Hosts contains allowed hosts. - false - Hosts contains denied hosts. 
        /// </summary>
        /// <value>Indicates whether the hosts attribute contains allowed or denied hosts. Values are: - true - Hosts contains allowed hosts. - false - Hosts contains denied hosts. </value>

        [DataMember(Name="is_allowed_hosts")]
        public bool? IsAllowedHosts { get; set; }

        /// <summary>
        /// Indicates whether the users attribute contains allowed or denied users. Values are: - true - Users contains allowed users. - false - Users contains denied users. 
        /// </summary>
        /// <value>Indicates whether the users attribute contains allowed or denied users. Values are: - true - Users contains allowed users. - false - Users contains denied users. </value>

        [DataMember(Name="is_allowed_users")]
        public bool? IsAllowedUsers { get; set; }

        /// <summary>
        /// Indicates whether the groups attribute contains allowed or denied user groups. Values are: - true - Groups contains allowed user groups. - false - Groups contains denied user groups. 
        /// </summary>
        /// <value>Indicates whether the groups attribute contains allowed or denied user groups. Values are: - true - Groups contains allowed user groups. - false - Groups contains denied user groups. </value>

        [DataMember(Name="is_allowed_groups")]
        public bool? IsAllowedGroups { get; set; }

        /// <summary>
        /// This is the embeddable reference form of nas_server_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of nas_server_id attribute.</value>

        [DataMember(Name="nas_server")]
        public NasServerInstance NasServer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileFtpInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NasServerId: ").Append(NasServerId).Append("\n");
            sb.Append("  IsFtpEnabled: ").Append(IsFtpEnabled).Append("\n");
            sb.Append("  IsSftpEnabled: ").Append(IsSftpEnabled).Append("\n");
            sb.Append("  IsSmbAuthenticationEnabled: ").Append(IsSmbAuthenticationEnabled).Append("\n");
            sb.Append("  IsUnixAuthenticationEnabled: ").Append(IsUnixAuthenticationEnabled).Append("\n");
            sb.Append("  IsAnonymousAuthenticationEnabled: ").Append(IsAnonymousAuthenticationEnabled).Append("\n");
            sb.Append("  IsHomedirLimitEnabled: ").Append(IsHomedirLimitEnabled).Append("\n");
            sb.Append("  DefaultHomedir: ").Append(DefaultHomedir).Append("\n");
            sb.Append("  WelcomeMessage: ").Append(WelcomeMessage).Append("\n");
            sb.Append("  MessageOfTheDay: ").Append(MessageOfTheDay).Append("\n");
            sb.Append("  IsAuditEnabled: ").Append(IsAuditEnabled).Append("\n");
            sb.Append("  AuditDir: ").Append(AuditDir).Append("\n");
            sb.Append("  AuditMaxSize: ").Append(AuditMaxSize).Append("\n");
            sb.Append("  Hosts: ").Append(Hosts).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  IsAllowedHosts: ").Append(IsAllowedHosts).Append("\n");
            sb.Append("  IsAllowedUsers: ").Append(IsAllowedUsers).Append("\n");
            sb.Append("  IsAllowedGroups: ").Append(IsAllowedGroups).Append("\n");
            sb.Append("  NasServer: ").Append(NasServer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileFtpInstance)obj);
        }

        /// <summary>
        /// Returns true if FileFtpInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of FileFtpInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileFtpInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    NasServerId == other.NasServerId ||
                    NasServerId != null &&
                    NasServerId.Equals(other.NasServerId)
                ) && 
                (
                    IsFtpEnabled == other.IsFtpEnabled ||
                    IsFtpEnabled != null &&
                    IsFtpEnabled.Equals(other.IsFtpEnabled)
                ) && 
                (
                    IsSftpEnabled == other.IsSftpEnabled ||
                    IsSftpEnabled != null &&
                    IsSftpEnabled.Equals(other.IsSftpEnabled)
                ) && 
                (
                    IsSmbAuthenticationEnabled == other.IsSmbAuthenticationEnabled ||
                    IsSmbAuthenticationEnabled != null &&
                    IsSmbAuthenticationEnabled.Equals(other.IsSmbAuthenticationEnabled)
                ) && 
                (
                    IsUnixAuthenticationEnabled == other.IsUnixAuthenticationEnabled ||
                    IsUnixAuthenticationEnabled != null &&
                    IsUnixAuthenticationEnabled.Equals(other.IsUnixAuthenticationEnabled)
                ) && 
                (
                    IsAnonymousAuthenticationEnabled == other.IsAnonymousAuthenticationEnabled ||
                    IsAnonymousAuthenticationEnabled != null &&
                    IsAnonymousAuthenticationEnabled.Equals(other.IsAnonymousAuthenticationEnabled)
                ) && 
                (
                    IsHomedirLimitEnabled == other.IsHomedirLimitEnabled ||
                    IsHomedirLimitEnabled != null &&
                    IsHomedirLimitEnabled.Equals(other.IsHomedirLimitEnabled)
                ) && 
                (
                    DefaultHomedir == other.DefaultHomedir ||
                    DefaultHomedir != null &&
                    DefaultHomedir.Equals(other.DefaultHomedir)
                ) && 
                (
                    WelcomeMessage == other.WelcomeMessage ||
                    WelcomeMessage != null &&
                    WelcomeMessage.Equals(other.WelcomeMessage)
                ) && 
                (
                    MessageOfTheDay == other.MessageOfTheDay ||
                    MessageOfTheDay != null &&
                    MessageOfTheDay.Equals(other.MessageOfTheDay)
                ) && 
                (
                    IsAuditEnabled == other.IsAuditEnabled ||
                    IsAuditEnabled != null &&
                    IsAuditEnabled.Equals(other.IsAuditEnabled)
                ) && 
                (
                    AuditDir == other.AuditDir ||
                    AuditDir != null &&
                    AuditDir.Equals(other.AuditDir)
                ) && 
                (
                    AuditMaxSize == other.AuditMaxSize ||
                    AuditMaxSize != null &&
                    AuditMaxSize.Equals(other.AuditMaxSize)
                ) && 
                (
                    Hosts == other.Hosts ||
                    Hosts != null &&
                    Hosts.SequenceEqual(other.Hosts)
                ) && 
                (
                    Users == other.Users ||
                    Users != null &&
                    Users.SequenceEqual(other.Users)
                ) && 
                (
                    Groups == other.Groups ||
                    Groups != null &&
                    Groups.SequenceEqual(other.Groups)
                ) && 
                (
                    IsAllowedHosts == other.IsAllowedHosts ||
                    IsAllowedHosts != null &&
                    IsAllowedHosts.Equals(other.IsAllowedHosts)
                ) && 
                (
                    IsAllowedUsers == other.IsAllowedUsers ||
                    IsAllowedUsers != null &&
                    IsAllowedUsers.Equals(other.IsAllowedUsers)
                ) && 
                (
                    IsAllowedGroups == other.IsAllowedGroups ||
                    IsAllowedGroups != null &&
                    IsAllowedGroups.Equals(other.IsAllowedGroups)
                ) && 
                (
                    NasServer == other.NasServer ||
                    NasServer != null &&
                    NasServer.Equals(other.NasServer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (NasServerId != null)
                    hashCode = hashCode * 59 + NasServerId.GetHashCode();
                    if (IsFtpEnabled != null)
                    hashCode = hashCode * 59 + IsFtpEnabled.GetHashCode();
                    if (IsSftpEnabled != null)
                    hashCode = hashCode * 59 + IsSftpEnabled.GetHashCode();
                    if (IsSmbAuthenticationEnabled != null)
                    hashCode = hashCode * 59 + IsSmbAuthenticationEnabled.GetHashCode();
                    if (IsUnixAuthenticationEnabled != null)
                    hashCode = hashCode * 59 + IsUnixAuthenticationEnabled.GetHashCode();
                    if (IsAnonymousAuthenticationEnabled != null)
                    hashCode = hashCode * 59 + IsAnonymousAuthenticationEnabled.GetHashCode();
                    if (IsHomedirLimitEnabled != null)
                    hashCode = hashCode * 59 + IsHomedirLimitEnabled.GetHashCode();
                    if (DefaultHomedir != null)
                    hashCode = hashCode * 59 + DefaultHomedir.GetHashCode();
                    if (WelcomeMessage != null)
                    hashCode = hashCode * 59 + WelcomeMessage.GetHashCode();
                    if (MessageOfTheDay != null)
                    hashCode = hashCode * 59 + MessageOfTheDay.GetHashCode();
                    if (IsAuditEnabled != null)
                    hashCode = hashCode * 59 + IsAuditEnabled.GetHashCode();
                    if (AuditDir != null)
                    hashCode = hashCode * 59 + AuditDir.GetHashCode();
                    if (AuditMaxSize != null)
                    hashCode = hashCode * 59 + AuditMaxSize.GetHashCode();
                    if (Hosts != null)
                    hashCode = hashCode * 59 + Hosts.GetHashCode();
                    if (Users != null)
                    hashCode = hashCode * 59 + Users.GetHashCode();
                    if (Groups != null)
                    hashCode = hashCode * 59 + Groups.GetHashCode();
                    if (IsAllowedHosts != null)
                    hashCode = hashCode * 59 + IsAllowedHosts.GetHashCode();
                    if (IsAllowedUsers != null)
                    hashCode = hashCode * 59 + IsAllowedUsers.GetHashCode();
                    if (IsAllowedGroups != null)
                    hashCode = hashCode * 59 + IsAllowedGroups.GetHashCode();
                    if (NasServer != null)
                    hashCode = hashCode * 59 + NasServer.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileFtpInstance left, FileFtpInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileFtpInstance left, FileFtpInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
