/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a file system. This resource type has queriable associations from nas_server, policy, file_tree_quota, file_user_quota, nfs_export, smb_share
    /// </summary>
    [DataContract]
    public partial class FileSystemInstance : IEquatable<FileSystemInstance>
    { 
        /// <summary>
        /// Unique identifier of the file system.
        /// </summary>
        /// <value>Unique identifier of the file system.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the file system.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the file system.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the file system.
        /// </summary>
        /// <value>Description of the file system.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Unique identifier of the NAS Server on which the file system is mounted.
        /// </summary>
        /// <value>Unique identifier of the NAS Server on which the file system is mounted.</value>

        [DataMember(Name="nas_server_id")]
        public string NasServerId { get; set; }

        /// <summary>
        /// Unique identifier of the object of the parent of this file system (only applies to clones and snapshots). If the parent of a clone has been deleted the object_id will contain the null GUID 00000000-0000-0000-0000-000000000000.
        /// </summary>
        /// <value>Unique identifier of the object of the parent of this file system (only applies to clones and snapshots). If the parent of a clone has been deleted the object_id will contain the null GUID 00000000-0000-0000-0000-000000000000.</value>

        [DataMember(Name="parent_id")]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets FilesystemType
        /// </summary>

        [DataMember(Name="filesystem_type")]
        public FileSystemTypeEnum? FilesystemType { get; set; }

        /// <summary>
        /// Size, in bytes, presented to the host or end user. Value is always rounded up to next MB. 
        /// </summary>
        /// <value>Size, in bytes, presented to the host or end user. Value is always rounded up to next MB. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="size_total")]
        public long? SizeTotal { get; set; }

        /// <summary>
        /// Size used, in bytes, for the data and metadata of the file system. Value is always rounded up to next MB. 
        /// </summary>
        /// <value>Size used, in bytes, for the data and metadata of the file system. Value is always rounded up to next MB. </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="size_used")]
        public long? SizeUsed { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="config_type")]
        public FileSystemConfigTypeEnum? ConfigType { get; set; }

        /// <summary>
        /// Unique identifier of the protection policy applied to the file system.
        /// </summary>
        /// <value>Unique identifier of the protection policy applied to the file system.</value>

        [DataMember(Name="protection_policy_id")]
        public string ProtectionPolicyId { get; set; }

        /// <summary>
        /// Gets or Sets AccessPolicy
        /// </summary>

        [DataMember(Name="access_policy")]
        public FileSystemAccessPolicyEnum? AccessPolicy { get; set; }

        /// <summary>
        /// Gets or Sets LockingPolicy
        /// </summary>

        [DataMember(Name="locking_policy")]
        public FileSystemLockingPolicyEnum? LockingPolicy { get; set; }

        /// <summary>
        /// Gets or Sets FolderRenamePolicy
        /// </summary>

        [DataMember(Name="folder_rename_policy")]
        public FileSystemFolderRenamePolicyEnum? FolderRenamePolicy { get; set; }

        /// <summary>
        /// Indicates whether the synchronous writes option is enabled on the file system. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system. 
        /// </summary>
        /// <value>Indicates whether the synchronous writes option is enabled on the file system. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system. </value>

        [DataMember(Name="is_smb_sync_writes_enabled")]
        public bool? IsSmbSyncWritesEnabled { get; set; }

        /// <summary>
        /// Indicates whether opportunistic file locking is enabled on the file system. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system. 
        /// </summary>
        /// <value>Indicates whether opportunistic file locking is enabled on the file system. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system. </value>

        [DataMember(Name="is_smb_op_locks_enabled")]
        public bool? IsSmbOpLocksEnabled { get; set; }

        /// <summary>
        /// Indicates whether notifications of changes to a directory file structure are enabled. * true - Change directory notifications are disabled. * false - Change directory notifications are enabled. 
        /// </summary>
        /// <value>Indicates whether notifications of changes to a directory file structure are enabled. * true - Change directory notifications are disabled. * false - Change directory notifications are enabled. </value>

        [DataMember(Name="is_smb_no_notify_enabled")]
        public bool? IsSmbNoNotifyEnabled { get; set; }

        /// <summary>
        /// Indicates whether file access notifications are enabled on the file system. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications are disabled on the file system. 
        /// </summary>
        /// <value>Indicates whether file access notifications are enabled on the file system. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications are disabled on the file system. </value>

        [DataMember(Name="is_smb_notify_on_access_enabled")]
        public bool? IsSmbNotifyOnAccessEnabled { get; set; }

        /// <summary>
        /// Indicates whether file writes notifications are enabled on the file system. Values are: * true - File writes notification are enabled on the file system. * false - File writes notifications are disabled on the file system. 
        /// </summary>
        /// <value>Indicates whether file writes notifications are enabled on the file system. Values are: * true - File writes notification are enabled on the file system. * false - File writes notifications are disabled on the file system. </value>

        [DataMember(Name="is_smb_notify_on_write_enabled")]
        public bool? IsSmbNotifyOnWriteEnabled { get; set; }

        /// <summary>
        /// Lowest directory level to which the enabled notifications apply, if any.
        /// </summary>
        /// <value>Lowest directory level to which the enabled notifications apply, if any.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="smb_notify_on_change_dir_depth")]
        public int? SmbNotifyOnChangeDirDepth { get; set; }

        /// <summary>
        /// Indicates whether asynchronous MTIME is enabled on the file system. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system. 
        /// </summary>
        /// <value>Indicates whether asynchronous MTIME is enabled on the file system. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system. </value>

        [DataMember(Name="is_async_MTime_enabled")]
        public bool? IsAsyncMTimeEnabled { get; set; }

        /// <summary>
        /// Indicates whether quota is enabled. Values are: * true - Start tracking usages for all users on a file system or a quota tree, and user quota limits will be enforced. * false - Stop tracking usages for all users on a file system or a quota tree, and user quota limits will not be enforced. 
        /// </summary>
        /// <value>Indicates whether quota is enabled. Values are: * true - Start tracking usages for all users on a file system or a quota tree, and user quota limits will be enforced. * false - Stop tracking usages for all users on a file system or a quota tree, and user quota limits will not be enforced. </value>

        [DataMember(Name="is_quota_enabled")]
        public bool? IsQuotaEnabled { get; set; }

        /// <summary>
        /// Grace period of soft limit (seconds):  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds). 
        /// </summary>
        /// <value>Grace period of soft limit (seconds):  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds). </value>

        [Range(-1, 2147483647)]
        [DataMember(Name="grace_period")]
        public int? GracePeriod { get; set; }

        /// <summary>
        /// Default hard limit of user quotas and tree quotas (bytes). (0 means &#39;No limitation&#39;. This value can be used to compute the amount of space consumed without limiting the space). 
        /// </summary>
        /// <value>Default hard limit of user quotas and tree quotas (bytes). (0 means &#39;No limitation&#39;. This value can be used to compute the amount of space consumed without limiting the space). </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="default_hard_limit")]
        public long? DefaultHardLimit { get; set; }

        /// <summary>
        /// Default soft limit of user quotas and tree quotas (bytes). (0 means &#39;No limitation&#39;) 
        /// </summary>
        /// <value>Default soft limit of user quotas and tree quotas (bytes). (0 means &#39;No limitation&#39;) </value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="default_soft_limit")]
        public long? DefaultSoftLimit { get; set; }

        /// <summary>
        /// Time, in seconds, when the snapshot was created.
        /// </summary>
        /// <value>Time, in seconds, when the snapshot was created.</value>

        [DataMember(Name="creation_timestamp")]
        public DateTime? CreationTimestamp { get; set; }

        /// <summary>
        /// Time, in seconds, when the snapshot will expire.
        /// </summary>
        /// <value>Time, in seconds, when the snapshot will expire.</value>

        [DataMember(Name="expiration_timestamp")]
        public DateTime? ExpirationTimestamp { get; set; }

        /// <summary>
        /// Time, in seconds, when the snapshot was last refreshed.
        /// </summary>
        /// <value>Time, in seconds, when the snapshot was last refreshed.</value>

        [DataMember(Name="last_refresh_timestamp")]
        public DateTime? LastRefreshTimestamp { get; set; }

        /// <summary>
        /// If not mounted, and was previously mounted, the time (in seconds) of last mount. If never mounted, the value will be zero.
        /// </summary>
        /// <value>If not mounted, and was previously mounted, the time (in seconds) of last mount. If never mounted, the value will be zero.</value>

        [DataMember(Name="last_writable_timestamp")]
        public DateTime? LastWritableTimestamp { get; set; }

        /// <summary>
        /// Indicates whether the snapshot may have changed since it was created. Values are: * true - Snapshot is or was shared with read/write access. * false - Snapshot was never shared. 
        /// </summary>
        /// <value>Indicates whether the snapshot may have changed since it was created. Values are: * true - Snapshot is or was shared with read/write access. * false - Snapshot was never shared. </value>

        [DataMember(Name="is_modified")]
        public bool? IsModified { get; set; }

        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>

        [DataMember(Name="access_type")]
        public FileSystemSnapshotAccessTypeEnum? AccessType { get; set; }

        /// <summary>
        /// Gets or Sets CreatorType
        /// </summary>

        [DataMember(Name="creator_type")]
        public FileSystemSnapshotCreatorTypeEnum? CreatorType { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="file_events_publishing_mode")]
        public FileEventsPublishingModeEnum? FileEventsPublishingMode { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="flr_attributes")]
        public FlrInstance FlrAttributes { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="host_io_size")]
        public FileSystemHostIoSizeEnum? HostIoSize { get; set; }

        /// <summary>
        /// Localized message string corresponding to filesystem_type
        /// </summary>
        /// <value>Localized message string corresponding to filesystem_type</value>

        [DataMember(Name="filesystem_type_l10n")]
        public string FilesystemTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to config_type Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to config_type Was added in version 3.0.0.0.</value>

        [DataMember(Name="config_type_l10n")]
        public string ConfigTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to access_policy
        /// </summary>
        /// <value>Localized message string corresponding to access_policy</value>

        [DataMember(Name="access_policy_l10n")]
        public string AccessPolicyL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to locking_policy
        /// </summary>
        /// <value>Localized message string corresponding to locking_policy</value>

        [DataMember(Name="locking_policy_l10n")]
        public string LockingPolicyL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to folder_rename_policy
        /// </summary>
        /// <value>Localized message string corresponding to folder_rename_policy</value>

        [DataMember(Name="folder_rename_policy_l10n")]
        public string FolderRenamePolicyL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to access_type
        /// </summary>
        /// <value>Localized message string corresponding to access_type</value>

        [DataMember(Name="access_type_l10n")]
        public string AccessTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to creator_type
        /// </summary>
        /// <value>Localized message string corresponding to creator_type</value>

        [DataMember(Name="creator_type_l10n")]
        public string CreatorTypeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to file_events_publishing_mode Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to file_events_publishing_mode Was added in version 3.0.0.0.</value>

        [DataMember(Name="file_events_publishing_mode_l10n")]
        public string FileEventsPublishingModeL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to host_io_size Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to host_io_size Was added in version 3.0.0.0.</value>

        [DataMember(Name="host_io_size_l10n")]
        public string HostIoSizeL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of nas_server_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of nas_server_id attribute.</value>

        [DataMember(Name="nas_server")]
        public NasServerInstance NasServer { get; set; }

        /// <summary>
        /// This is the embeddable reference form of protection_policy_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of protection_policy_id attribute.</value>

        [DataMember(Name="protection_policy")]
        public PolicyInstance ProtectionPolicy { get; set; }

        /// <summary>
        /// This is the inverse of the resource type file_tree_quota association.
        /// </summary>
        /// <value>This is the inverse of the resource type file_tree_quota association.</value>

        [DataMember(Name="file_tree_quotas")]
        public List<FileTreeQuotaInstance> FileTreeQuotas { get; set; }

        /// <summary>
        /// This is the inverse of the resource type file_user_quota association.
        /// </summary>
        /// <value>This is the inverse of the resource type file_user_quota association.</value>

        [DataMember(Name="file_user_quotas")]
        public List<FileUserQuotaInstance> FileUserQuotas { get; set; }

        /// <summary>
        /// This is the inverse of the resource type nfs_export association.
        /// </summary>
        /// <value>This is the inverse of the resource type nfs_export association.</value>

        [DataMember(Name="nfs_exports")]
        public List<NfsExportInstance> NfsExports { get; set; }

        /// <summary>
        /// This is the inverse of the resource type smb_share association.
        /// </summary>
        /// <value>This is the inverse of the resource type smb_share association.</value>

        [DataMember(Name="smb_shares")]
        public List<SmbShareInstance> SmbShares { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileSystemInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NasServerId: ").Append(NasServerId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  FilesystemType: ").Append(FilesystemType).Append("\n");
            sb.Append("  SizeTotal: ").Append(SizeTotal).Append("\n");
            sb.Append("  SizeUsed: ").Append(SizeUsed).Append("\n");
            sb.Append("  ConfigType: ").Append(ConfigType).Append("\n");
            sb.Append("  ProtectionPolicyId: ").Append(ProtectionPolicyId).Append("\n");
            sb.Append("  AccessPolicy: ").Append(AccessPolicy).Append("\n");
            sb.Append("  LockingPolicy: ").Append(LockingPolicy).Append("\n");
            sb.Append("  FolderRenamePolicy: ").Append(FolderRenamePolicy).Append("\n");
            sb.Append("  IsSmbSyncWritesEnabled: ").Append(IsSmbSyncWritesEnabled).Append("\n");
            sb.Append("  IsSmbOpLocksEnabled: ").Append(IsSmbOpLocksEnabled).Append("\n");
            sb.Append("  IsSmbNoNotifyEnabled: ").Append(IsSmbNoNotifyEnabled).Append("\n");
            sb.Append("  IsSmbNotifyOnAccessEnabled: ").Append(IsSmbNotifyOnAccessEnabled).Append("\n");
            sb.Append("  IsSmbNotifyOnWriteEnabled: ").Append(IsSmbNotifyOnWriteEnabled).Append("\n");
            sb.Append("  SmbNotifyOnChangeDirDepth: ").Append(SmbNotifyOnChangeDirDepth).Append("\n");
            sb.Append("  IsAsyncMTimeEnabled: ").Append(IsAsyncMTimeEnabled).Append("\n");
            sb.Append("  IsQuotaEnabled: ").Append(IsQuotaEnabled).Append("\n");
            sb.Append("  GracePeriod: ").Append(GracePeriod).Append("\n");
            sb.Append("  DefaultHardLimit: ").Append(DefaultHardLimit).Append("\n");
            sb.Append("  DefaultSoftLimit: ").Append(DefaultSoftLimit).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  LastRefreshTimestamp: ").Append(LastRefreshTimestamp).Append("\n");
            sb.Append("  LastWritableTimestamp: ").Append(LastWritableTimestamp).Append("\n");
            sb.Append("  IsModified: ").Append(IsModified).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  CreatorType: ").Append(CreatorType).Append("\n");
            sb.Append("  FileEventsPublishingMode: ").Append(FileEventsPublishingMode).Append("\n");
            sb.Append("  FlrAttributes: ").Append(FlrAttributes).Append("\n");
            sb.Append("  HostIoSize: ").Append(HostIoSize).Append("\n");
            sb.Append("  FilesystemTypeL10n: ").Append(FilesystemTypeL10n).Append("\n");
            sb.Append("  ConfigTypeL10n: ").Append(ConfigTypeL10n).Append("\n");
            sb.Append("  AccessPolicyL10n: ").Append(AccessPolicyL10n).Append("\n");
            sb.Append("  LockingPolicyL10n: ").Append(LockingPolicyL10n).Append("\n");
            sb.Append("  FolderRenamePolicyL10n: ").Append(FolderRenamePolicyL10n).Append("\n");
            sb.Append("  AccessTypeL10n: ").Append(AccessTypeL10n).Append("\n");
            sb.Append("  CreatorTypeL10n: ").Append(CreatorTypeL10n).Append("\n");
            sb.Append("  FileEventsPublishingModeL10n: ").Append(FileEventsPublishingModeL10n).Append("\n");
            sb.Append("  HostIoSizeL10n: ").Append(HostIoSizeL10n).Append("\n");
            sb.Append("  NasServer: ").Append(NasServer).Append("\n");
            sb.Append("  ProtectionPolicy: ").Append(ProtectionPolicy).Append("\n");
            sb.Append("  FileTreeQuotas: ").Append(FileTreeQuotas).Append("\n");
            sb.Append("  FileUserQuotas: ").Append(FileUserQuotas).Append("\n");
            sb.Append("  NfsExports: ").Append(NfsExports).Append("\n");
            sb.Append("  SmbShares: ").Append(SmbShares).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileSystemInstance)obj);
        }

        /// <summary>
        /// Returns true if FileSystemInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of FileSystemInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileSystemInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    NasServerId == other.NasServerId ||
                    NasServerId != null &&
                    NasServerId.Equals(other.NasServerId)
                ) && 
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    FilesystemType == other.FilesystemType ||
                    FilesystemType != null &&
                    FilesystemType.Equals(other.FilesystemType)
                ) && 
                (
                    SizeTotal == other.SizeTotal ||
                    SizeTotal != null &&
                    SizeTotal.Equals(other.SizeTotal)
                ) && 
                (
                    SizeUsed == other.SizeUsed ||
                    SizeUsed != null &&
                    SizeUsed.Equals(other.SizeUsed)
                ) && 
                (
                    ConfigType == other.ConfigType ||
                    ConfigType != null &&
                    ConfigType.Equals(other.ConfigType)
                ) && 
                (
                    ProtectionPolicyId == other.ProtectionPolicyId ||
                    ProtectionPolicyId != null &&
                    ProtectionPolicyId.Equals(other.ProtectionPolicyId)
                ) && 
                (
                    AccessPolicy == other.AccessPolicy ||
                    AccessPolicy != null &&
                    AccessPolicy.Equals(other.AccessPolicy)
                ) && 
                (
                    LockingPolicy == other.LockingPolicy ||
                    LockingPolicy != null &&
                    LockingPolicy.Equals(other.LockingPolicy)
                ) && 
                (
                    FolderRenamePolicy == other.FolderRenamePolicy ||
                    FolderRenamePolicy != null &&
                    FolderRenamePolicy.Equals(other.FolderRenamePolicy)
                ) && 
                (
                    IsSmbSyncWritesEnabled == other.IsSmbSyncWritesEnabled ||
                    IsSmbSyncWritesEnabled != null &&
                    IsSmbSyncWritesEnabled.Equals(other.IsSmbSyncWritesEnabled)
                ) && 
                (
                    IsSmbOpLocksEnabled == other.IsSmbOpLocksEnabled ||
                    IsSmbOpLocksEnabled != null &&
                    IsSmbOpLocksEnabled.Equals(other.IsSmbOpLocksEnabled)
                ) && 
                (
                    IsSmbNoNotifyEnabled == other.IsSmbNoNotifyEnabled ||
                    IsSmbNoNotifyEnabled != null &&
                    IsSmbNoNotifyEnabled.Equals(other.IsSmbNoNotifyEnabled)
                ) && 
                (
                    IsSmbNotifyOnAccessEnabled == other.IsSmbNotifyOnAccessEnabled ||
                    IsSmbNotifyOnAccessEnabled != null &&
                    IsSmbNotifyOnAccessEnabled.Equals(other.IsSmbNotifyOnAccessEnabled)
                ) && 
                (
                    IsSmbNotifyOnWriteEnabled == other.IsSmbNotifyOnWriteEnabled ||
                    IsSmbNotifyOnWriteEnabled != null &&
                    IsSmbNotifyOnWriteEnabled.Equals(other.IsSmbNotifyOnWriteEnabled)
                ) && 
                (
                    SmbNotifyOnChangeDirDepth == other.SmbNotifyOnChangeDirDepth ||
                    SmbNotifyOnChangeDirDepth != null &&
                    SmbNotifyOnChangeDirDepth.Equals(other.SmbNotifyOnChangeDirDepth)
                ) && 
                (
                    IsAsyncMTimeEnabled == other.IsAsyncMTimeEnabled ||
                    IsAsyncMTimeEnabled != null &&
                    IsAsyncMTimeEnabled.Equals(other.IsAsyncMTimeEnabled)
                ) && 
                (
                    IsQuotaEnabled == other.IsQuotaEnabled ||
                    IsQuotaEnabled != null &&
                    IsQuotaEnabled.Equals(other.IsQuotaEnabled)
                ) && 
                (
                    GracePeriod == other.GracePeriod ||
                    GracePeriod != null &&
                    GracePeriod.Equals(other.GracePeriod)
                ) && 
                (
                    DefaultHardLimit == other.DefaultHardLimit ||
                    DefaultHardLimit != null &&
                    DefaultHardLimit.Equals(other.DefaultHardLimit)
                ) && 
                (
                    DefaultSoftLimit == other.DefaultSoftLimit ||
                    DefaultSoftLimit != null &&
                    DefaultSoftLimit.Equals(other.DefaultSoftLimit)
                ) && 
                (
                    CreationTimestamp == other.CreationTimestamp ||
                    CreationTimestamp != null &&
                    CreationTimestamp.Equals(other.CreationTimestamp)
                ) && 
                (
                    ExpirationTimestamp == other.ExpirationTimestamp ||
                    ExpirationTimestamp != null &&
                    ExpirationTimestamp.Equals(other.ExpirationTimestamp)
                ) && 
                (
                    LastRefreshTimestamp == other.LastRefreshTimestamp ||
                    LastRefreshTimestamp != null &&
                    LastRefreshTimestamp.Equals(other.LastRefreshTimestamp)
                ) && 
                (
                    LastWritableTimestamp == other.LastWritableTimestamp ||
                    LastWritableTimestamp != null &&
                    LastWritableTimestamp.Equals(other.LastWritableTimestamp)
                ) && 
                (
                    IsModified == other.IsModified ||
                    IsModified != null &&
                    IsModified.Equals(other.IsModified)
                ) && 
                (
                    AccessType == other.AccessType ||
                    AccessType != null &&
                    AccessType.Equals(other.AccessType)
                ) && 
                (
                    CreatorType == other.CreatorType ||
                    CreatorType != null &&
                    CreatorType.Equals(other.CreatorType)
                ) && 
                (
                    FileEventsPublishingMode == other.FileEventsPublishingMode ||
                    FileEventsPublishingMode != null &&
                    FileEventsPublishingMode.Equals(other.FileEventsPublishingMode)
                ) && 
                (
                    FlrAttributes == other.FlrAttributes ||
                    FlrAttributes != null &&
                    FlrAttributes.Equals(other.FlrAttributes)
                ) && 
                (
                    HostIoSize == other.HostIoSize ||
                    HostIoSize != null &&
                    HostIoSize.Equals(other.HostIoSize)
                ) && 
                (
                    FilesystemTypeL10n == other.FilesystemTypeL10n ||
                    FilesystemTypeL10n != null &&
                    FilesystemTypeL10n.Equals(other.FilesystemTypeL10n)
                ) && 
                (
                    ConfigTypeL10n == other.ConfigTypeL10n ||
                    ConfigTypeL10n != null &&
                    ConfigTypeL10n.Equals(other.ConfigTypeL10n)
                ) && 
                (
                    AccessPolicyL10n == other.AccessPolicyL10n ||
                    AccessPolicyL10n != null &&
                    AccessPolicyL10n.Equals(other.AccessPolicyL10n)
                ) && 
                (
                    LockingPolicyL10n == other.LockingPolicyL10n ||
                    LockingPolicyL10n != null &&
                    LockingPolicyL10n.Equals(other.LockingPolicyL10n)
                ) && 
                (
                    FolderRenamePolicyL10n == other.FolderRenamePolicyL10n ||
                    FolderRenamePolicyL10n != null &&
                    FolderRenamePolicyL10n.Equals(other.FolderRenamePolicyL10n)
                ) && 
                (
                    AccessTypeL10n == other.AccessTypeL10n ||
                    AccessTypeL10n != null &&
                    AccessTypeL10n.Equals(other.AccessTypeL10n)
                ) && 
                (
                    CreatorTypeL10n == other.CreatorTypeL10n ||
                    CreatorTypeL10n != null &&
                    CreatorTypeL10n.Equals(other.CreatorTypeL10n)
                ) && 
                (
                    FileEventsPublishingModeL10n == other.FileEventsPublishingModeL10n ||
                    FileEventsPublishingModeL10n != null &&
                    FileEventsPublishingModeL10n.Equals(other.FileEventsPublishingModeL10n)
                ) && 
                (
                    HostIoSizeL10n == other.HostIoSizeL10n ||
                    HostIoSizeL10n != null &&
                    HostIoSizeL10n.Equals(other.HostIoSizeL10n)
                ) && 
                (
                    NasServer == other.NasServer ||
                    NasServer != null &&
                    NasServer.Equals(other.NasServer)
                ) && 
                (
                    ProtectionPolicy == other.ProtectionPolicy ||
                    ProtectionPolicy != null &&
                    ProtectionPolicy.Equals(other.ProtectionPolicy)
                ) && 
                (
                    FileTreeQuotas == other.FileTreeQuotas ||
                    FileTreeQuotas != null &&
                    FileTreeQuotas.SequenceEqual(other.FileTreeQuotas)
                ) && 
                (
                    FileUserQuotas == other.FileUserQuotas ||
                    FileUserQuotas != null &&
                    FileUserQuotas.SequenceEqual(other.FileUserQuotas)
                ) && 
                (
                    NfsExports == other.NfsExports ||
                    NfsExports != null &&
                    NfsExports.SequenceEqual(other.NfsExports)
                ) && 
                (
                    SmbShares == other.SmbShares ||
                    SmbShares != null &&
                    SmbShares.SequenceEqual(other.SmbShares)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (NasServerId != null)
                    hashCode = hashCode * 59 + NasServerId.GetHashCode();
                    if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (FilesystemType != null)
                    hashCode = hashCode * 59 + FilesystemType.GetHashCode();
                    if (SizeTotal != null)
                    hashCode = hashCode * 59 + SizeTotal.GetHashCode();
                    if (SizeUsed != null)
                    hashCode = hashCode * 59 + SizeUsed.GetHashCode();
                    if (ConfigType != null)
                    hashCode = hashCode * 59 + ConfigType.GetHashCode();
                    if (ProtectionPolicyId != null)
                    hashCode = hashCode * 59 + ProtectionPolicyId.GetHashCode();
                    if (AccessPolicy != null)
                    hashCode = hashCode * 59 + AccessPolicy.GetHashCode();
                    if (LockingPolicy != null)
                    hashCode = hashCode * 59 + LockingPolicy.GetHashCode();
                    if (FolderRenamePolicy != null)
                    hashCode = hashCode * 59 + FolderRenamePolicy.GetHashCode();
                    if (IsSmbSyncWritesEnabled != null)
                    hashCode = hashCode * 59 + IsSmbSyncWritesEnabled.GetHashCode();
                    if (IsSmbOpLocksEnabled != null)
                    hashCode = hashCode * 59 + IsSmbOpLocksEnabled.GetHashCode();
                    if (IsSmbNoNotifyEnabled != null)
                    hashCode = hashCode * 59 + IsSmbNoNotifyEnabled.GetHashCode();
                    if (IsSmbNotifyOnAccessEnabled != null)
                    hashCode = hashCode * 59 + IsSmbNotifyOnAccessEnabled.GetHashCode();
                    if (IsSmbNotifyOnWriteEnabled != null)
                    hashCode = hashCode * 59 + IsSmbNotifyOnWriteEnabled.GetHashCode();
                    if (SmbNotifyOnChangeDirDepth != null)
                    hashCode = hashCode * 59 + SmbNotifyOnChangeDirDepth.GetHashCode();
                    if (IsAsyncMTimeEnabled != null)
                    hashCode = hashCode * 59 + IsAsyncMTimeEnabled.GetHashCode();
                    if (IsQuotaEnabled != null)
                    hashCode = hashCode * 59 + IsQuotaEnabled.GetHashCode();
                    if (GracePeriod != null)
                    hashCode = hashCode * 59 + GracePeriod.GetHashCode();
                    if (DefaultHardLimit != null)
                    hashCode = hashCode * 59 + DefaultHardLimit.GetHashCode();
                    if (DefaultSoftLimit != null)
                    hashCode = hashCode * 59 + DefaultSoftLimit.GetHashCode();
                    if (CreationTimestamp != null)
                    hashCode = hashCode * 59 + CreationTimestamp.GetHashCode();
                    if (ExpirationTimestamp != null)
                    hashCode = hashCode * 59 + ExpirationTimestamp.GetHashCode();
                    if (LastRefreshTimestamp != null)
                    hashCode = hashCode * 59 + LastRefreshTimestamp.GetHashCode();
                    if (LastWritableTimestamp != null)
                    hashCode = hashCode * 59 + LastWritableTimestamp.GetHashCode();
                    if (IsModified != null)
                    hashCode = hashCode * 59 + IsModified.GetHashCode();
                    if (AccessType != null)
                    hashCode = hashCode * 59 + AccessType.GetHashCode();
                    if (CreatorType != null)
                    hashCode = hashCode * 59 + CreatorType.GetHashCode();
                    if (FileEventsPublishingMode != null)
                    hashCode = hashCode * 59 + FileEventsPublishingMode.GetHashCode();
                    if (FlrAttributes != null)
                    hashCode = hashCode * 59 + FlrAttributes.GetHashCode();
                    if (HostIoSize != null)
                    hashCode = hashCode * 59 + HostIoSize.GetHashCode();
                    if (FilesystemTypeL10n != null)
                    hashCode = hashCode * 59 + FilesystemTypeL10n.GetHashCode();
                    if (ConfigTypeL10n != null)
                    hashCode = hashCode * 59 + ConfigTypeL10n.GetHashCode();
                    if (AccessPolicyL10n != null)
                    hashCode = hashCode * 59 + AccessPolicyL10n.GetHashCode();
                    if (LockingPolicyL10n != null)
                    hashCode = hashCode * 59 + LockingPolicyL10n.GetHashCode();
                    if (FolderRenamePolicyL10n != null)
                    hashCode = hashCode * 59 + FolderRenamePolicyL10n.GetHashCode();
                    if (AccessTypeL10n != null)
                    hashCode = hashCode * 59 + AccessTypeL10n.GetHashCode();
                    if (CreatorTypeL10n != null)
                    hashCode = hashCode * 59 + CreatorTypeL10n.GetHashCode();
                    if (FileEventsPublishingModeL10n != null)
                    hashCode = hashCode * 59 + FileEventsPublishingModeL10n.GetHashCode();
                    if (HostIoSizeL10n != null)
                    hashCode = hashCode * 59 + HostIoSizeL10n.GetHashCode();
                    if (NasServer != null)
                    hashCode = hashCode * 59 + NasServer.GetHashCode();
                    if (ProtectionPolicy != null)
                    hashCode = hashCode * 59 + ProtectionPolicy.GetHashCode();
                    if (FileTreeQuotas != null)
                    hashCode = hashCode * 59 + FileTreeQuotas.GetHashCode();
                    if (FileUserQuotas != null)
                    hashCode = hashCode * 59 + FileUserQuotas.GetHashCode();
                    if (NfsExports != null)
                    hashCode = hashCode * 59 + NfsExports.GetHashCode();
                    if (SmbShares != null)
                    hashCode = hashCode * 59 + SmbShares.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileSystemInstance left, FileSystemInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileSystemInstance left, FileSystemInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
