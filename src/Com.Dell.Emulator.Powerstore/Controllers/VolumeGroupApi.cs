/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Com.Dell.Emulator.Powerstore.Attributes;

using Microsoft.AspNetCore.Authorization;
using Com.Dell.Emulator.Powerstore.Models;

namespace Com.Dell.Emulator.Powerstore.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VolumeGroupApiController : ControllerBase
    { 
        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query volume groups, including snapshot sets and clones of volume groups. </remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of volume group instance objects</response>
        [HttpGet]
        [Route("/api/rest/volume_group")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<VolumeGroupInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<VolumeGroupInstance>), description: "Partial content of volume group instance objects")]
        public virtual IActionResult VolumeGroupGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<VolumeGroupInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<VolumeGroupInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<VolumeGroupInstance>>(exampleJson)
            : default(List<VolumeGroupInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add Members
        /// </summary>
        /// <remarks>Add member volumes to an existing primary or clone volume group.  This cannot be used to add members to a snapshot set. Members cannot be added to a volume group that is acting as the destination in a replication session. </remarks>
        /// <param name="id">Unique identifier of the volume group. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume_group/{id}/add_members")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdAddMembersPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupIdAddMembersPost([FromRoute][Required]string id, [FromBody]VolumeGroupAddMembers body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Clone
        /// </summary>
        /// <remarks>Clone a volume group. The clone volume group will be created on the same appliance as the source volume group.  A clone of a volume group will result in a new volume group of __Clone__ type. The clone will belong to the same family as the source volume group.  When the source of a clone operation is a either primary or clone volume group,   * __source_id__ will be set to the identifier of the source volume group.   * __source_time__ will be set to the time at which the clone will be created.   When the source of a clone operation is a snapshot set,   * __source_id__ will be set to the source_id of the source snapshot set.   * __source_time__ will be set to the source_time of the source snapshot set.   The clone volume group will inherit the value of the __is_write_order_consistent__ property from the source volume group. A clone of a snapshot set is modeled as a clone of the snapshot set&#39;s source, created at the same time instant as when the source snapshot set was created. </remarks>
        /// <param name="id">Unique identifier of the volume group. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume_group/{id}/clone")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdClonePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeGroupCloneResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupIdClonePost([FromRoute][Required]string id, [FromBody]VolumeGroupClone body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeGroupCloneResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeGroupCloneResponse>(exampleJson)
            : default(VolumeGroupCloneResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Configure Metro
        /// </summary>
        /// <remarks>Configure a metro volume group so it exists in two PowerStore clusters.  Was added in version 4.0.0.0.</remarks>
        /// <param name="id">Unique identifier of volume group to configure. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume_group/{id}/configure_metro")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdConfigureMetroPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeGroupConfigureMetroResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupIdConfigureMetroPost([FromRoute][Required]string id, [FromBody]VolumeGroupConfigureMetro body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeGroupConfigureMetroResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeGroupConfigureMetroResponse>(exampleJson)
            : default(VolumeGroupConfigureMetroResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>Delete a volume group, snapshot set, or clone.  Before you try deleting a volume group, snapshot set, or clone, ensure that you first detach it from all hosts. Note the following:  * When a volume group or clone is deleted, all related snapshot sets will also be deleted.  * When a snapshot set is deleted, all of its constituent snapshots will also be deleted. </remarks>
        /// <param name="id">Unique identifier of the volume group. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpDelete]
        [Route("/api/rest/volume_group/{id}")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupIdDelete([FromRoute][Required]string id, [FromBody]VolumeGroupDelete body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// End Metro Configuration
        /// </summary>
        /// <remarks>End a metro configuration from a volume group and keep both copies by default. The local copy will retain its SCSI Identities while the remote volume group members will get new SCSI Identities if kept.  Was added in version 4.0.0.0.</remarks>
        /// <param name="id">Unique identifier of volume group for which to end the metro configuration. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume_group/{id}/end_metro")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdEndMetroPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupIdEndMetroPost([FromRoute][Required]string id, [FromBody]VolumeGroupEndMetro body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query a specific volume group, snapshot set, or clone.</remarks>
        /// <param name="id">Unique identifier of the volume group. name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/volume_group/{id}")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeGroupInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult VolumeGroupIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeGroupInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeGroupInstance>(exampleJson)
            : default(VolumeGroupInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify
        /// </summary>
        /// <remarks>Modify a volume group, snapshot set, or clone.</remarks>
        /// <param name="id">Unique identifier of the volume group. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPatch]
        [Route("/api/rest/volume_group/{id}")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdPatch")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupIdPatch([FromRoute][Required]string id, [FromBody]VolumeGroupModify body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Refresh
        /// </summary>
        /// <remarks> Refresh the contents of a volume group (the target volume group) from another volume group in the same family.  A backup snapshot set of the target volume group will be created before refresh is attempted. This behavior can be overridden by setting the __create_backup_snap__ property to false. The profile for the backup snapshot set will be auto-generated, unless a custom profile is specified. The auto-generated profile only initializes the name to an auto-generated, unique value. Other optional parameters are not specified.  The table below outlines supported modes of operation and resulting updates to __source_id__ and __source_time__ attributes of __protection_data__.  |Target volume group|Source volume group|New source_id|New source_time|  |-|-|-|-|  |Primary (P1) |Clone (C1)|id of clone (C1)|Current time|  |Primary (P1) |snapshot set (C1S1) of clone (C1)|id of source snapshot set (C1S1)|source_time of source snapshot set (C1S1)|  |Clone (C1) |Primary (P1)|id of primary (P1)|Current time|  |Clone (C1) |snapshot set (S1) of primary (P1)|id of source snapshot set (S1)|source_time of source snapshot set (S1)|  |Clone (C1) |Clone (C2)|id of source clone(C2)|Current time|  |Clone (C1) |snapshot set (C2S1) of clone (C2)|id of source snapshot set (C2S1)|source_time of source snapshot set (C2S1)|  Refresh operation is only supported if there are no membership changes between the source and target volume groups of the refresh operation. You can refresh a volume group even when the sizes of the volumes in the target volume group have changed. This represents a case where the source volumes have been modified over time and you want to refresh the target to the new state of the source volume group. A volume group that is acting as the destination in a replication session cannot be refreshed. </remarks>
        /// <param name="id">Unique identifier of the volume group. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume_group/{id}/refresh")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdRefreshPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeGroupRefreshResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupIdRefreshPost([FromRoute][Required]string id, [FromBody]VolumeGroupRefresh body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeGroupRefreshResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeGroupRefreshResponse>(exampleJson)
            : default(VolumeGroupRefreshResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove Members
        /// </summary>
        /// <remarks>Remove members from an existing primary or clone volume group.  This cannot be used to remove members from a snapshot set. Members cannot be removed from a volume group that is a acting as the destination in a replication session. </remarks>
        /// <param name="id">Unique identifier of the volume group. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume_group/{id}/remove_members")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdRemoveMembersPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupIdRemoveMembersPost([FromRoute][Required]string id, [FromBody]VolumeGroupRemoveMembers body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Restore
        /// </summary>
        /// <remarks>Restore a volume group from a snapshot set. A primary or a clone volume group can only be restored from one of its immediate snapshot sets. A backup snapshot set of the target volume group will be created before restore is attempted. This behavior can be overridden by setting the __create_backup_snap__ property to false. The profile for the backup snapshot set will be auto-generated unless a custom profile is specified. The auto-generated profile only initializes the name to an auto-generated, unique value. Other optional parameters are not specified. Restore operation is only supported if there are no membership changes between the target volume group and source snapshot set. You can restore a volume group even when the sizes of the volumes in the target volume group have changed. This represents a case where the target volumes have been modified over time, but you want to revert them back to their old state captured in the source snapshot set. When a volume group is restored, * __source_time__ is set to the __source_time__ of the snapshot set it is being restored from.  A volume group that is acting as the destination in a replication session cannot be restored. </remarks>
        /// <param name="id">Unique identifier of the volume group. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume_group/{id}/restore")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdRestorePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeGroupRestoreResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupIdRestorePost([FromRoute][Required]string id, [FromBody]VolumeGroupRestore body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeGroupRestoreResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeGroupRestoreResponse>(exampleJson)
            : default(VolumeGroupRestoreResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Snapshot
        /// </summary>
        /// <remarks>Create a new snapshot set for a volume group.  When a snapshot of a volume group is created, the resultant snapshot volume group is referred to as a \&quot;snapshot set\&quot; and it represents a point-in-time copy of the members in the volume group. The snapshot set will be created on the same appliance as the source volume group.  A snapshot of a volume group will result in a new volume group of __Snapshot__ type. The snapshot set will belong to the same family as the source volume group.  When the source of a snapshot operation is a primary or clone volume group,   * __source_id__ of the snapshot set will be set to the identifier of the source volume group.   * __source_time__ of the snapshot set will be set to the time at which the snapshot set will be created.   The __is_write_order_consistent__ property of the source volume group determines whether the snapshot set will be write-order consistent. </remarks>
        /// <param name="id">Unique identifier of the volume group. name:{name} can be used instead of {id}.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume_group/{id}/snapshot")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupIdSnapshotPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeGroupSnapshotResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupIdSnapshotPost([FromRoute][Required]string id, [FromBody]VolumeGroupSnapshot body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeGroupSnapshotResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeGroupSnapshotResponse>(exampleJson)
            : default(VolumeGroupSnapshotResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>Create a new volume group. The resulting volume group will have a type of Primary. </remarks>
        /// <param name="body"></param>
        /// <response code="201">Created</response>
        /// <response code="400">Invalid request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/volume_group")]
        [ValidateModelState]
        [SwaggerOperation("VolumeGroupPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(CreateResponse), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult VolumeGroupPost([FromBody]VolumeGroupCreate body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(CreateResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateResponse>(exampleJson)
            : default(CreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
