/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Arguments for the SMB server modify operation.
    /// </summary>
    [DataContract]
    public partial class SmbServerModify : IEquatable<SmbServerModify>
    { 
        /// <summary>
        /// Indicates whether the SMB server is standalone. Values are: - true - SMB server is standalone. - false - SMB server is joined to the Active Directory. 
        /// </summary>
        /// <value>Indicates whether the SMB server is standalone. Values are: - true - SMB server is standalone. - false - SMB server is joined to the Active Directory. </value>

        [DataMember(Name="is_standalone")]
        public bool? IsStandalone { get; set; }

        /// <summary>
        /// DNS Name of the associated Computer Account when the SMB server is joined to an Active Directory domain. This name is limited to 63 bytes and must not contain the following characters -   - comma (.)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&amp;)   - apostrophe (&#39;)   - period (.) - note that if you enter string with period only the first word will be kept   - parentheses (())   - braces ({})   - underscore (_)   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/) 
        /// </summary>
        /// <value>DNS Name of the associated Computer Account when the SMB server is joined to an Active Directory domain. This name is limited to 63 bytes and must not contain the following characters -   - comma (.)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&amp;)   - apostrophe (&#39;)   - period (.) - note that if you enter string with period only the first word will be kept   - parentheses (())   - braces ({})   - underscore (_)   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/) </value>

        [StringLength(63, MinimumLength=1)]
        [DataMember(Name="computer_name")]
        public string ComputerName { get; set; }

        /// <summary>
        /// Domain name where SMB server is registered in Active Directory, if applicable.
        /// </summary>
        /// <value>Domain name where SMB server is registered in Active Directory, if applicable.</value>

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="domain")]
        public string Domain { get; set; }

        /// <summary>
        /// NetBIOS name is the network name of the standalone SMB server. SMB servers joined to Active Directory also have NetBIOS Name, defaulted to the 15 first characters of the computer_name attribute. Administrators can specify a custom NetBIOS Name for an SMB server using this attribute. NetBIOS name is limited to 15 characters and cannot contain the following characters -   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\&quot;\&quot;)   - less than sign (&lt;)   - greater than sign (&gt;)   - vertical bar (|) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/) 
        /// </summary>
        /// <value>NetBIOS name is the network name of the standalone SMB server. SMB servers joined to Active Directory also have NetBIOS Name, defaulted to the 15 first characters of the computer_name attribute. Administrators can specify a custom NetBIOS Name for an SMB server using this attribute. NetBIOS name is limited to 15 characters and cannot contain the following characters -   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\&quot;\&quot;)   - less than sign (&lt;)   - greater than sign (&gt;)   - vertical bar (|) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/) </value>

        [StringLength(15, MinimumLength=1)]
        [DataMember(Name="netbios_name")]
        public string NetbiosName { get; set; }

        /// <summary>
        /// Applies to standalone SMB servers only. Windows network workgroup for the SMB server. Workgroup names are limited to 15 alphanumeric ASCII characters. 
        /// </summary>
        /// <value>Applies to standalone SMB servers only. Windows network workgroup for the SMB server. Workgroup names are limited to 15 alphanumeric ASCII characters. </value>

        [StringLength(15, MinimumLength=1)]
        [DataMember(Name="workgroup")]
        public string Workgroup { get; set; }

        /// <summary>
        /// Description of the SMB server in UTF-8 characters.
        /// </summary>
        /// <value>Description of the SMB server in UTF-8 characters.</value>

        [StringLength(48, MinimumLength=0)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Password for the local administrator account of the SMB server. ***Note The maximum length of a password that a human user could actually type to log into Windows is 127 characters (the limitation is in the Windows GUI).*** 
        /// </summary>
        /// <value>Password for the local administrator account of the SMB server. ***Note The maximum length of a password that a human user could actually type to log into Windows is 127 characters (the limitation is in the Windows GUI).*** </value>

        [StringLength(256, MinimumLength=0)]
        [DataMember(Name="local_admin_password")]
        public string LocalAdminPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmbServerModify {\n");
            sb.Append("  IsStandalone: ").Append(IsStandalone).Append("\n");
            sb.Append("  ComputerName: ").Append(ComputerName).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  NetbiosName: ").Append(NetbiosName).Append("\n");
            sb.Append("  Workgroup: ").Append(Workgroup).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LocalAdminPassword: ").Append(LocalAdminPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmbServerModify)obj);
        }

        /// <summary>
        /// Returns true if SmbServerModify instances are equal
        /// </summary>
        /// <param name="other">Instance of SmbServerModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmbServerModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsStandalone == other.IsStandalone ||
                    IsStandalone != null &&
                    IsStandalone.Equals(other.IsStandalone)
                ) && 
                (
                    ComputerName == other.ComputerName ||
                    ComputerName != null &&
                    ComputerName.Equals(other.ComputerName)
                ) && 
                (
                    Domain == other.Domain ||
                    Domain != null &&
                    Domain.Equals(other.Domain)
                ) && 
                (
                    NetbiosName == other.NetbiosName ||
                    NetbiosName != null &&
                    NetbiosName.Equals(other.NetbiosName)
                ) && 
                (
                    Workgroup == other.Workgroup ||
                    Workgroup != null &&
                    Workgroup.Equals(other.Workgroup)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    LocalAdminPassword == other.LocalAdminPassword ||
                    LocalAdminPassword != null &&
                    LocalAdminPassword.Equals(other.LocalAdminPassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsStandalone != null)
                    hashCode = hashCode * 59 + IsStandalone.GetHashCode();
                    if (ComputerName != null)
                    hashCode = hashCode * 59 + ComputerName.GetHashCode();
                    if (Domain != null)
                    hashCode = hashCode * 59 + Domain.GetHashCode();
                    if (NetbiosName != null)
                    hashCode = hashCode * 59 + NetbiosName.GetHashCode();
                    if (Workgroup != null)
                    hashCode = hashCode * 59 + Workgroup.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (LocalAdminPassword != null)
                    hashCode = hashCode * 59 + LocalAdminPassword.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmbServerModify left, SmbServerModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmbServerModify left, SmbServerModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
