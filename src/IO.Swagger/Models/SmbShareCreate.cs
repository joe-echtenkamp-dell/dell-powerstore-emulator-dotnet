/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SmbShareCreate : IEquatable<SmbShareCreate>
    { 
        /// <summary>
        /// Unique identifier of the file system on which the SMB Share will be created. name:{name} can be used instead of {id}. For example: &#39;file_system_id&#39;:&#39;name:file_system_name&#39;
        /// </summary>
        /// <value>Unique identifier of the file system on which the SMB Share will be created. name:{name} can be used instead of {id}. For example: &#39;file_system_id&#39;:&#39;name:file_system_name&#39;</value>
        [Required]
        
        [DataMember(Name="file_system_id")]
        public string FileSystemId { get; set; }

        /// <summary>
        /// Local path to the file system or any existing sub-folder of the file system that is shared over the network. This path is relative to the NAS Server and must start with the filesystem&#39;s mountpoint path, which is the filesystem name. For example to share the top-level of a filesystem named svr1fs1, which is on the /svr1fs1 mountpoint of the NAS Server, use /svr1fs1 in the path parameter. SMB shares allow you to create multiple network shares for the same local path. 
        /// </summary>
        /// <value>Local path to the file system or any existing sub-folder of the file system that is shared over the network. This path is relative to the NAS Server and must start with the filesystem&#39;s mountpoint path, which is the filesystem name. For example to share the top-level of a filesystem named svr1fs1, which is on the /svr1fs1 mountpoint of the NAS Server, use /svr1fs1 in the path parameter. SMB shares allow you to create multiple network shares for the same local path. </value>
        [Required]
        
        [DataMember(Name="path")]
        public string Path { get; set; }

        /// <summary>
        /// SMB share name.
        /// </summary>
        /// <value>SMB share name.</value>
        [Required]
        
        [StringLength(80, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// SMB share description.
        /// </summary>
        /// <value>SMB share description.</value>

        [StringLength(255, MinimumLength=0)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Indicates whether Access-based Enumeration (ABE) is enabled. ABE filters the list of available files and folders on a server to include only those to which the requesting user has access. Values are: - true - ABE is enabled. - false - ABE is disabled. 
        /// </summary>
        /// <value>Indicates whether Access-based Enumeration (ABE) is enabled. ABE filters the list of available files and folders on a server to include only those to which the requesting user has access. Values are: - true - ABE is enabled. - false - ABE is disabled. </value>

        [DataMember(Name="is_ABE_enabled")]
        public bool? IsABEEnabled { get; set; }

        /// <summary>
        /// Indicates whether BranchCace optimization is enabled. BranchCache optimization technology copies content from your main office or hosted cloud content servers and caches the content at branch office locations, allowing client computers at branch offices to access the content locally rather than over the WAN. Values are: - true - BranchCache is enabled. - false - BranchCache is disabled. 
        /// </summary>
        /// <value>Indicates whether BranchCace optimization is enabled. BranchCache optimization technology copies content from your main office or hosted cloud content servers and caches the content at branch office locations, allowing client computers at branch offices to access the content locally rather than over the WAN. Values are: - true - BranchCache is enabled. - false - BranchCache is disabled. </value>

        [DataMember(Name="is_branch_cache_enabled")]
        public bool? IsBranchCacheEnabled { get; set; }

        /// <summary>
        /// Gets or Sets OfflineAvailability
        /// </summary>

        [DataMember(Name="offline_availability")]
        public SMBShareOfflineAvailabilityEnum? OfflineAvailability { get; set; }

        /// <summary>
        /// The default UNIX umask for new files created on the Share. If not specified the umask defaults to 022.
        /// </summary>
        /// <value>The default UNIX umask for new files created on the Share. If not specified the umask defaults to 022.</value>

        [StringLength(3, MinimumLength=3)]
        [DataMember(Name="umask")]
        public string Umask { get; set; }

        /// <summary>
        /// Indicates whether continuous availability for Server Message Block (SMB) 3.0 is enabled for the SMB Share. Values are: - true - Continuous availability for SMB 3.0 is enabled for the SMB Share. - false - Continuous availability for SMB 3.0 is disabled for the SMB Share. 
        /// </summary>
        /// <value>Indicates whether continuous availability for Server Message Block (SMB) 3.0 is enabled for the SMB Share. Values are: - true - Continuous availability for SMB 3.0 is enabled for the SMB Share. - false - Continuous availability for SMB 3.0 is disabled for the SMB Share. </value>

        [DataMember(Name="is_continuous_availability_enabled")]
        public bool? IsContinuousAvailabilityEnabled { get; set; }

        /// <summary>
        /// Indicates whether encryption for Server Message Block (SMB) 3.0 is enabled at the shared folder level. Values are: - true - encryption for SMB 3.0 is enabled. - false - encryption for SMB 3.0 is disabled. 
        /// </summary>
        /// <value>Indicates whether encryption for Server Message Block (SMB) 3.0 is enabled at the shared folder level. Values are: - true - encryption for SMB 3.0 is enabled. - false - encryption for SMB 3.0 is disabled. </value>

        [DataMember(Name="is_encryption_enabled")]
        public bool? IsEncryptionEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmbShareCreate {\n");
            sb.Append("  FileSystemId: ").Append(FileSystemId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsABEEnabled: ").Append(IsABEEnabled).Append("\n");
            sb.Append("  IsBranchCacheEnabled: ").Append(IsBranchCacheEnabled).Append("\n");
            sb.Append("  OfflineAvailability: ").Append(OfflineAvailability).Append("\n");
            sb.Append("  Umask: ").Append(Umask).Append("\n");
            sb.Append("  IsContinuousAvailabilityEnabled: ").Append(IsContinuousAvailabilityEnabled).Append("\n");
            sb.Append("  IsEncryptionEnabled: ").Append(IsEncryptionEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmbShareCreate)obj);
        }

        /// <summary>
        /// Returns true if SmbShareCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of SmbShareCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmbShareCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FileSystemId == other.FileSystemId ||
                    FileSystemId != null &&
                    FileSystemId.Equals(other.FileSystemId)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    IsABEEnabled == other.IsABEEnabled ||
                    IsABEEnabled != null &&
                    IsABEEnabled.Equals(other.IsABEEnabled)
                ) && 
                (
                    IsBranchCacheEnabled == other.IsBranchCacheEnabled ||
                    IsBranchCacheEnabled != null &&
                    IsBranchCacheEnabled.Equals(other.IsBranchCacheEnabled)
                ) && 
                (
                    OfflineAvailability == other.OfflineAvailability ||
                    OfflineAvailability != null &&
                    OfflineAvailability.Equals(other.OfflineAvailability)
                ) && 
                (
                    Umask == other.Umask ||
                    Umask != null &&
                    Umask.Equals(other.Umask)
                ) && 
                (
                    IsContinuousAvailabilityEnabled == other.IsContinuousAvailabilityEnabled ||
                    IsContinuousAvailabilityEnabled != null &&
                    IsContinuousAvailabilityEnabled.Equals(other.IsContinuousAvailabilityEnabled)
                ) && 
                (
                    IsEncryptionEnabled == other.IsEncryptionEnabled ||
                    IsEncryptionEnabled != null &&
                    IsEncryptionEnabled.Equals(other.IsEncryptionEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FileSystemId != null)
                    hashCode = hashCode * 59 + FileSystemId.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsABEEnabled != null)
                    hashCode = hashCode * 59 + IsABEEnabled.GetHashCode();
                    if (IsBranchCacheEnabled != null)
                    hashCode = hashCode * 59 + IsBranchCacheEnabled.GetHashCode();
                    if (OfflineAvailability != null)
                    hashCode = hashCode * 59 + OfflineAvailability.GetHashCode();
                    if (Umask != null)
                    hashCode = hashCode * 59 + Umask.GetHashCode();
                    if (IsContinuousAvailabilityEnabled != null)
                    hashCode = hashCode * 59 + IsContinuousAvailabilityEnabled.GetHashCode();
                    if (IsEncryptionEnabled != null)
                    hashCode = hashCode * 59 + IsEncryptionEnabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmbShareCreate left, SmbShareCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmbShareCreate left, SmbShareCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
