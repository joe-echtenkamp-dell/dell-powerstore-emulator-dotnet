/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FileUserQuotaCreate : IEquatable<FileUserQuotaCreate>
    { 
        /// <summary>
        /// Unique identifier of the filesystem in which the new user quota will be created. name:{name} can be used instead of {id}. For example: &#39;file_system_id&#39;:&#39;name:file_system_name&#39;
        /// </summary>
        /// <value>Unique identifier of the filesystem in which the new user quota will be created. name:{name} can be used instead of {id}. For example: &#39;file_system_id&#39;:&#39;name:file_system_name&#39;</value>
        [Required]
        
        [DataMember(Name="file_system_id")]
        public string FileSystemId { get; set; }

        /// <summary>
        /// Unique identifier of the tree quota in which the new user quota will be created.
        /// </summary>
        /// <value>Unique identifier of the tree quota in which the new user quota will be created.</value>

        [DataMember(Name="tree_quota_id")]
        public string TreeQuotaId { get; set; }

        /// <summary>
        /// Unix user identifier (UID) of the user. Preferred identifier.
        /// </summary>
        /// <value>Unix user identifier (UID) of the user. Preferred identifier.</value>

        [Range(1, 4294967294)]
        [DataMember(Name="uid")]
        public long? Uid { get; set; }

        /// <summary>
        /// Unix username. Identifers are exclusive. Only one of the four identifiers among &#39;user uid&#39; / &#39;unix username&#39; / &#39;windows username&#39; / &#39;windows SID&#39; can be used at a time.
        /// </summary>
        /// <value>Unix username. Identifers are exclusive. Only one of the four identifiers among &#39;user uid&#39; / &#39;unix username&#39; / &#39;windows username&#39; / &#39;windows SID&#39; can be used at a time.</value>

        [DataMember(Name="unix_name")]
        public string UnixName { get; set; }

        /// <summary>
        /// Windows username. The format is domain\\\\user for the domain user. Identifers are exclusive. Only one of the four identifiers among &#39;user uid&#39; / &#39;unix username&#39; / &#39;windows username&#39; / &#39;windows SID&#39; can be used at a time.
        /// </summary>
        /// <value>Windows username. The format is domain\\\\user for the domain user. Identifers are exclusive. Only one of the four identifiers among &#39;user uid&#39; / &#39;unix username&#39; / &#39;windows username&#39; / &#39;windows SID&#39; can be used at a time.</value>

        [DataMember(Name="windows_name")]
        public string WindowsName { get; set; }

        /// <summary>
        /// Windows Security Identifier of the user. Identifers are exclusive. Only one of the four identifiers among &#39;user uid&#39; / &#39;unix username&#39; / &#39;windows username&#39; / &#39;windows SID&#39; can be used at a time.
        /// </summary>
        /// <value>Windows Security Identifier of the user. Identifers are exclusive. Only one of the four identifiers among &#39;user uid&#39; / &#39;unix username&#39; / &#39;windows username&#39; / &#39;windows SID&#39; can be used at a time.</value>

        [DataMember(Name="windows_sid")]
        public string WindowsSid { get; set; }

        /// <summary>
        /// Hard limit of the user quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space. Value is rounded up to match the physical block size of the filesystem.
        /// </summary>
        /// <value>Hard limit of the user quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space. Value is rounded up to match the physical block size of the filesystem.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="hard_limit")]
        public long? HardLimit { get; set; }

        /// <summary>
        /// Soft limit of the user quota, in bytes. No hard limit when set to 0. Value is rounded up to match the physical block size of the filesystem.
        /// </summary>
        /// <value>Soft limit of the user quota, in bytes. No hard limit when set to 0. Value is rounded up to match the physical block size of the filesystem.</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="soft_limit")]
        public long? SoftLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileUserQuotaCreate {\n");
            sb.Append("  FileSystemId: ").Append(FileSystemId).Append("\n");
            sb.Append("  TreeQuotaId: ").Append(TreeQuotaId).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  UnixName: ").Append(UnixName).Append("\n");
            sb.Append("  WindowsName: ").Append(WindowsName).Append("\n");
            sb.Append("  WindowsSid: ").Append(WindowsSid).Append("\n");
            sb.Append("  HardLimit: ").Append(HardLimit).Append("\n");
            sb.Append("  SoftLimit: ").Append(SoftLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileUserQuotaCreate)obj);
        }

        /// <summary>
        /// Returns true if FileUserQuotaCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of FileUserQuotaCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileUserQuotaCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FileSystemId == other.FileSystemId ||
                    FileSystemId != null &&
                    FileSystemId.Equals(other.FileSystemId)
                ) && 
                (
                    TreeQuotaId == other.TreeQuotaId ||
                    TreeQuotaId != null &&
                    TreeQuotaId.Equals(other.TreeQuotaId)
                ) && 
                (
                    Uid == other.Uid ||
                    Uid != null &&
                    Uid.Equals(other.Uid)
                ) && 
                (
                    UnixName == other.UnixName ||
                    UnixName != null &&
                    UnixName.Equals(other.UnixName)
                ) && 
                (
                    WindowsName == other.WindowsName ||
                    WindowsName != null &&
                    WindowsName.Equals(other.WindowsName)
                ) && 
                (
                    WindowsSid == other.WindowsSid ||
                    WindowsSid != null &&
                    WindowsSid.Equals(other.WindowsSid)
                ) && 
                (
                    HardLimit == other.HardLimit ||
                    HardLimit != null &&
                    HardLimit.Equals(other.HardLimit)
                ) && 
                (
                    SoftLimit == other.SoftLimit ||
                    SoftLimit != null &&
                    SoftLimit.Equals(other.SoftLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FileSystemId != null)
                    hashCode = hashCode * 59 + FileSystemId.GetHashCode();
                    if (TreeQuotaId != null)
                    hashCode = hashCode * 59 + TreeQuotaId.GetHashCode();
                    if (Uid != null)
                    hashCode = hashCode * 59 + Uid.GetHashCode();
                    if (UnixName != null)
                    hashCode = hashCode * 59 + UnixName.GetHashCode();
                    if (WindowsName != null)
                    hashCode = hashCode * 59 + WindowsName.GetHashCode();
                    if (WindowsSid != null)
                    hashCode = hashCode * 59 + WindowsSid.GetHashCode();
                    if (HardLimit != null)
                    hashCode = hashCode * 59 + HardLimit.GetHashCode();
                    if (SoftLimit != null)
                    hashCode = hashCode * 59 + SoftLimit.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileUserQuotaCreate left, FileUserQuotaCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileUserQuotaCreate left, FileUserQuotaCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
