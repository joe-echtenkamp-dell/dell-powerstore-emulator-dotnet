/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a witness service. Was added in version 3.6.0.0.
    /// </summary>
    [DataContract]
    public partial class WitnessInstance : IEquatable<WitnessInstance>
    { 
        /// <summary>
        /// Unique identifier of the witness service.
        /// </summary>
        /// <value>Unique identifier of the witness service.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// User-provided name for the witness service that is reachable at the provided address. Used as a personal reminder.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>User-provided name for the witness service that is reachable at the provided address. Used as a personal reminder.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the witness service.
        /// </summary>
        /// <value>Description of the witness service.</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// IP address of the witness service. Can be IPv4, IPv6 or FQDN.
        /// </summary>
        /// <value>IP address of the witness service. Can be IPv4, IPv6 or FQDN.</value>

        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// Witness service UUID generated as part of installation. This unique identifier is exposed by the witness service itself.
        /// </summary>
        /// <value>Witness service UUID generated as part of installation. This unique identifier is exposed by the witness service itself.</value>

        [DataMember(Name="uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// Overall state. Can be either the aggregate of the states listed within &#39;connections&#39;, or &#39;Deleting&#39;.
        /// </summary>
        /// <value>Overall state. Can be either the aggregate of the states listed within &#39;connections&#39;, or &#39;Deleting&#39;.</value>

        [DataMember(Name="state")]
        public WitnessStateEnum? State { get; set; }

        /// <summary>
        /// Witness connection information for each node on each appliance.  Filtering on the fields of this embedded resource is not supported.
        /// </summary>
        /// <value>Witness connection information for each node on each appliance.  Filtering on the fields of this embedded resource is not supported.</value>

        [DataMember(Name="connections")]
        public List<WitnessConnectionInstance> Connections { get; set; }

        /// <summary>
        /// Localized message string corresponding to state Was added in version 3.6.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to state Was added in version 3.6.0.0.</value>

        [DataMember(Name="state_l10n")]
        public string StateL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WitnessInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Connections: ").Append(Connections).Append("\n");
            sb.Append("  StateL10n: ").Append(StateL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WitnessInstance)obj);
        }

        /// <summary>
        /// Returns true if WitnessInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of WitnessInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WitnessInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Connections == other.Connections ||
                    Connections != null &&
                    Connections.SequenceEqual(other.Connections)
                ) && 
                (
                    StateL10n == other.StateL10n ||
                    StateL10n != null &&
                    StateL10n.Equals(other.StateL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Connections != null)
                    hashCode = hashCode * 59 + Connections.GetHashCode();
                    if (StateL10n != null)
                    hashCode = hashCode * 59 + StateL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WitnessInstance left, WitnessInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WitnessInstance left, WitnessInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
