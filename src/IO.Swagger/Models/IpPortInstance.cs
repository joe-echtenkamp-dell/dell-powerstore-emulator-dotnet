/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    ///  Values was added in 3.5.0.0: fsn.name. This resource type has queriable associations from ip_port, fsn, bond, eth_port, veth_port, ip_pool_address, file_interface
    /// </summary>
    [DataContract]
    public partial class IpPortInstance : IEquatable<IpPortInstance>
    { 
        /// <summary>
        /// Unique identifier of the IP port.
        /// </summary>
        /// <value>Unique identifier of the IP port.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Identifier of the IP port that is configured on top of physical Ethernet port or virtual Ethernet port or bond with the same physical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance.
        /// </summary>
        /// <value>Identifier of the IP port that is configured on top of physical Ethernet port or virtual Ethernet port or bond with the same physical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance.</value>

        [DataMember(Name="partner_id")]
        public string PartnerId { get; set; }

        /// <summary>
        /// iSCSI qualified name used by the target configured on top of the IP port initially or as a result of network scaling. If the IP port is not used by an iSCSI connection, this attribute should be empty.
        /// </summary>
        /// <value>iSCSI qualified name used by the target configured on top of the IP port initially or as a result of network scaling. If the IP port is not used by an iSCSI connection, this attribute should be empty.</value>

        [DataMember(Name="target_iqn")]
        public string TargetIqn { get; set; }

        /// <summary>
        /// Available IP port usages.
        /// </summary>
        /// <value>Available IP port usages.</value>

        [DataMember(Name="available_usages")]
        public List<IpPortUsageEnum> AvailableUsages { get; set; }

        /// <summary>
        /// Current IP port usages.
        /// </summary>
        /// <value>Current IP port usages.</value>

        [DataMember(Name="current_usages")]
        public List<IpPortUsageEnum> CurrentUsages { get; set; }

        /// <summary>
        /// Unique identifier of the FSN on top of which the IP port is configured. If the IP port is configured on top of an Ethernet frontend-port or a bond, this attribute should be empty.  Was added in version 3.5.0.0.
        /// </summary>
        /// <value>Unique identifier of the FSN on top of which the IP port is configured. If the IP port is configured on top of an Ethernet frontend-port or a bond, this attribute should be empty.  Was added in version 3.5.0.0.</value>

        [DataMember(Name="fsn_id")]
        public string FsnId { get; set; }

        /// <summary>
        /// Unique identifier of the bond on top of which the IP port is configured. If the IP port is configured on top of an Ethernet front-end port or an FSN, this attribute should be empty. 
        /// </summary>
        /// <value>Unique identifier of the bond on top of which the IP port is configured. If the IP port is configured on top of an Ethernet front-end port or an FSN, this attribute should be empty. </value>

        [DataMember(Name="bond_id")]
        public string BondId { get; set; }

        /// <summary>
        /// Unique identifier of the physical Ethernet front-end port on top of which the IP port is configured. This attribute can be set when the IP port is used by a Unified appliance. It should be empty if the IP port is used by a Unified+ appliance or if the IP port is configured on top of a bond or an FSN on a Unified appliance. 
        /// </summary>
        /// <value>Unique identifier of the physical Ethernet front-end port on top of which the IP port is configured. This attribute can be set when the IP port is used by a Unified appliance. It should be empty if the IP port is used by a Unified+ appliance or if the IP port is configured on top of a bond or an FSN on a Unified appliance. </value>

        [DataMember(Name="eth_port_id")]
        public string EthPortId { get; set; }

        /// <summary>
        /// Unique identifier of the virtual Ethernet front-end port on top of which the IP port is configured. This attribute can be set when the IP port is used by a Unified+ appliance. For a Unified appliance, the value of veth_port_id should be empty. 
        /// </summary>
        /// <value>Unique identifier of the virtual Ethernet front-end port on top of which the IP port is configured. This attribute can be set when the IP port is used by a Unified+ appliance. For a Unified appliance, the value of veth_port_id should be empty. </value>

        [DataMember(Name="veth_port_id")]
        public string VethPortId { get; set; }

        /// <summary>
        /// Localized message array corresponding to available_usages
        /// </summary>
        /// <value>Localized message array corresponding to available_usages</value>

        [DataMember(Name="available_usages_l10n")]
        public List<string> AvailableUsagesL10n { get; set; }

        /// <summary>
        /// Localized message array corresponding to current_usages
        /// </summary>
        /// <value>Localized message array corresponding to current_usages</value>

        [DataMember(Name="current_usages_l10n")]
        public List<string> CurrentUsagesL10n { get; set; }

        /// <summary>
        /// This is the inverse of the resource type ip_pool_address association.
        /// </summary>
        /// <value>This is the inverse of the resource type ip_pool_address association.</value>

        [DataMember(Name="ip_pool_addresses")]
        public List<IpPoolAddressInstance> IpPoolAddresses { get; set; }

        /// <summary>
        /// This is the embeddable reference form of partner_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of partner_id attribute.</value>

        [DataMember(Name="partner")]
        public IpPortInstance Partner { get; set; }

        /// <summary>
        /// This is the embeddable reference form of fsn_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of fsn_id attribute.</value>

        [DataMember(Name="fsn")]
        public FsnInstance Fsn { get; set; }

        /// <summary>
        /// This is the embeddable reference form of bond_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of bond_id attribute.</value>

        [DataMember(Name="bond")]
        public BondInstance Bond { get; set; }

        /// <summary>
        /// This is the embeddable reference form of eth_port_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of eth_port_id attribute.</value>

        [DataMember(Name="eth_port")]
        public EthPortInstance EthPort { get; set; }

        /// <summary>
        /// This is the embeddable reference form of veth_port_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of veth_port_id attribute.</value>

        [DataMember(Name="veth_port")]
        public VethPortInstance VethPort { get; set; }

        /// <summary>
        /// This is the inverse of the resource type file_interface association.
        /// </summary>
        /// <value>This is the inverse of the resource type file_interface association.</value>

        [DataMember(Name="file_interfaces")]
        public List<FileInterfaceInstance> FileInterfaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IpPortInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  TargetIqn: ").Append(TargetIqn).Append("\n");
            sb.Append("  AvailableUsages: ").Append(AvailableUsages).Append("\n");
            sb.Append("  CurrentUsages: ").Append(CurrentUsages).Append("\n");
            sb.Append("  FsnId: ").Append(FsnId).Append("\n");
            sb.Append("  BondId: ").Append(BondId).Append("\n");
            sb.Append("  EthPortId: ").Append(EthPortId).Append("\n");
            sb.Append("  VethPortId: ").Append(VethPortId).Append("\n");
            sb.Append("  AvailableUsagesL10n: ").Append(AvailableUsagesL10n).Append("\n");
            sb.Append("  CurrentUsagesL10n: ").Append(CurrentUsagesL10n).Append("\n");
            sb.Append("  IpPoolAddresses: ").Append(IpPoolAddresses).Append("\n");
            sb.Append("  Partner: ").Append(Partner).Append("\n");
            sb.Append("  Fsn: ").Append(Fsn).Append("\n");
            sb.Append("  Bond: ").Append(Bond).Append("\n");
            sb.Append("  EthPort: ").Append(EthPort).Append("\n");
            sb.Append("  VethPort: ").Append(VethPort).Append("\n");
            sb.Append("  FileInterfaces: ").Append(FileInterfaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IpPortInstance)obj);
        }

        /// <summary>
        /// Returns true if IpPortInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of IpPortInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IpPortInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PartnerId == other.PartnerId ||
                    PartnerId != null &&
                    PartnerId.Equals(other.PartnerId)
                ) && 
                (
                    TargetIqn == other.TargetIqn ||
                    TargetIqn != null &&
                    TargetIqn.Equals(other.TargetIqn)
                ) && 
                (
                    AvailableUsages == other.AvailableUsages ||
                    AvailableUsages != null &&
                    AvailableUsages.SequenceEqual(other.AvailableUsages)
                ) && 
                (
                    CurrentUsages == other.CurrentUsages ||
                    CurrentUsages != null &&
                    CurrentUsages.SequenceEqual(other.CurrentUsages)
                ) && 
                (
                    FsnId == other.FsnId ||
                    FsnId != null &&
                    FsnId.Equals(other.FsnId)
                ) && 
                (
                    BondId == other.BondId ||
                    BondId != null &&
                    BondId.Equals(other.BondId)
                ) && 
                (
                    EthPortId == other.EthPortId ||
                    EthPortId != null &&
                    EthPortId.Equals(other.EthPortId)
                ) && 
                (
                    VethPortId == other.VethPortId ||
                    VethPortId != null &&
                    VethPortId.Equals(other.VethPortId)
                ) && 
                (
                    AvailableUsagesL10n == other.AvailableUsagesL10n ||
                    AvailableUsagesL10n != null &&
                    AvailableUsagesL10n.SequenceEqual(other.AvailableUsagesL10n)
                ) && 
                (
                    CurrentUsagesL10n == other.CurrentUsagesL10n ||
                    CurrentUsagesL10n != null &&
                    CurrentUsagesL10n.SequenceEqual(other.CurrentUsagesL10n)
                ) && 
                (
                    IpPoolAddresses == other.IpPoolAddresses ||
                    IpPoolAddresses != null &&
                    IpPoolAddresses.SequenceEqual(other.IpPoolAddresses)
                ) && 
                (
                    Partner == other.Partner ||
                    Partner != null &&
                    Partner.Equals(other.Partner)
                ) && 
                (
                    Fsn == other.Fsn ||
                    Fsn != null &&
                    Fsn.Equals(other.Fsn)
                ) && 
                (
                    Bond == other.Bond ||
                    Bond != null &&
                    Bond.Equals(other.Bond)
                ) && 
                (
                    EthPort == other.EthPort ||
                    EthPort != null &&
                    EthPort.Equals(other.EthPort)
                ) && 
                (
                    VethPort == other.VethPort ||
                    VethPort != null &&
                    VethPort.Equals(other.VethPort)
                ) && 
                (
                    FileInterfaces == other.FileInterfaces ||
                    FileInterfaces != null &&
                    FileInterfaces.SequenceEqual(other.FileInterfaces)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (PartnerId != null)
                    hashCode = hashCode * 59 + PartnerId.GetHashCode();
                    if (TargetIqn != null)
                    hashCode = hashCode * 59 + TargetIqn.GetHashCode();
                    if (AvailableUsages != null)
                    hashCode = hashCode * 59 + AvailableUsages.GetHashCode();
                    if (CurrentUsages != null)
                    hashCode = hashCode * 59 + CurrentUsages.GetHashCode();
                    if (FsnId != null)
                    hashCode = hashCode * 59 + FsnId.GetHashCode();
                    if (BondId != null)
                    hashCode = hashCode * 59 + BondId.GetHashCode();
                    if (EthPortId != null)
                    hashCode = hashCode * 59 + EthPortId.GetHashCode();
                    if (VethPortId != null)
                    hashCode = hashCode * 59 + VethPortId.GetHashCode();
                    if (AvailableUsagesL10n != null)
                    hashCode = hashCode * 59 + AvailableUsagesL10n.GetHashCode();
                    if (CurrentUsagesL10n != null)
                    hashCode = hashCode * 59 + CurrentUsagesL10n.GetHashCode();
                    if (IpPoolAddresses != null)
                    hashCode = hashCode * 59 + IpPoolAddresses.GetHashCode();
                    if (Partner != null)
                    hashCode = hashCode * 59 + Partner.GetHashCode();
                    if (Fsn != null)
                    hashCode = hashCode * 59 + Fsn.GetHashCode();
                    if (Bond != null)
                    hashCode = hashCode * 59 + Bond.GetHashCode();
                    if (EthPort != null)
                    hashCode = hashCode * 59 + EthPort.GetHashCode();
                    if (VethPort != null)
                    hashCode = hashCode * 59 + VethPort.GetHashCode();
                    if (FileInterfaces != null)
                    hashCode = hashCode * 59 + FileInterfaces.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IpPortInstance left, IpPortInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IpPortInstance left, IpPortInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
