/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// x509 Certificate modify model. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class X509CertificateModify : IEquatable<X509CertificateModify>
    { 
        /// <summary>
        /// Concatenated PEM encoded x509_certificate string from end-entity certificate to root certificate.
        /// </summary>
        /// <value>Concatenated PEM encoded x509_certificate string from end-entity certificate to root certificate.</value>

        [DataMember(Name="certificate")]
        public string Certificate { get; set; }

        /// <summary>
        /// Indicate whether this is the current key set being used or next key set to be used in the future. When importing third party CA signed certificate for securing the management traffic, this value must be true.
        /// </summary>
        /// <value>Indicate whether this is the current key set being used or next key set to be used in the future. When importing third party CA signed certificate for securing the management traffic, this value must be true.</value>
        [Required]
        
        [DataMember(Name="is_current")]
        public bool? IsCurrent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class X509CertificateModify {\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  IsCurrent: ").Append(IsCurrent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((X509CertificateModify)obj);
        }

        /// <summary>
        /// Returns true if X509CertificateModify instances are equal
        /// </summary>
        /// <param name="other">Instance of X509CertificateModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(X509CertificateModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Certificate == other.Certificate ||
                    Certificate != null &&
                    Certificate.Equals(other.Certificate)
                ) && 
                (
                    IsCurrent == other.IsCurrent ||
                    IsCurrent != null &&
                    IsCurrent.Equals(other.IsCurrent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Certificate != null)
                    hashCode = hashCode * 59 + Certificate.GetHashCode();
                    if (IsCurrent != null)
                    hashCode = hashCode * 59 + IsCurrent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(X509CertificateModify left, X509CertificateModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(X509CertificateModify left, X509CertificateModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
