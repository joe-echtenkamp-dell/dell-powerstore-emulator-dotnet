/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Details about an import host initiator.
    /// </summary>
    [DataContract]
    public partial class ImportHostInitiatorInstance : IEquatable<ImportHostInitiatorInstance>
    { 
        /// <summary>
        /// Unique identifier of the import host initiator.
        /// </summary>
        /// <value>Unique identifier of the import host initiator.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// iSCSI Qualified Name (IQN) or World Wide Name (WWN) of the host initiator. 
        /// </summary>
        /// <value>iSCSI Qualified Name (IQN) or World Wide Name (WWN) of the host initiator. </value>

        [DataMember(Name="iqn_or_wwn")]
        public string IqnOrWwn { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>

        [DataMember(Name="protocol")]
        public HostInitiatorProtocolTypeEnum? Protocol { get; set; }

        /// <summary>
        /// Unique identifier of the import host system.
        /// </summary>
        /// <value>Unique identifier of the import host system.</value>

        [DataMember(Name="import_host_system_id")]
        public string ImportHostSystemId { get; set; }

        /// <summary>
        /// Localized message string corresponding to protocol
        /// </summary>
        /// <value>Localized message string corresponding to protocol</value>

        [DataMember(Name="protocol_l10n")]
        public string ProtocolL10n { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportHostInitiatorInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IqnOrWwn: ").Append(IqnOrWwn).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  ImportHostSystemId: ").Append(ImportHostSystemId).Append("\n");
            sb.Append("  ProtocolL10n: ").Append(ProtocolL10n).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImportHostInitiatorInstance)obj);
        }

        /// <summary>
        /// Returns true if ImportHostInitiatorInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportHostInitiatorInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportHostInitiatorInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IqnOrWwn == other.IqnOrWwn ||
                    IqnOrWwn != null &&
                    IqnOrWwn.Equals(other.IqnOrWwn)
                ) && 
                (
                    Protocol == other.Protocol ||
                    Protocol != null &&
                    Protocol.Equals(other.Protocol)
                ) && 
                (
                    ImportHostSystemId == other.ImportHostSystemId ||
                    ImportHostSystemId != null &&
                    ImportHostSystemId.Equals(other.ImportHostSystemId)
                ) && 
                (
                    ProtocolL10n == other.ProtocolL10n ||
                    ProtocolL10n != null &&
                    ProtocolL10n.Equals(other.ProtocolL10n)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IqnOrWwn != null)
                    hashCode = hashCode * 59 + IqnOrWwn.GetHashCode();
                    if (Protocol != null)
                    hashCode = hashCode * 59 + Protocol.GetHashCode();
                    if (ImportHostSystemId != null)
                    hashCode = hashCode * 59 + ImportHostSystemId.GetHashCode();
                    if (ProtocolL10n != null)
                    hashCode = hashCode * 59 + ProtocolL10n.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImportHostInitiatorInstance left, ImportHostInitiatorInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImportHostInitiatorInstance left, ImportHostInitiatorInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
