/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters for creating a local user.
    /// </summary>
    [DataContract]
    public partial class LocalUserCreate : IEquatable<LocalUserCreate>
    { 
        /// <summary>
        /// Name of the new local user account to be created. The name value can be 1 to 64 UTF-8 characters long, and may only use alphanumeric characters. Dot(.) is the only special character allowed.
        /// </summary>
        /// <value>Name of the new local user account to be created. The name value can be 1 to 64 UTF-8 characters long, and may only use alphanumeric characters. Dot(.) is the only special character allowed.</value>
        [Required]
        
        [StringLength(64, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Password for the new local user account to be created. The password value can be 8 to 40 UTF-8 characters long, and include as a minimum one uppercase character, one lowercase character, one numeric character, and one special character from (!,@#$%^*?_~).
        /// </summary>
        /// <value>Password for the new local user account to be created. The password value can be 8 to 40 UTF-8 characters long, and include as a minimum one uppercase character, one lowercase character, one numeric character, and one special character from (!,@#$%^*?_~).</value>
        [Required]
        
        [StringLength(40, MinimumLength=8)]
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// The unique identifier of the role to which the new local user will be mapped. Where role_id \&quot;1\&quot; is for Administrator, \&quot;2\&quot; is for Storage Administrator, \&quot;3\&quot; is for Operator, \&quot;4\&quot; is for VM Administrator and \&quot;5\&quot; is for Security Administrator roles. name:{name} can be used instead of {id}. For example: &#39;role_id&#39;:&#39;name:role_name&#39;
        /// </summary>
        /// <value>The unique identifier of the role to which the new local user will be mapped. Where role_id \&quot;1\&quot; is for Administrator, \&quot;2\&quot; is for Storage Administrator, \&quot;3\&quot; is for Operator, \&quot;4\&quot; is for VM Administrator and \&quot;5\&quot; is for Security Administrator roles. name:{name} can be used instead of {id}. For example: &#39;role_id&#39;:&#39;name:role_name&#39;</value>
        [Required]
        
        [DataMember(Name="role_id")]
        public string RoleId { get; set; }

        /// <summary>
        /// If true, multi-factor authentication (MFA) will not apply to this account. Only applies when MFA is enabled. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>If true, multi-factor authentication (MFA) will not apply to this account. Only applies when MFA is enabled. Was added in version 3.5.0.0.</value>

        [DataMember(Name="is_mfa_bypass")]
        public bool? IsMfaBypass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalUserCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  IsMfaBypass: ").Append(IsMfaBypass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LocalUserCreate)obj);
        }

        /// <summary>
        /// Returns true if LocalUserCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of LocalUserCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalUserCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    IsMfaBypass == other.IsMfaBypass ||
                    IsMfaBypass != null &&
                    IsMfaBypass.Equals(other.IsMfaBypass)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (IsMfaBypass != null)
                    hashCode = hashCode * 59 + IsMfaBypass.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LocalUserCreate left, LocalUserCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LocalUserCreate left, LocalUserCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
