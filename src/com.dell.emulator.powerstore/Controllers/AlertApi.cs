/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Com.Dell.Emulator.Powerstore.Attributes;

using Microsoft.AspNetCore.Authorization;
using Com.Dell.Emulator.Powerstore.Models;
using com.dell.emulator.powerstore.Models.DataContext;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace Com.Dell.Emulator.Powerstore.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AlertApiController : ControllerBase
    {
        public AlertApiController(PowerstoreEmulatorDBContext context) 
        {
            _context = context;
        }

        private readonly PowerstoreEmulatorDBContext _context;

        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query all alerts.</remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of alert instance objects</response>
        [HttpGet]
        [Route("/api/rest/alert")]
        [ValidateModelState]
        [SwaggerOperation("AlertGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AlertInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<AlertInstance>), description: "Partial content of alert instance objects")]
        public virtual IActionResult AlertGet()
        {
            var alerts = new List<AlertInstance>();
            alerts.Append(new AlertInstance() { Id = "001", Severity = SeverityEnum.NoneEnum, DescriptionL10n = "Alert01", GeneratedTimestamp = DateTime.Now });
            alerts.Append(new AlertInstance() { Id = "002", Severity = SeverityEnum.InfoEnum, DescriptionL10n = "Alert02", GeneratedTimestamp = DateTime.Now });
            alerts.Append(new AlertInstance() { Id = "003", Severity = SeverityEnum.MinorEnum, DescriptionL10n = "Alert03", GeneratedTimestamp = DateTime.Now });
            alerts.Append(new AlertInstance() { Id = "004", Severity = SeverityEnum.MajorEnum, DescriptionL10n = "Alert04", GeneratedTimestamp = DateTime.Now });
            alerts.Append(new AlertInstance() { Id = "005", Severity = SeverityEnum.CriticalEnum, DescriptionL10n = "Alert05", GeneratedTimestamp = DateTime.Now });
            alerts.Append(new AlertInstance() { Id = "006", Severity = SeverityEnum.InfoEnum, DescriptionL10n = "Alert06", GeneratedTimestamp = DateTime.Now });
            alerts.Append(new AlertInstance() { Id = "007", Severity = SeverityEnum.InfoEnum, DescriptionL10n = "Alert07", GeneratedTimestamp = DateTime.Now });

            return StatusCode(200, alerts);
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query a specific alert.</remarks>
        /// <param name="id">Unique identifier of the alert.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/alert/{id}")]
        [ValidateModelState]
        [SwaggerOperation("AlertIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(AlertInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult AlertIdGet([FromRoute][Required] string id)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AlertInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AlertInstance>(exampleJson)
            : default(AlertInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify
        /// </summary>
        /// <remarks>Modify an alert. acknowledged_severity parameter, if included, will cause the request to fail when the alert&#39;s severity is higher than the acknowledged_severity parameter value. acknowledged_severity  is ignored when is_acknowledged is set to false. </remarks>
        /// <param name="id">Unique identifier of the specific alert.</param>
        /// <param name="alertModify"></param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPatch]
        [Route("/api/rest/alert/{id}")]
        [ValidateModelState]
        [SwaggerOperation("AlertIdPatch")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult AlertIdPatch([FromRoute][Required] string id, [FromBody] AlertModify alertModify)
        {
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }
    }
}
