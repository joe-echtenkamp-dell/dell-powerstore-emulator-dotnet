/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Validate create cluster parameters. Was added in version 2.0.0.0.
    /// </summary>
    [DataContract]
    public partial class ClusterValidateCreate : IEquatable<ClusterValidateCreate>
    { 
        /// <summary>
        /// Gets or Sets Cluster
        /// </summary>
        [Required]
        
        [DataMember(Name="cluster")]
        public ClusterCreateCluster Cluster { get; set; }

        /// <summary>
        /// The configuration settings for adding appliances during cluster creation. At least one appliance is required. 
        /// </summary>
        /// <value>The configuration settings for adding appliances during cluster creation. At least one appliance is required. </value>
        [Required]
        
        [DataMember(Name="appliances")]
        public List<ClusterCreateAppliances> Appliances { get; set; }

        /// <summary>
        /// Gets or Sets DnsServers
        /// </summary>
        [Required]
        
        [DataMember(Name="dns_servers")]
        public List<string> DnsServers { get; set; }

        /// <summary>
        /// Gets or Sets NtpServers
        /// </summary>
        [Required]
        
        [DataMember(Name="ntp_servers")]
        public List<string> NtpServers { get; set; }

        /// <summary>
        /// Create physical switch settings for a cluster. 
        /// </summary>
        /// <value>Create physical switch settings for a cluster. </value>

        [DataMember(Name="physical_switches")]
        public List<ClusterCreatePhysicalSwitches> PhysicalSwitches { get; set; }

        /// <summary>
        /// Configuration of one or more network(s) based on network type 
        /// </summary>
        /// <value>Configuration of one or more network(s) based on network type </value>
        [Required]
        
        [DataMember(Name="networks")]
        public List<ClusterCreateNetworks> Networks { get; set; }

        /// <summary>
        /// Configure vCenter settings when creating cluster. Parameters are required when creating PowerStore X cluster and optional for PowerStore cluster.  * Note - currently only single element is supported. 
        /// </summary>
        /// <value>Configure vCenter settings when creating cluster. Parameters are required when creating PowerStore X cluster and optional for PowerStore cluster.  * Note - currently only single element is supported. </value>

        [DataMember(Name="vcenters")]
        public List<ClusterCreateVcenters> Vcenters { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="security_config")]
        public ClusterCreateSecurityConfig SecurityConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClusterValidateCreate {\n");
            sb.Append("  Cluster: ").Append(Cluster).Append("\n");
            sb.Append("  Appliances: ").Append(Appliances).Append("\n");
            sb.Append("  DnsServers: ").Append(DnsServers).Append("\n");
            sb.Append("  NtpServers: ").Append(NtpServers).Append("\n");
            sb.Append("  PhysicalSwitches: ").Append(PhysicalSwitches).Append("\n");
            sb.Append("  Networks: ").Append(Networks).Append("\n");
            sb.Append("  Vcenters: ").Append(Vcenters).Append("\n");
            sb.Append("  SecurityConfig: ").Append(SecurityConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClusterValidateCreate)obj);
        }

        /// <summary>
        /// Returns true if ClusterValidateCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of ClusterValidateCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClusterValidateCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Cluster == other.Cluster ||
                    Cluster != null &&
                    Cluster.Equals(other.Cluster)
                ) && 
                (
                    Appliances == other.Appliances ||
                    Appliances != null &&
                    Appliances.SequenceEqual(other.Appliances)
                ) && 
                (
                    DnsServers == other.DnsServers ||
                    DnsServers != null &&
                    DnsServers.SequenceEqual(other.DnsServers)
                ) && 
                (
                    NtpServers == other.NtpServers ||
                    NtpServers != null &&
                    NtpServers.SequenceEqual(other.NtpServers)
                ) && 
                (
                    PhysicalSwitches == other.PhysicalSwitches ||
                    PhysicalSwitches != null &&
                    PhysicalSwitches.SequenceEqual(other.PhysicalSwitches)
                ) && 
                (
                    Networks == other.Networks ||
                    Networks != null &&
                    Networks.SequenceEqual(other.Networks)
                ) && 
                (
                    Vcenters == other.Vcenters ||
                    Vcenters != null &&
                    Vcenters.SequenceEqual(other.Vcenters)
                ) && 
                (
                    SecurityConfig == other.SecurityConfig ||
                    SecurityConfig != null &&
                    SecurityConfig.Equals(other.SecurityConfig)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Cluster != null)
                    hashCode = hashCode * 59 + Cluster.GetHashCode();
                    if (Appliances != null)
                    hashCode = hashCode * 59 + Appliances.GetHashCode();
                    if (DnsServers != null)
                    hashCode = hashCode * 59 + DnsServers.GetHashCode();
                    if (NtpServers != null)
                    hashCode = hashCode * 59 + NtpServers.GetHashCode();
                    if (PhysicalSwitches != null)
                    hashCode = hashCode * 59 + PhysicalSwitches.GetHashCode();
                    if (Networks != null)
                    hashCode = hashCode * 59 + Networks.GetHashCode();
                    if (Vcenters != null)
                    hashCode = hashCode * 59 + Vcenters.GetHashCode();
                    if (SecurityConfig != null)
                    hashCode = hashCode * 59 + SecurityConfig.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClusterValidateCreate left, ClusterValidateCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClusterValidateCreate left, ClusterValidateCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
