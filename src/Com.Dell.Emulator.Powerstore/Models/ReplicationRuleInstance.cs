/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Replication rule instance. Values was added in 3.0.0.0: alert_threshold, is_read_only. This resource type has queriable associations from remote_system, replication_session, policy
    /// </summary>
    [DataContract]
    public partial class ReplicationRuleInstance : IEquatable<ReplicationRuleInstance>
    { 
        /// <summary>
        /// Unique identifier of the replication rule.
        /// </summary>
        /// <value>Unique identifier of the replication rule.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the replication rule.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the replication rule.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Rpo
        /// </summary>

        [DataMember(Name="rpo")]
        public RPOEnum? Rpo { get; set; }

        /// <summary>
        /// Unique identifier of the remote system to which this replication rule will replicate the associated storage resources. 
        /// </summary>
        /// <value>Unique identifier of the remote system to which this replication rule will replicate the associated storage resources. </value>

        [DataMember(Name="remote_system_id")]
        public string RemoteSystemId { get; set; }

        /// <summary>
        /// Indicates whether this is a replica of a replication rule on a remote system that is the source of a replication session replicating a storage resource to the local system. 
        /// </summary>
        /// <value>Indicates whether this is a replica of a replication rule on a remote system that is the source of a replication session replicating a storage resource to the local system. </value>

        [DataMember(Name="is_replica")]
        public bool? IsReplica { get; set; }

        /// <summary>
        /// Indicates whether this replication rule can be modified.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Indicates whether this replication rule can be modified.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="is_read_only")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Number of minutes the system will wait before generating a compliance alert when a replication session does not meet the RPO. By default, this will be set to the number of minutes in the configured RPO. 
        /// </summary>
        /// <value>Number of minutes the system will wait before generating a compliance alert when a replication session does not meet the RPO. By default, this will be set to the number of minutes in the configured RPO. </value>

        [Range(0, 1440)]
        [DataMember(Name="alert_threshold")]
        public int? AlertThreshold { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="managed_by")]
        public PolicyManagedByEnum? ManagedBy { get; set; }

        /// <summary>
        /// Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="managed_by_id")]
        public string ManagedById { get; set; }

        /// <summary>
        /// Localized message string corresponding to rpo
        /// </summary>
        /// <value>Localized message string corresponding to rpo</value>

        [DataMember(Name="rpo_l10n")]
        public string RpoL10n { get; set; }

        /// <summary>
        /// Localized message string corresponding to managed_by Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to managed_by Was added in version 3.0.0.0.</value>

        [DataMember(Name="managed_by_l10n")]
        public string ManagedByL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of remote_system_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of remote_system_id attribute.</value>

        [DataMember(Name="remote_system")]
        public RemoteSystemInstance RemoteSystem { get; set; }

        /// <summary>
        /// This is the inverse of the resource type replication_session association.
        /// </summary>
        /// <value>This is the inverse of the resource type replication_session association.</value>

        [DataMember(Name="replication_sessions")]
        public List<ReplicationSessionInstance> ReplicationSessions { get; set; }

        /// <summary>
        /// List of the policies that are associated with this replication_rule.
        /// </summary>
        /// <value>List of the policies that are associated with this replication_rule.</value>

        [DataMember(Name="policies")]
        public List<PolicyInstance> Policies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationRuleInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rpo: ").Append(Rpo).Append("\n");
            sb.Append("  RemoteSystemId: ").Append(RemoteSystemId).Append("\n");
            sb.Append("  IsReplica: ").Append(IsReplica).Append("\n");
            sb.Append("  IsReadOnly: ").Append(IsReadOnly).Append("\n");
            sb.Append("  AlertThreshold: ").Append(AlertThreshold).Append("\n");
            sb.Append("  ManagedBy: ").Append(ManagedBy).Append("\n");
            sb.Append("  ManagedById: ").Append(ManagedById).Append("\n");
            sb.Append("  RpoL10n: ").Append(RpoL10n).Append("\n");
            sb.Append("  ManagedByL10n: ").Append(ManagedByL10n).Append("\n");
            sb.Append("  RemoteSystem: ").Append(RemoteSystem).Append("\n");
            sb.Append("  ReplicationSessions: ").Append(ReplicationSessions).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReplicationRuleInstance)obj);
        }

        /// <summary>
        /// Returns true if ReplicationRuleInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationRuleInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationRuleInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Rpo == other.Rpo ||
                    Rpo != null &&
                    Rpo.Equals(other.Rpo)
                ) && 
                (
                    RemoteSystemId == other.RemoteSystemId ||
                    RemoteSystemId != null &&
                    RemoteSystemId.Equals(other.RemoteSystemId)
                ) && 
                (
                    IsReplica == other.IsReplica ||
                    IsReplica != null &&
                    IsReplica.Equals(other.IsReplica)
                ) && 
                (
                    IsReadOnly == other.IsReadOnly ||
                    IsReadOnly != null &&
                    IsReadOnly.Equals(other.IsReadOnly)
                ) && 
                (
                    AlertThreshold == other.AlertThreshold ||
                    AlertThreshold != null &&
                    AlertThreshold.Equals(other.AlertThreshold)
                ) && 
                (
                    ManagedBy == other.ManagedBy ||
                    ManagedBy != null &&
                    ManagedBy.Equals(other.ManagedBy)
                ) && 
                (
                    ManagedById == other.ManagedById ||
                    ManagedById != null &&
                    ManagedById.Equals(other.ManagedById)
                ) && 
                (
                    RpoL10n == other.RpoL10n ||
                    RpoL10n != null &&
                    RpoL10n.Equals(other.RpoL10n)
                ) && 
                (
                    ManagedByL10n == other.ManagedByL10n ||
                    ManagedByL10n != null &&
                    ManagedByL10n.Equals(other.ManagedByL10n)
                ) && 
                (
                    RemoteSystem == other.RemoteSystem ||
                    RemoteSystem != null &&
                    RemoteSystem.Equals(other.RemoteSystem)
                ) && 
                (
                    ReplicationSessions == other.ReplicationSessions ||
                    ReplicationSessions != null &&
                    ReplicationSessions.SequenceEqual(other.ReplicationSessions)
                ) && 
                (
                    Policies == other.Policies ||
                    Policies != null &&
                    Policies.SequenceEqual(other.Policies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Rpo != null)
                    hashCode = hashCode * 59 + Rpo.GetHashCode();
                    if (RemoteSystemId != null)
                    hashCode = hashCode * 59 + RemoteSystemId.GetHashCode();
                    if (IsReplica != null)
                    hashCode = hashCode * 59 + IsReplica.GetHashCode();
                    if (IsReadOnly != null)
                    hashCode = hashCode * 59 + IsReadOnly.GetHashCode();
                    if (AlertThreshold != null)
                    hashCode = hashCode * 59 + AlertThreshold.GetHashCode();
                    if (ManagedBy != null)
                    hashCode = hashCode * 59 + ManagedBy.GetHashCode();
                    if (ManagedById != null)
                    hashCode = hashCode * 59 + ManagedById.GetHashCode();
                    if (RpoL10n != null)
                    hashCode = hashCode * 59 + RpoL10n.GetHashCode();
                    if (ManagedByL10n != null)
                    hashCode = hashCode * 59 + ManagedByL10n.GetHashCode();
                    if (RemoteSystem != null)
                    hashCode = hashCode * 59 + RemoteSystem.GetHashCode();
                    if (ReplicationSessions != null)
                    hashCode = hashCode * 59 + ReplicationSessions.GetHashCode();
                    if (Policies != null)
                    hashCode = hashCode * 59 + Policies.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReplicationRuleInstance left, ReplicationRuleInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReplicationRuleInstance left, ReplicationRuleInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
