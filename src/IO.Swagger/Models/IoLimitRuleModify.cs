/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters to an I/O limit rule modify operation. Was added in version 4.0.0.0.
    /// </summary>
    [DataContract]
    public partial class IoLimitRuleModify : IEquatable<IoLimitRuleModify>
    { 
        /// <summary>
        /// New name of the I/O limit rule. 
        /// </summary>
        /// <value>New name of the I/O limit rule. </value>

        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public BandwidthLimitTypeEnum? Type { get; set; }

        /// <summary>
        /// New max_iops value. New values for both max_iops and max_bw may be specified, if they are, the system will limit I/O based upon whatever limit is exceeded first. 
        /// </summary>
        /// <value>New max_iops value. New values for both max_iops and max_bw may be specified, if they are, the system will limit I/O based upon whatever limit is exceeded first. </value>

        [Range(1, 2147483646)]
        [DataMember(Name="max_iops")]
        public int? MaxIops { get; set; }

        /// <summary>
        /// New max_bw value. New values for both max_iops and max_bw may be specified, if they are, the system will limit I/O based upon whatever limit is exceeded first. 
        /// </summary>
        /// <value>New max_bw value. New values for both max_iops and max_bw may be specified, if they are, the system will limit I/O based upon whatever limit is exceeded first. </value>

        [Range(2000, 2147483646)]
        [DataMember(Name="max_bw")]
        public int? MaxBw { get; set; }

        /// <summary>
        /// Percentage indicating by how much the limit may be exceeded. If I/O normally runs below the specified limit, then the volume or volume_group will accumulate burst credits that can be used to exceed the limit for a short period (a few seconds, but will not exceed the burst limit). This burst percentage applies to both max_iops and max_bw and is independent of the type setting. 
        /// </summary>
        /// <value>Percentage indicating by how much the limit may be exceeded. If I/O normally runs below the specified limit, then the volume or volume_group will accumulate burst credits that can be used to exceed the limit for a short period (a few seconds, but will not exceed the burst limit). This burst percentage applies to both max_iops and max_bw and is independent of the type setting. </value>

        [Range(0, 100)]
        [DataMember(Name="burst_percentage")]
        public int? BurstPercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IoLimitRuleModify {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MaxIops: ").Append(MaxIops).Append("\n");
            sb.Append("  MaxBw: ").Append(MaxBw).Append("\n");
            sb.Append("  BurstPercentage: ").Append(BurstPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IoLimitRuleModify)obj);
        }

        /// <summary>
        /// Returns true if IoLimitRuleModify instances are equal
        /// </summary>
        /// <param name="other">Instance of IoLimitRuleModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IoLimitRuleModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    MaxIops == other.MaxIops ||
                    MaxIops != null &&
                    MaxIops.Equals(other.MaxIops)
                ) && 
                (
                    MaxBw == other.MaxBw ||
                    MaxBw != null &&
                    MaxBw.Equals(other.MaxBw)
                ) && 
                (
                    BurstPercentage == other.BurstPercentage ||
                    BurstPercentage != null &&
                    BurstPercentage.Equals(other.BurstPercentage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (MaxIops != null)
                    hashCode = hashCode * 59 + MaxIops.GetHashCode();
                    if (MaxBw != null)
                    hashCode = hashCode * 59 + MaxBw.GetHashCode();
                    if (BurstPercentage != null)
                    hashCode = hashCode * 59 + BurstPercentage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IoLimitRuleModify left, IoLimitRuleModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IoLimitRuleModify left, IoLimitRuleModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
