/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LocalUserModify : IEquatable<LocalUserModify>
    { 
        /// <summary>
        /// The unique identifier of the new role to which the local user has to be mapped. Where role_id \&quot;1\&quot; is for Administrator, \&quot;2\&quot; is for Storage Administrator, \&quot;3\&quot; is for Operator, \&quot;4\&quot; is for VM Administrator and \&quot;5\&quot; is for Security Administrator. A local user with either an administration or a security administration role can change the role of any other local user. You cannot change the role of the account you are currently logged-in to. name:{name} can be used instead of {id}. For example: &#39;role_id&#39;:&#39;name:role_name&#39;
        /// </summary>
        /// <value>The unique identifier of the new role to which the local user has to be mapped. Where role_id \&quot;1\&quot; is for Administrator, \&quot;2\&quot; is for Storage Administrator, \&quot;3\&quot; is for Operator, \&quot;4\&quot; is for VM Administrator and \&quot;5\&quot; is for Security Administrator. A local user with either an administration or a security administration role can change the role of any other local user. You cannot change the role of the account you are currently logged-in to. name:{name} can be used instead of {id}. For example: &#39;role_id&#39;:&#39;name:role_name&#39;</value>

        [DataMember(Name="role_id")]
        public string RoleId { get; set; }

        /// <summary>
        /// Lock or unlock the local user account. Local user with administration/security administration role can lock or unlock any other local user account. You cannot lock an account you are currently logged-in to.
        /// </summary>
        /// <value>Lock or unlock the local user account. Local user with administration/security administration role can lock or unlock any other local user account. You cannot lock an account you are currently logged-in to.</value>

        [DataMember(Name="is_locked")]
        public bool? IsLocked { get; set; }

        /// <summary>
        /// Current password of the local user. Any local user can change his own password by providing current_password along with the new password.
        /// </summary>
        /// <value>Current password of the local user. Any local user can change his own password by providing current_password along with the new password.</value>

        [DataMember(Name="current_password")]
        public string CurrentPassword { get; set; }

        /// <summary>
        /// New password of the local user. Local user with administrator or security administrator role can reset the password of other local user accounts without providing the current password. You cannot reset the password of the account you are currently logged-in to.
        /// </summary>
        /// <value>New password of the local user. Local user with administrator or security administrator role can reset the password of other local user accounts without providing the current password. You cannot reset the password of the account you are currently logged-in to.</value>

        [StringLength(40, MinimumLength=8)]
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// If true, multi-factor authentication (MFA) will not apply to this account. Only applies when MFA is enabled. Was added in version 3.5.0.0.
        /// </summary>
        /// <value>If true, multi-factor authentication (MFA) will not apply to this account. Only applies when MFA is enabled. Was added in version 3.5.0.0.</value>

        [DataMember(Name="is_mfa_bypass")]
        public bool? IsMfaBypass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalUserModify {\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  CurrentPassword: ").Append(CurrentPassword).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  IsMfaBypass: ").Append(IsMfaBypass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LocalUserModify)obj);
        }

        /// <summary>
        /// Returns true if LocalUserModify instances are equal
        /// </summary>
        /// <param name="other">Instance of LocalUserModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalUserModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    IsLocked == other.IsLocked ||
                    IsLocked != null &&
                    IsLocked.Equals(other.IsLocked)
                ) && 
                (
                    CurrentPassword == other.CurrentPassword ||
                    CurrentPassword != null &&
                    CurrentPassword.Equals(other.CurrentPassword)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    IsMfaBypass == other.IsMfaBypass ||
                    IsMfaBypass != null &&
                    IsMfaBypass.Equals(other.IsMfaBypass)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (IsLocked != null)
                    hashCode = hashCode * 59 + IsLocked.GetHashCode();
                    if (CurrentPassword != null)
                    hashCode = hashCode * 59 + CurrentPassword.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (IsMfaBypass != null)
                    hashCode = hashCode * 59 + IsMfaBypass.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LocalUserModify left, LocalUserModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LocalUserModify left, LocalUserModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
