/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Properties of an NVMe Centralized Discovery Controller (CDC). Was added in version 3.0.0.0. This resource type has queriable association from ip_pool_address
    /// </summary>
    [DataContract]
    public partial class NvmeDiscoveredCdcInstance : IEquatable<NvmeDiscoveredCdcInstance>
    { 
        /// <summary>
        /// Unique identifier of the CDC.
        /// </summary>
        /// <value>Unique identifier of the CDC.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Identifier of the IP address being used for NVMe/TCP through which CDC was discovered.
        /// </summary>
        /// <value>Identifier of the IP address being used for NVMe/TCP through which CDC was discovered.</value>

        [DataMember(Name="ip_pool_address_id")]
        public string IpPoolAddressId { get; set; }

        /// <summary>
        /// IP address of the CDC.
        /// </summary>
        /// <value>IP address of the CDC.</value>

        [DataMember(Name="nvme_cdc_address")]
        public string NvmeCdcAddress { get; set; }

        /// <summary>
        /// TCP port of the CDC.
        /// </summary>
        /// <value>TCP port of the CDC.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="nvme_cdc_port")]
        public int? NvmeCdcPort { get; set; }

        /// <summary>
        /// NVMe Qualified Name of the CDC.
        /// </summary>
        /// <value>NVMe Qualified Name of the CDC.</value>

        [DataMember(Name="nvme_cdc_nqn")]
        public string NvmeCdcNqn { get; set; }

        /// <summary>
        /// Gets or Sets NvmeCdcConnectionState
        /// </summary>

        [DataMember(Name="nvme_cdc_connection_state")]
        public NvmeCdcConnectionStateEnum? NvmeCdcConnectionState { get; set; }

        /// <summary>
        /// Localized message string corresponding to nvme_cdc_connection_state Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Localized message string corresponding to nvme_cdc_connection_state Was added in version 3.0.0.0.</value>

        [DataMember(Name="nvme_cdc_connection_state_l10n")]
        public string NvmeCdcConnectionStateL10n { get; set; }

        /// <summary>
        /// This is the embeddable reference form of ip_pool_address_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of ip_pool_address_id attribute.</value>

        [DataMember(Name="ip_pool_address")]
        public IpPoolAddressInstance IpPoolAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NvmeDiscoveredCdcInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IpPoolAddressId: ").Append(IpPoolAddressId).Append("\n");
            sb.Append("  NvmeCdcAddress: ").Append(NvmeCdcAddress).Append("\n");
            sb.Append("  NvmeCdcPort: ").Append(NvmeCdcPort).Append("\n");
            sb.Append("  NvmeCdcNqn: ").Append(NvmeCdcNqn).Append("\n");
            sb.Append("  NvmeCdcConnectionState: ").Append(NvmeCdcConnectionState).Append("\n");
            sb.Append("  NvmeCdcConnectionStateL10n: ").Append(NvmeCdcConnectionStateL10n).Append("\n");
            sb.Append("  IpPoolAddress: ").Append(IpPoolAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NvmeDiscoveredCdcInstance)obj);
        }

        /// <summary>
        /// Returns true if NvmeDiscoveredCdcInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of NvmeDiscoveredCdcInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NvmeDiscoveredCdcInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IpPoolAddressId == other.IpPoolAddressId ||
                    IpPoolAddressId != null &&
                    IpPoolAddressId.Equals(other.IpPoolAddressId)
                ) && 
                (
                    NvmeCdcAddress == other.NvmeCdcAddress ||
                    NvmeCdcAddress != null &&
                    NvmeCdcAddress.Equals(other.NvmeCdcAddress)
                ) && 
                (
                    NvmeCdcPort == other.NvmeCdcPort ||
                    NvmeCdcPort != null &&
                    NvmeCdcPort.Equals(other.NvmeCdcPort)
                ) && 
                (
                    NvmeCdcNqn == other.NvmeCdcNqn ||
                    NvmeCdcNqn != null &&
                    NvmeCdcNqn.Equals(other.NvmeCdcNqn)
                ) && 
                (
                    NvmeCdcConnectionState == other.NvmeCdcConnectionState ||
                    NvmeCdcConnectionState != null &&
                    NvmeCdcConnectionState.Equals(other.NvmeCdcConnectionState)
                ) && 
                (
                    NvmeCdcConnectionStateL10n == other.NvmeCdcConnectionStateL10n ||
                    NvmeCdcConnectionStateL10n != null &&
                    NvmeCdcConnectionStateL10n.Equals(other.NvmeCdcConnectionStateL10n)
                ) && 
                (
                    IpPoolAddress == other.IpPoolAddress ||
                    IpPoolAddress != null &&
                    IpPoolAddress.Equals(other.IpPoolAddress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IpPoolAddressId != null)
                    hashCode = hashCode * 59 + IpPoolAddressId.GetHashCode();
                    if (NvmeCdcAddress != null)
                    hashCode = hashCode * 59 + NvmeCdcAddress.GetHashCode();
                    if (NvmeCdcPort != null)
                    hashCode = hashCode * 59 + NvmeCdcPort.GetHashCode();
                    if (NvmeCdcNqn != null)
                    hashCode = hashCode * 59 + NvmeCdcNqn.GetHashCode();
                    if (NvmeCdcConnectionState != null)
                    hashCode = hashCode * 59 + NvmeCdcConnectionState.GetHashCode();
                    if (NvmeCdcConnectionStateL10n != null)
                    hashCode = hashCode * 59 + NvmeCdcConnectionStateL10n.GetHashCode();
                    if (IpPoolAddress != null)
                    hashCode = hashCode * 59 + IpPoolAddress.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NvmeDiscoveredCdcInstance left, NvmeDiscoveredCdcInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NvmeDiscoveredCdcInstance left, NvmeDiscoveredCdcInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
