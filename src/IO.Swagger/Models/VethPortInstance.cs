/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Properties of a virtual Ethernet port. Values was added in 2.0.0.0: partner_id. This resource type has queriable associations from veth_port, appliance, node, ip_port
    /// </summary>
    [DataContract]
    public partial class VethPortInstance : IEquatable<VethPortInstance>
    { 
        /// <summary>
        /// Unique identifier of the virtual Ethernet port instance.
        /// </summary>
        /// <value>Unique identifier of the virtual Ethernet port instance.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Identifier of the virtual Ethernet port with the same logical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance. Was added in version 2.0.0.0.
        /// </summary>
        /// <value>Identifier of the virtual Ethernet port with the same logical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance. Was added in version 2.0.0.0.</value>

        [DataMember(Name="partner_id")]
        public string PartnerId { get; set; }

        /// <summary>
        /// Unique identifier of the appliance containing the virtual Ethernet port.
        /// </summary>
        /// <value>Unique identifier of the appliance containing the virtual Ethernet port.</value>

        [DataMember(Name="appliance_id")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Unique identifier of the node containing the virtual Ethernet port.
        /// </summary>
        /// <value>Unique identifier of the node containing the virtual Ethernet port.</value>

        [DataMember(Name="node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// Virtual Ethernet port name.  This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Virtual Ethernet port name.  This property supports case-insensitive filtering.</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Virtual Ethernet port MAC address.
        /// </summary>
        /// <value>Virtual Ethernet port MAC address.</value>

        [DataMember(Name="mac_address")]
        public string MacAddress { get; set; }

        /// <summary>
        /// Indicates whether the virtual Ethernet port&#39;s link is up. Values are: * true - Link is up. * false - Link is down. 
        /// </summary>
        /// <value>Indicates whether the virtual Ethernet port&#39;s link is up. Values are: * true - Link is up. * false - Link is down. </value>

        [DataMember(Name="is_link_up")]
        public bool? IsLinkUp { get; set; }

        /// <summary>
        /// Virtual Ethernet port transmission speed, in bits/sec (bps).
        /// </summary>
        /// <value>Virtual Ethernet port transmission speed, in bits/sec (bps).</value>

        [Range(0, -9223372036854775616)]
        [DataMember(Name="current_speed")]
        public long? CurrentSpeed { get; set; }

        /// <summary>
        /// Maximum Transmission Unit (MTU) packet size that the virtual Ethernet port can transmit.
        /// </summary>
        /// <value>Maximum Transmission Unit (MTU) packet size that the virtual Ethernet port can transmit.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="current_mtu")]
        public int? CurrentMtu { get; set; }

        /// <summary>
        /// Name of the virtual switch that holds the virtual Ethernet port. Only applies to PowerStoreX deployments. 
        /// </summary>
        /// <value>Name of the virtual switch that holds the virtual Ethernet port. Only applies to PowerStoreX deployments. </value>

        [DataMember(Name="vswitch_name")]
        public string VswitchName { get; set; }

        /// <summary>
        /// Name of the virtual switch port group to which the virtual Ethernet port is assigned. Only applies to PowerStoreX deployments. 
        /// </summary>
        /// <value>Name of the virtual switch port group to which the virtual Ethernet port is assigned. Only applies to PowerStoreX deployments. </value>

        [DataMember(Name="vswitch_port_group_name")]
        public string VswitchPortGroupName { get; set; }

        /// <summary>
        /// Unique identifier of the virtual switch port associated with the virtual Ethernet port. Only applies to PowerStoreX deployments. 
        /// </summary>
        /// <value>Unique identifier of the virtual switch port associated with the virtual Ethernet port. Only applies to PowerStoreX deployments. </value>

        [Range(0, 2147483647)]
        [DataMember(Name="vswitch_port_id")]
        public int? VswitchPortId { get; set; }

        /// <summary>
        /// Name of the virtual switch port associated with the virtual Ethernet port. Only applies to PowerStoreX deployments.   This property supports case-insensitive filtering.
        /// </summary>
        /// <value>Name of the virtual switch port associated with the virtual Ethernet port. Only applies to PowerStoreX deployments.   This property supports case-insensitive filtering.</value>

        [DataMember(Name="vswitch_port_name")]
        public string VswitchPortName { get; set; }

        /// <summary>
        /// This is the inverse of the resource type ip_port association.
        /// </summary>
        /// <value>This is the inverse of the resource type ip_port association.</value>

        [DataMember(Name="ip_ports")]
        public List<IpPortInstance> IpPorts { get; set; }

        /// <summary>
        /// This is the embeddable reference form of partner_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of partner_id attribute.</value>

        [DataMember(Name="partner")]
        public VethPortInstance Partner { get; set; }

        /// <summary>
        /// This is the embeddable reference form of appliance_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of appliance_id attribute.</value>

        [DataMember(Name="appliance")]
        public ApplianceInstance Appliance { get; set; }

        /// <summary>
        /// This is the embeddable reference form of node_id attribute.
        /// </summary>
        /// <value>This is the embeddable reference form of node_id attribute.</value>

        [DataMember(Name="node")]
        public NodeInstance Node { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VethPortInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  IsLinkUp: ").Append(IsLinkUp).Append("\n");
            sb.Append("  CurrentSpeed: ").Append(CurrentSpeed).Append("\n");
            sb.Append("  CurrentMtu: ").Append(CurrentMtu).Append("\n");
            sb.Append("  VswitchName: ").Append(VswitchName).Append("\n");
            sb.Append("  VswitchPortGroupName: ").Append(VswitchPortGroupName).Append("\n");
            sb.Append("  VswitchPortId: ").Append(VswitchPortId).Append("\n");
            sb.Append("  VswitchPortName: ").Append(VswitchPortName).Append("\n");
            sb.Append("  IpPorts: ").Append(IpPorts).Append("\n");
            sb.Append("  Partner: ").Append(Partner).Append("\n");
            sb.Append("  Appliance: ").Append(Appliance).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VethPortInstance)obj);
        }

        /// <summary>
        /// Returns true if VethPortInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of VethPortInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VethPortInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PartnerId == other.PartnerId ||
                    PartnerId != null &&
                    PartnerId.Equals(other.PartnerId)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    NodeId == other.NodeId ||
                    NodeId != null &&
                    NodeId.Equals(other.NodeId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    MacAddress == other.MacAddress ||
                    MacAddress != null &&
                    MacAddress.Equals(other.MacAddress)
                ) && 
                (
                    IsLinkUp == other.IsLinkUp ||
                    IsLinkUp != null &&
                    IsLinkUp.Equals(other.IsLinkUp)
                ) && 
                (
                    CurrentSpeed == other.CurrentSpeed ||
                    CurrentSpeed != null &&
                    CurrentSpeed.Equals(other.CurrentSpeed)
                ) && 
                (
                    CurrentMtu == other.CurrentMtu ||
                    CurrentMtu != null &&
                    CurrentMtu.Equals(other.CurrentMtu)
                ) && 
                (
                    VswitchName == other.VswitchName ||
                    VswitchName != null &&
                    VswitchName.Equals(other.VswitchName)
                ) && 
                (
                    VswitchPortGroupName == other.VswitchPortGroupName ||
                    VswitchPortGroupName != null &&
                    VswitchPortGroupName.Equals(other.VswitchPortGroupName)
                ) && 
                (
                    VswitchPortId == other.VswitchPortId ||
                    VswitchPortId != null &&
                    VswitchPortId.Equals(other.VswitchPortId)
                ) && 
                (
                    VswitchPortName == other.VswitchPortName ||
                    VswitchPortName != null &&
                    VswitchPortName.Equals(other.VswitchPortName)
                ) && 
                (
                    IpPorts == other.IpPorts ||
                    IpPorts != null &&
                    IpPorts.SequenceEqual(other.IpPorts)
                ) && 
                (
                    Partner == other.Partner ||
                    Partner != null &&
                    Partner.Equals(other.Partner)
                ) && 
                (
                    Appliance == other.Appliance ||
                    Appliance != null &&
                    Appliance.Equals(other.Appliance)
                ) && 
                (
                    Node == other.Node ||
                    Node != null &&
                    Node.Equals(other.Node)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (PartnerId != null)
                    hashCode = hashCode * 59 + PartnerId.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (NodeId != null)
                    hashCode = hashCode * 59 + NodeId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (MacAddress != null)
                    hashCode = hashCode * 59 + MacAddress.GetHashCode();
                    if (IsLinkUp != null)
                    hashCode = hashCode * 59 + IsLinkUp.GetHashCode();
                    if (CurrentSpeed != null)
                    hashCode = hashCode * 59 + CurrentSpeed.GetHashCode();
                    if (CurrentMtu != null)
                    hashCode = hashCode * 59 + CurrentMtu.GetHashCode();
                    if (VswitchName != null)
                    hashCode = hashCode * 59 + VswitchName.GetHashCode();
                    if (VswitchPortGroupName != null)
                    hashCode = hashCode * 59 + VswitchPortGroupName.GetHashCode();
                    if (VswitchPortId != null)
                    hashCode = hashCode * 59 + VswitchPortId.GetHashCode();
                    if (VswitchPortName != null)
                    hashCode = hashCode * 59 + VswitchPortName.GetHashCode();
                    if (IpPorts != null)
                    hashCode = hashCode * 59 + IpPorts.GetHashCode();
                    if (Partner != null)
                    hashCode = hashCode * 59 + Partner.GetHashCode();
                    if (Appliance != null)
                    hashCode = hashCode * 59 + Appliance.GetHashCode();
                    if (Node != null)
                    hashCode = hashCode * 59 + Node.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VethPortInstance left, VethPortInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VethPortInstance left, VethPortInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
