/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Parameters for storage container create.
    /// </summary>
    [DataContract]
    public partial class StorageContainerCreate : IEquatable<StorageContainerCreate>
    { 
        /// <summary>
        /// Name for the storage container that is unique across all storage containers in the cluster. The name must be between 1 and 64 UTF-8 characters (inclusive), and not more than 127 bytes. Name cannot contain characters &#39;/&#39;, &#39;\\&#39;, &#39;%&#39;, &#39;“&#39;, &#39;[&#39;, &#39;]&#39;. 
        /// </summary>
        /// <value>Name for the storage container that is unique across all storage containers in the cluster. The name must be between 1 and 64 UTF-8 characters (inclusive), and not more than 127 bytes. Name cannot contain characters &#39;/&#39;, &#39;\\&#39;, &#39;%&#39;, &#39;“&#39;, &#39;[&#39;, &#39;]&#39;. </value>
        [Required]
        
        [StringLength(64, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The number of bytes that can be provisioned against this storage container. This must be a value greater than 10Gb and the default is 0 which means no limit. 
        /// </summary>
        /// <value>The number of bytes that can be provisioned against this storage container. This must be a value greater than 10Gb and the default is 0 which means no limit. </value>

        [Range(0, 4611686018427388000)]
        [DataMember(Name="quota")]
        public long? Quota { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="storage_protocol")]
        public StorageContainerStorageProtocolEnum? StorageProtocol { get; set; }

        /// <summary>
        /// This is the percentage of the quota that can be consumed before an alert is raised. Values between 50-100 (inclusive) are allowed.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>This is the percentage of the quota that can be consumed before an alert is raised. Values between 50-100 (inclusive) are allowed.  Was added in version 3.0.0.0.</value>

        [Range(50, 100)]
        [DataMember(Name="high_water_mark")]
        public int? HighWaterMark { get; set; }

        /// <summary>
        /// If specified, performs mount a storage container in vCenter operation as part of create operation. Was added in version 3.0.0.0.
        /// </summary>
        /// <value>If specified, performs mount a storage container in vCenter operation as part of create operation. Was added in version 3.0.0.0.</value>

        [DataMember(Name="mount")]
        public bool? Mount { get; set; }

        /// <summary>
        /// This will be the VVol datastore name in vCenter when it is mounted. If not specified, the name of a storage container is used. datastore_name cannot contain characters &#39;/&#39;, &#39;\\&#39;, &#39;%&#39;, &#39;“&#39;, &#39;[&#39;, &#39;]&#39;.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>This will be the VVol datastore name in vCenter when it is mounted. If not specified, the name of a storage container is used. datastore_name cannot contain characters &#39;/&#39;, &#39;\\&#39;, &#39;%&#39;, &#39;“&#39;, &#39;[&#39;, &#39;]&#39;.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="datastore_name")]
        public string DatastoreName { get; set; }

        /// <summary>
        /// Unique identifiers of the vsphere_host instances used to mount VVol datastore in vCenter. Parameter is required for mounting storage container in Power Store case, if not specified for Power Store X case, Power Store X cluster hosts are used.  Was added in version 3.0.0.0.
        /// </summary>
        /// <value>Unique identifiers of the vsphere_host instances used to mount VVol datastore in vCenter. Parameter is required for mounting storage container in Power Store case, if not specified for Power Store X case, Power Store X cluster hosts are used.  Was added in version 3.0.0.0.</value>

        [DataMember(Name="vsphere_host_ids")]
        public List<string> VsphereHostIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageContainerCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quota: ").Append(Quota).Append("\n");
            sb.Append("  StorageProtocol: ").Append(StorageProtocol).Append("\n");
            sb.Append("  HighWaterMark: ").Append(HighWaterMark).Append("\n");
            sb.Append("  Mount: ").Append(Mount).Append("\n");
            sb.Append("  DatastoreName: ").Append(DatastoreName).Append("\n");
            sb.Append("  VsphereHostIds: ").Append(VsphereHostIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StorageContainerCreate)obj);
        }

        /// <summary>
        /// Returns true if StorageContainerCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of StorageContainerCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageContainerCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Quota == other.Quota ||
                    Quota != null &&
                    Quota.Equals(other.Quota)
                ) && 
                (
                    StorageProtocol == other.StorageProtocol ||
                    StorageProtocol != null &&
                    StorageProtocol.Equals(other.StorageProtocol)
                ) && 
                (
                    HighWaterMark == other.HighWaterMark ||
                    HighWaterMark != null &&
                    HighWaterMark.Equals(other.HighWaterMark)
                ) && 
                (
                    Mount == other.Mount ||
                    Mount != null &&
                    Mount.Equals(other.Mount)
                ) && 
                (
                    DatastoreName == other.DatastoreName ||
                    DatastoreName != null &&
                    DatastoreName.Equals(other.DatastoreName)
                ) && 
                (
                    VsphereHostIds == other.VsphereHostIds ||
                    VsphereHostIds != null &&
                    VsphereHostIds.SequenceEqual(other.VsphereHostIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Quota != null)
                    hashCode = hashCode * 59 + Quota.GetHashCode();
                    if (StorageProtocol != null)
                    hashCode = hashCode * 59 + StorageProtocol.GetHashCode();
                    if (HighWaterMark != null)
                    hashCode = hashCode * 59 + HighWaterMark.GetHashCode();
                    if (Mount != null)
                    hashCode = hashCode * 59 + Mount.GetHashCode();
                    if (DatastoreName != null)
                    hashCode = hashCode * 59 + DatastoreName.GetHashCode();
                    if (VsphereHostIds != null)
                    hashCode = hashCode * 59 + VsphereHostIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StorageContainerCreate left, StorageContainerCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StorageContainerCreate left, StorageContainerCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
