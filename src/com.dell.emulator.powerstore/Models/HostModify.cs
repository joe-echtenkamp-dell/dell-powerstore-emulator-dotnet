/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Parameters for the host modify operation.
    /// </summary>
    [DataContract]
    public partial class HostModify : IEquatable<HostModify>
    { 
        /// <summary>
        /// The host name. The name should not be more than 128 UTF-8 characters long and should not have any unprintable characters. 
        /// </summary>
        /// <value>The host name. The name should not be more than 128 UTF-8 characters long and should not have any unprintable characters. </value>

        [StringLength(128, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// An optional description for the host. The description should not be more than 256 UTF-8 characters long and should not have any unprintable characters. 
        /// </summary>
        /// <value>An optional description for the host. The description should not be more than 256 UTF-8 characters long and should not have any unprintable characters. </value>

        [MaxLength(256)]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        ///  Was added in version 3.0.0.0.
        /// </summary>
        /// <value> Was added in version 3.0.0.0.</value>

        [DataMember(Name="host_connectivity")]
        public HostConnectivityEnum? HostConnectivity { get; set; }

        /// <summary>
        /// The list of initiator port_names to be removed.
        /// </summary>
        /// <value>The list of initiator port_names to be removed.</value>

        [DataMember(Name="remove_initiators")]
        public List<string> RemoveInitiators { get; set; }

        /// <summary>
        /// The list of initiators to be added. CHAP username and password are optional. 
        /// </summary>
        /// <value>The list of initiators to be added. CHAP username and password are optional. </value>

        [DataMember(Name="add_initiators")]
        public List<InitiatorCreateModify> AddInitiators { get; set; }

        /// <summary>
        /// Update list of existing initiators, identified by port_name, with new CHAP usernames and/or passwords. 
        /// </summary>
        /// <value>Update list of existing initiators, identified by port_name, with new CHAP usernames and/or passwords. </value>

        [DataMember(Name="modify_initiators")]
        public List<UpdateInitiatorInHost> ModifyInitiators { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostModify {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HostConnectivity: ").Append(HostConnectivity).Append("\n");
            sb.Append("  RemoveInitiators: ").Append(RemoveInitiators).Append("\n");
            sb.Append("  AddInitiators: ").Append(AddInitiators).Append("\n");
            sb.Append("  ModifyInitiators: ").Append(ModifyInitiators).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HostModify)obj);
        }

        /// <summary>
        /// Returns true if HostModify instances are equal
        /// </summary>
        /// <param name="other">Instance of HostModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HostConnectivity == other.HostConnectivity ||
                    HostConnectivity != null &&
                    HostConnectivity.Equals(other.HostConnectivity)
                ) && 
                (
                    RemoveInitiators == other.RemoveInitiators ||
                    RemoveInitiators != null &&
                    RemoveInitiators.SequenceEqual(other.RemoveInitiators)
                ) && 
                (
                    AddInitiators == other.AddInitiators ||
                    AddInitiators != null &&
                    AddInitiators.SequenceEqual(other.AddInitiators)
                ) && 
                (
                    ModifyInitiators == other.ModifyInitiators ||
                    ModifyInitiators != null &&
                    ModifyInitiators.SequenceEqual(other.ModifyInitiators)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (HostConnectivity != null)
                    hashCode = hashCode * 59 + HostConnectivity.GetHashCode();
                    if (RemoveInitiators != null)
                    hashCode = hashCode * 59 + RemoveInitiators.GetHashCode();
                    if (AddInitiators != null)
                    hashCode = hashCode * 59 + AddInitiators.GetHashCode();
                    if (ModifyInitiators != null)
                    hashCode = hashCode * 59 + ModifyInitiators.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HostModify left, HostModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HostModify left, HostModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
