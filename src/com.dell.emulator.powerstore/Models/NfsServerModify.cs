/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Arguments for the NFS server modify operation.
    /// </summary>
    [DataContract]
    public partial class NfsServerModify : IEquatable<NfsServerModify>
    { 
        /// <summary>
        /// The name that will be used by NFS clients to connect to this NFS server. This name is required when using secure NFS, except when is_use_smb_config_enabled is true. In this case host_name is forced to the SMB server computer name, and must not be specified. 
        /// </summary>
        /// <value>The name that will be used by NFS clients to connect to this NFS server. This name is required when using secure NFS, except when is_use_smb_config_enabled is true. In this case host_name is forced to the SMB server computer name, and must not be specified. </value>

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="host_name")]
        public string HostName { get; set; }

        /// <summary>
        /// Indicates whether NFSv3 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv3. When disabled, NFS shares cannot be accessed with NFSv3 protocol. - true - NFSv3 is enabled on the specified NAS server. - false - NFSv3 is disabled on the specified NAS server. 
        /// </summary>
        /// <value>Indicates whether NFSv3 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv3. When disabled, NFS shares cannot be accessed with NFSv3 protocol. - true - NFSv3 is enabled on the specified NAS server. - false - NFSv3 is disabled on the specified NAS server. </value>

        [DataMember(Name="is_nfsv3_enabled")]
        public bool? IsNfsv3Enabled { get; set; }

        /// <summary>
        /// Indicates whether NFSv4 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv4. When disabled, NFS shares cannot be accessed with NFSv4 protocol. - true - NFSv4 is enabled on the specified NAS server. - false - NFSv4 is disabled on the specified NAS server. 
        /// </summary>
        /// <value>Indicates whether NFSv4 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv4. When disabled, NFS shares cannot be accessed with NFSv4 protocol. - true - NFSv4 is enabled on the specified NAS server. - false - NFSv4 is disabled on the specified NAS server. </value>

        [DataMember(Name="is_nfsv4_enabled")]
        public bool? IsNfsv4Enabled { get; set; }

        /// <summary>
        /// Indicates whether secure NFS is enabled on the NFS server. - true - Secure NFS is Enabled. - false - Secure NFS is disabled. 
        /// </summary>
        /// <value>Indicates whether secure NFS is enabled on the NFS server. - true - Secure NFS is Enabled. - false - Secure NFS is disabled. </value>

        [DataMember(Name="is_secure_enabled")]
        public bool? IsSecureEnabled { get; set; }

        /// <summary>
        /// Allow to bypass NFS server unjoin. If false modification will fail if secure is enabled and current kdc_type is MS Windows. If secure is enabled either unjoin NFS server before deleting or set value to true. Was deprecated in version 2.0.0.0.
        /// </summary>
        /// <value>Allow to bypass NFS server unjoin. If false modification will fail if secure is enabled and current kdc_type is MS Windows. If secure is enabled either unjoin NFS server before deleting or set value to true. Was deprecated in version 2.0.0.0.</value>

        [DataMember(Name="is_skip_unjoin")]
        public bool? IsSkipUnjoin { get; set; }

        /// <summary>
        /// Indicates whether SMB authentication is used to authenticate to the KDC. Values are: - true: Indicates that the the configured SMB Server settings are used for Kerberos authentication. - false: Indicates that Kerberos uses its own settings. 
        /// </summary>
        /// <value>Indicates whether SMB authentication is used to authenticate to the KDC. Values are: - true: Indicates that the the configured SMB Server settings are used for Kerberos authentication. - false: Indicates that Kerberos uses its own settings. </value>

        [DataMember(Name="is_use_smb_config_enabled")]
        public bool? IsUseSmbConfigEnabled { get; set; }

        /// <summary>
        /// Indicates whether the NFS server supports more than 16 Unix groups in a Unix credential. Valid values are: - true - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. - false - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. Note - The NFS server builds its own Unix credential when it supports more than 16 groups. This process can slow the performance. 
        /// </summary>
        /// <value>Indicates whether the NFS server supports more than 16 Unix groups in a Unix credential. Valid values are: - true - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. - false - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. Note - The NFS server builds its own Unix credential when it supports more than 16 groups. This process can slow the performance. </value>

        [DataMember(Name="is_extended_credentials_enabled")]
        public bool? IsExtendedCredentialsEnabled { get; set; }

        /// <summary>
        /// Sets the Time-To-Live (in minutes) expiration stamp for a Windows entry in the credentials cache. When failed mapping entries expire, the system retries mapping the UID to the SID.
        /// </summary>
        /// <value>Sets the Time-To-Live (in minutes) expiration stamp for a Windows entry in the credentials cache. When failed mapping entries expire, the system retries mapping the UID to the SID.</value>

        [Range(1, 35791394)]
        [DataMember(Name="credentials_cache_TTL")]
        public int? CredentialsCacheTTL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NfsServerModify {\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  IsNfsv3Enabled: ").Append(IsNfsv3Enabled).Append("\n");
            sb.Append("  IsNfsv4Enabled: ").Append(IsNfsv4Enabled).Append("\n");
            sb.Append("  IsSecureEnabled: ").Append(IsSecureEnabled).Append("\n");
            sb.Append("  IsSkipUnjoin: ").Append(IsSkipUnjoin).Append("\n");
            sb.Append("  IsUseSmbConfigEnabled: ").Append(IsUseSmbConfigEnabled).Append("\n");
            sb.Append("  IsExtendedCredentialsEnabled: ").Append(IsExtendedCredentialsEnabled).Append("\n");
            sb.Append("  CredentialsCacheTTL: ").Append(CredentialsCacheTTL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NfsServerModify)obj);
        }

        /// <summary>
        /// Returns true if NfsServerModify instances are equal
        /// </summary>
        /// <param name="other">Instance of NfsServerModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NfsServerModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HostName == other.HostName ||
                    HostName != null &&
                    HostName.Equals(other.HostName)
                ) && 
                (
                    IsNfsv3Enabled == other.IsNfsv3Enabled ||
                    IsNfsv3Enabled != null &&
                    IsNfsv3Enabled.Equals(other.IsNfsv3Enabled)
                ) && 
                (
                    IsNfsv4Enabled == other.IsNfsv4Enabled ||
                    IsNfsv4Enabled != null &&
                    IsNfsv4Enabled.Equals(other.IsNfsv4Enabled)
                ) && 
                (
                    IsSecureEnabled == other.IsSecureEnabled ||
                    IsSecureEnabled != null &&
                    IsSecureEnabled.Equals(other.IsSecureEnabled)
                ) && 
                (
                    IsSkipUnjoin == other.IsSkipUnjoin ||
                    IsSkipUnjoin != null &&
                    IsSkipUnjoin.Equals(other.IsSkipUnjoin)
                ) && 
                (
                    IsUseSmbConfigEnabled == other.IsUseSmbConfigEnabled ||
                    IsUseSmbConfigEnabled != null &&
                    IsUseSmbConfigEnabled.Equals(other.IsUseSmbConfigEnabled)
                ) && 
                (
                    IsExtendedCredentialsEnabled == other.IsExtendedCredentialsEnabled ||
                    IsExtendedCredentialsEnabled != null &&
                    IsExtendedCredentialsEnabled.Equals(other.IsExtendedCredentialsEnabled)
                ) && 
                (
                    CredentialsCacheTTL == other.CredentialsCacheTTL ||
                    CredentialsCacheTTL != null &&
                    CredentialsCacheTTL.Equals(other.CredentialsCacheTTL)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HostName != null)
                    hashCode = hashCode * 59 + HostName.GetHashCode();
                    if (IsNfsv3Enabled != null)
                    hashCode = hashCode * 59 + IsNfsv3Enabled.GetHashCode();
                    if (IsNfsv4Enabled != null)
                    hashCode = hashCode * 59 + IsNfsv4Enabled.GetHashCode();
                    if (IsSecureEnabled != null)
                    hashCode = hashCode * 59 + IsSecureEnabled.GetHashCode();
                    if (IsSkipUnjoin != null)
                    hashCode = hashCode * 59 + IsSkipUnjoin.GetHashCode();
                    if (IsUseSmbConfigEnabled != null)
                    hashCode = hashCode * 59 + IsUseSmbConfigEnabled.GetHashCode();
                    if (IsExtendedCredentialsEnabled != null)
                    hashCode = hashCode * 59 + IsExtendedCredentialsEnabled.GetHashCode();
                    if (CredentialsCacheTTL != null)
                    hashCode = hashCode * 59 + CredentialsCacheTTL.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NfsServerModify left, NfsServerModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NfsServerModify left, NfsServerModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
