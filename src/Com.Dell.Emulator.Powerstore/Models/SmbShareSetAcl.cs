/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Com.Dell.Emulator.Powerstore.Models
{ 
    /// <summary>
    /// Parameters of the smb_share set_acl operation. Was added in version 3.5.0.0.
    /// </summary>
    [DataContract]
    public partial class SmbShareSetAcl : IEquatable<SmbShareSetAcl>
    { 
        /// <summary>
        /// List of ACEs (access control entries) specifying identities and their access rights to the SMB Share.
        /// </summary>
        /// <value>List of ACEs (access control entries) specifying identities and their access rights to the SMB Share.</value>

        [DataMember(Name="aces")]
        public List<SmbShareAce> Aces { get; set; }

        /// <summary>
        /// List of user defined ACEs to add to the ACE list of the share. May only be specified with remove_aces modify arg, and if both are specified, remove_aces is applied first. 
        /// </summary>
        /// <value>List of user defined ACEs to add to the ACE list of the share. May only be specified with remove_aces modify arg, and if both are specified, remove_aces is applied first. </value>

        [DataMember(Name="add_aces")]
        public List<SmbShareAce> AddAces { get; set; }

        /// <summary>
        /// List of user defined ACEs to remove from the ACE list of the share. May only be specified with append_aces modify arg, and if both are specified, remove_aces is applied first.  Was added in version 3.5.0.0.
        /// </summary>
        /// <value>List of user defined ACEs to remove from the ACE list of the share. May only be specified with append_aces modify arg, and if both are specified, remove_aces is applied first.  Was added in version 3.5.0.0.</value>

        [DataMember(Name="remove_aces")]
        public List<SmbShareAce> RemoveAces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmbShareSetAcl {\n");
            sb.Append("  Aces: ").Append(Aces).Append("\n");
            sb.Append("  AddAces: ").Append(AddAces).Append("\n");
            sb.Append("  RemoveAces: ").Append(RemoveAces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmbShareSetAcl)obj);
        }

        /// <summary>
        /// Returns true if SmbShareSetAcl instances are equal
        /// </summary>
        /// <param name="other">Instance of SmbShareSetAcl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmbShareSetAcl other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Aces == other.Aces ||
                    Aces != null &&
                    Aces.SequenceEqual(other.Aces)
                ) && 
                (
                    AddAces == other.AddAces ||
                    AddAces != null &&
                    AddAces.SequenceEqual(other.AddAces)
                ) && 
                (
                    RemoveAces == other.RemoveAces ||
                    RemoveAces != null &&
                    RemoveAces.SequenceEqual(other.RemoveAces)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Aces != null)
                    hashCode = hashCode * 59 + Aces.GetHashCode();
                    if (AddAces != null)
                    hashCode = hashCode * 59 + AddAces.GetHashCode();
                    if (RemoveAces != null)
                    hashCode = hashCode * 59 + RemoveAces.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmbShareSetAcl left, SmbShareSetAcl right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmbShareSetAcl left, SmbShareSetAcl right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
