/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters for creating an LDAP account. Was added in version 1.0.3.
    /// </summary>
    [DataContract]
    public partial class LdapAccountCreate : IEquatable<LdapAccountCreate>
    { 
        /// <summary>
        /// Unique identifier of the LDAP domain to which LDAP user or group belongs.
        /// </summary>
        /// <value>Unique identifier of the LDAP domain to which LDAP user or group belongs.</value>
        [Required]
        
        [DataMember(Name="domain_id")]
        public string DomainId { get; set; }

        /// <summary>
        /// Name of the new LDAP account to be created. The name value can be 1 to 64 UTF-8 characters long, and may only use alphanumeric characters. Dot(.) is the only special character allowed. The name value has to match to the LDAP user or group in LDAP server to which the LDAP account is mapped.
        /// </summary>
        /// <value>Name of the new LDAP account to be created. The name value can be 1 to 64 UTF-8 characters long, and may only use alphanumeric characters. Dot(.) is the only special character allowed. The name value has to match to the LDAP user or group in LDAP server to which the LDAP account is mapped.</value>
        [Required]
        
        [StringLength(1023, MinimumLength=1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public LDAPAccountTypeEnum? Type { get; set; }

        /// <summary>
        /// Unique identifier of the role to which the new LDAP account will be mapped. name:{name} can be used instead of {id}. For example: &#39;role_id&#39;:&#39;name:role_name&#39;
        /// </summary>
        /// <value>Unique identifier of the role to which the new LDAP account will be mapped. name:{name} can be used instead of {id}. For example: &#39;role_id&#39;:&#39;name:role_name&#39;</value>
        [Required]
        
        [DataMember(Name="role_id")]
        public string RoleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LdapAccountCreate {\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LdapAccountCreate)obj);
        }

        /// <summary>
        /// Returns true if LdapAccountCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of LdapAccountCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LdapAccountCreate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DomainId == other.DomainId ||
                    DomainId != null &&
                    DomainId.Equals(other.DomainId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DomainId != null)
                    hashCode = hashCode * 59 + DomainId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LdapAccountCreate left, LdapAccountCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LdapAccountCreate left, LdapAccountCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
