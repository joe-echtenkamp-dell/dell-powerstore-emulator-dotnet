/*
 * PowerStore REST API
 *
 * Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )
 *
 * OpenAPI spec version: 4.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RemoteSystemApiController : ControllerBase
    { 
        /// <summary>
        /// Collection Query
        /// </summary>
        /// <remarks>Query remote systems. </remarks>
        /// <response code="200">Success</response>
        /// <response code="206">Partial content of remote system instance objects</response>
        [HttpGet]
        [Route("/api/rest/remote_system")]
        [ValidateModelState]
        [SwaggerOperation("RemoteSystemGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<RemoteSystemInstance>), description: "Success")]
        [SwaggerResponse(statusCode: 206, type: typeof(List<RemoteSystemInstance>), description: "Partial content of remote system instance objects")]
        public virtual IActionResult RemoteSystemGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<RemoteSystemInstance>));

            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(List<RemoteSystemInstance>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<RemoteSystemInstance>>(exampleJson)
            : default(List<RemoteSystemInstance>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>Delete a remote system. Deleting the remote system deletes the management and data connections established with the remote system. You cannot delete a remote system if there are active import sessions or if there are remote protection policies in the system referencing the remote system instance.  By default for PowerStore remote systems, the relationship is deleted in both directions if the remote system is online and reachable.  If there is no management connectivity between the local and remote PowerStore systems then the remote system will only be deleted from the local PowerStore system. Once the remote PowerStore system is back online and reachable then the user can log in to the remote PowerStore system and delete its remote system. </remarks>
        /// <param name="id">Unique identifier of the remote system.  name:{name} can be used instead of {id}.</param>
        /// <param name="body">Parameters to delete a remote system. </param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpDelete]
        [Route("/api/rest/remote_system/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RemoteSystemIdDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult RemoteSystemIdDelete([FromRoute][Required]string id, [FromBody]RemoteSystemDelete body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Discover
        /// </summary>
        /// <remarks>Discover the importable resources such as volumes, consistency groups, file systems  and snapshot schedules from the remote system. This api is not applicable for PowerStore and cloud type remote systems. For VNX remote system it discovers both block and file resources together if it have both file and block import capabilities.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the remote system.  name:{name} can be used instead of {id}.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/remote_system/{id}/discover")]
        [ValidateModelState]
        [SwaggerOperation("RemoteSystemIdDiscoverPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult RemoteSystemIdDiscoverPost([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Instance Query
        /// </summary>
        /// <remarks>Query a remote system instance. </remarks>
        /// <param name="id">Unique identifier of the remote system.  name:{name} can be used instead of {id}.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/rest/remote_system/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RemoteSystemIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(RemoteSystemInstance), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        public virtual IActionResult RemoteSystemIdGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RemoteSystemInstance));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RemoteSystemInstance>(exampleJson)
            : default(RemoteSystemInstance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify
        /// </summary>
        /// <remarks>Modify a remote system instance. The list of valid parameters depends on the type of remote system.  For PowerStore remote systems:   * Description  * Management address - IP address or FQDN.  * add_powerstore_data_network_groups  * modify_powerstore_data_network_groups  * remove_powerstore_data_network_group_ids  Only one network group operation (add_powerstore_data_network_groups, modify_powerstore_data_network_groups, remove_powerstore_data_network_group_ids) is supported per request.  For VNX remote systems, file_connection_address, vnx_username and password may be provided during modify if they are not already set. For VNX2 remote systems, mgmt_address, vnx_username and password are not necessary to modify the VNX2 remote system from block to unified if they are already set.  * Description * Management address - IP address or FQDN. * Remote administrator credentials * File connection address - Control station IPv4 or IPv6 address of the VNX. * NAS admin username * NAS admin password  In Unity remote systems, for file import capability, service account credentials can be provided in unity file details during modify if it does not exist already. Otherwise only service_account_password is allowed to modify: * Description * Management address - IP address or FQDN. * Remote administrator credentials * unity file details  For Data Domain remote systems, the attributes that can be modified are: * Management address * Remote Password  For PowerMax/VMAX remote systems, the attributes that can be modified are: * Description * Management address - IP address or FQDN. * Remote administrator credentials * Management Port  For other non-PowerStore remote systems, the attributes that can be modified are: * Name * Description * Management address - IP address or FQDN. * Remote administrator credentials </remarks>
        /// <param name="id">Unique identifier of the remote system.  name:{name} can be used instead of {id}.</param>
        /// <param name="body">Parameters to modify the remote system. </param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPatch]
        [Route("/api/rest/remote_system/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RemoteSystemIdPatch")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult RemoteSystemIdPatch([FromRoute][Required]string id, [FromBody]RemoteSystemModify body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Query available PowerStore networks configured on local and remote clusters. Return only local/remote networks that have External_Replication purpose and are not already in any of the network groups of this remote_system instance.
        /// </summary>
        /// <remarks>Query available PowerStore networks configured on local and remote clusters.  Was added in version 3.0.0.0.</remarks>
        /// <param name="id">Unique identifier of the remote_system.  name:{name} can be used instead of {id}. Was added in version 3.0.0.0.</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/remote_system/{id}/query_available_powerstore_networks")]
        [ValidateModelState]
        [SwaggerOperation("RemoteSystemIdQueryAvailablePowerstoreNetworksPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(RemoteSystemQueryAvailablePowerstoreNetworksResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult RemoteSystemIdQueryAvailablePowerstoreNetworksPost([FromRoute][Required]string id, [FromBody]RemoteSystemQueryAvailablePowerstoreNetworks body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RemoteSystemQueryAvailablePowerstoreNetworksResponse));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RemoteSystemQueryAvailablePowerstoreNetworksResponse>(exampleJson)
            : default(RemoteSystemQueryAvailablePowerstoreNetworksResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Verify
        /// </summary>
        /// <remarks>Verify and update the remote system instance.      Detects changes in the local and remote systems and reestablishes data connections, also taking the Challenge Handshake Authentication Protocol (CHAP) settings into account for iSCSI. </remarks>
        /// <param name="id">Unique identifier of the remote system.  name:{name} can be used instead of {id}.</param>
        /// <param name="body">Parameters to verify a remote system. </param>
        /// <response code="204">Success</response>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/remote_system/{id}/verify")]
        [ValidateModelState]
        [SwaggerOperation("RemoteSystemIdVerifyPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult RemoteSystemIdVerifyPost([FromRoute][Required]string id, [FromBody]RemoteSystemVerify body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>Create a new remote system relationship for the local PowerStore.  For PowerStore remote systems, the following parameters are required: * Management address - Either an IP address or FQDN. * Type of remote system * Data network latency type  PowerStore remote systems will support Unified (Block and File) by default.  The relationship will be created for both directions, which enables remote replication capabilities for storage resources on either of the PowerStore systems.  Data connections are configured based on the local and remote storage networks that are defined to be used for replication data transfer.  When a remote system is created for a remote PowerStore, both systems automatically discover the available local and remote storage networks that are tagged for replication.   Then a default network group will be created with the local and remote storage networks tagged for replication use-cases.  For block import to PowerStore, remote systems can be created for PS_Equalogic, Storage_Center, XtremeIO, NetApp, PowerMax/VMAX, VNX, and some universal storage systems. For VNX and Unity, both block and file import are supported. Unity, Storage_Center, XtremeIO, and VNX remote systems can be created with data connection type of iSCSI or FC.  PS_Equalogic and NetApp can only be created with data connection type of iSCSI.  PowerMax/VMAX can only be created with data connection type of FC.  For VNX, Unity, PS_Equallogic, Storage_Center, XtremeIO, and NetApp remote systems with iSCSI as the data connection type, the following parameters are required: * Management address - Either an IP address or FQDN. * Type of remote system * Name * Description * Remote administrator credentials * iSCSI address - IPv4 address only * CHAP mode for discovery or session * CHAP secrets details  For VNX, Unity, Storage_Center, XtremeIO, and PowerMax/VMAX remote systems with FC as the data connection type, the following parameters are required: * Management address - Either an IP address or FQDN. * Type of remote system * Name * Description * Remote administrator credentials * Data Connection Type - FC * Management Port - Management port is applicable only for PowerMax/VMAX remote system.  For VNX remote systems for file import, include the following parameters along with above block parameters for both block and file import or only below file parameters for file import only cases: * File connection address - Control station IP address of the VNX. * VNX as type of remote system * NAS admin username * NAS admin password * Name * Description  To create unified (Block and File) Unity remote systems, the following parameters are required: * Management address - Either an IP address or FQDN. * Unity as type of remote system * Description * Remote administrator credentials * iSCSI address - IPv4 address only * Data Connection type - iSCSI * CHAP mode for discovery or session * CHAP secrets details * Unity file details  To create a Data Domain remote system, the following parameters are required: * Management address - Either an IP address or FQDN. * Type of remote system * Name * Description * Remote user name * Remote user password * Data Domain details  To create a universal remote system, the following parameters are required: * Management address - IP address or FQDN. * Universal as the type of remote system * Name * Description * Data Connection Type - iSCSI/FC * iSCSI address - IPv4 address applicable only for data connection type iSCSI * CHAP mode for discovery or session - applicable only for data connection type iSCSI * CHAP secrets details - applicable only for data connection type iSCSI * Universal details - applicable only for data connection type FC  Based on the type of remote system and version of PowerStore software, the system will automatically determine the capabilities for that remote system. After the remote system relationship is created, the local system can communicate with the remote system, and open data connections for data transfer. </remarks>
        /// <param name="body">Parameters to create a remote system. </param>
        /// <response code="201">Created</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="422">Operation Failed</response>
        [HttpPost]
        [Route("/api/rest/remote_system")]
        [ValidateModelState]
        [SwaggerOperation("RemoteSystemPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(CreateResponse), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorResponse), description: "Operation Failed")]
        public virtual IActionResult RemoteSystemPost([FromBody]RemoteSystemCreate body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(CreateResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateResponse>(exampleJson)
            : default(CreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
